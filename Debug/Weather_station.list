
Weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800500c  0800500c  0001500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051f0  080051f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051f8  080051f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f8  080051f8  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051fc  080051fc  000151fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000074  08005274  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08005274  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002550f  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055cf  00000000  00000000  000455ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001291b  00000000  00000000  0004ab7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  0005d498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001990  00000000  00000000  0005e680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001624c  00000000  00000000  00060010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000252e1  00000000  00000000  0007625c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077f07  00000000  00000000  0009b53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00113444  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a64  00000000  00000000  00113498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004ff4 	.word	0x08004ff4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004ff4 	.word	0x08004ff4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_uldivmod>:
 8000440:	2b00      	cmp	r3, #0
 8000442:	d111      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000444:	2a00      	cmp	r2, #0
 8000446:	d10f      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000448:	2900      	cmp	r1, #0
 800044a:	d100      	bne.n	800044e <__aeabi_uldivmod+0xe>
 800044c:	2800      	cmp	r0, #0
 800044e:	d002      	beq.n	8000456 <__aeabi_uldivmod+0x16>
 8000450:	2100      	movs	r1, #0
 8000452:	43c9      	mvns	r1, r1
 8000454:	1c08      	adds	r0, r1, #0
 8000456:	b407      	push	{r0, r1, r2}
 8000458:	4802      	ldr	r0, [pc, #8]	; (8000464 <__aeabi_uldivmod+0x24>)
 800045a:	a102      	add	r1, pc, #8	; (adr r1, 8000464 <__aeabi_uldivmod+0x24>)
 800045c:	1840      	adds	r0, r0, r1
 800045e:	9002      	str	r0, [sp, #8]
 8000460:	bd03      	pop	{r0, r1, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	ffffffd9 	.word	0xffffffd9
 8000468:	b403      	push	{r0, r1}
 800046a:	4668      	mov	r0, sp
 800046c:	b501      	push	{r0, lr}
 800046e:	9802      	ldr	r0, [sp, #8]
 8000470:	f000 f846 	bl	8000500 <__udivmoddi4>
 8000474:	9b01      	ldr	r3, [sp, #4]
 8000476:	469e      	mov	lr, r3
 8000478:	b002      	add	sp, #8
 800047a:	bc0c      	pop	{r2, r3}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_lmul>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	0415      	lsls	r5, r2, #16
 8000484:	0c2d      	lsrs	r5, r5, #16
 8000486:	000f      	movs	r7, r1
 8000488:	0001      	movs	r1, r0
 800048a:	002e      	movs	r6, r5
 800048c:	46c6      	mov	lr, r8
 800048e:	4684      	mov	ip, r0
 8000490:	0400      	lsls	r0, r0, #16
 8000492:	0c14      	lsrs	r4, r2, #16
 8000494:	0c00      	lsrs	r0, r0, #16
 8000496:	0c09      	lsrs	r1, r1, #16
 8000498:	4346      	muls	r6, r0
 800049a:	434d      	muls	r5, r1
 800049c:	4360      	muls	r0, r4
 800049e:	4361      	muls	r1, r4
 80004a0:	1940      	adds	r0, r0, r5
 80004a2:	0c34      	lsrs	r4, r6, #16
 80004a4:	1824      	adds	r4, r4, r0
 80004a6:	b500      	push	{lr}
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	d903      	bls.n	80004b4 <__aeabi_lmul+0x34>
 80004ac:	2080      	movs	r0, #128	; 0x80
 80004ae:	0240      	lsls	r0, r0, #9
 80004b0:	4680      	mov	r8, r0
 80004b2:	4441      	add	r1, r8
 80004b4:	0c25      	lsrs	r5, r4, #16
 80004b6:	186d      	adds	r5, r5, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	4359      	muls	r1, r3
 80004bc:	437a      	muls	r2, r7
 80004be:	0430      	lsls	r0, r6, #16
 80004c0:	1949      	adds	r1, r1, r5
 80004c2:	0424      	lsls	r4, r4, #16
 80004c4:	0c00      	lsrs	r0, r0, #16
 80004c6:	1820      	adds	r0, r4, r0
 80004c8:	1889      	adds	r1, r1, r2
 80004ca:	bc80      	pop	{r7}
 80004cc:	46b8      	mov	r8, r7
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004d0 <__aeabi_f2uiz>:
 80004d0:	219e      	movs	r1, #158	; 0x9e
 80004d2:	b510      	push	{r4, lr}
 80004d4:	05c9      	lsls	r1, r1, #23
 80004d6:	1c04      	adds	r4, r0, #0
 80004d8:	f000 fc56 	bl	8000d88 <__aeabi_fcmpge>
 80004dc:	2800      	cmp	r0, #0
 80004de:	d103      	bne.n	80004e8 <__aeabi_f2uiz+0x18>
 80004e0:	1c20      	adds	r0, r4, #0
 80004e2:	f000 fbbb 	bl	8000c5c <__aeabi_f2iz>
 80004e6:	bd10      	pop	{r4, pc}
 80004e8:	219e      	movs	r1, #158	; 0x9e
 80004ea:	1c20      	adds	r0, r4, #0
 80004ec:	05c9      	lsls	r1, r1, #23
 80004ee:	f000 f9ed 	bl	80008cc <__aeabi_fsub>
 80004f2:	f000 fbb3 	bl	8000c5c <__aeabi_f2iz>
 80004f6:	2380      	movs	r3, #128	; 0x80
 80004f8:	061b      	lsls	r3, r3, #24
 80004fa:	469c      	mov	ip, r3
 80004fc:	4460      	add	r0, ip
 80004fe:	e7f2      	b.n	80004e6 <__aeabi_f2uiz+0x16>

08000500 <__udivmoddi4>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	4657      	mov	r7, sl
 8000504:	464e      	mov	r6, r9
 8000506:	4645      	mov	r5, r8
 8000508:	46de      	mov	lr, fp
 800050a:	b5e0      	push	{r5, r6, r7, lr}
 800050c:	0004      	movs	r4, r0
 800050e:	000d      	movs	r5, r1
 8000510:	4692      	mov	sl, r2
 8000512:	4699      	mov	r9, r3
 8000514:	b083      	sub	sp, #12
 8000516:	428b      	cmp	r3, r1
 8000518:	d830      	bhi.n	800057c <__udivmoddi4+0x7c>
 800051a:	d02d      	beq.n	8000578 <__udivmoddi4+0x78>
 800051c:	4649      	mov	r1, r9
 800051e:	4650      	mov	r0, sl
 8000520:	f000 fc5a 	bl	8000dd8 <__clzdi2>
 8000524:	0029      	movs	r1, r5
 8000526:	0006      	movs	r6, r0
 8000528:	0020      	movs	r0, r4
 800052a:	f000 fc55 	bl	8000dd8 <__clzdi2>
 800052e:	1a33      	subs	r3, r6, r0
 8000530:	4698      	mov	r8, r3
 8000532:	3b20      	subs	r3, #32
 8000534:	469b      	mov	fp, r3
 8000536:	d433      	bmi.n	80005a0 <__udivmoddi4+0xa0>
 8000538:	465a      	mov	r2, fp
 800053a:	4653      	mov	r3, sl
 800053c:	4093      	lsls	r3, r2
 800053e:	4642      	mov	r2, r8
 8000540:	001f      	movs	r7, r3
 8000542:	4653      	mov	r3, sl
 8000544:	4093      	lsls	r3, r2
 8000546:	001e      	movs	r6, r3
 8000548:	42af      	cmp	r7, r5
 800054a:	d83a      	bhi.n	80005c2 <__udivmoddi4+0xc2>
 800054c:	42af      	cmp	r7, r5
 800054e:	d100      	bne.n	8000552 <__udivmoddi4+0x52>
 8000550:	e078      	b.n	8000644 <__udivmoddi4+0x144>
 8000552:	465b      	mov	r3, fp
 8000554:	1ba4      	subs	r4, r4, r6
 8000556:	41bd      	sbcs	r5, r7
 8000558:	2b00      	cmp	r3, #0
 800055a:	da00      	bge.n	800055e <__udivmoddi4+0x5e>
 800055c:	e075      	b.n	800064a <__udivmoddi4+0x14a>
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	9200      	str	r2, [sp, #0]
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	465a      	mov	r2, fp
 800056a:	4093      	lsls	r3, r2
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2301      	movs	r3, #1
 8000570:	4642      	mov	r2, r8
 8000572:	4093      	lsls	r3, r2
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	e028      	b.n	80005ca <__udivmoddi4+0xca>
 8000578:	4282      	cmp	r2, r0
 800057a:	d9cf      	bls.n	800051c <__udivmoddi4+0x1c>
 800057c:	2200      	movs	r2, #0
 800057e:	2300      	movs	r3, #0
 8000580:	9200      	str	r2, [sp, #0]
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <__udivmoddi4+0x8e>
 800058a:	601c      	str	r4, [r3, #0]
 800058c:	605d      	str	r5, [r3, #4]
 800058e:	9800      	ldr	r0, [sp, #0]
 8000590:	9901      	ldr	r1, [sp, #4]
 8000592:	b003      	add	sp, #12
 8000594:	bcf0      	pop	{r4, r5, r6, r7}
 8000596:	46bb      	mov	fp, r7
 8000598:	46b2      	mov	sl, r6
 800059a:	46a9      	mov	r9, r5
 800059c:	46a0      	mov	r8, r4
 800059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	4652      	mov	r2, sl
 80005a8:	40da      	lsrs	r2, r3
 80005aa:	4641      	mov	r1, r8
 80005ac:	0013      	movs	r3, r2
 80005ae:	464a      	mov	r2, r9
 80005b0:	408a      	lsls	r2, r1
 80005b2:	0017      	movs	r7, r2
 80005b4:	4642      	mov	r2, r8
 80005b6:	431f      	orrs	r7, r3
 80005b8:	4653      	mov	r3, sl
 80005ba:	4093      	lsls	r3, r2
 80005bc:	001e      	movs	r6, r3
 80005be:	42af      	cmp	r7, r5
 80005c0:	d9c4      	bls.n	800054c <__udivmoddi4+0x4c>
 80005c2:	2200      	movs	r2, #0
 80005c4:	2300      	movs	r3, #0
 80005c6:	9200      	str	r2, [sp, #0]
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	4643      	mov	r3, r8
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0d9      	beq.n	8000584 <__udivmoddi4+0x84>
 80005d0:	07fb      	lsls	r3, r7, #31
 80005d2:	0872      	lsrs	r2, r6, #1
 80005d4:	431a      	orrs	r2, r3
 80005d6:	4646      	mov	r6, r8
 80005d8:	087b      	lsrs	r3, r7, #1
 80005da:	e00e      	b.n	80005fa <__udivmoddi4+0xfa>
 80005dc:	42ab      	cmp	r3, r5
 80005de:	d101      	bne.n	80005e4 <__udivmoddi4+0xe4>
 80005e0:	42a2      	cmp	r2, r4
 80005e2:	d80c      	bhi.n	80005fe <__udivmoddi4+0xfe>
 80005e4:	1aa4      	subs	r4, r4, r2
 80005e6:	419d      	sbcs	r5, r3
 80005e8:	2001      	movs	r0, #1
 80005ea:	1924      	adds	r4, r4, r4
 80005ec:	416d      	adcs	r5, r5
 80005ee:	2100      	movs	r1, #0
 80005f0:	3e01      	subs	r6, #1
 80005f2:	1824      	adds	r4, r4, r0
 80005f4:	414d      	adcs	r5, r1
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d006      	beq.n	8000608 <__udivmoddi4+0x108>
 80005fa:	42ab      	cmp	r3, r5
 80005fc:	d9ee      	bls.n	80005dc <__udivmoddi4+0xdc>
 80005fe:	3e01      	subs	r6, #1
 8000600:	1924      	adds	r4, r4, r4
 8000602:	416d      	adcs	r5, r5
 8000604:	2e00      	cmp	r6, #0
 8000606:	d1f8      	bne.n	80005fa <__udivmoddi4+0xfa>
 8000608:	9800      	ldr	r0, [sp, #0]
 800060a:	9901      	ldr	r1, [sp, #4]
 800060c:	465b      	mov	r3, fp
 800060e:	1900      	adds	r0, r0, r4
 8000610:	4169      	adcs	r1, r5
 8000612:	2b00      	cmp	r3, #0
 8000614:	db24      	blt.n	8000660 <__udivmoddi4+0x160>
 8000616:	002b      	movs	r3, r5
 8000618:	465a      	mov	r2, fp
 800061a:	4644      	mov	r4, r8
 800061c:	40d3      	lsrs	r3, r2
 800061e:	002a      	movs	r2, r5
 8000620:	40e2      	lsrs	r2, r4
 8000622:	001c      	movs	r4, r3
 8000624:	465b      	mov	r3, fp
 8000626:	0015      	movs	r5, r2
 8000628:	2b00      	cmp	r3, #0
 800062a:	db2a      	blt.n	8000682 <__udivmoddi4+0x182>
 800062c:	0026      	movs	r6, r4
 800062e:	409e      	lsls	r6, r3
 8000630:	0033      	movs	r3, r6
 8000632:	0026      	movs	r6, r4
 8000634:	4647      	mov	r7, r8
 8000636:	40be      	lsls	r6, r7
 8000638:	0032      	movs	r2, r6
 800063a:	1a80      	subs	r0, r0, r2
 800063c:	4199      	sbcs	r1, r3
 800063e:	9000      	str	r0, [sp, #0]
 8000640:	9101      	str	r1, [sp, #4]
 8000642:	e79f      	b.n	8000584 <__udivmoddi4+0x84>
 8000644:	42a3      	cmp	r3, r4
 8000646:	d8bc      	bhi.n	80005c2 <__udivmoddi4+0xc2>
 8000648:	e783      	b.n	8000552 <__udivmoddi4+0x52>
 800064a:	4642      	mov	r2, r8
 800064c:	2320      	movs	r3, #32
 800064e:	2100      	movs	r1, #0
 8000650:	1a9b      	subs	r3, r3, r2
 8000652:	2200      	movs	r2, #0
 8000654:	9100      	str	r1, [sp, #0]
 8000656:	9201      	str	r2, [sp, #4]
 8000658:	2201      	movs	r2, #1
 800065a:	40da      	lsrs	r2, r3
 800065c:	9201      	str	r2, [sp, #4]
 800065e:	e786      	b.n	800056e <__udivmoddi4+0x6e>
 8000660:	4642      	mov	r2, r8
 8000662:	2320      	movs	r3, #32
 8000664:	1a9b      	subs	r3, r3, r2
 8000666:	002a      	movs	r2, r5
 8000668:	4646      	mov	r6, r8
 800066a:	409a      	lsls	r2, r3
 800066c:	0023      	movs	r3, r4
 800066e:	40f3      	lsrs	r3, r6
 8000670:	4644      	mov	r4, r8
 8000672:	4313      	orrs	r3, r2
 8000674:	002a      	movs	r2, r5
 8000676:	40e2      	lsrs	r2, r4
 8000678:	001c      	movs	r4, r3
 800067a:	465b      	mov	r3, fp
 800067c:	0015      	movs	r5, r2
 800067e:	2b00      	cmp	r3, #0
 8000680:	dad4      	bge.n	800062c <__udivmoddi4+0x12c>
 8000682:	4642      	mov	r2, r8
 8000684:	002f      	movs	r7, r5
 8000686:	2320      	movs	r3, #32
 8000688:	0026      	movs	r6, r4
 800068a:	4097      	lsls	r7, r2
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	40de      	lsrs	r6, r3
 8000690:	003b      	movs	r3, r7
 8000692:	4333      	orrs	r3, r6
 8000694:	e7cd      	b.n	8000632 <__udivmoddi4+0x132>
 8000696:	46c0      	nop			; (mov r8, r8)

08000698 <__aeabi_fmul>:
 8000698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069a:	4657      	mov	r7, sl
 800069c:	464e      	mov	r6, r9
 800069e:	4645      	mov	r5, r8
 80006a0:	46de      	mov	lr, fp
 80006a2:	0244      	lsls	r4, r0, #9
 80006a4:	b5e0      	push	{r5, r6, r7, lr}
 80006a6:	0045      	lsls	r5, r0, #1
 80006a8:	1c0f      	adds	r7, r1, #0
 80006aa:	0a64      	lsrs	r4, r4, #9
 80006ac:	0e2d      	lsrs	r5, r5, #24
 80006ae:	0fc6      	lsrs	r6, r0, #31
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d047      	beq.n	8000744 <__aeabi_fmul+0xac>
 80006b4:	2dff      	cmp	r5, #255	; 0xff
 80006b6:	d04d      	beq.n	8000754 <__aeabi_fmul+0xbc>
 80006b8:	2300      	movs	r3, #0
 80006ba:	2080      	movs	r0, #128	; 0x80
 80006bc:	469a      	mov	sl, r3
 80006be:	469b      	mov	fp, r3
 80006c0:	00e4      	lsls	r4, r4, #3
 80006c2:	04c0      	lsls	r0, r0, #19
 80006c4:	4304      	orrs	r4, r0
 80006c6:	3d7f      	subs	r5, #127	; 0x7f
 80006c8:	0278      	lsls	r0, r7, #9
 80006ca:	0a43      	lsrs	r3, r0, #9
 80006cc:	4699      	mov	r9, r3
 80006ce:	007a      	lsls	r2, r7, #1
 80006d0:	0ffb      	lsrs	r3, r7, #31
 80006d2:	4698      	mov	r8, r3
 80006d4:	0e12      	lsrs	r2, r2, #24
 80006d6:	464b      	mov	r3, r9
 80006d8:	d044      	beq.n	8000764 <__aeabi_fmul+0xcc>
 80006da:	2aff      	cmp	r2, #255	; 0xff
 80006dc:	d011      	beq.n	8000702 <__aeabi_fmul+0x6a>
 80006de:	00d8      	lsls	r0, r3, #3
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	04db      	lsls	r3, r3, #19
 80006e4:	4303      	orrs	r3, r0
 80006e6:	4699      	mov	r9, r3
 80006e8:	2000      	movs	r0, #0
 80006ea:	3a7f      	subs	r2, #127	; 0x7f
 80006ec:	18ad      	adds	r5, r5, r2
 80006ee:	4647      	mov	r7, r8
 80006f0:	4653      	mov	r3, sl
 80006f2:	4077      	eors	r7, r6
 80006f4:	1c69      	adds	r1, r5, #1
 80006f6:	2b0f      	cmp	r3, #15
 80006f8:	d83f      	bhi.n	800077a <__aeabi_fmul+0xe2>
 80006fa:	4a72      	ldr	r2, [pc, #456]	; (80008c4 <__aeabi_fmul+0x22c>)
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	58d3      	ldr	r3, [r2, r3]
 8000700:	469f      	mov	pc, r3
 8000702:	35ff      	adds	r5, #255	; 0xff
 8000704:	2b00      	cmp	r3, #0
 8000706:	d000      	beq.n	800070a <__aeabi_fmul+0x72>
 8000708:	e079      	b.n	80007fe <__aeabi_fmul+0x166>
 800070a:	4652      	mov	r2, sl
 800070c:	2302      	movs	r3, #2
 800070e:	431a      	orrs	r2, r3
 8000710:	4692      	mov	sl, r2
 8000712:	2002      	movs	r0, #2
 8000714:	e7eb      	b.n	80006ee <__aeabi_fmul+0x56>
 8000716:	4647      	mov	r7, r8
 8000718:	464c      	mov	r4, r9
 800071a:	4683      	mov	fp, r0
 800071c:	465b      	mov	r3, fp
 800071e:	2b02      	cmp	r3, #2
 8000720:	d028      	beq.n	8000774 <__aeabi_fmul+0xdc>
 8000722:	2b03      	cmp	r3, #3
 8000724:	d100      	bne.n	8000728 <__aeabi_fmul+0x90>
 8000726:	e0c6      	b.n	80008b6 <__aeabi_fmul+0x21e>
 8000728:	2b01      	cmp	r3, #1
 800072a:	d14f      	bne.n	80007cc <__aeabi_fmul+0x134>
 800072c:	2000      	movs	r0, #0
 800072e:	2400      	movs	r4, #0
 8000730:	05c0      	lsls	r0, r0, #23
 8000732:	07ff      	lsls	r7, r7, #31
 8000734:	4320      	orrs	r0, r4
 8000736:	4338      	orrs	r0, r7
 8000738:	bcf0      	pop	{r4, r5, r6, r7}
 800073a:	46bb      	mov	fp, r7
 800073c:	46b2      	mov	sl, r6
 800073e:	46a9      	mov	r9, r5
 8000740:	46a0      	mov	r8, r4
 8000742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000744:	2c00      	cmp	r4, #0
 8000746:	d171      	bne.n	800082c <__aeabi_fmul+0x194>
 8000748:	2304      	movs	r3, #4
 800074a:	469a      	mov	sl, r3
 800074c:	3b03      	subs	r3, #3
 800074e:	2500      	movs	r5, #0
 8000750:	469b      	mov	fp, r3
 8000752:	e7b9      	b.n	80006c8 <__aeabi_fmul+0x30>
 8000754:	2c00      	cmp	r4, #0
 8000756:	d163      	bne.n	8000820 <__aeabi_fmul+0x188>
 8000758:	2308      	movs	r3, #8
 800075a:	469a      	mov	sl, r3
 800075c:	3b06      	subs	r3, #6
 800075e:	25ff      	movs	r5, #255	; 0xff
 8000760:	469b      	mov	fp, r3
 8000762:	e7b1      	b.n	80006c8 <__aeabi_fmul+0x30>
 8000764:	2b00      	cmp	r3, #0
 8000766:	d150      	bne.n	800080a <__aeabi_fmul+0x172>
 8000768:	4652      	mov	r2, sl
 800076a:	3301      	adds	r3, #1
 800076c:	431a      	orrs	r2, r3
 800076e:	4692      	mov	sl, r2
 8000770:	2001      	movs	r0, #1
 8000772:	e7bc      	b.n	80006ee <__aeabi_fmul+0x56>
 8000774:	20ff      	movs	r0, #255	; 0xff
 8000776:	2400      	movs	r4, #0
 8000778:	e7da      	b.n	8000730 <__aeabi_fmul+0x98>
 800077a:	4648      	mov	r0, r9
 800077c:	0c26      	lsrs	r6, r4, #16
 800077e:	0424      	lsls	r4, r4, #16
 8000780:	0c22      	lsrs	r2, r4, #16
 8000782:	0404      	lsls	r4, r0, #16
 8000784:	0c24      	lsrs	r4, r4, #16
 8000786:	464b      	mov	r3, r9
 8000788:	0020      	movs	r0, r4
 800078a:	0c1b      	lsrs	r3, r3, #16
 800078c:	4350      	muls	r0, r2
 800078e:	4374      	muls	r4, r6
 8000790:	435a      	muls	r2, r3
 8000792:	435e      	muls	r6, r3
 8000794:	1912      	adds	r2, r2, r4
 8000796:	0c03      	lsrs	r3, r0, #16
 8000798:	189b      	adds	r3, r3, r2
 800079a:	429c      	cmp	r4, r3
 800079c:	d903      	bls.n	80007a6 <__aeabi_fmul+0x10e>
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	0252      	lsls	r2, r2, #9
 80007a2:	4694      	mov	ip, r2
 80007a4:	4466      	add	r6, ip
 80007a6:	0400      	lsls	r0, r0, #16
 80007a8:	041a      	lsls	r2, r3, #16
 80007aa:	0c00      	lsrs	r0, r0, #16
 80007ac:	1812      	adds	r2, r2, r0
 80007ae:	0194      	lsls	r4, r2, #6
 80007b0:	1e60      	subs	r0, r4, #1
 80007b2:	4184      	sbcs	r4, r0
 80007b4:	0c1b      	lsrs	r3, r3, #16
 80007b6:	0e92      	lsrs	r2, r2, #26
 80007b8:	199b      	adds	r3, r3, r6
 80007ba:	4314      	orrs	r4, r2
 80007bc:	019b      	lsls	r3, r3, #6
 80007be:	431c      	orrs	r4, r3
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	d572      	bpl.n	80008aa <__aeabi_fmul+0x212>
 80007c4:	2001      	movs	r0, #1
 80007c6:	0863      	lsrs	r3, r4, #1
 80007c8:	4004      	ands	r4, r0
 80007ca:	431c      	orrs	r4, r3
 80007cc:	0008      	movs	r0, r1
 80007ce:	307f      	adds	r0, #127	; 0x7f
 80007d0:	2800      	cmp	r0, #0
 80007d2:	dd3c      	ble.n	800084e <__aeabi_fmul+0x1b6>
 80007d4:	0763      	lsls	r3, r4, #29
 80007d6:	d004      	beq.n	80007e2 <__aeabi_fmul+0x14a>
 80007d8:	230f      	movs	r3, #15
 80007da:	4023      	ands	r3, r4
 80007dc:	2b04      	cmp	r3, #4
 80007de:	d000      	beq.n	80007e2 <__aeabi_fmul+0x14a>
 80007e0:	3404      	adds	r4, #4
 80007e2:	0123      	lsls	r3, r4, #4
 80007e4:	d503      	bpl.n	80007ee <__aeabi_fmul+0x156>
 80007e6:	3180      	adds	r1, #128	; 0x80
 80007e8:	0008      	movs	r0, r1
 80007ea:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <__aeabi_fmul+0x230>)
 80007ec:	401c      	ands	r4, r3
 80007ee:	28fe      	cmp	r0, #254	; 0xfe
 80007f0:	dcc0      	bgt.n	8000774 <__aeabi_fmul+0xdc>
 80007f2:	01a4      	lsls	r4, r4, #6
 80007f4:	0a64      	lsrs	r4, r4, #9
 80007f6:	b2c0      	uxtb	r0, r0
 80007f8:	e79a      	b.n	8000730 <__aeabi_fmul+0x98>
 80007fa:	0037      	movs	r7, r6
 80007fc:	e78e      	b.n	800071c <__aeabi_fmul+0x84>
 80007fe:	4652      	mov	r2, sl
 8000800:	2303      	movs	r3, #3
 8000802:	431a      	orrs	r2, r3
 8000804:	4692      	mov	sl, r2
 8000806:	2003      	movs	r0, #3
 8000808:	e771      	b.n	80006ee <__aeabi_fmul+0x56>
 800080a:	4648      	mov	r0, r9
 800080c:	f000 fac6 	bl	8000d9c <__clzsi2>
 8000810:	464a      	mov	r2, r9
 8000812:	1f43      	subs	r3, r0, #5
 8000814:	409a      	lsls	r2, r3
 8000816:	1a2d      	subs	r5, r5, r0
 8000818:	4691      	mov	r9, r2
 800081a:	2000      	movs	r0, #0
 800081c:	3d76      	subs	r5, #118	; 0x76
 800081e:	e766      	b.n	80006ee <__aeabi_fmul+0x56>
 8000820:	230c      	movs	r3, #12
 8000822:	469a      	mov	sl, r3
 8000824:	3b09      	subs	r3, #9
 8000826:	25ff      	movs	r5, #255	; 0xff
 8000828:	469b      	mov	fp, r3
 800082a:	e74d      	b.n	80006c8 <__aeabi_fmul+0x30>
 800082c:	0020      	movs	r0, r4
 800082e:	f000 fab5 	bl	8000d9c <__clzsi2>
 8000832:	2576      	movs	r5, #118	; 0x76
 8000834:	1f43      	subs	r3, r0, #5
 8000836:	409c      	lsls	r4, r3
 8000838:	2300      	movs	r3, #0
 800083a:	426d      	negs	r5, r5
 800083c:	469a      	mov	sl, r3
 800083e:	469b      	mov	fp, r3
 8000840:	1a2d      	subs	r5, r5, r0
 8000842:	e741      	b.n	80006c8 <__aeabi_fmul+0x30>
 8000844:	2480      	movs	r4, #128	; 0x80
 8000846:	2700      	movs	r7, #0
 8000848:	20ff      	movs	r0, #255	; 0xff
 800084a:	03e4      	lsls	r4, r4, #15
 800084c:	e770      	b.n	8000730 <__aeabi_fmul+0x98>
 800084e:	2301      	movs	r3, #1
 8000850:	1a1b      	subs	r3, r3, r0
 8000852:	2b1b      	cmp	r3, #27
 8000854:	dd00      	ble.n	8000858 <__aeabi_fmul+0x1c0>
 8000856:	e769      	b.n	800072c <__aeabi_fmul+0x94>
 8000858:	319e      	adds	r1, #158	; 0x9e
 800085a:	0020      	movs	r0, r4
 800085c:	408c      	lsls	r4, r1
 800085e:	40d8      	lsrs	r0, r3
 8000860:	1e63      	subs	r3, r4, #1
 8000862:	419c      	sbcs	r4, r3
 8000864:	4304      	orrs	r4, r0
 8000866:	0763      	lsls	r3, r4, #29
 8000868:	d004      	beq.n	8000874 <__aeabi_fmul+0x1dc>
 800086a:	230f      	movs	r3, #15
 800086c:	4023      	ands	r3, r4
 800086e:	2b04      	cmp	r3, #4
 8000870:	d000      	beq.n	8000874 <__aeabi_fmul+0x1dc>
 8000872:	3404      	adds	r4, #4
 8000874:	0163      	lsls	r3, r4, #5
 8000876:	d51a      	bpl.n	80008ae <__aeabi_fmul+0x216>
 8000878:	2001      	movs	r0, #1
 800087a:	2400      	movs	r4, #0
 800087c:	e758      	b.n	8000730 <__aeabi_fmul+0x98>
 800087e:	2080      	movs	r0, #128	; 0x80
 8000880:	03c0      	lsls	r0, r0, #15
 8000882:	4204      	tst	r4, r0
 8000884:	d009      	beq.n	800089a <__aeabi_fmul+0x202>
 8000886:	464b      	mov	r3, r9
 8000888:	4203      	tst	r3, r0
 800088a:	d106      	bne.n	800089a <__aeabi_fmul+0x202>
 800088c:	464c      	mov	r4, r9
 800088e:	4304      	orrs	r4, r0
 8000890:	0264      	lsls	r4, r4, #9
 8000892:	4647      	mov	r7, r8
 8000894:	20ff      	movs	r0, #255	; 0xff
 8000896:	0a64      	lsrs	r4, r4, #9
 8000898:	e74a      	b.n	8000730 <__aeabi_fmul+0x98>
 800089a:	2080      	movs	r0, #128	; 0x80
 800089c:	03c0      	lsls	r0, r0, #15
 800089e:	4304      	orrs	r4, r0
 80008a0:	0264      	lsls	r4, r4, #9
 80008a2:	0037      	movs	r7, r6
 80008a4:	20ff      	movs	r0, #255	; 0xff
 80008a6:	0a64      	lsrs	r4, r4, #9
 80008a8:	e742      	b.n	8000730 <__aeabi_fmul+0x98>
 80008aa:	0029      	movs	r1, r5
 80008ac:	e78e      	b.n	80007cc <__aeabi_fmul+0x134>
 80008ae:	01a4      	lsls	r4, r4, #6
 80008b0:	2000      	movs	r0, #0
 80008b2:	0a64      	lsrs	r4, r4, #9
 80008b4:	e73c      	b.n	8000730 <__aeabi_fmul+0x98>
 80008b6:	2080      	movs	r0, #128	; 0x80
 80008b8:	03c0      	lsls	r0, r0, #15
 80008ba:	4304      	orrs	r4, r0
 80008bc:	0264      	lsls	r4, r4, #9
 80008be:	20ff      	movs	r0, #255	; 0xff
 80008c0:	0a64      	lsrs	r4, r4, #9
 80008c2:	e735      	b.n	8000730 <__aeabi_fmul+0x98>
 80008c4:	0800500c 	.word	0x0800500c
 80008c8:	f7ffffff 	.word	0xf7ffffff

080008cc <__aeabi_fsub>:
 80008cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ce:	4646      	mov	r6, r8
 80008d0:	46d6      	mov	lr, sl
 80008d2:	464f      	mov	r7, r9
 80008d4:	0243      	lsls	r3, r0, #9
 80008d6:	0a5b      	lsrs	r3, r3, #9
 80008d8:	00da      	lsls	r2, r3, #3
 80008da:	4694      	mov	ip, r2
 80008dc:	024a      	lsls	r2, r1, #9
 80008de:	b5c0      	push	{r6, r7, lr}
 80008e0:	0044      	lsls	r4, r0, #1
 80008e2:	0a56      	lsrs	r6, r2, #9
 80008e4:	1c05      	adds	r5, r0, #0
 80008e6:	46b0      	mov	r8, r6
 80008e8:	0e24      	lsrs	r4, r4, #24
 80008ea:	004e      	lsls	r6, r1, #1
 80008ec:	0992      	lsrs	r2, r2, #6
 80008ee:	001f      	movs	r7, r3
 80008f0:	0020      	movs	r0, r4
 80008f2:	4692      	mov	sl, r2
 80008f4:	0fed      	lsrs	r5, r5, #31
 80008f6:	0e36      	lsrs	r6, r6, #24
 80008f8:	0fc9      	lsrs	r1, r1, #31
 80008fa:	2eff      	cmp	r6, #255	; 0xff
 80008fc:	d100      	bne.n	8000900 <__aeabi_fsub+0x34>
 80008fe:	e07f      	b.n	8000a00 <__aeabi_fsub+0x134>
 8000900:	2201      	movs	r2, #1
 8000902:	4051      	eors	r1, r2
 8000904:	428d      	cmp	r5, r1
 8000906:	d051      	beq.n	80009ac <__aeabi_fsub+0xe0>
 8000908:	1ba2      	subs	r2, r4, r6
 800090a:	4691      	mov	r9, r2
 800090c:	2a00      	cmp	r2, #0
 800090e:	dc00      	bgt.n	8000912 <__aeabi_fsub+0x46>
 8000910:	e07e      	b.n	8000a10 <__aeabi_fsub+0x144>
 8000912:	2e00      	cmp	r6, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_fsub+0x4c>
 8000916:	e099      	b.n	8000a4c <__aeabi_fsub+0x180>
 8000918:	2cff      	cmp	r4, #255	; 0xff
 800091a:	d100      	bne.n	800091e <__aeabi_fsub+0x52>
 800091c:	e08c      	b.n	8000a38 <__aeabi_fsub+0x16c>
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	4652      	mov	r2, sl
 8000922:	04db      	lsls	r3, r3, #19
 8000924:	431a      	orrs	r2, r3
 8000926:	4692      	mov	sl, r2
 8000928:	464a      	mov	r2, r9
 800092a:	2301      	movs	r3, #1
 800092c:	2a1b      	cmp	r2, #27
 800092e:	dc08      	bgt.n	8000942 <__aeabi_fsub+0x76>
 8000930:	4653      	mov	r3, sl
 8000932:	2120      	movs	r1, #32
 8000934:	40d3      	lsrs	r3, r2
 8000936:	1a89      	subs	r1, r1, r2
 8000938:	4652      	mov	r2, sl
 800093a:	408a      	lsls	r2, r1
 800093c:	1e51      	subs	r1, r2, #1
 800093e:	418a      	sbcs	r2, r1
 8000940:	4313      	orrs	r3, r2
 8000942:	4662      	mov	r2, ip
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	015a      	lsls	r2, r3, #5
 8000948:	d400      	bmi.n	800094c <__aeabi_fsub+0x80>
 800094a:	e0f3      	b.n	8000b34 <__aeabi_fsub+0x268>
 800094c:	019b      	lsls	r3, r3, #6
 800094e:	099e      	lsrs	r6, r3, #6
 8000950:	0030      	movs	r0, r6
 8000952:	f000 fa23 	bl	8000d9c <__clzsi2>
 8000956:	3805      	subs	r0, #5
 8000958:	4086      	lsls	r6, r0
 800095a:	4284      	cmp	r4, r0
 800095c:	dd00      	ble.n	8000960 <__aeabi_fsub+0x94>
 800095e:	e0f7      	b.n	8000b50 <__aeabi_fsub+0x284>
 8000960:	0032      	movs	r2, r6
 8000962:	1b04      	subs	r4, r0, r4
 8000964:	2020      	movs	r0, #32
 8000966:	3401      	adds	r4, #1
 8000968:	40e2      	lsrs	r2, r4
 800096a:	1b04      	subs	r4, r0, r4
 800096c:	40a6      	lsls	r6, r4
 800096e:	0033      	movs	r3, r6
 8000970:	1e5e      	subs	r6, r3, #1
 8000972:	41b3      	sbcs	r3, r6
 8000974:	2400      	movs	r4, #0
 8000976:	4313      	orrs	r3, r2
 8000978:	075a      	lsls	r2, r3, #29
 800097a:	d004      	beq.n	8000986 <__aeabi_fsub+0xba>
 800097c:	220f      	movs	r2, #15
 800097e:	401a      	ands	r2, r3
 8000980:	2a04      	cmp	r2, #4
 8000982:	d000      	beq.n	8000986 <__aeabi_fsub+0xba>
 8000984:	3304      	adds	r3, #4
 8000986:	015a      	lsls	r2, r3, #5
 8000988:	d400      	bmi.n	800098c <__aeabi_fsub+0xc0>
 800098a:	e0d6      	b.n	8000b3a <__aeabi_fsub+0x26e>
 800098c:	1c62      	adds	r2, r4, #1
 800098e:	2cfe      	cmp	r4, #254	; 0xfe
 8000990:	d100      	bne.n	8000994 <__aeabi_fsub+0xc8>
 8000992:	e0da      	b.n	8000b4a <__aeabi_fsub+0x27e>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	0a5f      	lsrs	r7, r3, #9
 8000998:	b2d0      	uxtb	r0, r2
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4338      	orrs	r0, r7
 800099e:	07ed      	lsls	r5, r5, #31
 80009a0:	4328      	orrs	r0, r5
 80009a2:	bce0      	pop	{r5, r6, r7}
 80009a4:	46ba      	mov	sl, r7
 80009a6:	46b1      	mov	r9, r6
 80009a8:	46a8      	mov	r8, r5
 80009aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ac:	1ba2      	subs	r2, r4, r6
 80009ae:	4691      	mov	r9, r2
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	dd63      	ble.n	8000a7c <__aeabi_fsub+0x1b0>
 80009b4:	2e00      	cmp	r6, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_fsub+0xee>
 80009b8:	e099      	b.n	8000aee <__aeabi_fsub+0x222>
 80009ba:	2cff      	cmp	r4, #255	; 0xff
 80009bc:	d03c      	beq.n	8000a38 <__aeabi_fsub+0x16c>
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	4652      	mov	r2, sl
 80009c2:	04db      	lsls	r3, r3, #19
 80009c4:	431a      	orrs	r2, r3
 80009c6:	4692      	mov	sl, r2
 80009c8:	464a      	mov	r2, r9
 80009ca:	2301      	movs	r3, #1
 80009cc:	2a1b      	cmp	r2, #27
 80009ce:	dc08      	bgt.n	80009e2 <__aeabi_fsub+0x116>
 80009d0:	4653      	mov	r3, sl
 80009d2:	2120      	movs	r1, #32
 80009d4:	40d3      	lsrs	r3, r2
 80009d6:	1a89      	subs	r1, r1, r2
 80009d8:	4652      	mov	r2, sl
 80009da:	408a      	lsls	r2, r1
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	418a      	sbcs	r2, r1
 80009e0:	4313      	orrs	r3, r2
 80009e2:	4463      	add	r3, ip
 80009e4:	015a      	lsls	r2, r3, #5
 80009e6:	d400      	bmi.n	80009ea <__aeabi_fsub+0x11e>
 80009e8:	e0a4      	b.n	8000b34 <__aeabi_fsub+0x268>
 80009ea:	3401      	adds	r4, #1
 80009ec:	2cff      	cmp	r4, #255	; 0xff
 80009ee:	d100      	bne.n	80009f2 <__aeabi_fsub+0x126>
 80009f0:	e0ab      	b.n	8000b4a <__aeabi_fsub+0x27e>
 80009f2:	2201      	movs	r2, #1
 80009f4:	4997      	ldr	r1, [pc, #604]	; (8000c54 <__aeabi_fsub+0x388>)
 80009f6:	401a      	ands	r2, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	400b      	ands	r3, r1
 80009fc:	4313      	orrs	r3, r2
 80009fe:	e7bb      	b.n	8000978 <__aeabi_fsub+0xac>
 8000a00:	2a00      	cmp	r2, #0
 8000a02:	d032      	beq.n	8000a6a <__aeabi_fsub+0x19e>
 8000a04:	428d      	cmp	r5, r1
 8000a06:	d035      	beq.n	8000a74 <__aeabi_fsub+0x1a8>
 8000a08:	22ff      	movs	r2, #255	; 0xff
 8000a0a:	4252      	negs	r2, r2
 8000a0c:	4691      	mov	r9, r2
 8000a0e:	44a1      	add	r9, r4
 8000a10:	464a      	mov	r2, r9
 8000a12:	2a00      	cmp	r2, #0
 8000a14:	d051      	beq.n	8000aba <__aeabi_fsub+0x1ee>
 8000a16:	1b30      	subs	r0, r6, r4
 8000a18:	2c00      	cmp	r4, #0
 8000a1a:	d000      	beq.n	8000a1e <__aeabi_fsub+0x152>
 8000a1c:	e09c      	b.n	8000b58 <__aeabi_fsub+0x28c>
 8000a1e:	4663      	mov	r3, ip
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d100      	bne.n	8000a26 <__aeabi_fsub+0x15a>
 8000a24:	e0df      	b.n	8000be6 <__aeabi_fsub+0x31a>
 8000a26:	3801      	subs	r0, #1
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_fsub+0x162>
 8000a2c:	e0f7      	b.n	8000c1e <__aeabi_fsub+0x352>
 8000a2e:	2eff      	cmp	r6, #255	; 0xff
 8000a30:	d000      	beq.n	8000a34 <__aeabi_fsub+0x168>
 8000a32:	e099      	b.n	8000b68 <__aeabi_fsub+0x29c>
 8000a34:	000d      	movs	r5, r1
 8000a36:	4643      	mov	r3, r8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_fsub+0x172>
 8000a3c:	e085      	b.n	8000b4a <__aeabi_fsub+0x27e>
 8000a3e:	2780      	movs	r7, #128	; 0x80
 8000a40:	03ff      	lsls	r7, r7, #15
 8000a42:	431f      	orrs	r7, r3
 8000a44:	027f      	lsls	r7, r7, #9
 8000a46:	20ff      	movs	r0, #255	; 0xff
 8000a48:	0a7f      	lsrs	r7, r7, #9
 8000a4a:	e7a6      	b.n	800099a <__aeabi_fsub+0xce>
 8000a4c:	4652      	mov	r2, sl
 8000a4e:	2a00      	cmp	r2, #0
 8000a50:	d074      	beq.n	8000b3c <__aeabi_fsub+0x270>
 8000a52:	2201      	movs	r2, #1
 8000a54:	4252      	negs	r2, r2
 8000a56:	4690      	mov	r8, r2
 8000a58:	44c1      	add	r9, r8
 8000a5a:	464a      	mov	r2, r9
 8000a5c:	2a00      	cmp	r2, #0
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_fsub+0x196>
 8000a60:	e0c8      	b.n	8000bf4 <__aeabi_fsub+0x328>
 8000a62:	2cff      	cmp	r4, #255	; 0xff
 8000a64:	d000      	beq.n	8000a68 <__aeabi_fsub+0x19c>
 8000a66:	e75f      	b.n	8000928 <__aeabi_fsub+0x5c>
 8000a68:	e7e6      	b.n	8000a38 <__aeabi_fsub+0x16c>
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4051      	eors	r1, r2
 8000a6e:	42a9      	cmp	r1, r5
 8000a70:	d000      	beq.n	8000a74 <__aeabi_fsub+0x1a8>
 8000a72:	e749      	b.n	8000908 <__aeabi_fsub+0x3c>
 8000a74:	22ff      	movs	r2, #255	; 0xff
 8000a76:	4252      	negs	r2, r2
 8000a78:	4691      	mov	r9, r2
 8000a7a:	44a1      	add	r9, r4
 8000a7c:	464a      	mov	r2, r9
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	d043      	beq.n	8000b0a <__aeabi_fsub+0x23e>
 8000a82:	1b31      	subs	r1, r6, r4
 8000a84:	2c00      	cmp	r4, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fsub+0x1be>
 8000a88:	e08c      	b.n	8000ba4 <__aeabi_fsub+0x2d8>
 8000a8a:	2eff      	cmp	r6, #255	; 0xff
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0x1c4>
 8000a8e:	e092      	b.n	8000bb6 <__aeabi_fsub+0x2ea>
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	4662      	mov	r2, ip
 8000a94:	04db      	lsls	r3, r3, #19
 8000a96:	431a      	orrs	r2, r3
 8000a98:	4694      	mov	ip, r2
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	291b      	cmp	r1, #27
 8000a9e:	dc09      	bgt.n	8000ab4 <__aeabi_fsub+0x1e8>
 8000aa0:	2020      	movs	r0, #32
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	40cb      	lsrs	r3, r1
 8000aa8:	1a41      	subs	r1, r0, r1
 8000aaa:	408a      	lsls	r2, r1
 8000aac:	0011      	movs	r1, r2
 8000aae:	1e48      	subs	r0, r1, #1
 8000ab0:	4181      	sbcs	r1, r0
 8000ab2:	430b      	orrs	r3, r1
 8000ab4:	0034      	movs	r4, r6
 8000ab6:	4453      	add	r3, sl
 8000ab8:	e794      	b.n	80009e4 <__aeabi_fsub+0x118>
 8000aba:	22fe      	movs	r2, #254	; 0xfe
 8000abc:	1c66      	adds	r6, r4, #1
 8000abe:	4232      	tst	r2, r6
 8000ac0:	d164      	bne.n	8000b8c <__aeabi_fsub+0x2c0>
 8000ac2:	2c00      	cmp	r4, #0
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_fsub+0x1fc>
 8000ac6:	e082      	b.n	8000bce <__aeabi_fsub+0x302>
 8000ac8:	4663      	mov	r3, ip
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fsub+0x204>
 8000ace:	e0ab      	b.n	8000c28 <__aeabi_fsub+0x35c>
 8000ad0:	4653      	mov	r3, sl
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_fsub+0x20c>
 8000ad6:	e760      	b.n	800099a <__aeabi_fsub+0xce>
 8000ad8:	4663      	mov	r3, ip
 8000ada:	4652      	mov	r2, sl
 8000adc:	1a9b      	subs	r3, r3, r2
 8000ade:	015a      	lsls	r2, r3, #5
 8000ae0:	d400      	bmi.n	8000ae4 <__aeabi_fsub+0x218>
 8000ae2:	e0aa      	b.n	8000c3a <__aeabi_fsub+0x36e>
 8000ae4:	4663      	mov	r3, ip
 8000ae6:	4652      	mov	r2, sl
 8000ae8:	000d      	movs	r5, r1
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	e744      	b.n	8000978 <__aeabi_fsub+0xac>
 8000aee:	4652      	mov	r2, sl
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	d023      	beq.n	8000b3c <__aeabi_fsub+0x270>
 8000af4:	2201      	movs	r2, #1
 8000af6:	4252      	negs	r2, r2
 8000af8:	4690      	mov	r8, r2
 8000afa:	44c1      	add	r9, r8
 8000afc:	464a      	mov	r2, r9
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	d075      	beq.n	8000bee <__aeabi_fsub+0x322>
 8000b02:	2cff      	cmp	r4, #255	; 0xff
 8000b04:	d000      	beq.n	8000b08 <__aeabi_fsub+0x23c>
 8000b06:	e75f      	b.n	80009c8 <__aeabi_fsub+0xfc>
 8000b08:	e796      	b.n	8000a38 <__aeabi_fsub+0x16c>
 8000b0a:	26fe      	movs	r6, #254	; 0xfe
 8000b0c:	3401      	adds	r4, #1
 8000b0e:	4226      	tst	r6, r4
 8000b10:	d153      	bne.n	8000bba <__aeabi_fsub+0x2ee>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d172      	bne.n	8000bfc <__aeabi_fsub+0x330>
 8000b16:	4663      	mov	r3, ip
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_fsub+0x252>
 8000b1c:	e093      	b.n	8000c46 <__aeabi_fsub+0x37a>
 8000b1e:	4653      	mov	r3, sl
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_fsub+0x25a>
 8000b24:	e739      	b.n	800099a <__aeabi_fsub+0xce>
 8000b26:	4463      	add	r3, ip
 8000b28:	2400      	movs	r4, #0
 8000b2a:	015a      	lsls	r2, r3, #5
 8000b2c:	d502      	bpl.n	8000b34 <__aeabi_fsub+0x268>
 8000b2e:	4a4a      	ldr	r2, [pc, #296]	; (8000c58 <__aeabi_fsub+0x38c>)
 8000b30:	3401      	adds	r4, #1
 8000b32:	4013      	ands	r3, r2
 8000b34:	075a      	lsls	r2, r3, #29
 8000b36:	d000      	beq.n	8000b3a <__aeabi_fsub+0x26e>
 8000b38:	e720      	b.n	800097c <__aeabi_fsub+0xb0>
 8000b3a:	08db      	lsrs	r3, r3, #3
 8000b3c:	2cff      	cmp	r4, #255	; 0xff
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_fsub+0x276>
 8000b40:	e77a      	b.n	8000a38 <__aeabi_fsub+0x16c>
 8000b42:	025b      	lsls	r3, r3, #9
 8000b44:	0a5f      	lsrs	r7, r3, #9
 8000b46:	b2e0      	uxtb	r0, r4
 8000b48:	e727      	b.n	800099a <__aeabi_fsub+0xce>
 8000b4a:	20ff      	movs	r0, #255	; 0xff
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e724      	b.n	800099a <__aeabi_fsub+0xce>
 8000b50:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <__aeabi_fsub+0x38c>)
 8000b52:	1a24      	subs	r4, r4, r0
 8000b54:	4033      	ands	r3, r6
 8000b56:	e70f      	b.n	8000978 <__aeabi_fsub+0xac>
 8000b58:	2eff      	cmp	r6, #255	; 0xff
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fsub+0x292>
 8000b5c:	e76a      	b.n	8000a34 <__aeabi_fsub+0x168>
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	4662      	mov	r2, ip
 8000b62:	04db      	lsls	r3, r3, #19
 8000b64:	431a      	orrs	r2, r3
 8000b66:	4694      	mov	ip, r2
 8000b68:	2301      	movs	r3, #1
 8000b6a:	281b      	cmp	r0, #27
 8000b6c:	dc09      	bgt.n	8000b82 <__aeabi_fsub+0x2b6>
 8000b6e:	2420      	movs	r4, #32
 8000b70:	4663      	mov	r3, ip
 8000b72:	4662      	mov	r2, ip
 8000b74:	40c3      	lsrs	r3, r0
 8000b76:	1a20      	subs	r0, r4, r0
 8000b78:	4082      	lsls	r2, r0
 8000b7a:	0010      	movs	r0, r2
 8000b7c:	1e44      	subs	r4, r0, #1
 8000b7e:	41a0      	sbcs	r0, r4
 8000b80:	4303      	orrs	r3, r0
 8000b82:	4652      	mov	r2, sl
 8000b84:	000d      	movs	r5, r1
 8000b86:	0034      	movs	r4, r6
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	e6dc      	b.n	8000946 <__aeabi_fsub+0x7a>
 8000b8c:	4663      	mov	r3, ip
 8000b8e:	4652      	mov	r2, sl
 8000b90:	1a9e      	subs	r6, r3, r2
 8000b92:	0173      	lsls	r3, r6, #5
 8000b94:	d417      	bmi.n	8000bc6 <__aeabi_fsub+0x2fa>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d000      	beq.n	8000b9c <__aeabi_fsub+0x2d0>
 8000b9a:	e6d9      	b.n	8000950 <__aeabi_fsub+0x84>
 8000b9c:	2500      	movs	r5, #0
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	2700      	movs	r7, #0
 8000ba2:	e6fa      	b.n	800099a <__aeabi_fsub+0xce>
 8000ba4:	4663      	mov	r3, ip
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d044      	beq.n	8000c34 <__aeabi_fsub+0x368>
 8000baa:	3901      	subs	r1, #1
 8000bac:	2900      	cmp	r1, #0
 8000bae:	d04c      	beq.n	8000c4a <__aeabi_fsub+0x37e>
 8000bb0:	2eff      	cmp	r6, #255	; 0xff
 8000bb2:	d000      	beq.n	8000bb6 <__aeabi_fsub+0x2ea>
 8000bb4:	e771      	b.n	8000a9a <__aeabi_fsub+0x1ce>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	e73e      	b.n	8000a38 <__aeabi_fsub+0x16c>
 8000bba:	2cff      	cmp	r4, #255	; 0xff
 8000bbc:	d0c5      	beq.n	8000b4a <__aeabi_fsub+0x27e>
 8000bbe:	4652      	mov	r2, sl
 8000bc0:	4462      	add	r2, ip
 8000bc2:	0853      	lsrs	r3, r2, #1
 8000bc4:	e7b6      	b.n	8000b34 <__aeabi_fsub+0x268>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	000d      	movs	r5, r1
 8000bca:	1ad6      	subs	r6, r2, r3
 8000bcc:	e6c0      	b.n	8000950 <__aeabi_fsub+0x84>
 8000bce:	4662      	mov	r2, ip
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	d116      	bne.n	8000c02 <__aeabi_fsub+0x336>
 8000bd4:	4653      	mov	r3, sl
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d000      	beq.n	8000bdc <__aeabi_fsub+0x310>
 8000bda:	e72b      	b.n	8000a34 <__aeabi_fsub+0x168>
 8000bdc:	2780      	movs	r7, #128	; 0x80
 8000bde:	2500      	movs	r5, #0
 8000be0:	20ff      	movs	r0, #255	; 0xff
 8000be2:	03ff      	lsls	r7, r7, #15
 8000be4:	e6d9      	b.n	800099a <__aeabi_fsub+0xce>
 8000be6:	000d      	movs	r5, r1
 8000be8:	4643      	mov	r3, r8
 8000bea:	0034      	movs	r4, r6
 8000bec:	e7a6      	b.n	8000b3c <__aeabi_fsub+0x270>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	4463      	add	r3, ip
 8000bf2:	e6f7      	b.n	80009e4 <__aeabi_fsub+0x118>
 8000bf4:	4663      	mov	r3, ip
 8000bf6:	4652      	mov	r2, sl
 8000bf8:	1a9b      	subs	r3, r3, r2
 8000bfa:	e6a4      	b.n	8000946 <__aeabi_fsub+0x7a>
 8000bfc:	4662      	mov	r2, ip
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	d0d9      	beq.n	8000bb6 <__aeabi_fsub+0x2ea>
 8000c02:	4652      	mov	r2, sl
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fsub+0x33e>
 8000c08:	e716      	b.n	8000a38 <__aeabi_fsub+0x16c>
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	03d2      	lsls	r2, r2, #15
 8000c0e:	4213      	tst	r3, r2
 8000c10:	d100      	bne.n	8000c14 <__aeabi_fsub+0x348>
 8000c12:	e711      	b.n	8000a38 <__aeabi_fsub+0x16c>
 8000c14:	4640      	mov	r0, r8
 8000c16:	4210      	tst	r0, r2
 8000c18:	d000      	beq.n	8000c1c <__aeabi_fsub+0x350>
 8000c1a:	e70d      	b.n	8000a38 <__aeabi_fsub+0x16c>
 8000c1c:	e70a      	b.n	8000a34 <__aeabi_fsub+0x168>
 8000c1e:	4652      	mov	r2, sl
 8000c20:	000d      	movs	r5, r1
 8000c22:	0034      	movs	r4, r6
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	e68e      	b.n	8000946 <__aeabi_fsub+0x7a>
 8000c28:	4653      	mov	r3, sl
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d008      	beq.n	8000c40 <__aeabi_fsub+0x374>
 8000c2e:	000d      	movs	r5, r1
 8000c30:	4647      	mov	r7, r8
 8000c32:	e6b2      	b.n	800099a <__aeabi_fsub+0xce>
 8000c34:	4643      	mov	r3, r8
 8000c36:	0034      	movs	r4, r6
 8000c38:	e780      	b.n	8000b3c <__aeabi_fsub+0x270>
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_fsub+0x374>
 8000c3e:	e779      	b.n	8000b34 <__aeabi_fsub+0x268>
 8000c40:	2500      	movs	r5, #0
 8000c42:	2700      	movs	r7, #0
 8000c44:	e6a9      	b.n	800099a <__aeabi_fsub+0xce>
 8000c46:	4647      	mov	r7, r8
 8000c48:	e6a7      	b.n	800099a <__aeabi_fsub+0xce>
 8000c4a:	4653      	mov	r3, sl
 8000c4c:	0034      	movs	r4, r6
 8000c4e:	4463      	add	r3, ip
 8000c50:	e6c8      	b.n	80009e4 <__aeabi_fsub+0x118>
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	7dffffff 	.word	0x7dffffff
 8000c58:	fbffffff 	.word	0xfbffffff

08000c5c <__aeabi_f2iz>:
 8000c5c:	0241      	lsls	r1, r0, #9
 8000c5e:	0042      	lsls	r2, r0, #1
 8000c60:	0fc3      	lsrs	r3, r0, #31
 8000c62:	0a49      	lsrs	r1, r1, #9
 8000c64:	2000      	movs	r0, #0
 8000c66:	0e12      	lsrs	r2, r2, #24
 8000c68:	2a7e      	cmp	r2, #126	; 0x7e
 8000c6a:	d903      	bls.n	8000c74 <__aeabi_f2iz+0x18>
 8000c6c:	2a9d      	cmp	r2, #157	; 0x9d
 8000c6e:	d902      	bls.n	8000c76 <__aeabi_f2iz+0x1a>
 8000c70:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <__aeabi_f2iz+0x3c>)
 8000c72:	1898      	adds	r0, r3, r2
 8000c74:	4770      	bx	lr
 8000c76:	2080      	movs	r0, #128	; 0x80
 8000c78:	0400      	lsls	r0, r0, #16
 8000c7a:	4301      	orrs	r1, r0
 8000c7c:	2a95      	cmp	r2, #149	; 0x95
 8000c7e:	dc07      	bgt.n	8000c90 <__aeabi_f2iz+0x34>
 8000c80:	2096      	movs	r0, #150	; 0x96
 8000c82:	1a82      	subs	r2, r0, r2
 8000c84:	40d1      	lsrs	r1, r2
 8000c86:	4248      	negs	r0, r1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1f3      	bne.n	8000c74 <__aeabi_f2iz+0x18>
 8000c8c:	0008      	movs	r0, r1
 8000c8e:	e7f1      	b.n	8000c74 <__aeabi_f2iz+0x18>
 8000c90:	3a96      	subs	r2, #150	; 0x96
 8000c92:	4091      	lsls	r1, r2
 8000c94:	e7f7      	b.n	8000c86 <__aeabi_f2iz+0x2a>
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	7fffffff 	.word	0x7fffffff

08000c9c <__aeabi_i2f>:
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	d013      	beq.n	8000cca <__aeabi_i2f+0x2e>
 8000ca2:	17c3      	asrs	r3, r0, #31
 8000ca4:	18c5      	adds	r5, r0, r3
 8000ca6:	405d      	eors	r5, r3
 8000ca8:	0fc4      	lsrs	r4, r0, #31
 8000caa:	0028      	movs	r0, r5
 8000cac:	f000 f876 	bl	8000d9c <__clzsi2>
 8000cb0:	239e      	movs	r3, #158	; 0x9e
 8000cb2:	0001      	movs	r1, r0
 8000cb4:	1a1b      	subs	r3, r3, r0
 8000cb6:	2b96      	cmp	r3, #150	; 0x96
 8000cb8:	dc0f      	bgt.n	8000cda <__aeabi_i2f+0x3e>
 8000cba:	2808      	cmp	r0, #8
 8000cbc:	dd01      	ble.n	8000cc2 <__aeabi_i2f+0x26>
 8000cbe:	3908      	subs	r1, #8
 8000cc0:	408d      	lsls	r5, r1
 8000cc2:	026d      	lsls	r5, r5, #9
 8000cc4:	0a6d      	lsrs	r5, r5, #9
 8000cc6:	b2d8      	uxtb	r0, r3
 8000cc8:	e002      	b.n	8000cd0 <__aeabi_i2f+0x34>
 8000cca:	2400      	movs	r4, #0
 8000ccc:	2000      	movs	r0, #0
 8000cce:	2500      	movs	r5, #0
 8000cd0:	05c0      	lsls	r0, r0, #23
 8000cd2:	4328      	orrs	r0, r5
 8000cd4:	07e4      	lsls	r4, r4, #31
 8000cd6:	4320      	orrs	r0, r4
 8000cd8:	bd70      	pop	{r4, r5, r6, pc}
 8000cda:	2b99      	cmp	r3, #153	; 0x99
 8000cdc:	dd0b      	ble.n	8000cf6 <__aeabi_i2f+0x5a>
 8000cde:	2205      	movs	r2, #5
 8000ce0:	002e      	movs	r6, r5
 8000ce2:	1a12      	subs	r2, r2, r0
 8000ce4:	40d6      	lsrs	r6, r2
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	321b      	adds	r2, #27
 8000cea:	4095      	lsls	r5, r2
 8000cec:	0028      	movs	r0, r5
 8000cee:	1e45      	subs	r5, r0, #1
 8000cf0:	41a8      	sbcs	r0, r5
 8000cf2:	0035      	movs	r5, r6
 8000cf4:	4305      	orrs	r5, r0
 8000cf6:	2905      	cmp	r1, #5
 8000cf8:	dd01      	ble.n	8000cfe <__aeabi_i2f+0x62>
 8000cfa:	1f4a      	subs	r2, r1, #5
 8000cfc:	4095      	lsls	r5, r2
 8000cfe:	002a      	movs	r2, r5
 8000d00:	4e08      	ldr	r6, [pc, #32]	; (8000d24 <__aeabi_i2f+0x88>)
 8000d02:	4032      	ands	r2, r6
 8000d04:	0768      	lsls	r0, r5, #29
 8000d06:	d009      	beq.n	8000d1c <__aeabi_i2f+0x80>
 8000d08:	200f      	movs	r0, #15
 8000d0a:	4028      	ands	r0, r5
 8000d0c:	2804      	cmp	r0, #4
 8000d0e:	d005      	beq.n	8000d1c <__aeabi_i2f+0x80>
 8000d10:	3204      	adds	r2, #4
 8000d12:	0150      	lsls	r0, r2, #5
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_i2f+0x80>
 8000d16:	239f      	movs	r3, #159	; 0x9f
 8000d18:	4032      	ands	r2, r6
 8000d1a:	1a5b      	subs	r3, r3, r1
 8000d1c:	0192      	lsls	r2, r2, #6
 8000d1e:	0a55      	lsrs	r5, r2, #9
 8000d20:	b2d8      	uxtb	r0, r3
 8000d22:	e7d5      	b.n	8000cd0 <__aeabi_i2f+0x34>
 8000d24:	fbffffff 	.word	0xfbffffff

08000d28 <__aeabi_cfrcmple>:
 8000d28:	4684      	mov	ip, r0
 8000d2a:	1c08      	adds	r0, r1, #0
 8000d2c:	4661      	mov	r1, ip
 8000d2e:	e7ff      	b.n	8000d30 <__aeabi_cfcmpeq>

08000d30 <__aeabi_cfcmpeq>:
 8000d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000d32:	f000 f8d1 	bl	8000ed8 <__lesf2>
 8000d36:	2800      	cmp	r0, #0
 8000d38:	d401      	bmi.n	8000d3e <__aeabi_cfcmpeq+0xe>
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	42c8      	cmn	r0, r1
 8000d3e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000d40 <__aeabi_fcmpeq>:
 8000d40:	b510      	push	{r4, lr}
 8000d42:	f000 f855 	bl	8000df0 <__eqsf2>
 8000d46:	4240      	negs	r0, r0
 8000d48:	3001      	adds	r0, #1
 8000d4a:	bd10      	pop	{r4, pc}

08000d4c <__aeabi_fcmplt>:
 8000d4c:	b510      	push	{r4, lr}
 8000d4e:	f000 f8c3 	bl	8000ed8 <__lesf2>
 8000d52:	2800      	cmp	r0, #0
 8000d54:	db01      	blt.n	8000d5a <__aeabi_fcmplt+0xe>
 8000d56:	2000      	movs	r0, #0
 8000d58:	bd10      	pop	{r4, pc}
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	bd10      	pop	{r4, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)

08000d60 <__aeabi_fcmple>:
 8000d60:	b510      	push	{r4, lr}
 8000d62:	f000 f8b9 	bl	8000ed8 <__lesf2>
 8000d66:	2800      	cmp	r0, #0
 8000d68:	dd01      	ble.n	8000d6e <__aeabi_fcmple+0xe>
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	bd10      	pop	{r4, pc}
 8000d6e:	2001      	movs	r0, #1
 8000d70:	bd10      	pop	{r4, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)

08000d74 <__aeabi_fcmpgt>:
 8000d74:	b510      	push	{r4, lr}
 8000d76:	f000 f863 	bl	8000e40 <__gesf2>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	dc01      	bgt.n	8000d82 <__aeabi_fcmpgt+0xe>
 8000d7e:	2000      	movs	r0, #0
 8000d80:	bd10      	pop	{r4, pc}
 8000d82:	2001      	movs	r0, #1
 8000d84:	bd10      	pop	{r4, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)

08000d88 <__aeabi_fcmpge>:
 8000d88:	b510      	push	{r4, lr}
 8000d8a:	f000 f859 	bl	8000e40 <__gesf2>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	da01      	bge.n	8000d96 <__aeabi_fcmpge+0xe>
 8000d92:	2000      	movs	r0, #0
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	2001      	movs	r0, #1
 8000d98:	bd10      	pop	{r4, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)

08000d9c <__clzsi2>:
 8000d9c:	211c      	movs	r1, #28
 8000d9e:	2301      	movs	r3, #1
 8000da0:	041b      	lsls	r3, r3, #16
 8000da2:	4298      	cmp	r0, r3
 8000da4:	d301      	bcc.n	8000daa <__clzsi2+0xe>
 8000da6:	0c00      	lsrs	r0, r0, #16
 8000da8:	3910      	subs	r1, #16
 8000daa:	0a1b      	lsrs	r3, r3, #8
 8000dac:	4298      	cmp	r0, r3
 8000dae:	d301      	bcc.n	8000db4 <__clzsi2+0x18>
 8000db0:	0a00      	lsrs	r0, r0, #8
 8000db2:	3908      	subs	r1, #8
 8000db4:	091b      	lsrs	r3, r3, #4
 8000db6:	4298      	cmp	r0, r3
 8000db8:	d301      	bcc.n	8000dbe <__clzsi2+0x22>
 8000dba:	0900      	lsrs	r0, r0, #4
 8000dbc:	3904      	subs	r1, #4
 8000dbe:	a202      	add	r2, pc, #8	; (adr r2, 8000dc8 <__clzsi2+0x2c>)
 8000dc0:	5c10      	ldrb	r0, [r2, r0]
 8000dc2:	1840      	adds	r0, r0, r1
 8000dc4:	4770      	bx	lr
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	02020304 	.word	0x02020304
 8000dcc:	01010101 	.word	0x01010101
	...

08000dd8 <__clzdi2>:
 8000dd8:	b510      	push	{r4, lr}
 8000dda:	2900      	cmp	r1, #0
 8000ddc:	d103      	bne.n	8000de6 <__clzdi2+0xe>
 8000dde:	f7ff ffdd 	bl	8000d9c <__clzsi2>
 8000de2:	3020      	adds	r0, #32
 8000de4:	e002      	b.n	8000dec <__clzdi2+0x14>
 8000de6:	1c08      	adds	r0, r1, #0
 8000de8:	f7ff ffd8 	bl	8000d9c <__clzsi2>
 8000dec:	bd10      	pop	{r4, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)

08000df0 <__eqsf2>:
 8000df0:	b570      	push	{r4, r5, r6, lr}
 8000df2:	0042      	lsls	r2, r0, #1
 8000df4:	024e      	lsls	r6, r1, #9
 8000df6:	004c      	lsls	r4, r1, #1
 8000df8:	0245      	lsls	r5, r0, #9
 8000dfa:	0a6d      	lsrs	r5, r5, #9
 8000dfc:	0e12      	lsrs	r2, r2, #24
 8000dfe:	0fc3      	lsrs	r3, r0, #31
 8000e00:	0a76      	lsrs	r6, r6, #9
 8000e02:	0e24      	lsrs	r4, r4, #24
 8000e04:	0fc9      	lsrs	r1, r1, #31
 8000e06:	2aff      	cmp	r2, #255	; 0xff
 8000e08:	d00f      	beq.n	8000e2a <__eqsf2+0x3a>
 8000e0a:	2cff      	cmp	r4, #255	; 0xff
 8000e0c:	d011      	beq.n	8000e32 <__eqsf2+0x42>
 8000e0e:	2001      	movs	r0, #1
 8000e10:	42a2      	cmp	r2, r4
 8000e12:	d000      	beq.n	8000e16 <__eqsf2+0x26>
 8000e14:	bd70      	pop	{r4, r5, r6, pc}
 8000e16:	42b5      	cmp	r5, r6
 8000e18:	d1fc      	bne.n	8000e14 <__eqsf2+0x24>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d00d      	beq.n	8000e3a <__eqsf2+0x4a>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d1f8      	bne.n	8000e14 <__eqsf2+0x24>
 8000e22:	0028      	movs	r0, r5
 8000e24:	1e45      	subs	r5, r0, #1
 8000e26:	41a8      	sbcs	r0, r5
 8000e28:	e7f4      	b.n	8000e14 <__eqsf2+0x24>
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d1f1      	bne.n	8000e14 <__eqsf2+0x24>
 8000e30:	e7eb      	b.n	8000e0a <__eqsf2+0x1a>
 8000e32:	2001      	movs	r0, #1
 8000e34:	2e00      	cmp	r6, #0
 8000e36:	d1ed      	bne.n	8000e14 <__eqsf2+0x24>
 8000e38:	e7e9      	b.n	8000e0e <__eqsf2+0x1e>
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	e7ea      	b.n	8000e14 <__eqsf2+0x24>
 8000e3e:	46c0      	nop			; (mov r8, r8)

08000e40 <__gesf2>:
 8000e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e42:	0042      	lsls	r2, r0, #1
 8000e44:	0246      	lsls	r6, r0, #9
 8000e46:	024d      	lsls	r5, r1, #9
 8000e48:	004c      	lsls	r4, r1, #1
 8000e4a:	0fc3      	lsrs	r3, r0, #31
 8000e4c:	0a76      	lsrs	r6, r6, #9
 8000e4e:	0e12      	lsrs	r2, r2, #24
 8000e50:	0a6d      	lsrs	r5, r5, #9
 8000e52:	0e24      	lsrs	r4, r4, #24
 8000e54:	0fc8      	lsrs	r0, r1, #31
 8000e56:	2aff      	cmp	r2, #255	; 0xff
 8000e58:	d01f      	beq.n	8000e9a <__gesf2+0x5a>
 8000e5a:	2cff      	cmp	r4, #255	; 0xff
 8000e5c:	d010      	beq.n	8000e80 <__gesf2+0x40>
 8000e5e:	2a00      	cmp	r2, #0
 8000e60:	d11f      	bne.n	8000ea2 <__gesf2+0x62>
 8000e62:	4271      	negs	r1, r6
 8000e64:	4171      	adcs	r1, r6
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d101      	bne.n	8000e6e <__gesf2+0x2e>
 8000e6a:	2d00      	cmp	r5, #0
 8000e6c:	d01e      	beq.n	8000eac <__gesf2+0x6c>
 8000e6e:	2900      	cmp	r1, #0
 8000e70:	d10e      	bne.n	8000e90 <__gesf2+0x50>
 8000e72:	4283      	cmp	r3, r0
 8000e74:	d01e      	beq.n	8000eb4 <__gesf2+0x74>
 8000e76:	2102      	movs	r1, #2
 8000e78:	1e58      	subs	r0, r3, #1
 8000e7a:	4008      	ands	r0, r1
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e80:	2d00      	cmp	r5, #0
 8000e82:	d126      	bne.n	8000ed2 <__gesf2+0x92>
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d1f4      	bne.n	8000e72 <__gesf2+0x32>
 8000e88:	4271      	negs	r1, r6
 8000e8a:	4171      	adcs	r1, r6
 8000e8c:	2900      	cmp	r1, #0
 8000e8e:	d0f0      	beq.n	8000e72 <__gesf2+0x32>
 8000e90:	2800      	cmp	r0, #0
 8000e92:	d1f4      	bne.n	8000e7e <__gesf2+0x3e>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7f1      	b.n	8000e7e <__gesf2+0x3e>
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d119      	bne.n	8000ed2 <__gesf2+0x92>
 8000e9e:	2cff      	cmp	r4, #255	; 0xff
 8000ea0:	d0ee      	beq.n	8000e80 <__gesf2+0x40>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d1e5      	bne.n	8000e72 <__gesf2+0x32>
 8000ea6:	2d00      	cmp	r5, #0
 8000ea8:	d1e3      	bne.n	8000e72 <__gesf2+0x32>
 8000eaa:	e7e4      	b.n	8000e76 <__gesf2+0x36>
 8000eac:	2000      	movs	r0, #0
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	d0e5      	beq.n	8000e7e <__gesf2+0x3e>
 8000eb2:	e7e0      	b.n	8000e76 <__gesf2+0x36>
 8000eb4:	42a2      	cmp	r2, r4
 8000eb6:	dc05      	bgt.n	8000ec4 <__gesf2+0x84>
 8000eb8:	dbea      	blt.n	8000e90 <__gesf2+0x50>
 8000eba:	42ae      	cmp	r6, r5
 8000ebc:	d802      	bhi.n	8000ec4 <__gesf2+0x84>
 8000ebe:	d3e7      	bcc.n	8000e90 <__gesf2+0x50>
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	e7dc      	b.n	8000e7e <__gesf2+0x3e>
 8000ec4:	4241      	negs	r1, r0
 8000ec6:	4141      	adcs	r1, r0
 8000ec8:	4248      	negs	r0, r1
 8000eca:	2102      	movs	r1, #2
 8000ecc:	4008      	ands	r0, r1
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7d5      	b.n	8000e7e <__gesf2+0x3e>
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	4240      	negs	r0, r0
 8000ed6:	e7d2      	b.n	8000e7e <__gesf2+0x3e>

08000ed8 <__lesf2>:
 8000ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eda:	0042      	lsls	r2, r0, #1
 8000edc:	0246      	lsls	r6, r0, #9
 8000ede:	024d      	lsls	r5, r1, #9
 8000ee0:	004c      	lsls	r4, r1, #1
 8000ee2:	0fc3      	lsrs	r3, r0, #31
 8000ee4:	0a76      	lsrs	r6, r6, #9
 8000ee6:	0e12      	lsrs	r2, r2, #24
 8000ee8:	0a6d      	lsrs	r5, r5, #9
 8000eea:	0e24      	lsrs	r4, r4, #24
 8000eec:	0fc8      	lsrs	r0, r1, #31
 8000eee:	2aff      	cmp	r2, #255	; 0xff
 8000ef0:	d00d      	beq.n	8000f0e <__lesf2+0x36>
 8000ef2:	2cff      	cmp	r4, #255	; 0xff
 8000ef4:	d00f      	beq.n	8000f16 <__lesf2+0x3e>
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	d123      	bne.n	8000f42 <__lesf2+0x6a>
 8000efa:	4271      	negs	r1, r6
 8000efc:	4171      	adcs	r1, r6
 8000efe:	2c00      	cmp	r4, #0
 8000f00:	d10f      	bne.n	8000f22 <__lesf2+0x4a>
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d10d      	bne.n	8000f22 <__lesf2+0x4a>
 8000f06:	2000      	movs	r0, #0
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d014      	beq.n	8000f36 <__lesf2+0x5e>
 8000f0c:	e00d      	b.n	8000f2a <__lesf2+0x52>
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d110      	bne.n	8000f34 <__lesf2+0x5c>
 8000f12:	2cff      	cmp	r4, #255	; 0xff
 8000f14:	d115      	bne.n	8000f42 <__lesf2+0x6a>
 8000f16:	2d00      	cmp	r5, #0
 8000f18:	d10c      	bne.n	8000f34 <__lesf2+0x5c>
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	d103      	bne.n	8000f26 <__lesf2+0x4e>
 8000f1e:	4271      	negs	r1, r6
 8000f20:	4171      	adcs	r1, r6
 8000f22:	2900      	cmp	r1, #0
 8000f24:	d108      	bne.n	8000f38 <__lesf2+0x60>
 8000f26:	4283      	cmp	r3, r0
 8000f28:	d010      	beq.n	8000f4c <__lesf2+0x74>
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	1e58      	subs	r0, r3, #1
 8000f2e:	4008      	ands	r0, r1
 8000f30:	3801      	subs	r0, #1
 8000f32:	e000      	b.n	8000f36 <__lesf2+0x5e>
 8000f34:	2002      	movs	r0, #2
 8000f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f38:	2800      	cmp	r0, #0
 8000f3a:	d1fc      	bne.n	8000f36 <__lesf2+0x5e>
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	4240      	negs	r0, r0
 8000f40:	e7f9      	b.n	8000f36 <__lesf2+0x5e>
 8000f42:	2c00      	cmp	r4, #0
 8000f44:	d1ef      	bne.n	8000f26 <__lesf2+0x4e>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d1ed      	bne.n	8000f26 <__lesf2+0x4e>
 8000f4a:	e7ee      	b.n	8000f2a <__lesf2+0x52>
 8000f4c:	42a2      	cmp	r2, r4
 8000f4e:	dc05      	bgt.n	8000f5c <__lesf2+0x84>
 8000f50:	dbf2      	blt.n	8000f38 <__lesf2+0x60>
 8000f52:	42ae      	cmp	r6, r5
 8000f54:	d802      	bhi.n	8000f5c <__lesf2+0x84>
 8000f56:	d3ef      	bcc.n	8000f38 <__lesf2+0x60>
 8000f58:	2000      	movs	r0, #0
 8000f5a:	e7ec      	b.n	8000f36 <__lesf2+0x5e>
 8000f5c:	4241      	negs	r1, r0
 8000f5e:	4141      	adcs	r1, r0
 8000f60:	4248      	negs	r0, r1
 8000f62:	2102      	movs	r1, #2
 8000f64:	4008      	ands	r0, r1
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7e5      	b.n	8000f36 <__lesf2+0x5e>
 8000f6a:	46c0      	nop			; (mov r8, r8)

08000f6c <read8>:

BMP280_t sensor;

// Read / Write functions
static uint8_t read8(uint8_t memory_address)
{
 8000f6c:	b510      	push	{r4, lr}
	uint8_t tmp;
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, &tmp, 1, I2C_Timeout);
 8000f6e:	2364      	movs	r3, #100	; 0x64
 8000f70:	2417      	movs	r4, #23
 8000f72:	0002      	movs	r2, r0
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <read8+0x24>)
{
 8000f76:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, &tmp, 1, I2C_Timeout);
 8000f78:	7901      	ldrb	r1, [r0, #4]
 8000f7a:	446c      	add	r4, sp
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	3b63      	subs	r3, #99	; 0x63
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	9400      	str	r4, [sp, #0]
 8000f84:	6800      	ldr	r0, [r0, #0]
 8000f86:	f001 fddb 	bl	8002b40 <HAL_I2C_Mem_Read>
	return tmp;
 8000f8a:	7820      	ldrb	r0, [r4, #0]
}
 8000f8c:	b006      	add	sp, #24
 8000f8e:	bd10      	pop	{r4, pc}
 8000f90:	2000009c 	.word	0x2000009c

08000f94 <read16>:

static uint16_t read16(uint8_t memory_address)
{
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, tmp, 2, I2C_Timeout);
 8000f94:	2364      	movs	r3, #100	; 0x64
{
 8000f96:	b510      	push	{r4, lr}
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, tmp, 2, I2C_Timeout);
 8000f98:	0002      	movs	r2, r0
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <read16+0x2c>)
{
 8000f9c:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, tmp, 2, I2C_Timeout);
 8000f9e:	7901      	ldrb	r1, [r0, #4]
 8000fa0:	ac05      	add	r4, sp, #20
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	3b62      	subs	r3, #98	; 0x62
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	9400      	str	r4, [sp, #0]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6800      	ldr	r0, [r0, #0]
 8000fae:	f001 fdc7 	bl	8002b40 <HAL_I2C_Mem_Read>
	return (tmp[1] << 8) | (tmp[0]);
 8000fb2:	7863      	ldrb	r3, [r4, #1]
 8000fb4:	7820      	ldrb	r0, [r4, #0]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	4318      	orrs	r0, r3
}
 8000fba:	b006      	add	sp, #24
 8000fbc:	bd10      	pop	{r4, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	2000009c 	.word	0x2000009c

08000fc4 <write8.constprop.0>:
static void temp_press_burst_read(uint8_t* buff)
{
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, press_msb, 1, buff, 6, I2C_Timeout);
}

static void write8(uint8_t memory_address, uint8_t* data)
 8000fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	HAL_I2C_Mem_Write(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, data, 1, I2C_Timeout);
 8000fc6:	2364      	movs	r3, #100	; 0x64
 8000fc8:	4c05      	ldr	r4, [pc, #20]	; (8000fe0 <write8.constprop.0+0x1c>)
 8000fca:	22f4      	movs	r2, #244	; 0xf4
 8000fcc:	7921      	ldrb	r1, [r4, #4]
 8000fce:	9302      	str	r3, [sp, #8]
 8000fd0:	3b63      	subs	r3, #99	; 0x63
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	9000      	str	r0, [sp, #0]
 8000fd6:	6820      	ldr	r0, [r4, #0]
 8000fd8:	f001 fcf8 	bl	80029cc <HAL_I2C_Mem_Write>
}
 8000fdc:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	2000009c 	.word	0x2000009c

08000fe4 <BMP280_set_mode>:

// User functions
void BMP280_set_mode(BMP_Mode mode)
{
 8000fe4:	b513      	push	{r0, r1, r4, lr}
 8000fe6:	0004      	movs	r4, r0
	uint8_t tmp;
	tmp = read8(ctrl_meas);
 8000fe8:	20f4      	movs	r0, #244	; 0xf4
 8000fea:	f7ff ffbf 	bl	8000f6c <read8>
 8000fee:	0003      	movs	r3, r0

	switch(mode)
 8000ff0:	2c01      	cmp	r4, #1
 8000ff2:	d00b      	beq.n	800100c <BMP280_set_mode+0x28>
 8000ff4:	2c02      	cmp	r4, #2
 8000ff6:	d00f      	beq.n	8001018 <BMP280_set_mode+0x34>
 8000ff8:	2c00      	cmp	r4, #0
 8000ffa:	d106      	bne.n	800100a <BMP280_set_mode+0x26>
	{
	case SLEEP:
		tmp &= 0xFC;
 8000ffc:	466a      	mov	r2, sp
 8000ffe:	1dd0      	adds	r0, r2, #7
 8001000:	2203      	movs	r2, #3
 8001002:	4393      	bics	r3, r2
		write8(ctrl_meas, &tmp);
		break;

	case NORMAL:
		tmp &= 0xFC;
		tmp |= 0x03;
 8001004:	7003      	strb	r3, [r0, #0]
		write8(ctrl_meas, &tmp);
 8001006:	f7ff ffdd 	bl	8000fc4 <write8.constprop.0>
		break;
	}
}
 800100a:	bd13      	pop	{r0, r1, r4, pc}
		tmp |= 0x01;
 800100c:	466a      	mov	r2, sp
 800100e:	1dd0      	adds	r0, r2, #7
		tmp &= 0xFC;
 8001010:	2203      	movs	r2, #3
 8001012:	4393      	bics	r3, r2
		tmp |= 0x01;
 8001014:	4323      	orrs	r3, r4
 8001016:	e7f5      	b.n	8001004 <BMP280_set_mode+0x20>
		tmp |= 0x03;
 8001018:	466a      	mov	r2, sp
 800101a:	1dd0      	adds	r0, r2, #7
		tmp &= 0xFC;
 800101c:	2203      	movs	r2, #3
		tmp |= 0x03;
 800101e:	4313      	orrs	r3, r2
 8001020:	e7f0      	b.n	8001004 <BMP280_set_mode+0x20>

08001022 <BMP280_set_temp_OVS>:

void BMP280_set_temp_OVS(BMP_OVS_rate Rate)
{
 8001022:	b513      	push	{r0, r1, r4, lr}
 8001024:	0004      	movs	r4, r0
	uint8_t tmp = read8(ctrl_meas);
 8001026:	20f4      	movs	r0, #244	; 0xf4
 8001028:	f7ff ffa0 	bl	8000f6c <read8>

	tmp &= 0x1F; // CLEAR bits
	tmp |= (Rate << 5);
 800102c:	466a      	mov	r2, sp
	uint8_t tmp = read8(ctrl_meas);
 800102e:	0003      	movs	r3, r0
	tmp |= (Rate << 5);
 8001030:	1dd0      	adds	r0, r2, #7
	tmp &= 0x1F; // CLEAR bits
 8001032:	221f      	movs	r2, #31
	tmp |= (Rate << 5);
 8001034:	0164      	lsls	r4, r4, #5
	tmp &= 0x1F; // CLEAR bits
 8001036:	4013      	ands	r3, r2
	tmp |= (Rate << 5);
 8001038:	431c      	orrs	r4, r3
 800103a:	7004      	strb	r4, [r0, #0]
	write8(ctrl_meas, &tmp);
 800103c:	f7ff ffc2 	bl	8000fc4 <write8.constprop.0>
}
 8001040:	bd13      	pop	{r0, r1, r4, pc}

08001042 <BMP280_set_press_OVS>:


void BMP280_set_press_OVS(BMP_OVS_rate Rate)
{
 8001042:	b513      	push	{r0, r1, r4, lr}
 8001044:	0004      	movs	r4, r0
	uint8_t tmp = read8(ctrl_meas);
 8001046:	20f4      	movs	r0, #244	; 0xf4
 8001048:	f7ff ff90 	bl	8000f6c <read8>

	tmp &= 0xE3; // CLEAR bits
	tmp |= (Rate << 2);
 800104c:	466a      	mov	r2, sp
	uint8_t tmp = read8(ctrl_meas);
 800104e:	0003      	movs	r3, r0
	tmp |= (Rate << 2);
 8001050:	1dd0      	adds	r0, r2, #7
	tmp &= 0xE3; // CLEAR bits
 8001052:	221c      	movs	r2, #28
	tmp |= (Rate << 2);
 8001054:	00a4      	lsls	r4, r4, #2
	tmp &= 0xE3; // CLEAR bits
 8001056:	4393      	bics	r3, r2
	tmp |= (Rate << 2);
 8001058:	431c      	orrs	r4, r3
 800105a:	7004      	strb	r4, [r0, #0]

	write8(ctrl_meas, &tmp);
 800105c:	f7ff ffb2 	bl	8000fc4 <write8.constprop.0>
}
 8001060:	bd13      	pop	{r0, r1, r4, pc}

08001062 <BMP280_set_filter>:

void BMP280_set_filter(BMP_filter_rate Rate)
{
 8001062:	b513      	push	{r0, r1, r4, lr}
 8001064:	0004      	movs	r4, r0
	uint8_t tmp = read8(config);
 8001066:	20f5      	movs	r0, #245	; 0xf5
 8001068:	f7ff ff80 	bl	8000f6c <read8>
	tmp &= 0xE3; // CLEAR bits
	tmp |= (Rate << 2);
 800106c:	466a      	mov	r2, sp
	uint8_t tmp = read8(config);
 800106e:	0003      	movs	r3, r0
	tmp |= (Rate << 2);
 8001070:	1dd0      	adds	r0, r2, #7
	tmp &= 0xE3; // CLEAR bits
 8001072:	221c      	movs	r2, #28
	tmp |= (Rate << 2);
 8001074:	00a4      	lsls	r4, r4, #2
	tmp &= 0xE3; // CLEAR bits
 8001076:	4393      	bics	r3, r2
	tmp |= (Rate << 2);
 8001078:	431c      	orrs	r4, r3
 800107a:	7004      	strb	r4, [r0, #0]

	write8(ctrl_meas, &tmp);
 800107c:	f7ff ffa2 	bl	8000fc4 <write8.constprop.0>
}
 8001080:	bd13      	pop	{r0, r1, r4, pc}
	...

08001084 <BMP280_get_data_FORCED>:

}


void BMP280_get_data_FORCED(int32_t* temperature, uint32_t* pressure)
{
 8001084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001086:	0006      	movs	r6, r0
 8001088:	b08b      	sub	sp, #44	; 0x2c
	BMP280_set_mode(FORCED); // start conversion
 800108a:	2001      	movs	r0, #1
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, press_msb, 1, buff, 6, I2C_Timeout);
 800108c:	2764      	movs	r7, #100	; 0x64
{
 800108e:	9107      	str	r1, [sp, #28]
	BMP280_set_mode(FORCED); // start conversion
 8001090:	f7ff ffa8 	bl	8000fe4 <BMP280_set_mode>
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, press_msb, 1, buff, 6, I2C_Timeout);
 8001094:	2306      	movs	r3, #6
 8001096:	4d44      	ldr	r5, [pc, #272]	; (80011a8 <BMP280_get_data_FORCED+0x124>)
 8001098:	ac08      	add	r4, sp, #32
 800109a:	7929      	ldrb	r1, [r5, #4]
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	9400      	str	r4, [sp, #0]
 80010a0:	9702      	str	r7, [sp, #8]
 80010a2:	22f7      	movs	r2, #247	; 0xf7
 80010a4:	3b05      	subs	r3, #5
 80010a6:	6828      	ldr	r0, [r5, #0]
 80010a8:	f001 fd4a 	bl	8002b40 <HAL_I2C_Mem_Read>
	uint8_t tmp_buff[6];
	int32_t t_fine;


	temp_press_burst_read(tmp_buff);
	press_raw = tmp_buff[0] << 12 | (tmp_buff[1] << 4) | (tmp_buff[2] >> 4);
 80010ac:	7823      	ldrb	r3, [r4, #0]
 80010ae:	9304      	str	r3, [sp, #16]
 80010b0:	7863      	ldrb	r3, [r4, #1]
 80010b2:	9305      	str	r3, [sp, #20]
 80010b4:	78a3      	ldrb	r3, [r4, #2]
 80010b6:	9306      	str	r3, [sp, #24]
	temp_raw = tmp_buff[3] << 12 | (tmp_buff[4] << 4) | (tmp_buff[5] >> 4);
 80010b8:	78e3      	ldrb	r3, [r4, #3]
 80010ba:	7922      	ldrb	r2, [r4, #4]
 80010bc:	031b      	lsls	r3, r3, #12
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	4313      	orrs	r3, r2
	var1 = ((((temp_raw>>3)-((int32_t)sensor.dig_t1<<1))) * ((int32_t)sensor.dig_t2)) >> 11;
 80010c2:	2008      	movs	r0, #8
 80010c4:	5e2a      	ldrsh	r2, [r5, r0]

	// compensate temperature
	t_fine = BMP280_temp_compensate(temp_raw);
	*temperature = ((t_fine * 5 + 128) >> 8) / 100; // return temperature in [C]
 80010c6:	2005      	movs	r0, #5
	temp_raw = tmp_buff[3] << 12 | (tmp_buff[4] << 4) | (tmp_buff[5] >> 4);
 80010c8:	7964      	ldrb	r4, [r4, #5]
	var1 = ((((temp_raw>>3)-((int32_t)sensor.dig_t1<<1))) * ((int32_t)sensor.dig_t2)) >> 11;
 80010ca:	88e9      	ldrh	r1, [r5, #6]
	temp_raw = tmp_buff[3] << 12 | (tmp_buff[4] << 4) | (tmp_buff[5] >> 4);
 80010cc:	0924      	lsrs	r4, r4, #4
 80010ce:	431c      	orrs	r4, r3
	var2 = (((((temp_raw>>4)-((int32_t)sensor.dig_t1)) * ((temp_raw>>4)-((int32_t)sensor.dig_t1))) >> 12) *  ((int32_t)sensor.dig_t3)) >> 14;
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	1a5b      	subs	r3, r3, r1
 80010d4:	435b      	muls	r3, r3
	var1 = ((((temp_raw>>3)-((int32_t)sensor.dig_t1<<1))) * ((int32_t)sensor.dig_t2)) >> 11;
 80010d6:	10e4      	asrs	r4, r4, #3
 80010d8:	0049      	lsls	r1, r1, #1
 80010da:	1a61      	subs	r1, r4, r1
 80010dc:	434a      	muls	r2, r1
	var2 = (((((temp_raw>>4)-((int32_t)sensor.dig_t1)) * ((temp_raw>>4)-((int32_t)sensor.dig_t1))) >> 12) *  ((int32_t)sensor.dig_t3)) >> 14;
 80010de:	210a      	movs	r1, #10
 80010e0:	5e6c      	ldrsh	r4, [r5, r1]
 80010e2:	131b      	asrs	r3, r3, #12
 80010e4:	4363      	muls	r3, r4
	var1 = ((((temp_raw>>3)-((int32_t)sensor.dig_t1<<1))) * ((int32_t)sensor.dig_t2)) >> 11;
 80010e6:	12d2      	asrs	r2, r2, #11
	var2 = (((((temp_raw>>4)-((int32_t)sensor.dig_t1)) * ((temp_raw>>4)-((int32_t)sensor.dig_t1))) >> 12) *  ((int32_t)sensor.dig_t3)) >> 14;
 80010e8:	139b      	asrs	r3, r3, #14
	t_fine = var1 + var2;
 80010ea:	18d4      	adds	r4, r2, r3
	*temperature = ((t_fine * 5 + 128) >> 8) / 100; // return temperature in [C]
 80010ec:	4360      	muls	r0, r4
 80010ee:	3080      	adds	r0, #128	; 0x80
 80010f0:	0039      	movs	r1, r7
 80010f2:	1200      	asrs	r0, r0, #8
 80010f4:	f7ff f8b8 	bl	8000268 <__divsi3>
	var1 = (((int32_t)t_fine)>>1)-(int32_t)64000;
 80010f8:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <BMP280_get_data_FORCED+0x128>)
 80010fa:	1064      	asrs	r4, r4, #1
 80010fc:	18e4      	adds	r4, r4, r3
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)sensor.dig_p6);
 80010fe:	10a3      	asrs	r3, r4, #2
 8001100:	435b      	muls	r3, r3
	*temperature = ((t_fine * 5 + 128) >> 8) / 100; // return temperature in [C]
 8001102:	6030      	str	r0, [r6, #0]
	var1 = (((sensor.dig_p3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)sensor.dig_p2) * var1)>>1))>>18;
 8001104:	2110      	movs	r1, #16
 8001106:	5e6a      	ldrsh	r2, [r5, r1]
 8001108:	1359      	asrs	r1, r3, #13
 800110a:	4351      	muls	r1, r2
 800110c:	200e      	movs	r0, #14
 800110e:	5e2a      	ldrsh	r2, [r5, r0]
 8001110:	10c9      	asrs	r1, r1, #3
 8001112:	4362      	muls	r2, r4
 8001114:	1052      	asrs	r2, r2, #1
 8001116:	1889      	adds	r1, r1, r2
	var1 =((((32768+var1))*((int32_t)sensor.dig_p1))>>15);
 8001118:	2280      	movs	r2, #128	; 0x80
	var1 = (((sensor.dig_p3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)sensor.dig_p2) * var1)>>1))>>18;
 800111a:	1489      	asrs	r1, r1, #18
	var1 =((((32768+var1))*((int32_t)sensor.dig_p1))>>15);
 800111c:	0212      	lsls	r2, r2, #8
 800111e:	1889      	adds	r1, r1, r2
 8001120:	89aa      	ldrh	r2, [r5, #12]
 8001122:	4351      	muls	r1, r2
 8001124:	13c9      	asrs	r1, r1, #15
	return 0; // avoid exception caused by division by zero
 8001126:	1e08      	subs	r0, r1, #0
	if (var1 == 0)
 8001128:	d033      	beq.n	8001192 <BMP280_get_data_FORCED+0x10e>
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)sensor.dig_p6);
 800112a:	2216      	movs	r2, #22
 800112c:	5ea8      	ldrsh	r0, [r5, r2]
 800112e:	12db      	asrs	r3, r3, #11
 8001130:	4343      	muls	r3, r0
	var2 = var2 + ((var1*((int32_t)sensor.dig_p5))<<1);
 8001132:	2214      	movs	r2, #20
 8001134:	5ea8      	ldrsh	r0, [r5, r2]
 8001136:	4360      	muls	r0, r4
 8001138:	0040      	lsls	r0, r0, #1
 800113a:	18c0      	adds	r0, r0, r3
	press_raw = tmp_buff[0] << 12 | (tmp_buff[1] << 4) | (tmp_buff[2] >> 4);
 800113c:	9b05      	ldr	r3, [sp, #20]
	var2 = (var2>>2)+(((int32_t)sensor.dig_p4)<<16);
 800113e:	1084      	asrs	r4, r0, #2
	press_raw = tmp_buff[0] << 12 | (tmp_buff[1] << 4) | (tmp_buff[2] >> 4);
 8001140:	0118      	lsls	r0, r3, #4
 8001142:	9b06      	ldr	r3, [sp, #24]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	4318      	orrs	r0, r3
 8001148:	9b04      	ldr	r3, [sp, #16]
 800114a:	031b      	lsls	r3, r3, #12
 800114c:	4318      	orrs	r0, r3
	var2 = (var2>>2)+(((int32_t)sensor.dig_p4)<<16);
 800114e:	2212      	movs	r2, #18
 8001150:	5eab      	ldrsh	r3, [r5, r2]
 8001152:	041b      	lsls	r3, r3, #16
 8001154:	191b      	adds	r3, r3, r4
	p = (((uint32_t)(((int32_t)1048576)-press_raw)-(var2>>12)))*3125;
 8001156:	131b      	asrs	r3, r3, #12
 8001158:	18c3      	adds	r3, r0, r3
 800115a:	4815      	ldr	r0, [pc, #84]	; (80011b0 <BMP280_get_data_FORCED+0x12c>)
 800115c:	4358      	muls	r0, r3
	if (p < 0x80000000)
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <BMP280_get_data_FORCED+0x130>)
 8001160:	18c0      	adds	r0, r0, r3
 8001162:	d41d      	bmi.n	80011a0 <BMP280_get_data_FORCED+0x11c>
	p = (p << 1) / ((uint32_t)var1);
 8001164:	0040      	lsls	r0, r0, #1
 8001166:	f7fe fff5 	bl	8000154 <__udivsi3>
 800116a:	0003      	movs	r3, r0
	var1 = (((int32_t)sensor.dig_p9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 800116c:	08d8      	lsrs	r0, r3, #3
 800116e:	4340      	muls	r0, r0
 8001170:	490d      	ldr	r1, [pc, #52]	; (80011a8 <BMP280_get_data_FORCED+0x124>)
 8001172:	0b42      	lsrs	r2, r0, #13
 8001174:	241c      	movs	r4, #28
 8001176:	5f08      	ldrsh	r0, [r1, r4]
	var2 = (((int32_t)(p>>2)) * ((int32_t)sensor.dig_p8))>>13;
 8001178:	089c      	lsrs	r4, r3, #2
	var1 = (((int32_t)sensor.dig_p9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 800117a:	4350      	muls	r0, r2
	var2 = (((int32_t)(p>>2)) * ((int32_t)sensor.dig_p8))>>13;
 800117c:	251a      	movs	r5, #26
 800117e:	5f4a      	ldrsh	r2, [r1, r5]
	var1 = (((int32_t)sensor.dig_p9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8001180:	1300      	asrs	r0, r0, #12
	var2 = (((int32_t)(p>>2)) * ((int32_t)sensor.dig_p8))>>13;
 8001182:	4362      	muls	r2, r4
 8001184:	1352      	asrs	r2, r2, #13
	p = (uint32_t)((int32_t)p + ((var1 + var2 + sensor.dig_p7) >> 4));
 8001186:	1880      	adds	r0, r0, r2
 8001188:	2218      	movs	r2, #24
 800118a:	5e8a      	ldrsh	r2, [r1, r2]
 800118c:	1880      	adds	r0, r0, r2
 800118e:	1100      	asrs	r0, r0, #4
 8001190:	18c0      	adds	r0, r0, r3

	// compensate pressure
	*pressure = (BMP280_press_compensate(press_raw, t_fine)) / 100; // return pressure in [Pa]
 8001192:	2164      	movs	r1, #100	; 0x64
 8001194:	f7fe ffde 	bl	8000154 <__udivsi3>
 8001198:	9b07      	ldr	r3, [sp, #28]
 800119a:	6018      	str	r0, [r3, #0]
}
 800119c:	b00b      	add	sp, #44	; 0x2c
 800119e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	p = (p / (uint32_t)var1) * 2;
 80011a0:	f7fe ffd8 	bl	8000154 <__udivsi3>
 80011a4:	0043      	lsls	r3, r0, #1
 80011a6:	e7e1      	b.n	800116c <BMP280_get_data_FORCED+0xe8>
 80011a8:	2000009c 	.word	0x2000009c
 80011ac:	ffff0600 	.word	0xffff0600
 80011b0:	fffff3cb 	.word	0xfffff3cb
 80011b4:	c3500000 	.word	0xc3500000

080011b8 <BMP280_Init>:




BMP_Status BMP280_Init(I2C_HandleTypeDef* hi2c, uint8_t I2C_Address)
{
 80011b8:	b570      	push	{r4, r5, r6, lr}
	sensor.hi2c = hi2c;
 80011ba:	4c23      	ldr	r4, [pc, #140]	; (8001248 <BMP280_Init+0x90>)
	sensor.I2C_Addr = (I2C_Address << 1);
 80011bc:	0049      	lsls	r1, r1, #1
	sensor.hi2c = hi2c;
 80011be:	6020      	str	r0, [r4, #0]

	// check sensor ID
	uint8_t sensor_id = read8(ID);
 80011c0:	20d0      	movs	r0, #208	; 0xd0
	sensor.I2C_Addr = (I2C_Address << 1);
 80011c2:	7121      	strb	r1, [r4, #4]
	uint8_t sensor_id = read8(ID);
 80011c4:	f7ff fed2 	bl	8000f6c <read8>
	if(sensor_id != CHIP_ID)
	{
		return BMP280_NOK;
 80011c8:	2500      	movs	r5, #0
	if(sensor_id != CHIP_ID)
 80011ca:	2858      	cmp	r0, #88	; 0x58
 80011cc:	d139      	bne.n	8001242 <BMP280_Init+0x8a>
	}

	// load calibration coefficients
	sensor.dig_t1 = read16(dig_T1);
 80011ce:	3030      	adds	r0, #48	; 0x30
 80011d0:	f7ff fee0 	bl	8000f94 <read16>
 80011d4:	80e0      	strh	r0, [r4, #6]
	sensor.dig_t2 = read16(dig_T2);
 80011d6:	208a      	movs	r0, #138	; 0x8a
 80011d8:	f7ff fedc 	bl	8000f94 <read16>
 80011dc:	8120      	strh	r0, [r4, #8]
	sensor.dig_t3 = read16(dig_T3);
 80011de:	208c      	movs	r0, #140	; 0x8c
 80011e0:	f7ff fed8 	bl	8000f94 <read16>
 80011e4:	8160      	strh	r0, [r4, #10]
	sensor.dig_p1 = read16(dig_P1);
 80011e6:	208e      	movs	r0, #142	; 0x8e
 80011e8:	f7ff fed4 	bl	8000f94 <read16>
 80011ec:	81a0      	strh	r0, [r4, #12]
	sensor.dig_p2 = read16(dig_P2);
 80011ee:	2090      	movs	r0, #144	; 0x90
 80011f0:	f7ff fed0 	bl	8000f94 <read16>
 80011f4:	81e0      	strh	r0, [r4, #14]
	sensor.dig_p3 = read16(dig_P3);
 80011f6:	2092      	movs	r0, #146	; 0x92
 80011f8:	f7ff fecc 	bl	8000f94 <read16>
 80011fc:	8220      	strh	r0, [r4, #16]
	sensor.dig_p4 = read16(dig_P4);
 80011fe:	2094      	movs	r0, #148	; 0x94
 8001200:	f7ff fec8 	bl	8000f94 <read16>
 8001204:	8260      	strh	r0, [r4, #18]
	sensor.dig_p5 = read16(dig_P5);
 8001206:	2096      	movs	r0, #150	; 0x96
 8001208:	f7ff fec4 	bl	8000f94 <read16>
 800120c:	82a0      	strh	r0, [r4, #20]
	sensor.dig_p6 = read16(dig_P6);
 800120e:	2098      	movs	r0, #152	; 0x98
 8001210:	f7ff fec0 	bl	8000f94 <read16>
 8001214:	82e0      	strh	r0, [r4, #22]
	sensor.dig_p7 = read16(dig_P7);
 8001216:	209a      	movs	r0, #154	; 0x9a
 8001218:	f7ff febc 	bl	8000f94 <read16>
 800121c:	8320      	strh	r0, [r4, #24]
	sensor.dig_p8 = read16(dig_P8);
 800121e:	209c      	movs	r0, #156	; 0x9c
 8001220:	f7ff feb8 	bl	8000f94 <read16>
 8001224:	8360      	strh	r0, [r4, #26]
	sensor.dig_p9 = read16(dig_P9);
 8001226:	209e      	movs	r0, #158	; 0x9e
 8001228:	f7ff feb4 	bl	8000f94 <read16>
 800122c:	83a0      	strh	r0, [r4, #28]

	// initial sensor setup
	// Mode - Forced, Oversampling - UltraLowPower, osrs_p - x1, osrs_t - x1, IIR - off
	// Timing - 1/min, ODR - 1/60Hz, BW - Full

	 BMP280_set_filter(OFF);
 800122e:	0028      	movs	r0, r5
 8001230:	f7ff ff17 	bl	8001062 <BMP280_set_filter>
	 BMP280_set_temp_OVS(x1);
 8001234:	2001      	movs	r0, #1
 8001236:	f7ff fef4 	bl	8001022 <BMP280_set_temp_OVS>
	 BMP280_set_press_OVS(x1);
 800123a:	2001      	movs	r0, #1
 800123c:	f7ff ff01 	bl	8001042 <BMP280_set_press_OVS>

	return BMP280_OK;
 8001240:	3501      	adds	r5, #1
}
 8001242:	0028      	movs	r0, r5
 8001244:	bd70      	pop	{r4, r5, r6, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	2000009c 	.word	0x2000009c

0800124c <ESP8266_wait_for_msg>:
extern uint8_t UART_RX_val;
extern RTC_TimeTypeDef rtc_time;

static ESP_status ESP8266_wait_for_msg(ESP8266_t* ESP, char* message)
{
	ESP_RESPOND_FLAG = 1;
 800124c:	2301      	movs	r3, #1
{
 800124e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001250:	0004      	movs	r4, r0
	ESP_RESPOND_FLAG = 1;
 8001252:	4a26      	ldr	r2, [pc, #152]	; (80012ec <ESP8266_wait_for_msg+0xa0>)
{
 8001254:	9101      	str	r1, [sp, #4]
	ESP_RESPOND_FLAG = 1;
 8001256:	7013      	strb	r3, [r2, #0]

	do
	{

		Parser_clean_string(&ESP->ESP_RX_Buff, &ESP->ESP_RX_msg_to_parsed);
 8001258:	0027      	movs	r7, r4
 800125a:	0026      	movs	r6, r4
 800125c:	3708      	adds	r7, #8
 800125e:	368d      	adds	r6, #141	; 0x8d
 8001260:	0031      	movs	r1, r6
 8001262:	0038      	movs	r0, r7
 8001264:	f000 fd94 	bl	8001d90 <Parser_clean_string>
		if(Parser_simple_parse(message, &ESP->ESP_RX_msg_to_parsed))
 8001268:	0031      	movs	r1, r6
 800126a:	9801      	ldr	r0, [sp, #4]
 800126c:	f000 fdaf 	bl	8001dce <Parser_simple_parse>
 8001270:	1e05      	subs	r5, r0, #0
 8001272:	d016      	beq.n	80012a2 <ESP8266_wait_for_msg+0x56>
		{
			RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8001274:	0038      	movs	r0, r7
 8001276:	f000 fada 	bl	800182e <RB_Flush>
			RB_Flush(&ESP->ESP_RX_msg_to_parsed);
 800127a:	0030      	movs	r0, r6
 800127c:	f000 fad7 	bl	800182e <RB_Flush>
			memset(ESP->ESP_RX_Buff.buffer, 0x00, sizeof(ESP->ESP_RX_Buff.buffer[0]) * BUFFER_SIZE);
 8001280:	0020      	movs	r0, r4
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	2100      	movs	r1, #0
 8001286:	300a      	adds	r0, #10
 8001288:	f003 fa5a 	bl	8004740 <memset>
			memset(ESP->ESP_RX_msg_to_parsed.buffer, 0x00, sizeof(ESP->ESP_RX_msg_to_parsed.buffer[0]) * BUFFER_SIZE);
 800128c:	0020      	movs	r0, r4
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	2100      	movs	r1, #0
 8001292:	308f      	adds	r0, #143	; 0x8f
 8001294:	f003 fa54 	bl	8004740 <memset>

			ESP_RESPOND_FLAG = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	4a14      	ldr	r2, [pc, #80]	; (80012ec <ESP8266_wait_for_msg+0xa0>)
 800129c:	7013      	strb	r3, [r2, #0]
			return ESP_NOK;
		}

	}while(ESP_RESPOND_FLAG);

	return ESP_OK;
 800129e:	2501      	movs	r5, #1
 80012a0:	e017      	b.n	80012d2 <ESP8266_wait_for_msg+0x86>
		else if(Parser_simple_parse("ERROR", &ESP->ESP_RX_msg_to_parsed))
 80012a2:	0031      	movs	r1, r6
 80012a4:	4812      	ldr	r0, [pc, #72]	; (80012f0 <ESP8266_wait_for_msg+0xa4>)
 80012a6:	f000 fd92 	bl	8001dce <Parser_simple_parse>
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d013      	beq.n	80012d6 <ESP8266_wait_for_msg+0x8a>
			RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 80012ae:	0038      	movs	r0, r7
 80012b0:	f000 fabd 	bl	800182e <RB_Flush>
			RB_Flush(&ESP->ESP_RX_msg_to_parsed);
 80012b4:	0030      	movs	r0, r6
 80012b6:	f000 faba 	bl	800182e <RB_Flush>
			memset(ESP->ESP_RX_Buff.buffer, 0x00, BUFFER_SIZE);
 80012ba:	0020      	movs	r0, r4
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	0029      	movs	r1, r5
 80012c0:	300a      	adds	r0, #10
 80012c2:	f003 fa3d 	bl	8004740 <memset>
			memset(ESP->ESP_RX_msg_to_parsed.buffer, 0x00, BUFFER_SIZE);
 80012c6:	0020      	movs	r0, r4
 80012c8:	2280      	movs	r2, #128	; 0x80
 80012ca:	0029      	movs	r1, r5
 80012cc:	308f      	adds	r0, #143	; 0x8f
 80012ce:	f003 fa37 	bl	8004740 <memset>
}
 80012d2:	0028      	movs	r0, r5
 80012d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		else if(Parser_simple_parse("FAIL", &ESP->ESP_RX_msg_to_parsed))
 80012d6:	0031      	movs	r1, r6
 80012d8:	4806      	ldr	r0, [pc, #24]	; (80012f4 <ESP8266_wait_for_msg+0xa8>)
 80012da:	f000 fd78 	bl	8001dce <Parser_simple_parse>
 80012de:	2800      	cmp	r0, #0
 80012e0:	d1e5      	bne.n	80012ae <ESP8266_wait_for_msg+0x62>
	}while(ESP_RESPOND_FLAG);
 80012e2:	4b02      	ldr	r3, [pc, #8]	; (80012ec <ESP8266_wait_for_msg+0xa0>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1b6      	bne.n	8001258 <ESP8266_wait_for_msg+0xc>
 80012ea:	e7d8      	b.n	800129e <ESP8266_wait_for_msg+0x52>
 80012ec:	200000bc 	.word	0x200000bc
 80012f0:	0800504c 	.word	0x0800504c
 80012f4:	08005052 	.word	0x08005052

080012f8 <ESP8266_Connect_To_Router>:
}



static ESP_status ESP8266_Connect_To_Router(ESP8266_t* ESP)
{
 80012f8:	b510      	push	{r4, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
	uint8_t message[36];
	uint8_t length;
	length = sprintf((char*)message, "AT+CWJAP=\"%s\",\"%s\"\r\n", ESP->SSID, ESP->PSWD);
 80012fc:	6843      	ldr	r3, [r0, #4]
 80012fe:	6802      	ldr	r2, [r0, #0]
{
 8001300:	0004      	movs	r4, r0
	length = sprintf((char*)message, "AT+CWJAP=\"%s\",\"%s\"\r\n", ESP->SSID, ESP->PSWD);
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <ESP8266_Connect_To_Router+0x2c>)
 8001304:	a801      	add	r0, sp, #4
 8001306:	f003 fa23 	bl	8004750 <siprintf>
	UART_send_message((char*)message, length);
 800130a:	b2c1      	uxtb	r1, r0
 800130c:	a801      	add	r0, sp, #4
 800130e:	f000 faa5 	bl	800185c <UART_send_message>

	if(ESP8266_wait_for_msg(ESP, "IPOK") == ESP_NOK)
 8001312:	0020      	movs	r0, r4
 8001314:	4904      	ldr	r1, [pc, #16]	; (8001328 <ESP8266_Connect_To_Router+0x30>)
 8001316:	f7ff ff99 	bl	800124c <ESP8266_wait_for_msg>
 800131a:	1e43      	subs	r3, r0, #1
 800131c:	4198      	sbcs	r0, r3
 800131e:	b2c0      	uxtb	r0, r0
	{
		return ESP_NOK;
	}
	return ESP_OK;
}
 8001320:	b00a      	add	sp, #40	; 0x28
 8001322:	bd10      	pop	{r4, pc}
 8001324:	08005057 	.word	0x08005057
 8001328:	0800506c 	.word	0x0800506c

0800132c <ESP8266_EnterDeepSleep>:
	uint32_t sleep_ms = sleep_seconds * 1000;
 800132c:	22fa      	movs	r2, #250	; 0xfa
{
 800132e:	b510      	push	{r4, lr}
	uint32_t sleep_ms = sleep_seconds * 1000;
 8001330:	0092      	lsls	r2, r2, #2
{
 8001332:	b088      	sub	sp, #32
	uint32_t sleep_ms = sleep_seconds * 1000;
 8001334:	434a      	muls	r2, r1
{
 8001336:	0004      	movs	r4, r0
	length = sprintf((char*)message, "AT+GSLP=%d\r\n", sleep_ms);
 8001338:	4906      	ldr	r1, [pc, #24]	; (8001354 <ESP8266_EnterDeepSleep+0x28>)
 800133a:	a801      	add	r0, sp, #4
 800133c:	f003 fa08 	bl	8004750 <siprintf>
	UART_send_message((char*)message, length);
 8001340:	b2c1      	uxtb	r1, r0
 8001342:	a801      	add	r0, sp, #4
 8001344:	f000 fa8a 	bl	800185c <UART_send_message>
	ESP8266_wait_for_msg(ESP, "OK");
 8001348:	0020      	movs	r0, r4
 800134a:	4903      	ldr	r1, [pc, #12]	; (8001358 <ESP8266_EnterDeepSleep+0x2c>)
 800134c:	f7ff ff7e 	bl	800124c <ESP8266_wait_for_msg>
}
 8001350:	b008      	add	sp, #32
 8001352:	bd10      	pop	{r4, pc}
 8001354:	08005096 	.word	0x08005096
 8001358:	0800506e 	.word	0x0800506e

0800135c <ESP8266_SetMode>:

ESP_status ESP8266_SetMode(ESP8266_t* ESP, ESP_mode mode)
{
 800135c:	b510      	push	{r4, lr}
 800135e:	0004      	movs	r4, r0
	switch(mode)
 8001360:	2901      	cmp	r1, #1
 8001362:	d00c      	beq.n	800137e <ESP8266_SetMode+0x22>
 8001364:	2902      	cmp	r1, #2
 8001366:	d00e      	beq.n	8001386 <ESP8266_SetMode+0x2a>
	{
	case STATION:
		UART_send_string("AT+CWMODE=1\r\n"); // Set WiFi mode to station mode
 8001368:	4808      	ldr	r0, [pc, #32]	; (800138c <ESP8266_SetMode+0x30>)
	switch(mode)
 800136a:	2900      	cmp	r1, #0
 800136c:	d008      	beq.n	8001380 <ESP8266_SetMode+0x24>
	case AP_STATION:
		UART_send_string("AT+CWMODE=3\r\n"); // Set WiFi mode to station mode + AP mode
		break;
	}

	if(!(ESP8266_wait_for_msg(ESP, "OK")))
 800136e:	0020      	movs	r0, r4
 8001370:	4907      	ldr	r1, [pc, #28]	; (8001390 <ESP8266_SetMode+0x34>)
 8001372:	f7ff ff6b 	bl	800124c <ESP8266_wait_for_msg>
 8001376:	1e43      	subs	r3, r0, #1
 8001378:	4198      	sbcs	r0, r3
	{
		return ESP_NOK;
	}

	return ESP_OK;
}
 800137a:	b2c0      	uxtb	r0, r0
 800137c:	bd10      	pop	{r4, pc}
		UART_send_string("AT+CWMODE=2\r\n"); // Set WiFi mode to access point
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <ESP8266_SetMode+0x38>)
		UART_send_string("AT+CWMODE=3\r\n"); // Set WiFi mode to station mode + AP mode
 8001380:	f000 fa5c 	bl	800183c <UART_send_string>
		break;
 8001384:	e7f3      	b.n	800136e <ESP8266_SetMode+0x12>
		UART_send_string("AT+CWMODE=3\r\n"); // Set WiFi mode to station mode + AP mode
 8001386:	4804      	ldr	r0, [pc, #16]	; (8001398 <ESP8266_SetMode+0x3c>)
 8001388:	e7fa      	b.n	8001380 <ESP8266_SetMode+0x24>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	080050a3 	.word	0x080050a3
 8001390:	0800506e 	.word	0x0800506e
 8001394:	080050b1 	.word	0x080050b1
 8001398:	080050bf 	.word	0x080050bf

0800139c <ESP8266_Init>:


ESP_status ESP8266_Init(ESP8266_t* ESP, char* SSID, char* PSWD, ESP_mode Mode)
{
 800139c:	b530      	push	{r4, r5, lr}
 800139e:	0004      	movs	r4, r0
 80013a0:	b08b      	sub	sp, #44	; 0x2c
	ESP->SSID = SSID;
	ESP->PSWD = PSWD;
 80013a2:	6042      	str	r2, [r0, #4]
	ESP->SSID = SSID;
 80013a4:	6001      	str	r1, [r0, #0]
	length = sprintf((char*)message, "AT+CWQAP\r\n");
 80013a6:	4913      	ldr	r1, [pc, #76]	; (80013f4 <ESP8266_Init+0x58>)
 80013a8:	a801      	add	r0, sp, #4
{
 80013aa:	001d      	movs	r5, r3
	length = sprintf((char*)message, "AT+CWQAP\r\n");
 80013ac:	f003 f9fd 	bl	80047aa <strcpy>
	UART_send_message((char*)message, length);
 80013b0:	210a      	movs	r1, #10
 80013b2:	a801      	add	r0, sp, #4
 80013b4:	f000 fa52 	bl	800185c <UART_send_message>

	ESP8266_Disconnect(ESP);
	ESP8266_wait_for_msg(ESP, "OK");
 80013b8:	490f      	ldr	r1, [pc, #60]	; (80013f8 <ESP8266_Init+0x5c>)
 80013ba:	0020      	movs	r0, r4
 80013bc:	f7ff ff46 	bl	800124c <ESP8266_wait_for_msg>
	RingBuffer_Init(&ESP->ESP_RX_Buff);
 80013c0:	0020      	movs	r0, r4
 80013c2:	3008      	adds	r0, #8
 80013c4:	f000 f9f8 	bl	80017b8 <RingBuffer_Init>
	RingBuffer_Init(&ESP->ESP_RX_msg_to_parsed);
 80013c8:	0020      	movs	r0, r4
 80013ca:	308d      	adds	r0, #141	; 0x8d
 80013cc:	f000 f9f4 	bl	80017b8 <RingBuffer_Init>

	// TCP client connection config:
	// 1. Set WiFi mode
	if(ESP8266_SetMode(ESP, Mode) == ESP_NOK)
 80013d0:	0029      	movs	r1, r5
 80013d2:	0020      	movs	r0, r4
 80013d4:	f7ff ffc2 	bl	800135c <ESP8266_SetMode>
 80013d8:	2800      	cmp	r0, #0
 80013da:	d104      	bne.n	80013e6 <ESP8266_Init+0x4a>
		// if ESP couldn't connect to WiFi, entry lower mode for specified time and try to reconnect
		Entry_LowPowerMode(ESP_RECONNECTING_TO_WIFI_TIME_INTERVAL);
	}

	return ESP_OK;
}
 80013dc:	b00b      	add	sp, #44	; 0x2c
 80013de:	bd30      	pop	{r4, r5, pc}
		Entry_LowPowerMode(ESP_RECONNECTING_TO_WIFI_TIME_INTERVAL);
 80013e0:	203c      	movs	r0, #60	; 0x3c
 80013e2:	f000 fd33 	bl	8001e4c <Entry_LowPowerMode>
	while((ESP8266_Connect_To_Router(ESP)) == ESP_NOK)
 80013e6:	0020      	movs	r0, r4
 80013e8:	f7ff ff86 	bl	80012f8 <ESP8266_Connect_To_Router>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d0f7      	beq.n	80013e0 <ESP8266_Init+0x44>
	return ESP_OK;
 80013f0:	2001      	movs	r0, #1
 80013f2:	e7f3      	b.n	80013dc <ESP8266_Init+0x40>
 80013f4:	080050cd 	.word	0x080050cd
 80013f8:	0800506e 	.word	0x0800506e

080013fc <ESP8266_SetConnectionMode>:

ESP_status ESP8266_SetConnectionMode(ESP8266_t* ESP, ESP_ConnectionMode mode)
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	0004      	movs	r4, r0
	switch(mode)
 8001400:	2900      	cmp	r1, #0
 8001402:	d009      	beq.n	8001418 <ESP8266_SetConnectionMode+0x1c>
 8001404:	2901      	cmp	r1, #1
 8001406:	d00b      	beq.n	8001420 <ESP8266_SetConnectionMode+0x24>
	case MULTIPLE_CONNECTION:
		UART_send_string("AT+CIPMUX=1\r\n");
		break;
	}

	if(ESP8266_wait_for_msg(ESP, "OK") == ESP_NOK)
 8001408:	0020      	movs	r0, r4
 800140a:	4906      	ldr	r1, [pc, #24]	; (8001424 <ESP8266_SetConnectionMode+0x28>)
 800140c:	f7ff ff1e 	bl	800124c <ESP8266_wait_for_msg>
 8001410:	1e43      	subs	r3, r0, #1
 8001412:	4198      	sbcs	r0, r3
	{
		return ESP_NOK;
	}

	return ESP_OK;
}
 8001414:	b2c0      	uxtb	r0, r0
 8001416:	bd10      	pop	{r4, pc}
		UART_send_string("AT+CIPMUX=0\r\n");
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <ESP8266_SetConnectionMode+0x2c>)
		UART_send_string("AT+CIPMUX=1\r\n");
 800141a:	f000 fa0f 	bl	800183c <UART_send_string>
		break;
 800141e:	e7f3      	b.n	8001408 <ESP8266_SetConnectionMode+0xc>
		UART_send_string("AT+CIPMUX=1\r\n");
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <ESP8266_SetConnectionMode+0x30>)
 8001422:	e7fa      	b.n	800141a <ESP8266_SetConnectionMode+0x1e>
 8001424:	0800506e 	.word	0x0800506e
 8001428:	080050d8 	.word	0x080050d8
 800142c:	080050e6 	.word	0x080050e6

08001430 <ESP8266_Connect_TCP>:


ESP_status ESP8266_Connect_TCP(ESP8266_t* ESP, char* Target_IP, char* PORT, ESP_ConnectionMode mode)
{
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	0016      	movs	r6, r2
 8001434:	000d      	movs	r5, r1
 8001436:	b0a0      	sub	sp, #128	; 0x80
 8001438:	0019      	movs	r1, r3
 800143a:	0004      	movs	r4, r0
	ESP8266_SetConnectionMode(ESP, mode);
 800143c:	f7ff ffde 	bl	80013fc <ESP8266_SetConnectionMode>

	// prepare message
	uint8_t message[128];
	uint8_t length;
	length = sprintf((char*)message, "AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", Target_IP, PORT);
 8001440:	0033      	movs	r3, r6
 8001442:	002a      	movs	r2, r5
 8001444:	4668      	mov	r0, sp
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <ESP8266_Connect_TCP+0x38>)
 8001448:	f003 f982 	bl	8004750 <siprintf>
	UART_send_message((char*)message, length);
 800144c:	b2c1      	uxtb	r1, r0
 800144e:	4668      	mov	r0, sp
 8001450:	f000 fa04 	bl	800185c <UART_send_message>

	if(ESP8266_wait_for_msg(ESP, "OK") == ESP_NOK)
 8001454:	0020      	movs	r0, r4
 8001456:	4905      	ldr	r1, [pc, #20]	; (800146c <ESP8266_Connect_TCP+0x3c>)
 8001458:	f7ff fef8 	bl	800124c <ESP8266_wait_for_msg>
 800145c:	1e43      	subs	r3, r0, #1
 800145e:	4198      	sbcs	r0, r3
 8001460:	b2c0      	uxtb	r0, r0
	{
		return ESP_NOK;
	}

	return ESP_OK;
}
 8001462:	b020      	add	sp, #128	; 0x80
 8001464:	bd70      	pop	{r4, r5, r6, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	080050f4 	.word	0x080050f4
 800146c:	0800506e 	.word	0x0800506e

08001470 <ESP8266_Disconnect_TCP>:

ESP_status ESP8266_Disconnect_TCP(ESP8266_t* ESP)
{
 8001470:	b510      	push	{r4, lr}
 8001472:	0004      	movs	r4, r0
	UART_send_string("AT+CIPCLOSE\r\n");
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <ESP8266_Disconnect_TCP+0x18>)
 8001476:	f000 f9e1 	bl	800183c <UART_send_string>
	ESP8266_wait_for_msg(ESP, "CLOSED");
 800147a:	0020      	movs	r0, r4
 800147c:	4903      	ldr	r1, [pc, #12]	; (800148c <ESP8266_Disconnect_TCP+0x1c>)
 800147e:	f7ff fee5 	bl	800124c <ESP8266_wait_for_msg>
	return ESP_OK;
}
 8001482:	2001      	movs	r0, #1
 8001484:	bd10      	pop	{r4, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	08005110 	.word	0x08005110
 800148c:	0800511e 	.word	0x0800511e

08001490 <ESP8266_TS_Send_Data_MultiField>:


ESP_status ESP8266_TS_Send_Data_MultiField(ESP8266_t* ESP, uint8_t number_of_fields, uint16_t data_buffer[])
{
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	0005      	movs	r5, r0
 8001494:	000e      	movs	r6, r1
 8001496:	0017      	movs	r7, r2
 8001498:	b0b1      	sub	sp, #196	; 0xc4
	while(ESP8266_Connect_TCP(ESP, "184.106.153.149", "80", SINGLE_CONNECTION) == ESP_NOK)
 800149a:	2300      	movs	r3, #0
 800149c:	0028      	movs	r0, r5
 800149e:	4a3b      	ldr	r2, [pc, #236]	; (800158c <ESP8266_TS_Send_Data_MultiField+0xfc>)
 80014a0:	493b      	ldr	r1, [pc, #236]	; (8001590 <ESP8266_TS_Send_Data_MultiField+0x100>)
 80014a2:	f7ff ffc5 	bl	8001430 <ESP8266_Connect_TCP>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d037      	beq.n	800151a <ESP8266_TS_Send_Data_MultiField+0x8a>
		{
			return ESP_NOK;
		}
	}

	char cipsend_buff[25] = {0};
 80014aa:	2400      	movs	r4, #0
 80014ac:	2215      	movs	r2, #21
 80014ae:	0021      	movs	r1, r4
 80014b0:	a801      	add	r0, sp, #4
 80014b2:	9400      	str	r4, [sp, #0]
 80014b4:	f003 f944 	bl	8004740 <memset>
	char field_buff[35] = {0};
 80014b8:	221f      	movs	r2, #31
 80014ba:	0021      	movs	r1, r4
 80014bc:	a808      	add	r0, sp, #32
 80014be:	9407      	str	r4, [sp, #28]
 80014c0:	f003 f93e 	bl	8004740 <memset>
	char message[128] = {0};
 80014c4:	227c      	movs	r2, #124	; 0x7c
 80014c6:	0021      	movs	r1, r4
 80014c8:	a811      	add	r0, sp, #68	; 0x44
 80014ca:	9410      	str	r4, [sp, #64]	; 0x40
 80014cc:	f003 f938 	bl	8004740 <memset>

	// prepare message
	sprintf(message, "GET /update?api_key=%s", API_Key);
 80014d0:	4a30      	ldr	r2, [pc, #192]	; (8001594 <ESP8266_TS_Send_Data_MultiField+0x104>)
 80014d2:	4931      	ldr	r1, [pc, #196]	; (8001598 <ESP8266_TS_Send_Data_MultiField+0x108>)
 80014d4:	a810      	add	r0, sp, #64	; 0x40
 80014d6:	f003 f93b 	bl	8004750 <siprintf>
	for(int i = 1; i < number_of_fields + 1; i++)
 80014da:	3401      	adds	r4, #1
 80014dc:	42a6      	cmp	r6, r4
 80014de:	da24      	bge.n	800152a <ESP8266_TS_Send_Data_MultiField+0x9a>
	{
		sprintf(field_buff, "&field%d=%u", i, data_buffer[i - 1]);
		strcat(message, field_buff);
	}
	strcat(message, "\r\n");
 80014e0:	492e      	ldr	r1, [pc, #184]	; (800159c <ESP8266_TS_Send_Data_MultiField+0x10c>)
 80014e2:	a810      	add	r0, sp, #64	; 0x40
 80014e4:	f003 f954 	bl	8004790 <strcat>

	// send data length information
	sprintf(cipsend_buff, "AT+CIPSEND=%d\r\n", strlen(message));
 80014e8:	a810      	add	r0, sp, #64	; 0x40
 80014ea:	f7fe fe0d 	bl	8000108 <strlen>
 80014ee:	492c      	ldr	r1, [pc, #176]	; (80015a0 <ESP8266_TS_Send_Data_MultiField+0x110>)
 80014f0:	0002      	movs	r2, r0
 80014f2:	4668      	mov	r0, sp
 80014f4:	f003 f92c 	bl	8004750 <siprintf>
	UART_send_message(cipsend_buff, strlen(cipsend_buff));
 80014f8:	4668      	mov	r0, sp
 80014fa:	f7fe fe05 	bl	8000108 <strlen>
 80014fe:	b2c1      	uxtb	r1, r0
 8001500:	4668      	mov	r0, sp
 8001502:	f000 f9ab 	bl	800185c <UART_send_message>

	if(ESP8266_wait_for_msg(ESP, "OK") == ESP_NOK)
 8001506:	0028      	movs	r0, r5
 8001508:	4926      	ldr	r1, [pc, #152]	; (80015a4 <ESP8266_TS_Send_Data_MultiField+0x114>)
 800150a:	f7ff fe9f 	bl	800124c <ESP8266_wait_for_msg>
 800150e:	1e04      	subs	r4, r0, #0
 8001510:	d118      	bne.n	8001544 <ESP8266_TS_Send_Data_MultiField+0xb4>
	{
		ESP8266_Disconnect_TCP(ESP);
 8001512:	0028      	movs	r0, r5
 8001514:	f7ff ffac 	bl	8001470 <ESP8266_Disconnect_TCP>
		return ESP_NOK;
 8001518:	e004      	b.n	8001524 <ESP8266_TS_Send_Data_MultiField+0x94>
		if(ESP8266_Connect_To_Router(ESP) == ESP_NOK)
 800151a:	0028      	movs	r0, r5
 800151c:	f7ff feec 	bl	80012f8 <ESP8266_Connect_To_Router>
 8001520:	1e04      	subs	r4, r0, #0
 8001522:	d1ba      	bne.n	800149a <ESP8266_TS_Send_Data_MultiField+0xa>
		ESP8266_Disconnect_TCP(ESP);
	}

	ESP->ESP8266_status = ESP_OK;
	return ESP_OK;
}
 8001524:	0020      	movs	r0, r4
 8001526:	b031      	add	sp, #196	; 0xc4
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(field_buff, "&field%d=%u", i, data_buffer[i - 1]);
 800152a:	0062      	lsls	r2, r4, #1
 800152c:	1ebb      	subs	r3, r7, #2
 800152e:	5a9b      	ldrh	r3, [r3, r2]
 8001530:	491d      	ldr	r1, [pc, #116]	; (80015a8 <ESP8266_TS_Send_Data_MultiField+0x118>)
 8001532:	0022      	movs	r2, r4
 8001534:	a807      	add	r0, sp, #28
 8001536:	f003 f90b 	bl	8004750 <siprintf>
		strcat(message, field_buff);
 800153a:	a907      	add	r1, sp, #28
 800153c:	a810      	add	r0, sp, #64	; 0x40
 800153e:	f003 f927 	bl	8004790 <strcat>
 8001542:	e7ca      	b.n	80014da <ESP8266_TS_Send_Data_MultiField+0x4a>
	UART_send_message(message, strlen(message)); // send data
 8001544:	a810      	add	r0, sp, #64	; 0x40
 8001546:	f7fe fddf 	bl	8000108 <strlen>
 800154a:	b2c1      	uxtb	r1, r0
 800154c:	a810      	add	r0, sp, #64	; 0x40
 800154e:	f000 f985 	bl	800185c <UART_send_message>
	if(ESP->ESP_RX_Buff.BUFFER_EMPTY_FLAG)
 8001552:	002b      	movs	r3, r5
 8001554:	338b      	adds	r3, #139	; 0x8b
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d007      	beq.n	800156c <ESP8266_TS_Send_Data_MultiField+0xdc>
		ESP8266_Disconnect_TCP(ESP);
 800155c:	0028      	movs	r0, r5
 800155e:	f7ff ff87 	bl	8001470 <ESP8266_Disconnect_TCP>
	ESP->ESP8266_status = ESP_OK;
 8001562:	23c9      	movs	r3, #201	; 0xc9
 8001564:	2401      	movs	r4, #1
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	54ec      	strb	r4, [r5, r3]
	return ESP_OK;
 800156a:	e7db      	b.n	8001524 <ESP8266_TS_Send_Data_MultiField+0x94>
	Parser_clean_string(&ESP->ESP_RX_Buff, ESP->MessageReceive);
 800156c:	002c      	movs	r4, r5
 800156e:	0028      	movs	r0, r5
 8001570:	3413      	adds	r4, #19
 8001572:	34ff      	adds	r4, #255	; 0xff
 8001574:	0021      	movs	r1, r4
 8001576:	3008      	adds	r0, #8
 8001578:	f000 fc0a 	bl	8001d90 <Parser_clean_string>
	if(!(Parser_simple_parse("CLOSED", ESP->MessageReceive)))
 800157c:	0021      	movs	r1, r4
 800157e:	480b      	ldr	r0, [pc, #44]	; (80015ac <ESP8266_TS_Send_Data_MultiField+0x11c>)
 8001580:	f000 fc25 	bl	8001dce <Parser_simple_parse>
 8001584:	2800      	cmp	r0, #0
 8001586:	d1ec      	bne.n	8001562 <ESP8266_TS_Send_Data_MultiField+0xd2>
 8001588:	e7e8      	b.n	800155c <ESP8266_TS_Send_Data_MultiField+0xcc>
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	08005125 	.word	0x08005125
 8001590:	08005128 	.word	0x08005128
 8001594:	0800517e 	.word	0x0800517e
 8001598:	08005138 	.word	0x08005138
 800159c:	08005069 	.word	0x08005069
 80015a0:	0800515b 	.word	0x0800515b
 80015a4:	0800506e 	.word	0x0800506e
 80015a8:	0800514f 	.word	0x0800514f
 80015ac:	0800511e 	.word	0x0800511e

080015b0 <read16>:
INA219_t INA_Sensor;

static uint16_t read16(uint8_t memory_addres)
{
	uint8_t tmp_buff[2];
	HAL_I2C_Mem_Read(INA_Sensor.hi2c, INA_Sensor.I2C_Addr, memory_addres, 1, tmp_buff, 2, INA_I2C_Timeout);
 80015b0:	2364      	movs	r3, #100	; 0x64
{
 80015b2:	b510      	push	{r4, lr}
	HAL_I2C_Mem_Read(INA_Sensor.hi2c, INA_Sensor.I2C_Addr, memory_addres, 1, tmp_buff, 2, INA_I2C_Timeout);
 80015b4:	0002      	movs	r2, r0
 80015b6:	4808      	ldr	r0, [pc, #32]	; (80015d8 <read16+0x28>)
{
 80015b8:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(INA_Sensor.hi2c, INA_Sensor.I2C_Addr, memory_addres, 1, tmp_buff, 2, INA_I2C_Timeout);
 80015ba:	7801      	ldrb	r1, [r0, #0]
 80015bc:	ac05      	add	r4, sp, #20
 80015be:	9302      	str	r3, [sp, #8]
 80015c0:	3b62      	subs	r3, #98	; 0x62
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	9400      	str	r4, [sp, #0]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	6840      	ldr	r0, [r0, #4]
 80015ca:	f001 fab9 	bl	8002b40 <HAL_I2C_Mem_Read>

	return (uint16_t)(tmp_buff[0] << 8) | (tmp_buff[1]);
 80015ce:	8820      	ldrh	r0, [r4, #0]
 80015d0:	ba40      	rev16	r0, r0
 80015d2:	b280      	uxth	r0, r0
}
 80015d4:	b006      	add	sp, #24
 80015d6:	bd10      	pop	{r4, pc}
 80015d8:	200000c0 	.word	0x200000c0

080015dc <write16>:


static void write16(uint8_t memory_addres, uint16_t data_to_write)
{
 80015dc:	b510      	push	{r4, lr}
	uint8_t tmp_buff[2];
	tmp_buff[0] = data_to_write >> 8;
	tmp_buff[1] = data_to_write;
	HAL_I2C_Mem_Write(INA_Sensor.hi2c, INA_Sensor.I2C_Addr, memory_addres, 1, tmp_buff, 2, INA_I2C_Timeout);
 80015de:	2464      	movs	r4, #100	; 0x64
{
 80015e0:	b086      	sub	sp, #24
	HAL_I2C_Mem_Write(INA_Sensor.hi2c, INA_Sensor.I2C_Addr, memory_addres, 1, tmp_buff, 2, INA_I2C_Timeout);
 80015e2:	0002      	movs	r2, r0
 80015e4:	4807      	ldr	r0, [pc, #28]	; (8001604 <write16+0x28>)
	tmp_buff[0] = data_to_write >> 8;
 80015e6:	ab05      	add	r3, sp, #20
 80015e8:	ba49      	rev16	r1, r1
 80015ea:	8019      	strh	r1, [r3, #0]
	HAL_I2C_Mem_Write(INA_Sensor.hi2c, INA_Sensor.I2C_Addr, memory_addres, 1, tmp_buff, 2, INA_I2C_Timeout);
 80015ec:	7801      	ldrb	r1, [r0, #0]
 80015ee:	9402      	str	r4, [sp, #8]
 80015f0:	3c62      	subs	r4, #98	; 0x62
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	9401      	str	r4, [sp, #4]
 80015f6:	2301      	movs	r3, #1
 80015f8:	6840      	ldr	r0, [r0, #4]
 80015fa:	f001 f9e7 	bl	80029cc <HAL_I2C_Mem_Write>
}
 80015fe:	b006      	add	sp, #24
 8001600:	bd10      	pop	{r4, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	200000c0 	.word	0x200000c0

08001608 <INA219_Set_VoltageRange>:


void INA219_Set_VoltageRange(INA219_VoltageRange range)
{
 8001608:	b510      	push	{r4, lr}
 800160a:	0004      	movs	r4, r0
	uint16_t tmp = read16(CONFIGURATION_REG);
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ffcf 	bl	80015b0 <read16>
	tmp &= 0xDFFF;
 8001612:	4904      	ldr	r1, [pc, #16]	; (8001624 <INA219_Set_VoltageRange+0x1c>)

	tmp |= range << 13;
 8001614:	0364      	lsls	r4, r4, #13
	tmp &= 0xDFFF;
 8001616:	4001      	ands	r1, r0
	tmp |= range << 13;
 8001618:	4321      	orrs	r1, r4

	write16(CONFIGURATION_REG, tmp);
 800161a:	2000      	movs	r0, #0
 800161c:	b289      	uxth	r1, r1
 800161e:	f7ff ffdd 	bl	80015dc <write16>

}
 8001622:	bd10      	pop	{r4, pc}
 8001624:	ffffdfff 	.word	0xffffdfff

08001628 <INA219_Set_Range>:


void INA219_Set_Range(INA219_Modes Range)
{
 8001628:	b510      	push	{r4, lr}
 800162a:	0004      	movs	r4, r0
	uint16_t tmp = read16(CONFIGURATION_REG);
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff ffbf 	bl	80015b0 <read16>
	tmp &= 0xE7FF; // clear pending bits
 8001632:	490a      	ldr	r1, [pc, #40]	; (800165c <INA219_Set_Range+0x34>)
 8001634:	4001      	ands	r1, r0

	switch(Range)
 8001636:	2c02      	cmp	r4, #2
 8001638:	d00a      	beq.n	8001650 <INA219_Set_Range+0x28>
 800163a:	2c03      	cmp	r4, #3
 800163c:	d00b      	beq.n	8001656 <INA219_Set_Range+0x2e>
 800163e:	2c01      	cmp	r4, #1
 8001640:	d102      	bne.n	8001648 <INA219_Set_Range+0x20>
	{
	case Range_40mV:
		break;
	case Range_80mV:
		tmp |= 1 << 11;
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	011b      	lsls	r3, r3, #4
		break;
	case Range_160mV:
		tmp |= 1 << 12;
		break;
	case Range_320mV:
		tmp |= 0x03 << 11;
 8001646:	4319      	orrs	r1, r3
		break;
	}

	write16(CONFIGURATION_REG, tmp);
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff ffc7 	bl	80015dc <write16>
}
 800164e:	bd10      	pop	{r4, pc}
		tmp |= 1 << 12;
 8001650:	2380      	movs	r3, #128	; 0x80
		tmp |= 0x03 << 11;
 8001652:	015b      	lsls	r3, r3, #5
 8001654:	e7f7      	b.n	8001646 <INA219_Set_Range+0x1e>
 8001656:	23c0      	movs	r3, #192	; 0xc0
 8001658:	e7fb      	b.n	8001652 <INA219_Set_Range+0x2a>
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	0000e7ff 	.word	0x0000e7ff

08001660 <INA219_Set_ADC_Mode>:


void INA219_Set_ADC_Mode(INA219_ADC_Mode ADC_resolution, uint8_t type)
{
 8001660:	b570      	push	{r4, r5, r6, lr}
 8001662:	0004      	movs	r4, r0
	uint16_t tmp = read16(CONFIGURATION_REG);
 8001664:	2000      	movs	r0, #0
{
 8001666:	000d      	movs	r5, r1
	uint16_t tmp = read16(CONFIGURATION_REG);
 8001668:	f7ff ffa2 	bl	80015b0 <read16>
 800166c:	0001      	movs	r1, r0

	if(type == BUS_ADC)
 800166e:	2d00      	cmp	r5, #0
 8001670:	d113      	bne.n	800169a <INA219_Set_ADC_Mode+0x3a>
	{
		tmp &= 0xF8F7; // clear pending bits
 8001672:	4811      	ldr	r0, [pc, #68]	; (80016b8 <INA219_Set_ADC_Mode+0x58>)
 8001674:	4001      	ands	r1, r0
		switch(ADC_resolution)
 8001676:	2c02      	cmp	r4, #2
 8001678:	d008      	beq.n	800168c <INA219_Set_ADC_Mode+0x2c>
 800167a:	2c03      	cmp	r4, #3
 800167c:	d00a      	beq.n	8001694 <INA219_Set_ADC_Mode+0x34>
		{
		case ADC_9bit:
			break;
		case ADC_10bit:
			tmp |= 1 << 7;
 800167e:	2380      	movs	r3, #128	; 0x80
		switch(ADC_resolution)
 8001680:	2c01      	cmp	r4, #1
 8001682:	d005      	beq.n	8001690 <INA219_Set_ADC_Mode+0x30>
			tmp |= 1 << 6;
			break;
		}
	}

	write16(CONFIGURATION_REG, tmp);
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff ffa9 	bl	80015dc <write16>
}
 800168a:	bd70      	pop	{r4, r5, r6, pc}
			tmp |= 1 << 8;
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	005b      	lsls	r3, r3, #1
			tmp |= 1 << 6;
 8001690:	4319      	orrs	r1, r3
			break;
 8001692:	e7f7      	b.n	8001684 <INA219_Set_ADC_Mode+0x24>
			tmp |= 1 << 10;
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	e7fa      	b.n	8001690 <INA219_Set_ADC_Mode+0x30>
		tmp &= 0xFF87; // clear pending bits
 800169a:	2378      	movs	r3, #120	; 0x78
 800169c:	4399      	bics	r1, r3
 800169e:	b289      	uxth	r1, r1
		switch(ADC_resolution)
 80016a0:	2c02      	cmp	r4, #2
 80016a2:	d005      	beq.n	80016b0 <INA219_Set_ADC_Mode+0x50>
 80016a4:	2c03      	cmp	r4, #3
 80016a6:	d005      	beq.n	80016b4 <INA219_Set_ADC_Mode+0x54>
			tmp |= 1 << 3;
 80016a8:	3b70      	subs	r3, #112	; 0x70
		switch(ADC_resolution)
 80016aa:	2c01      	cmp	r4, #1
 80016ac:	d1ea      	bne.n	8001684 <INA219_Set_ADC_Mode+0x24>
 80016ae:	e7ef      	b.n	8001690 <INA219_Set_ADC_Mode+0x30>
			tmp |= 1 << 4;
 80016b0:	2310      	movs	r3, #16
 80016b2:	e7ed      	b.n	8001690 <INA219_Set_ADC_Mode+0x30>
			tmp |= 1 << 6;
 80016b4:	2340      	movs	r3, #64	; 0x40
 80016b6:	e7eb      	b.n	8001690 <INA219_Set_ADC_Mode+0x30>
 80016b8:	0000f8f7 	.word	0x0000f8f7

080016bc <INA219_Reset>:


void INA219_Reset()
{
 80016bc:	b510      	push	{r4, lr}
	uint16_t tmp = read16(CONFIGURATION_REG);
 80016be:	2000      	movs	r0, #0
 80016c0:	f7ff ff76 	bl	80015b0 <read16>

	tmp |= 1<<15; // set RST bit
 80016c4:	4903      	ldr	r1, [pc, #12]	; (80016d4 <INA219_Reset+0x18>)
 80016c6:	4301      	orrs	r1, r0

	write16(CONFIGURATION_REG, tmp);
 80016c8:	b289      	uxth	r1, r1
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff ff86 	bl	80015dc <write16>
}
 80016d0:	bd10      	pop	{r4, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	ffff8000 	.word	0xffff8000

080016d8 <INA219_Set_Power_Mode>:

void INA219_Set_Power_Mode(INA219_Power_Modes Mode)
{
 80016d8:	b510      	push	{r4, lr}
 80016da:	0004      	movs	r4, r0
	uint16_t tmp = read16(CONFIGURATION_REG);
 80016dc:	2000      	movs	r0, #0
 80016de:	f7ff ff67 	bl	80015b0 <read16>

	tmp &= 0x7FF8;
 80016e2:	4906      	ldr	r1, [pc, #24]	; (80016fc <INA219_Set_Power_Mode+0x24>)
	if(Mode < 0) Mode = 0;
	if(Mode > 7) Mode = 7;

	tmp |= Mode;
 80016e4:	1c23      	adds	r3, r4, #0
	tmp &= 0x7FF8;
 80016e6:	4001      	ands	r1, r0
	tmp |= Mode;
 80016e8:	2c07      	cmp	r4, #7
 80016ea:	d900      	bls.n	80016ee <INA219_Set_Power_Mode+0x16>
 80016ec:	2307      	movs	r3, #7
 80016ee:	b2db      	uxtb	r3, r3

	write16(CONFIGURATION_REG, tmp);
 80016f0:	2000      	movs	r0, #0
 80016f2:	4319      	orrs	r1, r3
 80016f4:	f7ff ff72 	bl	80015dc <write16>
}
 80016f8:	bd10      	pop	{r4, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	00007ff8 	.word	0x00007ff8

08001700 <INA219_Get_Data_OneShot>:


void INA219_Get_Data_OneShot(uint16_t* bus_voltage, uint8_t* current)
{
 8001700:	b570      	push	{r4, r5, r6, lr}
 8001702:	0006      	movs	r6, r0
	INA219_Set_Power_Mode(SHUNT_AND_BUS_TRIGG);
 8001704:	2003      	movs	r0, #3
{
 8001706:	000d      	movs	r5, r1
	INA219_Set_Power_Mode(SHUNT_AND_BUS_TRIGG);
 8001708:	f7ff ffe6 	bl	80016d8 <INA219_Set_Power_Mode>
	int16_t current_raw;
	uint16_t shunt_raw;
	uint16_t bus_raw;
	uint16_t bus_voltage_val;

	power_raw = read16(POWER_REG);
 800170c:	2003      	movs	r0, #3
 800170e:	f7ff ff4f 	bl	80015b0 <read16>
	current_raw = read16(CURRENT_REG);
 8001712:	2004      	movs	r0, #4
 8001714:	f7ff ff4c 	bl	80015b0 <read16>
 8001718:	0004      	movs	r4, r0
	shunt_raw = read16(SHUNT_VOLTAGE_REG);
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff ff48 	bl	80015b0 <read16>
	bus_raw = read16(BUS_VOLTAGE_REG);
 8001720:	2002      	movs	r0, #2
 8001722:	f7ff ff45 	bl	80015b0 <read16>
	bus_voltage_val = bus_raw / 2;
 8001726:	0840      	lsrs	r0, r0, #1
	*bus_voltage = bus_voltage_val;
 8001728:	8030      	strh	r0, [r6, #0]
	//*power = (power_raw * INA_Sensor.Current_LSB * 20);
	*current = current_raw * INA_Sensor.Current_LSB * 1000;
 800172a:	b220      	sxth	r0, r4
 800172c:	f7ff fab6 	bl	8000c9c <__aeabi_i2f>
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <INA219_Get_Data_OneShot+0x48>)
 8001732:	6899      	ldr	r1, [r3, #8]
 8001734:	f7fe ffb0 	bl	8000698 <__aeabi_fmul>
 8001738:	4904      	ldr	r1, [pc, #16]	; (800174c <INA219_Get_Data_OneShot+0x4c>)
 800173a:	f7fe ffad 	bl	8000698 <__aeabi_fmul>
 800173e:	f7fe fec7 	bl	80004d0 <__aeabi_f2uiz>
 8001742:	7028      	strb	r0, [r5, #0]
}
 8001744:	bd70      	pop	{r4, r5, r6, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	200000c0 	.word	0x200000c0
 800174c:	447a0000 	.word	0x447a0000

08001750 <INA219_Init>:

uint8_t INA219_Init(I2C_HandleTypeDef* hi2c, uint8_t device_addr)
{
 8001750:	b570      	push	{r4, r5, r6, lr}
	INA_Sensor.I2C_Addr = device_addr << 1;
 8001752:	4c14      	ldr	r4, [pc, #80]	; (80017a4 <INA219_Init+0x54>)
 8001754:	0049      	lsls	r1, r1, #1
 8001756:	7021      	strb	r1, [r4, #0]
	INA_Sensor.hi2c = hi2c;
 8001758:	6060      	str	r0, [r4, #4]

	INA219_Reset();
 800175a:	f7ff ffaf 	bl	80016bc <INA219_Reset>
	// Check if connection works properly
	uint16_t config_value = 0x399F;
	uint16_t config_tmp_val = read16(CONFIGURATION_REG);
 800175e:	2000      	movs	r0, #0
 8001760:	f7ff ff26 	bl	80015b0 <read16>
	if(config_value != config_tmp_val)
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <INA219_Init+0x58>)
	{
		return 1; // error
 8001766:	2501      	movs	r5, #1
	if(config_value != config_tmp_val)
 8001768:	4298      	cmp	r0, r3
 800176a:	d119      	bne.n	80017a0 <INA219_Init+0x50>
	}

	// Programming CALIBRATION_REG register
	INA_Sensor.Current_LSB = MAXIMUM_EXPECTED_CURRENT / pow(2, 15);
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <INA219_Init+0x5c>)
	//if(INA_Sensor.Current_LSB < 1) INA_Sensor.Current_LSB = 1;

	INA_Sensor.Cal_Reg_Value = truncf(FIXED_SCALING_FACTOR / (INA_Sensor.Current_LSB * SHUNT_RESISTOR_VALUE));
 	write16(CALIBRATION_REG, INA_Sensor.Cal_Reg_Value);
 800176e:	4910      	ldr	r1, [pc, #64]	; (80017b0 <INA219_Init+0x60>)
	INA_Sensor.Current_LSB = MAXIMUM_EXPECTED_CURRENT / pow(2, 15);
 8001770:	60a3      	str	r3, [r4, #8]
	INA_Sensor.Cal_Reg_Value = truncf(FIXED_SCALING_FACTOR / (INA_Sensor.Current_LSB * SHUNT_RESISTOR_VALUE));
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <INA219_Init+0x64>)
 	write16(CALIBRATION_REG, INA_Sensor.Cal_Reg_Value);
 8001774:	2005      	movs	r0, #5
	INA_Sensor.Cal_Reg_Value = truncf(FIXED_SCALING_FACTOR / (INA_Sensor.Current_LSB * SHUNT_RESISTOR_VALUE));
 8001776:	81a3      	strh	r3, [r4, #12]
 	write16(CALIBRATION_REG, INA_Sensor.Cal_Reg_Value);
 8001778:	f7ff ff30 	bl	80015dc <write16>

	// Set sensor mode
	INA219_Set_Range(Range_40mV);
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff ff53 	bl	8001628 <INA219_Set_Range>
	INA219_Set_VoltageRange(Voltage_16V);
 8001782:	2000      	movs	r0, #0
 8001784:	f7ff ff40 	bl	8001608 <INA219_Set_VoltageRange>

	// Set ADC resolution
	INA219_Set_ADC_Mode(ADC_12bit, BUS_ADC);
 8001788:	2100      	movs	r1, #0
 800178a:	2003      	movs	r0, #3
 800178c:	f7ff ff68 	bl	8001660 <INA219_Set_ADC_Mode>
	INA219_Set_ADC_Mode(ADC_12bit, SHUNT_RESISTOR_ADC);
 8001790:	0029      	movs	r1, r5
 8001792:	2003      	movs	r0, #3
 8001794:	f7ff ff64 	bl	8001660 <INA219_Set_ADC_Mode>

	// Set power mode
	INA219_Set_Power_Mode(SHUNT_AND_BUS_TRIGG);
 8001798:	2003      	movs	r0, #3
 800179a:	f7ff ff9d 	bl	80016d8 <INA219_Set_Power_Mode>

	return 0;
 800179e:	2500      	movs	r5, #0
}
 80017a0:	0028      	movs	r0, r5
 80017a2:	bd70      	pop	{r4, r5, r6, pc}
 80017a4:	200000c0 	.word	0x200000c0
 80017a8:	0000399f 	.word	0x0000399f
 80017ac:	374ccccd 	.word	0x374ccccd
 80017b0:	00008312 	.word	0x00008312
 80017b4:	ffff8312 	.word	0xffff8312

080017b8 <RingBuffer_Init>:
#include "RingBuffer.h"


void RingBuffer_Init(RingBuffer_t* RingBuffer)
{
	RingBuffer->head = 0;
 80017b8:	2300      	movs	r3, #0
	RingBuffer->tail = 0;
	RingBuffer->BUFFER_FULL_FLAG = 0;
 80017ba:	0002      	movs	r2, r0
	RingBuffer->BUFFER_EMPTY_FLAG = 1;
 80017bc:	2101      	movs	r1, #1
	RingBuffer->tail = 0;
 80017be:	7003      	strb	r3, [r0, #0]
	RingBuffer->head = 0;
 80017c0:	7043      	strb	r3, [r0, #1]
	RingBuffer->BUFFER_FULL_FLAG = 0;
 80017c2:	3282      	adds	r2, #130	; 0x82
	RingBuffer->data_counter = 0;
 80017c4:	3084      	adds	r0, #132	; 0x84
	RingBuffer->BUFFER_FULL_FLAG = 0;
 80017c6:	7013      	strb	r3, [r2, #0]
	RingBuffer->BUFFER_EMPTY_FLAG = 1;
 80017c8:	7051      	strb	r1, [r2, #1]
	RingBuffer->data_counter = 0;
 80017ca:	7003      	strb	r3, [r0, #0]
}
 80017cc:	4770      	bx	lr

080017ce <RB_Buff_Write>:
	while(*string++ && (!RingBuffer->BUFFER_FULL_FLAG));
}


void RB_Buff_Write(RingBuffer_t* RingBuffer, uint8_t value)
{
 80017ce:	b530      	push	{r4, r5, lr}
	if(((RingBuffer->head + 1) % BUFFER_SIZE) != RingBuffer->tail)
 80017d0:	247f      	movs	r4, #127	; 0x7f
 80017d2:	7842      	ldrb	r2, [r0, #1]
 80017d4:	1c53      	adds	r3, r2, #1
 80017d6:	4023      	ands	r3, r4
 80017d8:	7804      	ldrb	r4, [r0, #0]
 80017da:	42a3      	cmp	r3, r4
 80017dc:	d00b      	beq.n	80017f6 <RB_Buff_Write+0x28>
	{
		RingBuffer->BUFFER_EMPTY_FLAG = 0;
 80017de:	0004      	movs	r4, r0
 80017e0:	2500      	movs	r5, #0
		RingBuffer->buffer[RingBuffer->head] = value;
 80017e2:	1882      	adds	r2, r0, r2
		RingBuffer->BUFFER_EMPTY_FLAG = 0;
 80017e4:	3483      	adds	r4, #131	; 0x83
 80017e6:	7025      	strb	r5, [r4, #0]
		RingBuffer->buffer[RingBuffer->head] = value;
 80017e8:	7091      	strb	r1, [r2, #2]
		RingBuffer->head++;
		RingBuffer->head %= BUFFER_SIZE;
 80017ea:	7043      	strb	r3, [r0, #1]
		RingBuffer->data_counter++;
 80017ec:	3084      	adds	r0, #132	; 0x84
 80017ee:	7803      	ldrb	r3, [r0, #0]
 80017f0:	3301      	adds	r3, #1
	}
	else
	{
		RingBuffer->BUFFER_FULL_FLAG = 1;
 80017f2:	7003      	strb	r3, [r0, #0]
	}
}
 80017f4:	bd30      	pop	{r4, r5, pc}
		RingBuffer->BUFFER_FULL_FLAG = 1;
 80017f6:	2301      	movs	r3, #1
 80017f8:	3082      	adds	r0, #130	; 0x82
 80017fa:	e7fa      	b.n	80017f2 <RB_Buff_Write+0x24>

080017fc <RB_Buff_Read>:



void RB_Buff_Read(RingBuffer_t* RingBuffer, uint8_t* data)
{
 80017fc:	b510      	push	{r4, lr}
	if(RingBuffer->tail != RingBuffer->head)
 80017fe:	7803      	ldrb	r3, [r0, #0]
 8001800:	7842      	ldrb	r2, [r0, #1]
 8001802:	429a      	cmp	r2, r3
 8001804:	d010      	beq.n	8001828 <RB_Buff_Read+0x2c>
	{
		RingBuffer->BUFFER_FULL_FLAG = 0;
 8001806:	0002      	movs	r2, r0
 8001808:	2400      	movs	r4, #0
 800180a:	3282      	adds	r2, #130	; 0x82
 800180c:	7014      	strb	r4, [r2, #0]
		*data = RingBuffer->buffer[RingBuffer->tail];
		RingBuffer->tail++;
		RingBuffer->tail %= BUFFER_SIZE;
 800180e:	227f      	movs	r2, #127	; 0x7f
		*data = RingBuffer->buffer[RingBuffer->tail];
 8001810:	18c3      	adds	r3, r0, r3
 8001812:	789b      	ldrb	r3, [r3, #2]
 8001814:	700b      	strb	r3, [r1, #0]
		RingBuffer->tail++;
 8001816:	7803      	ldrb	r3, [r0, #0]
 8001818:	3301      	adds	r3, #1
		RingBuffer->tail %= BUFFER_SIZE;
 800181a:	4013      	ands	r3, r2
 800181c:	7003      	strb	r3, [r0, #0]
		RingBuffer->data_counter--;
 800181e:	3084      	adds	r0, #132	; 0x84
 8001820:	7803      	ldrb	r3, [r0, #0]
 8001822:	3b01      	subs	r3, #1
	}

	else
	{
		RingBuffer->BUFFER_EMPTY_FLAG = 1;
 8001824:	7003      	strb	r3, [r0, #0]
	}
}
 8001826:	bd10      	pop	{r4, pc}
		RingBuffer->BUFFER_EMPTY_FLAG = 1;
 8001828:	2301      	movs	r3, #1
 800182a:	3083      	adds	r0, #131	; 0x83
 800182c:	e7fa      	b.n	8001824 <RB_Buff_Read+0x28>

0800182e <RB_Flush>:
}

void RB_Flush(RingBuffer_t* RingBuffer)
{
	// clear buffer
	RingBuffer->head = 0;
 800182e:	2300      	movs	r3, #0
	RingBuffer->tail = 0;
 8001830:	7003      	strb	r3, [r0, #0]
	RingBuffer->head = 0;
 8001832:	7043      	strb	r3, [r0, #1]
	RingBuffer->data_counter = 0;
 8001834:	3084      	adds	r0, #132	; 0x84
 8001836:	7003      	strb	r3, [r0, #0]
}
 8001838:	4770      	bx	lr
	...

0800183c <UART_send_string>:
 */

#include "Utilis.h"

void UART_send_string(char* message)
{
 800183c:	b500      	push	{lr}
 800183e:	b091      	sub	sp, #68	; 0x44
 8001840:	0001      	movs	r1, r0
	uint8_t length;
	uint8_t message_buf[64];
	length = sprintf((char*)message_buf, message);
 8001842:	4668      	mov	r0, sp
 8001844:	f002 ff84 	bl	8004750 <siprintf>
	HAL_UART_Transmit(UART, message_buf, length, 100);
 8001848:	2364      	movs	r3, #100	; 0x64
 800184a:	b2c2      	uxtb	r2, r0
 800184c:	4669      	mov	r1, sp
 800184e:	4802      	ldr	r0, [pc, #8]	; (8001858 <UART_send_string+0x1c>)
 8001850:	f002 fdec 	bl	800442c <HAL_UART_Transmit>
}
 8001854:	b011      	add	sp, #68	; 0x44
 8001856:	bd00      	pop	{pc}
 8001858:	20000428 	.word	0x20000428

0800185c <UART_send_message>:

void UART_send_message(char* string, uint8_t string_size)
{
 800185c:	b510      	push	{r4, lr}
	HAL_UART_Transmit(UART, (uint8_t*)string, string_size, 100);
 800185e:	000a      	movs	r2, r1
 8001860:	2364      	movs	r3, #100	; 0x64
 8001862:	0001      	movs	r1, r0
 8001864:	4801      	ldr	r0, [pc, #4]	; (800186c <UART_send_message+0x10>)
 8001866:	f002 fde1 	bl	800442c <HAL_UART_Transmit>
}
 800186a:	bd10      	pop	{r4, pc}
 800186c:	20000428 	.word	0x20000428

08001870 <delay_init>:

#include "main.h"
#include "delay.h"

void delay_init()
{
 8001870:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(_TIMER);
 8001872:	4802      	ldr	r0, [pc, #8]	; (800187c <delay_init+0xc>)
 8001874:	f002 f8f2 	bl	8003a5c <HAL_TIM_Base_Start>
}
 8001878:	bd10      	pop	{r4, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	200003a0 	.word	0x200003a0

08001880 <delay_us>:



void delay_us(uint16_t us)
{
	__HAL_TIM_SET_COUNTER(_TIMER, 0); // set CNT register to 0
 8001880:	2200      	movs	r2, #0
 8001882:	4b03      	ldr	r3, [pc, #12]	; (8001890 <delay_us+0x10>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(_TIMER) < us); // wait until timer reach us
 8001888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188a:	4282      	cmp	r2, r0
 800188c:	d3fc      	bcc.n	8001888 <delay_us+0x8>
}
 800188e:	4770      	bx	lr
 8001890:	200003a0 	.word	0x200003a0

08001894 <delay_ms>:


void delay_ms(uint16_t ms)
{
 8001894:	b570      	push	{r4, r5, r6, lr}
	for(int i=0;i<ms;i++)
	{
		delay_us(1000);
 8001896:	26fa      	movs	r6, #250	; 0xfa
{
 8001898:	0005      	movs	r5, r0
	for(int i=0;i<ms;i++)
 800189a:	2400      	movs	r4, #0
		delay_us(1000);
 800189c:	00b6      	lsls	r6, r6, #2
	for(int i=0;i<ms;i++)
 800189e:	42a5      	cmp	r5, r4
 80018a0:	dc00      	bgt.n	80018a4 <delay_ms+0x10>
	}
}
 80018a2:	bd70      	pop	{r4, r5, r6, pc}
		delay_us(1000);
 80018a4:	0030      	movs	r0, r6
 80018a6:	f7ff ffeb 	bl	8001880 <delay_us>
	for(int i=0;i<ms;i++)
 80018aa:	3401      	adds	r4, #1
 80018ac:	e7f7      	b.n	800189e <delay_ms+0xa>

080018ae <read_byte>:
	while((HAL_GPIO_ReadPin(sensor->Port, sensor->Pin)));
}


static uint8_t read_byte(dht11_sensor* sensor)
{
 80018ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b0:	0004      	movs	r4, r0
 80018b2:	2500      	movs	r5, #0
 80018b4:	2607      	movs	r6, #7
 80018b6:	2701      	movs	r7, #1
	uint8_t byte;
	for(int i=0; i<8; i++)
	{
		while(!(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin)));
 80018b8:	88a1      	ldrh	r1, [r4, #4]
 80018ba:	6820      	ldr	r0, [r4, #0]
 80018bc:	f000 fede 	bl	800267c <HAL_GPIO_ReadPin>
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d0f9      	beq.n	80018b8 <read_byte+0xa>
		delay_us(TRANSMISION_LOGIC_0_TIME);
 80018c4:	2028      	movs	r0, #40	; 0x28
 80018c6:	f7ff ffdb 	bl	8001880 <delay_us>
		if(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin))
 80018ca:	88a1      	ldrh	r1, [r4, #4]
 80018cc:	6820      	ldr	r0, [r4, #0]
 80018ce:	f000 fed5 	bl	800267c <HAL_GPIO_ReadPin>
 80018d2:	003a      	movs	r2, r7
 80018d4:	b26b      	sxtb	r3, r5
 80018d6:	40b2      	lsls	r2, r6
		}

		else
		{
			// there is logic '0'
			byte &= ~(1<<(7-i));
 80018d8:	001d      	movs	r5, r3
 80018da:	b252      	sxtb	r2, r2
 80018dc:	4395      	bics	r5, r2
 80018de:	b2ed      	uxtb	r5, r5
		if(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin))
 80018e0:	2800      	cmp	r0, #0
 80018e2:	d001      	beq.n	80018e8 <read_byte+0x3a>
			byte |= (1<<(7-i));
 80018e4:	4313      	orrs	r3, r2
 80018e6:	b2dd      	uxtb	r5, r3
		}
		//wait for pin to go low
		while(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin));
 80018e8:	88a1      	ldrh	r1, [r4, #4]
 80018ea:	6820      	ldr	r0, [r4, #0]
 80018ec:	f000 fec6 	bl	800267c <HAL_GPIO_ReadPin>
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d1f9      	bne.n	80018e8 <read_byte+0x3a>
	for(int i=0; i<8; i++)
 80018f4:	3e01      	subs	r6, #1
 80018f6:	d2df      	bcs.n	80018b8 <read_byte+0xa>
	}

	return byte;
}
 80018f8:	0028      	movs	r0, r5
 80018fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080018fc <DHT11_Init>:
	sensor->Port = _PORT;
 80018fc:	6001      	str	r1, [r0, #0]
	sensor->Pin = _PIN;
 80018fe:	8082      	strh	r2, [r0, #4]
}
 8001900:	4770      	bx	lr

08001902 <DHT11_get_data>:
	*temp_val = temp_integral;
}


void DHT11_get_data(dht11_sensor* sensor, uint8_t* humidity_val, int8_t* temp_val, uint8_t* check_sum)
{
 8001902:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001904:	0004      	movs	r4, r0
 8001906:	b08b      	sub	sp, #44	; 0x2c
 8001908:	9202      	str	r2, [sp, #8]
 800190a:	9101      	str	r1, [sp, #4]
	HAL_GPIO_WritePin(sensor->Port, sensor->Pin, GPIO_PIN_RESET); // set Data pin to LOW
 800190c:	8881      	ldrh	r1, [r0, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	6800      	ldr	r0, [r0, #0]
{
 8001912:	001f      	movs	r7, r3
	HAL_GPIO_WritePin(sensor->Port, sensor->Pin, GPIO_PIN_RESET); // set Data pin to LOW
 8001914:	f000 feb8 	bl	8002688 <HAL_GPIO_WritePin>
	delay_ms(18);
 8001918:	2012      	movs	r0, #18
 800191a:	f7ff ffbb 	bl	8001894 <delay_ms>
	HAL_GPIO_WritePin(sensor->Port, sensor->Pin, GPIO_PIN_SET); // set Data pin to HIGH
 800191e:	2201      	movs	r2, #1
 8001920:	88a1      	ldrh	r1, [r4, #4]
 8001922:	6820      	ldr	r0, [r4, #0]
 8001924:	f000 feb0 	bl	8002688 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef gpio_data = {0};
 8001928:	2300      	movs	r3, #0
	gpio_data.Pin = sensor->Pin;
 800192a:	88a2      	ldrh	r2, [r4, #4]
	HAL_GPIO_Init(sensor->Port, &gpio_data);
 800192c:	a905      	add	r1, sp, #20
 800192e:	6820      	ldr	r0, [r4, #0]
	GPIO_InitTypeDef gpio_data = {0};
 8001930:	9309      	str	r3, [sp, #36]	; 0x24
	gpio_data.Pin = sensor->Pin;
 8001932:	9205      	str	r2, [sp, #20]
	gpio_data.Mode = GPIO_MODE_INPUT;
 8001934:	9306      	str	r3, [sp, #24]
	gpio_data.Pull = GPIO_NOPULL;
 8001936:	9307      	str	r3, [sp, #28]
	gpio_data.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(sensor->Port, &gpio_data);
 800193a:	f000 fde7 	bl	800250c <HAL_GPIO_Init>
	delay_us(RESPONSE_TIMEOUT);
 800193e:	2028      	movs	r0, #40	; 0x28
 8001940:	f7ff ff9e 	bl	8001880 <delay_us>
	if(!(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin)))
 8001944:	88a1      	ldrh	r1, [r4, #4]
 8001946:	6820      	ldr	r0, [r4, #0]
 8001948:	f000 fe98 	bl	800267c <HAL_GPIO_ReadPin>
 800194c:	2800      	cmp	r0, #0
 800194e:	d102      	bne.n	8001956 <DHT11_get_data+0x54>
		delay_us(LOW_HIGH_RESPONSE_TIME);
 8001950:	3050      	adds	r0, #80	; 0x50
 8001952:	f7ff ff95 	bl	8001880 <delay_us>
	while((HAL_GPIO_ReadPin(sensor->Port, sensor->Pin)));
 8001956:	88a1      	ldrh	r1, [r4, #4]
 8001958:	6820      	ldr	r0, [r4, #0]
 800195a:	f000 fe8f 	bl	800267c <HAL_GPIO_ReadPin>
 800195e:	1e05      	subs	r5, r0, #0
 8001960:	d1f9      	bne.n	8001956 <DHT11_get_data+0x54>
	humidity_integral = read_byte(sensor);
 8001962:	0020      	movs	r0, r4
 8001964:	f7ff ffa3 	bl	80018ae <read_byte>
 8001968:	0006      	movs	r6, r0
	humidity_dec = read_byte(sensor);
 800196a:	0020      	movs	r0, r4
 800196c:	f7ff ff9f 	bl	80018ae <read_byte>
	temp_integral = read_byte(sensor);
 8001970:	0020      	movs	r0, r4
 8001972:	f7ff ff9c 	bl	80018ae <read_byte>
 8001976:	9003      	str	r0, [sp, #12]
	temp_dec = read_byte(sensor);
 8001978:	0020      	movs	r0, r4
 800197a:	f7ff ff98 	bl	80018ae <read_byte>
	*check_sum = read_byte(sensor);
 800197e:	0020      	movs	r0, r4
 8001980:	f7ff ff95 	bl	80018ae <read_byte>
	*humidity_val = humidity_integral;
 8001984:	9b01      	ldr	r3, [sp, #4]
	*check_sum = read_byte(sensor);
 8001986:	7038      	strb	r0, [r7, #0]
	*temp_val = temp_integral;
 8001988:	9a03      	ldr	r2, [sp, #12]
	*humidity_val = humidity_integral;
 800198a:	701e      	strb	r6, [r3, #0]
	*temp_val = temp_integral;
 800198c:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_Init(sensor->Port, &gpio_data);
 800198e:	a905      	add	r1, sp, #20
	*temp_val = temp_integral;
 8001990:	701a      	strb	r2, [r3, #0]
	gpio_data.Pin = sensor->Pin;
 8001992:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(sensor->Port, &gpio_data);
 8001994:	6820      	ldr	r0, [r4, #0]
	gpio_data.Pin = sensor->Pin;
 8001996:	9305      	str	r3, [sp, #20]
	gpio_data.Mode = GPIO_MODE_OUTPUT_OD;
 8001998:	2311      	movs	r3, #17
	GPIO_InitTypeDef gpio_data = {0};
 800199a:	9509      	str	r5, [sp, #36]	; 0x24
	gpio_data.Mode = GPIO_MODE_OUTPUT_OD;
 800199c:	9306      	str	r3, [sp, #24]
	gpio_data.Pull = GPIO_NOPULL;
 800199e:	9507      	str	r5, [sp, #28]
	gpio_data.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(sensor->Port, &gpio_data);
 80019a2:	f000 fdb3 	bl	800250c <HAL_GPIO_Init>
	send_start_signal(sensor);
	change_to_input(sensor);
	check_response(sensor);
	read_data(sensor, humidity_val, temp_val, check_sum);
	change_to_output(sensor);
}
 80019a6:	b00b      	add	sp, #44	; 0x2c
 80019a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080019ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019ac:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ae:	2001      	movs	r0, #1
 80019b0:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <MX_DMA_Init+0x28>)
 80019b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80019b4:	4301      	orrs	r1, r0
 80019b6:	6311      	str	r1, [r2, #48]	; 0x30
 80019b8:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80019ba:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019bc:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80019be:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019c0:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80019c2:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019c4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80019c6:	f000 fc3d 	bl	8002244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80019ca:	200b      	movs	r0, #11
 80019cc:	f000 fc64 	bl	8002298 <HAL_NVIC_EnableIRQ>

}
 80019d0:	bd07      	pop	{r0, r1, r2, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	40021000 	.word	0x40021000

080019d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019da:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	2214      	movs	r2, #20
 80019de:	2100      	movs	r1, #0
 80019e0:	a803      	add	r0, sp, #12
 80019e2:	f002 fead 	bl	8004740 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	2004      	movs	r0, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	2401      	movs	r4, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <MX_GPIO_Init+0xa4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_wakeup_GPIO_Port, ESP_wakeup_Pin, GPIO_PIN_SET);
 80019ec:	27a0      	movs	r7, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80019f0:	4e23      	ldr	r6, [pc, #140]	; (8001a80 <MX_GPIO_Init+0xa8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	4301      	orrs	r1, r0
 80019f4:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	2102      	movs	r1, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(ESP_wakeup_GPIO_Port, ESP_wakeup_Pin, GPIO_PIN_SET);
 80019fa:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fc:	4002      	ands	r2, r0
 80019fe:	9200      	str	r2, [sp, #0]
 8001a00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(ESP_wakeup_GPIO_Port, ESP_wakeup_Pin, GPIO_PIN_SET);
 8001a04:	0038      	movs	r0, r7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4322      	orrs	r2, r4
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(DHT11_SIGNAL_GPIO_Port, DHT11_SIGNAL_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP_wakeup_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	4022      	ands	r2, r4
 8001a10:	9201      	str	r2, [sp, #4]
 8001a12:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a16:	430a      	orrs	r2, r1
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(ESP_wakeup_GPIO_Port, ESP_wakeup_Pin, GPIO_PIN_SET);
 8001a1c:	0022      	movs	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	400b      	ands	r3, r1
 8001a20:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(ESP_wakeup_GPIO_Port, ESP_wakeup_Pin, GPIO_PIN_SET);
 8001a22:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a24:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(ESP_wakeup_GPIO_Port, ESP_wakeup_Pin, GPIO_PIN_SET);
 8001a26:	f000 fe2f 	bl	8002688 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001a2a:	0030      	movs	r0, r6
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2108      	movs	r1, #8
 8001a30:	f000 fe2a 	bl	8002688 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DHT11_SIGNAL_GPIO_Port, DHT11_SIGNAL_Pin, GPIO_PIN_SET);
 8001a34:	0022      	movs	r2, r4
 8001a36:	0030      	movs	r0, r6
 8001a38:	2110      	movs	r1, #16
 8001a3a:	f000 fe25 	bl	8002688 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a3e:	2311      	movs	r3, #17
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ESP_wakeup_GPIO_Port, &GPIO_InitStruct);
 8001a40:	0038      	movs	r0, r7
 8001a42:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a44:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = ESP_wakeup_Pin;
 8001a46:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(ESP_wakeup_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f000 fd5e 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001a50:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001a52:	0030      	movs	r0, r6
 8001a54:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LD3_Pin;
 8001a56:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f000 fd55 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_SIGNAL_Pin;
 8001a62:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DHT11_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001a64:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = DHT11_SIGNAL_Pin;
 8001a66:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(DHT11_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001a68:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a6a:	191b      	adds	r3, r3, r4
 8001a6c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(DHT11_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f000 fd4b 	bl	800250c <HAL_GPIO_Init>

}
 8001a76:	b009      	add	sp, #36	; 0x24
 8001a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	50000400 	.word	0x50000400

08001a84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a84:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001a88:	4c13      	ldr	r4, [pc, #76]	; (8001ad8 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x40000A0B;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a8a:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8001a8c:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x40000A0B;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a90:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x40000A0B;
 8001a92:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a94:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a96:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8001a98:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a9a:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a9c:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a9e:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa0:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aa2:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aa4:	f000 ff3c 	bl	8002920 <HAL_I2C_Init>
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8001aac:	f000 f96e 	bl	8001d8c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	0020      	movs	r0, r4
 8001ab4:	f001 f908 	bl	8002cc8 <HAL_I2CEx_ConfigAnalogFilter>
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8001abc:	f000 f966 	bl	8001d8c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	0020      	movs	r0, r4
 8001ac4:	f001 f926 	bl	8002d14 <HAL_I2CEx_ConfigDigitalFilter>
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001acc:	f000 f95e 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad0:	bd10      	pop	{r4, pc}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	40005400 	.word	0x40005400
 8001ad8:	200000d0 	.word	0x200000d0
 8001adc:	40000a0b 	.word	0x40000a0b

08001ae0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	0004      	movs	r4, r0
 8001ae4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae6:	2214      	movs	r2, #20
 8001ae8:	2100      	movs	r1, #0
 8001aea:	a801      	add	r0, sp, #4
 8001aec:	f002 fe28 	bl	8004740 <memset>
  if(i2cHandle->Instance==I2C1)
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_I2C_MspInit+0x58>)
 8001af2:	6822      	ldr	r2, [r4, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d11c      	bne.n	8001b32 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	2301      	movs	r3, #1
 8001afa:	4c10      	ldr	r4, [pc, #64]	; (8001b3c <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	431a      	orrs	r2, r3
 8001b04:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001b06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	9200      	str	r2, [sp, #0]
 8001b0e:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b10:	22c0      	movs	r2, #192	; 0xc0
 8001b12:	00d2      	lsls	r2, r2, #3
 8001b14:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b16:	2212      	movs	r2, #18
 8001b18:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	3203      	adds	r2, #3
 8001b20:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001b22:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b24:	f000 fcf2 	bl	800250c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b2c:	039b      	lsls	r3, r3, #14
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b32:	b006      	add	sp, #24
 8001b34:	bd10      	pop	{r4, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	40005400 	.word	0x40005400
 8001b3c:	40021000 	.word	0x40021000

08001b40 <MX_IWDG_Init>:
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001b40:	4807      	ldr	r0, [pc, #28]	; (8001b60 <MX_IWDG_Init+0x20>)
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <MX_IWDG_Init+0x24>)
{
 8001b44:	b510      	push	{r4, lr}
  hiwdg.Instance = IWDG;
 8001b46:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001b48:	2306      	movs	r3, #6
 8001b4a:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <MX_IWDG_Init+0x28>)
 8001b4e:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 8001b50:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001b52:	f001 f903 	bl	8002d5c <HAL_IWDG_Init>
 8001b56:	2800      	cmp	r0, #0
 8001b58:	d001      	beq.n	8001b5e <MX_IWDG_Init+0x1e>
  {
    Error_Handler();
 8001b5a:	f000 f917 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001b5e:	bd10      	pop	{r4, pc}
 8001b60:	2000011c 	.word	0x2000011c
 8001b64:	40003000 	.word	0x40003000
 8001b68:	00000fff 	.word	0x00000fff

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b510      	push	{r4, lr}
 8001b6e:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b70:	2234      	movs	r2, #52	; 0x34
 8001b72:	2100      	movs	r1, #0
 8001b74:	a80b      	add	r0, sp, #44	; 0x2c
 8001b76:	f002 fde3 	bl	8004740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b7a:	2214      	movs	r2, #20
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4668      	mov	r0, sp
 8001b80:	f002 fdde 	bl	8004740 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b84:	2218      	movs	r2, #24
 8001b86:	2100      	movs	r1, #0
 8001b88:	a805      	add	r0, sp, #20
 8001b8a:	f002 fdd9 	bl	8004740 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	4921      	ldr	r1, [pc, #132]	; (8001c18 <SystemClock_Config+0xac>)
 8001b92:	4c22      	ldr	r4, [pc, #136]	; (8001c1c <SystemClock_Config+0xb0>)
 8001b94:	680a      	ldr	r2, [r1, #0]
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	4022      	ands	r2, r4
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b9e:	f001 f917 	bl	8002dd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ba2:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <SystemClock_Config+0xb4>)
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba4:	a80b      	add	r0, sp, #44	; 0x2c
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ba6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001ba8:	4023      	ands	r3, r4
 8001baa:	6513      	str	r3, [r2, #80]	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001bac:	230e      	movs	r3, #14
 8001bae:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bb0:	33f2      	adds	r3, #242	; 0xf2
 8001bb2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bb4:	3bff      	subs	r3, #255	; 0xff
 8001bb6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bb8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bba:	3301      	adds	r3, #1
 8001bbc:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8001bc2:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001bc4:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bc6:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001bc8:	03db      	lsls	r3, r3, #15
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bca:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001bcc:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bce:	f001 f98d 	bl	8002eec <HAL_RCC_OscConfig>
 8001bd2:	1e01      	subs	r1, r0, #0
 8001bd4:	d001      	beq.n	8001bda <SystemClock_Config+0x6e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bda:	230f      	movs	r3, #15
 8001bdc:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bde:	3b0c      	subs	r3, #12
 8001be0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001be2:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001be4:	337d      	adds	r3, #125	; 0x7d
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001be6:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001be8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001bea:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bec:	f001 fbce 	bl	800338c <HAL_RCC_ClockConfig>
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0x8c>
 8001bf4:	b672      	cpsid	i
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <SystemClock_Config+0x8a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001bf8:	232a      	movs	r3, #42	; 0x2a
 8001bfa:	9305      	str	r3, [sp, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bfc:	2380      	movs	r3, #128	; 0x80
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bfe:	9007      	str	r0, [sp, #28]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c00:	9009      	str	r0, [sp, #36]	; 0x24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c02:	025b      	lsls	r3, r3, #9
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c04:	a805      	add	r0, sp, #20
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c06:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c08:	f001 fcae 	bl	8003568 <HAL_RCCEx_PeriphCLKConfig>
 8001c0c:	2800      	cmp	r0, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0xa8>
 8001c10:	b672      	cpsid	i
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <SystemClock_Config+0xa6>
}
 8001c14:	b018      	add	sp, #96	; 0x60
 8001c16:	bd10      	pop	{r4, pc}
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	ffffe7ff 	.word	0xffffe7ff
 8001c20:	40021000 	.word	0x40021000

08001c24 <main>:
{
 8001c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8001c26:	f000 fac5 	bl	80021b4 <HAL_Init>
  SystemClock_Config();
 8001c2a:	f7ff ff9f 	bl	8001b6c <SystemClock_Config>
  MX_GPIO_Init();
 8001c2e:	f7ff fed3 	bl	80019d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c32:	f7ff febb 	bl	80019ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001c36:	f000 fa0b 	bl	8002050 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c3a:	f7ff ff23 	bl	8001a84 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001c3e:	f000 f9bd 	bl	8001fbc <MX_TIM2_Init>
  MX_RTC_Init();
 8001c42:	f000 f8cf 	bl	8001de4 <MX_RTC_Init>
  MX_IWDG_Init();
 8001c46:	f7ff ff7b 	bl	8001b40 <MX_IWDG_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	201c      	movs	r0, #28
 8001c4e:	0011      	movs	r1, r2
 8001c50:	f000 faf8 	bl	8002244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c54:	201c      	movs	r0, #28
 8001c56:	f000 fb1f 	bl	8002298 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	0011      	movs	r1, r2
 8001c60:	f000 faf0 	bl	8002244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001c64:	2002      	movs	r0, #2
 8001c66:	f000 fb17 	bl	8002298 <HAL_NVIC_EnableIRQ>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, UART_RX_val, 128);
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	4926      	ldr	r1, [pc, #152]	; (8001d08 <main+0xe4>)
 8001c6e:	4827      	ldr	r0, [pc, #156]	; (8001d0c <main+0xe8>)
 8001c70:	f002 fd07 	bl	8004682 <HAL_UARTEx_ReceiveToIdle_DMA>
  INA219_Init(&hi2c1, INA_I2C_ADDR);
 8001c74:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <main+0xec>)
 8001c76:	4c27      	ldr	r4, [pc, #156]	; (8001d14 <main+0xf0>)
 8001c78:	7819      	ldrb	r1, [r3, #0]
 8001c7a:	0020      	movs	r0, r4
 8001c7c:	f7ff fd68 	bl	8001750 <INA219_Init>
  delay_init();
 8001c80:	f7ff fdf6 	bl	8001870 <delay_init>
  DHT11_Init(&DHT11, DHT11_SIGNAL_GPIO_Port, DHT11_SIGNAL_Pin);
 8001c84:	2210      	movs	r2, #16
 8001c86:	4924      	ldr	r1, [pc, #144]	; (8001d18 <main+0xf4>)
 8001c88:	4824      	ldr	r0, [pc, #144]	; (8001d1c <main+0xf8>)
 8001c8a:	f7ff fe37 	bl	80018fc <DHT11_Init>
  BMP280_Init(&hi2c1, 0x77);
 8001c8e:	2177      	movs	r1, #119	; 0x77
 8001c90:	0020      	movs	r0, r4
 8001c92:	f7ff fa91 	bl	80011b8 <BMP280_Init>
  HAL_IWDG_Refresh(&hiwdg);
 8001c96:	4822      	ldr	r0, [pc, #136]	; (8001d20 <main+0xfc>)
 8001c98:	f001 f892 	bl	8002dc0 <HAL_IWDG_Refresh>
  ESP8266_Init(&ESP_module, "Wifi_name", "password", STATION);
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <main+0x100>)
 8001ca0:	4921      	ldr	r1, [pc, #132]	; (8001d28 <main+0x104>)
 8001ca2:	4822      	ldr	r0, [pc, #136]	; (8001d2c <main+0x108>)
 8001ca4:	f7ff fb7a 	bl	800139c <ESP8266_Init>
	  ESP8266_EnterDeepSleep(&ESP_module, ESP_STOP_TIME_BETWEEN_SENDING_DATA);
 8001ca8:	2578      	movs	r5, #120	; 0x78
	  INA219_Get_Data_OneShot(&solar_voltage, &solar_current);
 8001caa:	4921      	ldr	r1, [pc, #132]	; (8001d30 <main+0x10c>)
 8001cac:	4821      	ldr	r0, [pc, #132]	; (8001d34 <main+0x110>)
 8001cae:	f7ff fd27 	bl	8001700 <INA219_Get_Data_OneShot>
	  BMP280_get_data_FORCED(&bmp_temp, &bmp_press);
 8001cb2:	4e21      	ldr	r6, [pc, #132]	; (8001d38 <main+0x114>)
 8001cb4:	4f21      	ldr	r7, [pc, #132]	; (8001d3c <main+0x118>)
 8001cb6:	0031      	movs	r1, r6
 8001cb8:	0038      	movs	r0, r7
 8001cba:	f7ff f9e3 	bl	8001084 <BMP280_get_data_FORCED>
	  DHT11_get_data(&DHT11, &dht11_humidity, &dht11_temp, &dht11_check_sum);
 8001cbe:	4a20      	ldr	r2, [pc, #128]	; (8001d40 <main+0x11c>)
 8001cc0:	4920      	ldr	r1, [pc, #128]	; (8001d44 <main+0x120>)
 8001cc2:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <main+0x124>)
 8001cc4:	4815      	ldr	r0, [pc, #84]	; (8001d1c <main+0xf8>)
 8001cc6:	f7ff fe1c 	bl	8001902 <DHT11_get_data>
	  sensors_data_buff[0] = bmp_temp;
 8001cca:	4c20      	ldr	r4, [pc, #128]	; (8001d4c <main+0x128>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
	  HAL_IWDG_Refresh(&hiwdg);
 8001cce:	4814      	ldr	r0, [pc, #80]	; (8001d20 <main+0xfc>)
	  sensors_data_buff[0] = bmp_temp;
 8001cd0:	8023      	strh	r3, [r4, #0]
	  sensors_data_buff[1] = bmp_press;
 8001cd2:	6833      	ldr	r3, [r6, #0]
 8001cd4:	8063      	strh	r3, [r4, #2]
	  sensors_data_buff[2] = dht11_humidity;
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <main+0x120>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	80a3      	strh	r3, [r4, #4]
	  sensors_data_buff[3] = solar_voltage;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <main+0x110>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	80e3      	strh	r3, [r4, #6]
	  sensors_data_buff[4] = solar_current;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <main+0x10c>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	8123      	strh	r3, [r4, #8]
	  HAL_IWDG_Refresh(&hiwdg);
 8001ce8:	f001 f86a 	bl	8002dc0 <HAL_IWDG_Refresh>
	  ESP8266_TS_Send_Data_MultiField(&ESP_module, 5, sensors_data_buff);
 8001cec:	4e0f      	ldr	r6, [pc, #60]	; (8001d2c <main+0x108>)
 8001cee:	0022      	movs	r2, r4
 8001cf0:	2105      	movs	r1, #5
 8001cf2:	0030      	movs	r0, r6
 8001cf4:	f7ff fbcc 	bl	8001490 <ESP8266_TS_Send_Data_MultiField>
	  ESP8266_EnterDeepSleep(&ESP_module, ESP_STOP_TIME_BETWEEN_SENDING_DATA);
 8001cf8:	0029      	movs	r1, r5
 8001cfa:	0030      	movs	r0, r6
 8001cfc:	f7ff fb16 	bl	800132c <ESP8266_EnterDeepSleep>
	  Entry_LowPowerMode(ESP_STOP_TIME_BETWEEN_SENDING_DATA);
 8001d00:	0028      	movs	r0, r5
 8001d02:	f000 f8a3 	bl	8001e4c <Entry_LowPowerMode>
  while (1)
 8001d06:	e7d0      	b.n	8001caa <main+0x86>
 8001d08:	200002d8 	.word	0x200002d8
 8001d0c:	20000428 	.word	0x20000428
 8001d10:	20000000 	.word	0x20000000
 8001d14:	200000d0 	.word	0x200000d0
 8001d18:	50000400 	.word	0x50000400
 8001d1c:	200002d0 	.word	0x200002d0
 8001d20:	2000011c 	.word	0x2000011c
 8001d24:	0800516b 	.word	0x0800516b
 8001d28:	08005174 	.word	0x08005174
 8001d2c:	20000138 	.word	0x20000138
 8001d30:	2000012e 	.word	0x2000012e
 8001d34:	2000012c 	.word	0x2000012c
 8001d38:	20000130 	.word	0x20000130
 8001d3c:	20000358 	.word	0x20000358
 8001d40:	20000134 	.word	0x20000134
 8001d44:	200002cc 	.word	0x200002cc
 8001d48:	2000035c 	.word	0x2000035c
 8001d4c:	2000035e 	.word	0x2000035e

08001d50 <HAL_UARTEx_RxEventCallback>:
	if(huart->Instance == USART2)
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_UARTEx_RxEventCallback+0x2c>)
 8001d52:	6802      	ldr	r2, [r0, #0]
{
 8001d54:	b570      	push	{r4, r5, r6, lr}
 8001d56:	000d      	movs	r5, r1
	if(huart->Instance == USART2)
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d10d      	bne.n	8001d78 <HAL_UARTEx_RxEventCallback+0x28>
		for(int i=0; i < Size; i++)
 8001d5c:	2400      	movs	r4, #0
 8001d5e:	e004      	b.n	8001d6a <HAL_UARTEx_RxEventCallback+0x1a>
			RB_Buff_Write(&ESP_module.ESP_RX_Buff, UART_RX_val[i]);
 8001d60:	5d09      	ldrb	r1, [r1, r4]
 8001d62:	4807      	ldr	r0, [pc, #28]	; (8001d80 <HAL_UARTEx_RxEventCallback+0x30>)
 8001d64:	f7ff fd33 	bl	80017ce <RB_Buff_Write>
		for(int i=0; i < Size; i++)
 8001d68:	3401      	adds	r4, #1
 8001d6a:	4906      	ldr	r1, [pc, #24]	; (8001d84 <HAL_UARTEx_RxEventCallback+0x34>)
 8001d6c:	42a5      	cmp	r5, r4
 8001d6e:	dcf7      	bgt.n	8001d60 <HAL_UARTEx_RxEventCallback+0x10>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, UART_RX_val, 128);
 8001d70:	2280      	movs	r2, #128	; 0x80
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <HAL_UARTEx_RxEventCallback+0x38>)
 8001d74:	f002 fc85 	bl	8004682 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001d78:	bd70      	pop	{r4, r5, r6, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	40004400 	.word	0x40004400
 8001d80:	20000140 	.word	0x20000140
 8001d84:	200002d8 	.word	0x200002d8
 8001d88:	20000428 	.word	0x20000428

08001d8c <Error_Handler>:
 8001d8c:	b672      	cpsid	i
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <Error_Handler+0x2>

08001d90 <Parser_clean_string>:

void Parser_clean_string(RingBuffer_t* RX_buffer, RingBuffer_t* Destination_buffer)
{
	uint8_t data_cnt = 0;

	data_cnt = RX_buffer->data_counter;
 8001d90:	0003      	movs	r3, r0
{
 8001d92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d94:	0004      	movs	r4, r0
 8001d96:	000e      	movs	r6, r1
	for(int i=0; i < data_cnt - 2; i++)
 8001d98:	2500      	movs	r5, #0
	data_cnt = RX_buffer->data_counter;
 8001d9a:	3384      	adds	r3, #132	; 0x84
 8001d9c:	781b      	ldrb	r3, [r3, #0]
{
 8001d9e:	b085      	sub	sp, #20
	data_cnt = RX_buffer->data_counter;
 8001da0:	9301      	str	r3, [sp, #4]
	for(int i=0; i < data_cnt - 2; i++)
 8001da2:	9b01      	ldr	r3, [sp, #4]
 8001da4:	3b02      	subs	r3, #2
 8001da6:	42ab      	cmp	r3, r5
 8001da8:	dc01      	bgt.n	8001dae <Parser_clean_string+0x1e>
//			j++;
		}
	}

	//Destination_buffer[j] = '\0';
}
 8001daa:	b005      	add	sp, #20
 8001dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		RB_Buff_Read(RX_buffer, &tmp);
 8001dae:	ab02      	add	r3, sp, #8
 8001db0:	1ddf      	adds	r7, r3, #7
 8001db2:	0039      	movs	r1, r7
 8001db4:	0020      	movs	r0, r4
 8001db6:	f7ff fd21 	bl	80017fc <RB_Buff_Read>
		if((tmp=='\n') || (tmp=='\r'))
 8001dba:	7839      	ldrb	r1, [r7, #0]
 8001dbc:	290a      	cmp	r1, #10
 8001dbe:	d004      	beq.n	8001dca <Parser_clean_string+0x3a>
 8001dc0:	290d      	cmp	r1, #13
 8001dc2:	d002      	beq.n	8001dca <Parser_clean_string+0x3a>
			RB_Buff_Write(Destination_buffer, tmp);
 8001dc4:	0030      	movs	r0, r6
 8001dc6:	f7ff fd02 	bl	80017ce <RB_Buff_Write>
	for(int i=0; i < data_cnt - 2; i++)
 8001dca:	3501      	adds	r5, #1
 8001dcc:	e7e9      	b.n	8001da2 <Parser_clean_string+0x12>

08001dce <Parser_simple_parse>:
	return 0;
}


uint8_t Parser_simple_parse(char* message, RingBuffer_t* source_buffer)
{
 8001dce:	0003      	movs	r3, r0
 8001dd0:	b510      	push	{r4, lr}
	char *ptr;

	ptr = strstr((char*)source_buffer->buffer, message);
 8001dd2:	1c88      	adds	r0, r1, #2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	f002 fcf0 	bl	80047ba <strstr>
	if(ptr == NULL)
 8001dda:	1e43      	subs	r3, r0, #1
 8001ddc:	4198      	sbcs	r0, r3

	else
	{
		return 1;
	}
}
 8001dde:	b2c0      	uxtb	r0, r0
 8001de0:	bd10      	pop	{r4, pc}
	...

08001de4 <MX_RTC_Init>:
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001de4:	480a      	ldr	r0, [pc, #40]	; (8001e10 <MX_RTC_Init+0x2c>)
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_RTC_Init+0x30>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8001de8:	227f      	movs	r2, #127	; 0x7f
{
 8001dea:	b510      	push	{r4, lr}
  hrtc.Instance = RTC;
 8001dec:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001dee:	2300      	movs	r3, #0
  hrtc.Init.AsynchPrediv = 127;
 8001df0:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8001df2:	3280      	adds	r2, #128	; 0x80
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001df4:	6043      	str	r3, [r0, #4]
  hrtc.Init.SynchPrediv = 255;
 8001df6:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001df8:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001dfa:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dfc:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001dfe:	61c3      	str	r3, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e00:	f001 fca4 	bl	800374c <HAL_RTC_Init>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d001      	beq.n	8001e0c <MX_RTC_Init+0x28>
  {
    Error_Handler();
 8001e08:	f7ff ffc0 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e0c:	bd10      	pop	{r4, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	2000037c 	.word	0x2000037c
 8001e14:	40002800 	.word	0x40002800

08001e18 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RTC_MspInit+0x18>)
 8001e1a:	6802      	ldr	r2, [r0, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d105      	bne.n	8001e2c <HAL_RTC_MspInit+0x14>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_RTC_MspInit+0x1c>)
 8001e24:	02db      	lsls	r3, r3, #11
 8001e26:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	6513      	str	r3, [r2, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e2c:	4770      	bx	lr
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	40002800 	.word	0x40002800
 8001e34:	40021000 	.word	0x40021000

08001e38 <Entry_StopMode>:
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	HAL_ResumeTick();
}

void Entry_StopMode()
{
 8001e38:	b510      	push	{r4, lr}
	HAL_SuspendTick();
 8001e3a:	f000 f9f3 	bl	8002224 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001e3e:	2101      	movs	r1, #1
 8001e40:	0008      	movs	r0, r1
 8001e42:	f000 ffcf 	bl	8002de4 <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick();
 8001e46:	f000 f9f5 	bl	8002234 <HAL_ResumeTick>

}
 8001e4a:	bd10      	pop	{r4, pc}

08001e4c <Entry_LowPowerMode>:


void Entry_LowPowerMode(uint32_t sleep_time_seconds)
{
 8001e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e4e:	0004      	movs	r4, r0
	uint16_t temp_time_diff;
	uint16_t sleep_counter;
	if(sleep_time_seconds > WATCHDOG_REFRESH_TIME)
 8001e50:	2819      	cmp	r0, #25
 8001e52:	d93e      	bls.n	8001ed2 <Entry_LowPowerMode+0x86>
	{
		sleep_counter = sleep_time_seconds / WATCHDOG_REFRESH_TIME;
 8001e54:	2119      	movs	r1, #25
 8001e56:	f7fe f97d 	bl	8000154 <__udivsi3>
 8001e5a:	b285      	uxth	r5, r0
		temp_time_diff = sleep_time_seconds - (sleep_counter * WATCHDOG_REFRESH_TIME);
		if(sleep_counter)
 8001e5c:	2d00      	cmp	r5, #0
 8001e5e:	d134      	bne.n	8001eca <Entry_LowPowerMode+0x7e>
		SystemClock_Config();

		HAL_GPIO_WritePin(ESP_wakeup_GPIO_Port, ESP_wakeup_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(ESP_wakeup_GPIO_Port, ESP_wakeup_Pin, GPIO_PIN_RESET);
	}
}
 8001e60:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
				HAL_IWDG_Refresh(&hiwdg);
 8001e62:	4827      	ldr	r0, [pc, #156]	; (8001f00 <Entry_LowPowerMode+0xb4>)
 8001e64:	f000 ffac 	bl	8002dc0 <HAL_IWDG_Refresh>
				HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WATCHDOG_REFRESH_TIME, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8001e68:	2204      	movs	r2, #4
 8001e6a:	2119      	movs	r1, #25
 8001e6c:	0030      	movs	r0, r6
 8001e6e:	f001 fcc9 	bl	8003804 <HAL_RTCEx_SetWakeUpTimer_IT>
				Entry_StopMode();
 8001e72:	f7ff ffe1 	bl	8001e38 <Entry_StopMode>
				HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001e76:	0030      	movs	r0, r6
 8001e78:	f001 fd42 	bl	8003900 <HAL_RTCEx_DeactivateWakeUpTimer>
				SystemClock_Config();
 8001e7c:	f7ff fe76 	bl	8001b6c <SystemClock_Config>
			for(int i = 0; i < sleep_counter; i++)
 8001e80:	3701      	adds	r7, #1
 8001e82:	9b01      	ldr	r3, [sp, #4]
 8001e84:	4e1f      	ldr	r6, [pc, #124]	; (8001f04 <Entry_LowPowerMode+0xb8>)
 8001e86:	42bb      	cmp	r3, r7
 8001e88:	dceb      	bgt.n	8001e62 <Entry_LowPowerMode+0x16>
		temp_time_diff = sleep_time_seconds - (sleep_counter * WATCHDOG_REFRESH_TIME);
 8001e8a:	2119      	movs	r1, #25
 8001e8c:	4369      	muls	r1, r5
 8001e8e:	1a61      	subs	r1, r4, r1
			HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, temp_time_diff, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8001e90:	2204      	movs	r2, #4
 8001e92:	b289      	uxth	r1, r1
 8001e94:	0030      	movs	r0, r6
 8001e96:	f001 fcb5 	bl	8003804 <HAL_RTCEx_SetWakeUpTimer_IT>
			Entry_StopMode();
 8001e9a:	f7ff ffcd 	bl	8001e38 <Entry_StopMode>
			HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001e9e:	0030      	movs	r0, r6
 8001ea0:	f001 fd2e 	bl	8003900 <HAL_RTCEx_DeactivateWakeUpTimer>
			SystemClock_Config();
 8001ea4:	f7ff fe62 	bl	8001b6c <SystemClock_Config>
			HAL_GPIO_WritePin(ESP_wakeup_GPIO_Port, ESP_wakeup_Pin, GPIO_PIN_RESET);
 8001ea8:	20a0      	movs	r0, #160	; 0xa0
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2101      	movs	r1, #1
 8001eae:	05c0      	lsls	r0, r0, #23
 8001eb0:	f000 fbea 	bl	8002688 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001eb4:	20fa      	movs	r0, #250	; 0xfa
 8001eb6:	0080      	lsls	r0, r0, #2
 8001eb8:	f000 f9a2 	bl	8002200 <HAL_Delay>
			HAL_GPIO_WritePin(ESP_wakeup_GPIO_Port, ESP_wakeup_Pin, GPIO_PIN_SET);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	0011      	movs	r1, r2
		HAL_GPIO_WritePin(ESP_wakeup_GPIO_Port, ESP_wakeup_Pin, GPIO_PIN_RESET);
 8001ec0:	20a0      	movs	r0, #160	; 0xa0
 8001ec2:	05c0      	lsls	r0, r0, #23
 8001ec4:	f000 fbe0 	bl	8002688 <HAL_GPIO_WritePin>
}
 8001ec8:	e7ca      	b.n	8001e60 <Entry_LowPowerMode+0x14>
			for(int i = 0; i < sleep_counter; i++)
 8001eca:	b283      	uxth	r3, r0
 8001ecc:	2700      	movs	r7, #0
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	e7d7      	b.n	8001e82 <Entry_LowPowerMode+0x36>
		HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, sleep_time_seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8001ed2:	4d0c      	ldr	r5, [pc, #48]	; (8001f04 <Entry_LowPowerMode+0xb8>)
 8001ed4:	0001      	movs	r1, r0
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	0028      	movs	r0, r5
 8001eda:	f001 fc93 	bl	8003804 <HAL_RTCEx_SetWakeUpTimer_IT>
		Entry_StopMode();
 8001ede:	f7ff ffab 	bl	8001e38 <Entry_StopMode>
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001ee2:	0028      	movs	r0, r5
 8001ee4:	f001 fd0c 	bl	8003900 <HAL_RTCEx_DeactivateWakeUpTimer>
		SystemClock_Config();
 8001ee8:	f7ff fe40 	bl	8001b6c <SystemClock_Config>
		HAL_GPIO_WritePin(ESP_wakeup_GPIO_Port, ESP_wakeup_Pin, GPIO_PIN_SET);
 8001eec:	2201      	movs	r2, #1
 8001eee:	20a0      	movs	r0, #160	; 0xa0
 8001ef0:	0011      	movs	r1, r2
 8001ef2:	05c0      	lsls	r0, r0, #23
 8001ef4:	f000 fbc8 	bl	8002688 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ESP_wakeup_GPIO_Port, ESP_wakeup_Pin, GPIO_PIN_RESET);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2101      	movs	r1, #1
 8001efc:	e7e0      	b.n	8001ec0 <Entry_LowPowerMode+0x74>
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	2000011c 	.word	0x2000011c
 8001f04:	2000037c 	.word	0x2000037c

08001f08 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_MspInit+0x28>)
{
 8001f0c:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0e:	6b59      	ldr	r1, [r3, #52]	; 0x34

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001f10:	2004      	movs	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	430a      	orrs	r2, r1
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f1a:	0552      	lsls	r2, r2, #21
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	0011      	movs	r1, r2
 8001f24:	f000 f98e 	bl	8002244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001f28:	2004      	movs	r0, #4
 8001f2a:	f000 f9b5 	bl	8002298 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2e:	bd10      	pop	{r4, pc}
 8001f30:	40021000 	.word	0x40021000

08001f34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <NMI_Handler>

08001f36 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <HardFault_Handler>

08001f38 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f38:	4770      	bx	lr

08001f3a <PendSV_Handler>:
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f3e:	f000 f94d 	bl	80021dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f42:	bd10      	pop	{r4, pc}

08001f44 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001f44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001f46:	4802      	ldr	r0, [pc, #8]	; (8001f50 <RTC_IRQHandler+0xc>)
 8001f48:	f001 fd1c 	bl	8003984 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001f4c:	bd10      	pop	{r4, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	2000037c 	.word	0x2000037c

08001f54 <RCC_IRQHandler>:
 8001f54:	4770      	bx	lr
	...

08001f58 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001f58:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f5a:	4802      	ldr	r0, [pc, #8]	; (8001f64 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8001f5c:	f000 fa8b 	bl	8002476 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001f60:	bd10      	pop	{r4, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	200003e0 	.word	0x200003e0

08001f68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001f68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f6a:	4802      	ldr	r0, [pc, #8]	; (8001f74 <USART2_IRQHandler+0xc>)
 8001f6c:	f001 fee2 	bl	8003d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f70:	bd10      	pop	{r4, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	20000428 	.word	0x20000428

08001f78 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f78:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <_sbrk+0x30>)
 8001f7a:	490c      	ldr	r1, [pc, #48]	; (8001fac <_sbrk+0x34>)
{
 8001f7c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f7e:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f80:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <_sbrk+0x38>)
{
 8001f82:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001f84:	6810      	ldr	r0, [r2, #0]
 8001f86:	2800      	cmp	r0, #0
 8001f88:	d101      	bne.n	8001f8e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8001f8a:	480a      	ldr	r0, [pc, #40]	; (8001fb4 <_sbrk+0x3c>)
 8001f8c:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8e:	6810      	ldr	r0, [r2, #0]
 8001f90:	18c3      	adds	r3, r0, r3
 8001f92:	428b      	cmp	r3, r1
 8001f94:	d906      	bls.n	8001fa4 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8001f96:	f002 fba9 	bl	80046ec <__errno>
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001fa2:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001fa4:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001fa6:	e7fc      	b.n	8001fa2 <_sbrk+0x2a>
 8001fa8:	00000400 	.word	0x00000400
 8001fac:	20002000 	.word	0x20002000
 8001fb0:	20000090 	.word	0x20000090
 8001fb4:	200004c0 	.word	0x200004c0

08001fb8 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb8:	4770      	bx	lr
	...

08001fbc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fbc:	b510      	push	{r4, lr}
 8001fbe:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	a802      	add	r0, sp, #8
 8001fc6:	f002 fbbb 	bl	8004740 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fca:	2208      	movs	r2, #8
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4668      	mov	r0, sp
 8001fd0:	f002 fbb6 	bl	8004740 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	4c15      	ldr	r4, [pc, #84]	; (800202c <MX_TIM2_Init+0x70>)
 8001fd8:	05db      	lsls	r3, r3, #23
 8001fda:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 12;
 8001fdc:	230c      	movs	r3, #12
 8001fde:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe0:	2300      	movs	r3, #0
  htim2.Init.Period = 65535;
 8001fe2:	4a13      	ldr	r2, [pc, #76]	; (8002030 <MX_TIM2_Init+0x74>)
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fe4:	0020      	movs	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe6:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 65535;
 8001fe8:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fea:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fec:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fee:	f001 fd11 	bl	8003a14 <HAL_TIM_Base_Init>
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM2_Init+0x3e>
  {
    Error_Handler();
 8001ff6:	f7ff fec9 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffa:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ffc:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffe:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002000:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002002:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002004:	f001 fd52 	bl	8003aac <HAL_TIM_ConfigClockSource>
 8002008:	2800      	cmp	r0, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800200c:	f7ff febe 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002010:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002012:	4669      	mov	r1, sp
 8002014:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002016:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002018:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800201a:	f001 fdef 	bl	8003bfc <HAL_TIMEx_MasterConfigSynchronization>
 800201e:	2800      	cmp	r0, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002022:	f7ff feb3 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002026:	b006      	add	sp, #24
 8002028:	bd10      	pop	{r4, pc}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	200003a0 	.word	0x200003a0
 8002030:	0000ffff 	.word	0x0000ffff

08002034 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	6802      	ldr	r2, [r0, #0]
 8002038:	05db      	lsls	r3, r3, #23
 800203a:	429a      	cmp	r2, r3
 800203c:	d104      	bne.n	8002048 <HAL_TIM_Base_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800203e:	2301      	movs	r3, #1
 8002040:	4a02      	ldr	r2, [pc, #8]	; (800204c <HAL_TIM_Base_MspInit+0x18>)
 8002042:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002044:	430b      	orrs	r3, r1
 8002046:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002048:	4770      	bx	lr
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	40021000 	.word	0x40021000

08002050 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002050:	480b      	ldr	r0, [pc, #44]	; (8002080 <MX_USART2_UART_Init+0x30>)
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_USART2_UART_Init+0x34>)
{
 8002054:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8002056:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002058:	23e1      	movs	r3, #225	; 0xe1
 800205a:	025b      	lsls	r3, r3, #9
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800205c:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 800205e:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002060:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002062:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002064:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002066:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002068:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800206e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002070:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002072:	f002 fa7f 	bl	8004574 <HAL_UART_Init>
 8002076:	2800      	cmp	r0, #0
 8002078:	d001      	beq.n	800207e <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 800207a:	f7ff fe87 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800207e:	bd10      	pop	{r4, pc}
 8002080:	20000428 	.word	0x20000428
 8002084:	40004400 	.word	0x40004400

08002088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208a:	0006      	movs	r6, r0
 800208c:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208e:	2214      	movs	r2, #20
 8002090:	2100      	movs	r1, #0
 8002092:	a801      	add	r0, sp, #4
 8002094:	f002 fb54 	bl	8004740 <memset>
  if(uartHandle->Instance==USART2)
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_UART_MspInit+0x80>)
 800209a:	6832      	ldr	r2, [r6, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d131      	bne.n	8002104 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a0:	2280      	movs	r2, #128	; 0x80
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <HAL_UART_MspInit+0x84>)
 80020a4:	0292      	lsls	r2, r2, #10
 80020a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80020aa:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b4:	430a      	orrs	r2, r1
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80020ba:	2704      	movs	r7, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	400b      	ands	r3, r1
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_3;
 80020c2:	230c      	movs	r3, #12
 80020c4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	3b0a      	subs	r3, #10
 80020c8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ce:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80020d4:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f000 fa19 	bl	800250c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80020da:	4c0d      	ldr	r4, [pc, #52]	; (8002110 <HAL_UART_MspInit+0x88>)
 80020dc:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_UART_MspInit+0x8c>)
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020de:	0020      	movs	r0, r4
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80020e0:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020e2:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 80020e4:	6067      	str	r7, [r4, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020e6:	60a5      	str	r5, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e8:	60e5      	str	r5, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020ea:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020ec:	6165      	str	r5, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ee:	61a5      	str	r5, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80020f0:	61e5      	str	r5, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020f2:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020f4:	f000 f8f6 	bl	80022e4 <HAL_DMA_Init>
 80020f8:	42a8      	cmp	r0, r5
 80020fa:	d001      	beq.n	8002100 <HAL_UART_MspInit+0x78>
    {
      Error_Handler();
 80020fc:	f7ff fe46 	bl	8001d8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002100:	6734      	str	r4, [r6, #112]	; 0x70
 8002102:	62a6      	str	r6, [r4, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002104:	b007      	add	sp, #28
 8002106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002108:	40004400 	.word	0x40004400
 800210c:	40021000 	.word	0x40021000
 8002110:	200003e0 	.word	0x200003e0
 8002114:	40020058 	.word	0x40020058

08002118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002118:	480d      	ldr	r0, [pc, #52]	; (8002150 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800211a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800211c:	480d      	ldr	r0, [pc, #52]	; (8002154 <LoopForever+0x6>)
  ldr r1, =_edata
 800211e:	490e      	ldr	r1, [pc, #56]	; (8002158 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002120:	4a0e      	ldr	r2, [pc, #56]	; (800215c <LoopForever+0xe>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002124:	e002      	b.n	800212c <LoopCopyDataInit>

08002126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212a:	3304      	adds	r3, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800212c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002130:	d3f9      	bcc.n	8002126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002132:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002134:	4c0b      	ldr	r4, [pc, #44]	; (8002164 <LoopForever+0x16>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002138:	e001      	b.n	800213e <LoopFillZerobss>

0800213a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800213c:	3204      	adds	r2, #4

0800213e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002140:	d3fb      	bcc.n	800213a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002142:	f7ff ff39 	bl	8001fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002146:	f002 fad7 	bl	80046f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800214a:	f7ff fd6b 	bl	8001c24 <main>

0800214e <LoopForever>:

LoopForever:
    b LoopForever
 800214e:	e7fe      	b.n	800214e <LoopForever>
   ldr   r0, =_estack
 8002150:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002158:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800215c:	08005200 	.word	0x08005200
  ldr r2, =_sbss
 8002160:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002164:	200004c0 	.word	0x200004c0

08002168 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002168:	e7fe      	b.n	8002168 <ADC1_COMP_IRQHandler>
	...

0800216c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002170:	20fa      	movs	r0, #250	; 0xfa
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_InitTick+0x3c>)
 8002174:	0080      	lsls	r0, r0, #2
 8002176:	7819      	ldrb	r1, [r3, #0]
 8002178:	f7fd ffec 	bl	8000154 <__udivsi3>
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_InitTick+0x40>)
 800217e:	0001      	movs	r1, r0
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	f7fd ffe7 	bl	8000154 <__udivsi3>
 8002186:	f000 f893 	bl	80022b0 <HAL_SYSTICK_Config>
 800218a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800218c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800218e:	2c00      	cmp	r4, #0
 8002190:	d109      	bne.n	80021a6 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002192:	2d03      	cmp	r5, #3
 8002194:	d807      	bhi.n	80021a6 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002196:	3802      	subs	r0, #2
 8002198:	0022      	movs	r2, r4
 800219a:	0029      	movs	r1, r5
 800219c:	f000 f852 	bl	8002244 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a0:	0020      	movs	r0, r4
 80021a2:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_InitTick+0x44>)
 80021a4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
 80021a8:	20000008 	.word	0x20000008
 80021ac:	20000004 	.word	0x20000004
 80021b0:	2000000c 	.word	0x2000000c

080021b4 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80021b4:	2340      	movs	r3, #64	; 0x40
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <HAL_Init+0x24>)
{
 80021b8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80021ba:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021bc:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80021be:	430b      	orrs	r3, r1
 80021c0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021c2:	f7ff ffd3 	bl	800216c <HAL_InitTick>
 80021c6:	1e04      	subs	r4, r0, #0
 80021c8:	d103      	bne.n	80021d2 <HAL_Init+0x1e>
    HAL_MspInit();
 80021ca:	f7ff fe9d 	bl	8001f08 <HAL_MspInit>
}
 80021ce:	0020      	movs	r0, r4
 80021d0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80021d2:	2401      	movs	r4, #1
 80021d4:	e7fb      	b.n	80021ce <HAL_Init+0x1a>
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	40022000 	.word	0x40022000

080021dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80021dc:	4a03      	ldr	r2, [pc, #12]	; (80021ec <HAL_IncTick+0x10>)
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <HAL_IncTick+0x14>)
 80021e0:	6811      	ldr	r1, [r2, #0]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	185b      	adds	r3, r3, r1
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	4770      	bx	lr
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	200004ac 	.word	0x200004ac
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80021f4:	4b01      	ldr	r3, [pc, #4]	; (80021fc <HAL_GetTick+0x8>)
 80021f6:	6818      	ldr	r0, [r3, #0]
}
 80021f8:	4770      	bx	lr
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	200004ac 	.word	0x200004ac

08002200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff fff6 	bl	80021f4 <HAL_GetTick>
 8002208:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220a:	1c63      	adds	r3, r4, #1
 800220c:	d002      	beq.n	8002214 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800220e:	4b04      	ldr	r3, [pc, #16]	; (8002220 <HAL_Delay+0x20>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002214:	f7ff ffee 	bl	80021f4 <HAL_GetTick>
 8002218:	1b40      	subs	r0, r0, r5
 800221a:	42a0      	cmp	r0, r4
 800221c:	d3fa      	bcc.n	8002214 <HAL_Delay+0x14>
  {
  }
}
 800221e:	bd70      	pop	{r4, r5, r6, pc}
 8002220:	20000008 	.word	0x20000008

08002224 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002224:	2102      	movs	r1, #2
 8002226:	4a02      	ldr	r2, [pc, #8]	; (8002230 <HAL_SuspendTick+0xc>)
 8002228:	6813      	ldr	r3, [r2, #0]
 800222a:	438b      	bics	r3, r1
 800222c:	6013      	str	r3, [r2, #0]
}
 800222e:	4770      	bx	lr
 8002230:	e000e010 	.word	0xe000e010

08002234 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002234:	2302      	movs	r3, #2
 8002236:	4a02      	ldr	r2, [pc, #8]	; (8002240 <HAL_ResumeTick+0xc>)
 8002238:	6811      	ldr	r1, [r2, #0]
 800223a:	430b      	orrs	r3, r1
 800223c:	6013      	str	r3, [r2, #0]
}
 800223e:	4770      	bx	lr
 8002240:	e000e010 	.word	0xe000e010

08002244 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002244:	b530      	push	{r4, r5, lr}
 8002246:	25ff      	movs	r5, #255	; 0xff
 8002248:	2403      	movs	r4, #3
 800224a:	002a      	movs	r2, r5
 800224c:	4004      	ands	r4, r0
 800224e:	00e4      	lsls	r4, r4, #3
 8002250:	40a2      	lsls	r2, r4
 8002252:	0189      	lsls	r1, r1, #6
 8002254:	4029      	ands	r1, r5
 8002256:	43d2      	mvns	r2, r2
 8002258:	40a1      	lsls	r1, r4
 800225a:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800225c:	2800      	cmp	r0, #0
 800225e:	db0a      	blt.n	8002276 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002260:	24c0      	movs	r4, #192	; 0xc0
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_NVIC_SetPriority+0x4c>)
 8002264:	0880      	lsrs	r0, r0, #2
 8002266:	0080      	lsls	r0, r0, #2
 8002268:	18c0      	adds	r0, r0, r3
 800226a:	00a4      	lsls	r4, r4, #2
 800226c:	5903      	ldr	r3, [r0, r4]
 800226e:	401a      	ands	r2, r3
 8002270:	4311      	orrs	r1, r2
 8002272:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002274:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002276:	200f      	movs	r0, #15
 8002278:	4003      	ands	r3, r0
 800227a:	3b08      	subs	r3, #8
 800227c:	4805      	ldr	r0, [pc, #20]	; (8002294 <HAL_NVIC_SetPriority+0x50>)
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	181b      	adds	r3, r3, r0
 8002284:	69d8      	ldr	r0, [r3, #28]
 8002286:	4002      	ands	r2, r0
 8002288:	4311      	orrs	r1, r2
 800228a:	61d9      	str	r1, [r3, #28]
 800228c:	e7f2      	b.n	8002274 <HAL_NVIC_SetPriority+0x30>
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	e000e100 	.word	0xe000e100
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002298:	2800      	cmp	r0, #0
 800229a:	db05      	blt.n	80022a8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229c:	231f      	movs	r3, #31
 800229e:	4018      	ands	r0, r3
 80022a0:	3b1e      	subs	r3, #30
 80022a2:	4083      	lsls	r3, r0
 80022a4:	4a01      	ldr	r2, [pc, #4]	; (80022ac <HAL_NVIC_EnableIRQ+0x14>)
 80022a6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80022a8:	4770      	bx	lr
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	1e43      	subs	r3, r0, #1
 80022b4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d20d      	bcs.n	80022d8 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022bc:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022be:	4a07      	ldr	r2, [pc, #28]	; (80022dc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c0:	4807      	ldr	r0, [pc, #28]	; (80022e0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c4:	6a03      	ldr	r3, [r0, #32]
 80022c6:	0609      	lsls	r1, r1, #24
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	430b      	orrs	r3, r1
 80022ce:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d4:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d6:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80022d8:	4770      	bx	lr
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	e000e010 	.word	0xe000e010
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e6:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80022e8:	2001      	movs	r0, #1
  if(hdma == NULL)
 80022ea:	2c00      	cmp	r4, #0
 80022ec:	d035      	beq.n	800235a <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022ee:	6825      	ldr	r5, [r4, #0]
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <HAL_DMA_Init+0x78>)
 80022f2:	2114      	movs	r1, #20
 80022f4:	18e8      	adds	r0, r5, r3
 80022f6:	f7fd ff2d 	bl	8000154 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80022fa:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022fc:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80022fe:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002300:	2302      	movs	r3, #2
 8002302:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002304:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8002306:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002308:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800230c:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800230e:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8002310:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002312:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8002314:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002316:	433b      	orrs	r3, r7
 8002318:	6967      	ldr	r7, [r4, #20]
 800231a:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231c:	69a7      	ldr	r7, [r4, #24]
 800231e:	433b      	orrs	r3, r7
 8002320:	69e7      	ldr	r7, [r4, #28]
 8002322:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8002324:	6a27      	ldr	r7, [r4, #32]
 8002326:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8002328:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800232a:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	01db      	lsls	r3, r3, #7
 8002330:	4299      	cmp	r1, r3
 8002332:	d00c      	beq.n	800234e <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002334:	251c      	movs	r5, #28
 8002336:	4028      	ands	r0, r5
 8002338:	3d0d      	subs	r5, #13
 800233a:	4085      	lsls	r5, r0
 800233c:	490a      	ldr	r1, [pc, #40]	; (8002368 <HAL_DMA_Init+0x84>)
 800233e:	680b      	ldr	r3, [r1, #0]
 8002340:	43ab      	bics	r3, r5
 8002342:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002344:	6863      	ldr	r3, [r4, #4]
 8002346:	680d      	ldr	r5, [r1, #0]
 8002348:	4083      	lsls	r3, r0
 800234a:	432b      	orrs	r3, r5
 800234c:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800234e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002350:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002352:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002354:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8002356:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002358:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800235a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800235c:	bffdfff8 	.word	0xbffdfff8
 8002360:	40020000 	.word	0x40020000
 8002364:	ffff800f 	.word	0xffff800f
 8002368:	400200a8 	.word	0x400200a8

0800236c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800236c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800236e:	1d45      	adds	r5, r0, #5
{
 8002370:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8002372:	7feb      	ldrb	r3, [r5, #31]
{
 8002374:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002376:	2002      	movs	r0, #2
 8002378:	2b01      	cmp	r3, #1
 800237a:	d029      	beq.n	80023d0 <HAL_DMA_Start_IT+0x64>
 800237c:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 800237e:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8002380:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002382:	7ffb      	ldrb	r3, [r7, #31]
 8002384:	2600      	movs	r6, #0
 8002386:	469c      	mov	ip, r3
 8002388:	4660      	mov	r0, ip
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2801      	cmp	r0, #1
 800238e:	d12a      	bne.n	80023e6 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002390:	3001      	adds	r0, #1
 8002392:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002394:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002396:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002398:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 800239a:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800239c:	361c      	adds	r6, #28
 800239e:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 80023a0:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80023a2:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 80023a4:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80023a6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80023a8:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023aa:	9b01      	ldr	r3, [sp, #4]
 80023ac:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023ae:	68a3      	ldr	r3, [r4, #8]
 80023b0:	2b10      	cmp	r3, #16
 80023b2:	d10e      	bne.n	80023d2 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023b4:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023b6:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80023b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00c      	beq.n	80023d8 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023be:	230e      	movs	r3, #14
 80023c0:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023c2:	4313      	orrs	r3, r2
 80023c4:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 80023c6:	2301      	movs	r3, #1
 80023c8:	6802      	ldr	r2, [r0, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ce:	2000      	movs	r0, #0
}
 80023d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80023d2:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80023d4:	60c2      	str	r2, [r0, #12]
 80023d6:	e7ef      	b.n	80023b8 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023d8:	2204      	movs	r2, #4
 80023da:	6803      	ldr	r3, [r0, #0]
 80023dc:	4393      	bics	r3, r2
 80023de:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023e0:	6802      	ldr	r2, [r0, #0]
 80023e2:	230a      	movs	r3, #10
 80023e4:	e7ed      	b.n	80023c2 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 80023e6:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 80023e8:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 80023ea:	e7f1      	b.n	80023d0 <HAL_DMA_Start_IT+0x64>

080023ec <HAL_DMA_Abort>:
{
 80023ec:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ee:	1d85      	adds	r5, r0, #6
 80023f0:	7feb      	ldrb	r3, [r5, #31]
 80023f2:	1d44      	adds	r4, r0, #5
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d005      	beq.n	8002404 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f8:	2304      	movs	r3, #4
 80023fa:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80023fc:	2300      	movs	r3, #0
    return HAL_ERROR;
 80023fe:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002400:	77e3      	strb	r3, [r4, #31]
}
 8002402:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002404:	210e      	movs	r1, #14
 8002406:	6803      	ldr	r3, [r0, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	438a      	bics	r2, r1
 800240c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800240e:	2201      	movs	r2, #1
 8002410:	6819      	ldr	r1, [r3, #0]
 8002412:	4391      	bics	r1, r2
 8002414:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002416:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002418:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800241a:	201c      	movs	r0, #28
 800241c:	4003      	ands	r3, r0
 800241e:	0010      	movs	r0, r2
 8002420:	4098      	lsls	r0, r3
 8002422:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002424:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002426:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 8002428:	77e0      	strb	r0, [r4, #31]
    return status;
 800242a:	e7ea      	b.n	8002402 <HAL_DMA_Abort+0x16>

0800242c <HAL_DMA_Abort_IT>:
{
 800242c:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800242e:	1d84      	adds	r4, r0, #6
 8002430:	7fe3      	ldrb	r3, [r4, #31]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d004      	beq.n	8002440 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002436:	2304      	movs	r3, #4
 8002438:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800243a:	3b03      	subs	r3, #3
}
 800243c:	0018      	movs	r0, r3
 800243e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002440:	210e      	movs	r1, #14
 8002442:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002444:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	438a      	bics	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800244c:	2201      	movs	r2, #1
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	4391      	bics	r1, r2
 8002452:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002454:	231c      	movs	r3, #28
 8002456:	402b      	ands	r3, r5
 8002458:	0015      	movs	r5, r2
 800245a:	409d      	lsls	r5, r3
 800245c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 800245e:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002460:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002462:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002464:	2400      	movs	r4, #0
 8002466:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8002468:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 800246c:	42a2      	cmp	r2, r4
 800246e:	d0e5      	beq.n	800243c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8002470:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002472:	0023      	movs	r3, r4
 8002474:	e7e2      	b.n	800243c <HAL_DMA_Abort_IT+0x10>

08002476 <HAL_DMA_IRQHandler>:
{
 8002476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002478:	221c      	movs	r2, #28
 800247a:	2704      	movs	r7, #4
 800247c:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800247e:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002480:	4032      	ands	r2, r6
 8002482:	003e      	movs	r6, r7
 8002484:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002486:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002488:	6803      	ldr	r3, [r0, #0]
 800248a:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800248c:	4235      	tst	r5, r6
 800248e:	d00d      	beq.n	80024ac <HAL_DMA_IRQHandler+0x36>
 8002490:	423c      	tst	r4, r7
 8002492:	d00b      	beq.n	80024ac <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	0692      	lsls	r2, r2, #26
 8002498:	d402      	bmi.n	80024a0 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	43ba      	bics	r2, r7
 800249e:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80024a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80024a2:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d019      	beq.n	80024dc <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80024a8:	4798      	blx	r3
  return;
 80024aa:	e017      	b.n	80024dc <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80024ac:	2702      	movs	r7, #2
 80024ae:	003e      	movs	r6, r7
 80024b0:	4096      	lsls	r6, r2
 80024b2:	4235      	tst	r5, r6
 80024b4:	d013      	beq.n	80024de <HAL_DMA_IRQHandler+0x68>
 80024b6:	423c      	tst	r4, r7
 80024b8:	d011      	beq.n	80024de <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	0692      	lsls	r2, r2, #26
 80024be:	d406      	bmi.n	80024ce <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024c0:	240a      	movs	r4, #10
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	43a2      	bics	r2, r4
 80024c6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80024c8:	2201      	movs	r2, #1
 80024ca:	1d83      	adds	r3, r0, #6
 80024cc:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80024ce:	2200      	movs	r2, #0
 80024d0:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80024d2:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80024d4:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80024d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d1e5      	bne.n	80024a8 <HAL_DMA_IRQHandler+0x32>
}
 80024dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80024de:	2608      	movs	r6, #8
 80024e0:	0037      	movs	r7, r6
 80024e2:	4097      	lsls	r7, r2
 80024e4:	423d      	tst	r5, r7
 80024e6:	d0f9      	beq.n	80024dc <HAL_DMA_IRQHandler+0x66>
 80024e8:	4234      	tst	r4, r6
 80024ea:	d0f7      	beq.n	80024dc <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ec:	250e      	movs	r5, #14
 80024ee:	681c      	ldr	r4, [r3, #0]
 80024f0:	43ac      	bics	r4, r5
 80024f2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80024f4:	2301      	movs	r3, #1
 80024f6:	001c      	movs	r4, r3
 80024f8:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80024fa:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80024fc:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024fe:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002500:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8002502:	2200      	movs	r2, #0
 8002504:	1d43      	adds	r3, r0, #5
 8002506:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8002508:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800250a:	e7e5      	b.n	80024d8 <HAL_DMA_IRQHandler+0x62>

0800250c <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800250c:	4a55      	ldr	r2, [pc, #340]	; (8002664 <HAL_GPIO_Init+0x158>)
{
 800250e:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002510:	1882      	adds	r2, r0, r2
 8002512:	1e54      	subs	r4, r2, #1
 8002514:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8002516:	2300      	movs	r3, #0
{
 8002518:	b085      	sub	sp, #20
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800251a:	3205      	adds	r2, #5
 800251c:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800251e:	680a      	ldr	r2, [r1, #0]
 8002520:	0014      	movs	r4, r2
 8002522:	40dc      	lsrs	r4, r3
 8002524:	d101      	bne.n	800252a <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8002526:	b005      	add	sp, #20
 8002528:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800252a:	2701      	movs	r7, #1
 800252c:	003c      	movs	r4, r7
 800252e:	0015      	movs	r5, r2
 8002530:	409c      	lsls	r4, r3
 8002532:	4025      	ands	r5, r4
 8002534:	9501      	str	r5, [sp, #4]
    if (iocurrent)
 8002536:	4222      	tst	r2, r4
 8002538:	d100      	bne.n	800253c <HAL_GPIO_Init+0x30>
 800253a:	e090      	b.n	800265e <HAL_GPIO_Init+0x152>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800253c:	684a      	ldr	r2, [r1, #4]
 800253e:	9200      	str	r2, [sp, #0]
 8002540:	2203      	movs	r2, #3
 8002542:	9d00      	ldr	r5, [sp, #0]
 8002544:	4015      	ands	r5, r2
 8002546:	46ac      	mov	ip, r5
 8002548:	005d      	lsls	r5, r3, #1
 800254a:	40aa      	lsls	r2, r5
 800254c:	43d2      	mvns	r2, r2
 800254e:	9202      	str	r2, [sp, #8]
 8002550:	4662      	mov	r2, ip
 8002552:	3a01      	subs	r2, #1
 8002554:	42ba      	cmp	r2, r7
 8002556:	d828      	bhi.n	80025aa <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8002558:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800255a:	9a02      	ldr	r2, [sp, #8]
 800255c:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255e:	68ca      	ldr	r2, [r1, #12]
 8002560:	40aa      	lsls	r2, r5
 8002562:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8002564:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8002566:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002568:	43a2      	bics	r2, r4
 800256a:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256c:	9a00      	ldr	r2, [sp, #0]
 800256e:	0912      	lsrs	r2, r2, #4
 8002570:	403a      	ands	r2, r7
 8002572:	409a      	lsls	r2, r3
 8002574:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002576:	6042      	str	r2, [r0, #4]
        temp = GPIOx->PUPDR;
 8002578:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800257a:	9a02      	ldr	r2, [sp, #8]
 800257c:	4014      	ands	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257e:	688a      	ldr	r2, [r1, #8]
 8002580:	40aa      	lsls	r2, r5
 8002582:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002584:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002586:	4662      	mov	r2, ip
 8002588:	2a02      	cmp	r2, #2
 800258a:	d111      	bne.n	80025b0 <HAL_GPIO_Init+0xa4>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800258c:	2407      	movs	r4, #7
 800258e:	270f      	movs	r7, #15
 8002590:	401c      	ands	r4, r3
 8002592:	00a4      	lsls	r4, r4, #2
 8002594:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	0092      	lsls	r2, r2, #2
 800259a:	1882      	adds	r2, r0, r2
 800259c:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800259e:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80025a0:	690f      	ldr	r7, [r1, #16]
 80025a2:	40a7      	lsls	r7, r4
 80025a4:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80025a6:	6216      	str	r6, [r2, #32]
 80025a8:	e002      	b.n	80025b0 <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025aa:	4662      	mov	r2, ip
 80025ac:	2a03      	cmp	r2, #3
 80025ae:	d1e3      	bne.n	8002578 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 80025b0:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025b2:	9c02      	ldr	r4, [sp, #8]
 80025b4:	4014      	ands	r4, r2
 80025b6:	0022      	movs	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b8:	4664      	mov	r4, ip
 80025ba:	40ac      	lsls	r4, r5
 80025bc:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80025be:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c0:	22c0      	movs	r2, #192	; 0xc0
 80025c2:	9c00      	ldr	r4, [sp, #0]
 80025c4:	0292      	lsls	r2, r2, #10
 80025c6:	4214      	tst	r4, r2
 80025c8:	d049      	beq.n	800265e <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	2701      	movs	r7, #1
 80025cc:	4c26      	ldr	r4, [pc, #152]	; (8002668 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80025ce:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80025d2:	401d      	ands	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d4:	433a      	orrs	r2, r7
 80025d6:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80025d8:	4a24      	ldr	r2, [pc, #144]	; (800266c <HAL_GPIO_Init+0x160>)
 80025da:	089c      	lsrs	r4, r3, #2
 80025dc:	00a4      	lsls	r4, r4, #2
 80025de:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80025e0:	220f      	movs	r2, #15
 80025e2:	00ad      	lsls	r5, r5, #2
 80025e4:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 80025e6:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80025e8:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80025ea:	22a0      	movs	r2, #160	; 0xa0
 80025ec:	05d2      	lsls	r2, r2, #23
 80025ee:	4694      	mov	ip, r2
 80025f0:	2200      	movs	r2, #0
 80025f2:	4560      	cmp	r0, ip
 80025f4:	d009      	beq.n	800260a <HAL_GPIO_Init+0xfe>
 80025f6:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <HAL_GPIO_Init+0x164>)
 80025f8:	4694      	mov	ip, r2
 80025fa:	003a      	movs	r2, r7
 80025fc:	4560      	cmp	r0, ip
 80025fe:	d004      	beq.n	800260a <HAL_GPIO_Init+0xfe>
 8002600:	4f1c      	ldr	r7, [pc, #112]	; (8002674 <HAL_GPIO_Init+0x168>)
 8002602:	1892      	adds	r2, r2, r2
 8002604:	42b8      	cmp	r0, r7
 8002606:	d000      	beq.n	800260a <HAL_GPIO_Init+0xfe>
 8002608:	9a03      	ldr	r2, [sp, #12]
 800260a:	40aa      	lsls	r2, r5
 800260c:	4316      	orrs	r6, r2
        temp = EXTI->IMR;
 800260e:	4a1a      	ldr	r2, [pc, #104]	; (8002678 <HAL_GPIO_Init+0x16c>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002610:	60a6      	str	r6, [r4, #8]
        temp = EXTI->IMR;
 8002612:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002614:	9c01      	ldr	r4, [sp, #4]
          temp |= iocurrent;
 8002616:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002618:	9f00      	ldr	r7, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800261a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800261c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800261e:	03ff      	lsls	r7, r7, #15
 8002620:	d401      	bmi.n	8002626 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 8002622:	0035      	movs	r5, r6
 8002624:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8002626:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002628:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800262a:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800262c:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 800262e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002630:	03bf      	lsls	r7, r7, #14
 8002632:	d401      	bmi.n	8002638 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8002634:	0035      	movs	r5, r6
 8002636:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8002638:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800263a:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800263c:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800263e:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8002640:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002642:	02ff      	lsls	r7, r7, #11
 8002644:	d401      	bmi.n	800264a <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 8002646:	0035      	movs	r5, r6
 8002648:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 800264a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800264c:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 800264e:	9e01      	ldr	r6, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002650:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8002652:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002654:	02bf      	lsls	r7, r7, #10
 8002656:	d401      	bmi.n	800265c <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 8002658:	4025      	ands	r5, r4
 800265a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800265c:	60d6      	str	r6, [r2, #12]
    position++;
 800265e:	3301      	adds	r3, #1
 8002660:	e75d      	b.n	800251e <HAL_GPIO_Init+0x12>
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	afffe400 	.word	0xafffe400
 8002668:	40021000 	.word	0x40021000
 800266c:	40010000 	.word	0x40010000
 8002670:	50000400 	.word	0x50000400
 8002674:	50000800 	.word	0x50000800
 8002678:	40010400 	.word	0x40010400

0800267c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800267c:	6900      	ldr	r0, [r0, #16]
 800267e:	4008      	ands	r0, r1
 8002680:	1e41      	subs	r1, r0, #1
 8002682:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002684:	b2c0      	uxtb	r0, r0
}
 8002686:	4770      	bx	lr

08002688 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002688:	2a00      	cmp	r2, #0
 800268a:	d001      	beq.n	8002690 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800268c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800268e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8002690:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002692:	e7fc      	b.n	800268e <HAL_GPIO_WritePin+0x6>

08002694 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002694:	6803      	ldr	r3, [r0, #0]
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	0792      	lsls	r2, r2, #30
 800269a:	d501      	bpl.n	80026a0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800269c:	2200      	movs	r2, #0
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026a0:	2201      	movs	r2, #1
 80026a2:	6999      	ldr	r1, [r3, #24]
 80026a4:	4211      	tst	r1, r2
 80026a6:	d102      	bne.n	80026ae <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026a8:	6999      	ldr	r1, [r3, #24]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	619a      	str	r2, [r3, #24]
  }
}
 80026ae:	4770      	bx	lr

080026b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026b0:	b530      	push	{r4, r5, lr}
 80026b2:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80026b4:	0412      	lsls	r2, r2, #16
 80026b6:	6800      	ldr	r0, [r0, #0]
 80026b8:	4322      	orrs	r2, r4
 80026ba:	431a      	orrs	r2, r3
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <I2C_TransferConfig+0x24>)
 80026be:	6845      	ldr	r5, [r0, #4]
 80026c0:	0589      	lsls	r1, r1, #22
 80026c2:	0d64      	lsrs	r4, r4, #21
 80026c4:	0d89      	lsrs	r1, r1, #22
 80026c6:	431c      	orrs	r4, r3
 80026c8:	43a5      	bics	r5, r4
 80026ca:	430a      	orrs	r2, r1
 80026cc:	432a      	orrs	r2, r5
 80026ce:	6042      	str	r2, [r0, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80026d0:	bd30      	pop	{r4, r5, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	03ff63ff 	.word	0x03ff63ff

080026d8 <I2C_IsAcknowledgeFailed>:
{
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026da:	6803      	ldr	r3, [r0, #0]
{
 80026dc:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026de:	699a      	ldr	r2, [r3, #24]
{
 80026e0:	0004      	movs	r4, r0
 80026e2:	000d      	movs	r5, r1
  return HAL_OK;
 80026e4:	2000      	movs	r0, #0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026e6:	06d2      	lsls	r2, r2, #27
 80026e8:	d536      	bpl.n	8002758 <I2C_IsAcknowledgeFailed+0x80>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	0192      	lsls	r2, r2, #6
 80026ee:	d404      	bmi.n	80026fa <I2C_IsAcknowledgeFailed+0x22>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026f0:	2280      	movs	r2, #128	; 0x80
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	01d2      	lsls	r2, r2, #7
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026fa:	2720      	movs	r7, #32
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	699a      	ldr	r2, [r3, #24]
 8002700:	423a      	tst	r2, r7
 8002702:	d012      	beq.n	800272a <I2C_IsAcknowledgeFailed+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002704:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8002706:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002708:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800270a:	61df      	str	r7, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800270c:	f7ff ffc2 	bl	8002694 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002710:	6822      	ldr	r2, [r4, #0]
 8002712:	4912      	ldr	r1, [pc, #72]	; (800275c <I2C_IsAcknowledgeFailed+0x84>)
 8002714:	6853      	ldr	r3, [r2, #4]
 8002716:	400b      	ands	r3, r1
 8002718:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800271a:	2304      	movs	r3, #4
 800271c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800271e:	4313      	orrs	r3, r2
 8002720:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002722:	0023      	movs	r3, r4
 8002724:	3341      	adds	r3, #65	; 0x41
 8002726:	701f      	strb	r7, [r3, #0]
 8002728:	e00f      	b.n	800274a <I2C_IsAcknowledgeFailed+0x72>
      if (Timeout != HAL_MAX_DELAY)
 800272a:	1c6a      	adds	r2, r5, #1
 800272c:	d0e7      	beq.n	80026fe <I2C_IsAcknowledgeFailed+0x26>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272e:	f7ff fd61 	bl	80021f4 <HAL_GetTick>
 8002732:	1b80      	subs	r0, r0, r6
 8002734:	4285      	cmp	r5, r0
 8002736:	d301      	bcc.n	800273c <I2C_IsAcknowledgeFailed+0x64>
 8002738:	2d00      	cmp	r5, #0
 800273a:	d1df      	bne.n	80026fc <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	2220      	movs	r2, #32
 800273e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002740:	4313      	orrs	r3, r2
 8002742:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002744:	0023      	movs	r3, r4
 8002746:	3341      	adds	r3, #65	; 0x41
 8002748:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800274a:	0022      	movs	r2, r4
 800274c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800274e:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8002752:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002754:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002756:	7023      	strb	r3, [r4, #0]
}
 8002758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	fe00e800 	.word	0xfe00e800

08002760 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	0004      	movs	r4, r0
 8002764:	000d      	movs	r5, r1
 8002766:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002768:	2702      	movs	r7, #2
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	423b      	tst	r3, r7
 8002770:	d001      	beq.n	8002776 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8002772:	2000      	movs	r0, #0
}
 8002774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002776:	0032      	movs	r2, r6
 8002778:	0029      	movs	r1, r5
 800277a:	0020      	movs	r0, r4
 800277c:	f7ff ffac 	bl	80026d8 <I2C_IsAcknowledgeFailed>
 8002780:	2800      	cmp	r0, #0
 8002782:	d115      	bne.n	80027b0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002784:	1c6b      	adds	r3, r5, #1
 8002786:	d0f0      	beq.n	800276a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002788:	f7ff fd34 	bl	80021f4 <HAL_GetTick>
 800278c:	1b80      	subs	r0, r0, r6
 800278e:	42a8      	cmp	r0, r5
 8002790:	d801      	bhi.n	8002796 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8002792:	2d00      	cmp	r5, #0
 8002794:	d1e9      	bne.n	800276a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002796:	2220      	movs	r2, #32
 8002798:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800279a:	4313      	orrs	r3, r2
 800279c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800279e:	0023      	movs	r3, r4
 80027a0:	3341      	adds	r3, #65	; 0x41
 80027a2:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	0022      	movs	r2, r4
 80027a6:	2300      	movs	r3, #0
 80027a8:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80027aa:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ac:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80027ae:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80027b0:	2001      	movs	r0, #1
 80027b2:	e7df      	b.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080027b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80027b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b6:	0004      	movs	r4, r0
 80027b8:	000d      	movs	r5, r1
 80027ba:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027bc:	2720      	movs	r7, #32
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	423b      	tst	r3, r7
 80027c4:	d001      	beq.n	80027ca <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80027c6:	2000      	movs	r0, #0
}
 80027c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ca:	0032      	movs	r2, r6
 80027cc:	0029      	movs	r1, r5
 80027ce:	0020      	movs	r0, r4
 80027d0:	f7ff ff82 	bl	80026d8 <I2C_IsAcknowledgeFailed>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d113      	bne.n	8002800 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d8:	f7ff fd0c 	bl	80021f4 <HAL_GetTick>
 80027dc:	1b80      	subs	r0, r0, r6
 80027de:	42a8      	cmp	r0, r5
 80027e0:	d801      	bhi.n	80027e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80027e2:	2d00      	cmp	r5, #0
 80027e4:	d1eb      	bne.n	80027be <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e6:	2220      	movs	r2, #32
 80027e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027ea:	4313      	orrs	r3, r2
 80027ec:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	0023      	movs	r3, r4
 80027f0:	3341      	adds	r3, #65	; 0x41
 80027f2:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f4:	0022      	movs	r2, r4
 80027f6:	2300      	movs	r3, #0
 80027f8:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80027fa:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80027fe:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002800:	2001      	movs	r0, #1
 8002802:	e7e1      	b.n	80027c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08002804 <I2C_WaitOnFlagUntilTimeout>:
{
 8002804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002806:	0004      	movs	r4, r0
 8002808:	000e      	movs	r6, r1
 800280a:	0017      	movs	r7, r2
 800280c:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800280e:	6822      	ldr	r2, [r4, #0]
 8002810:	6993      	ldr	r3, [r2, #24]
 8002812:	4033      	ands	r3, r6
 8002814:	1b9b      	subs	r3, r3, r6
 8002816:	4259      	negs	r1, r3
 8002818:	414b      	adcs	r3, r1
 800281a:	42bb      	cmp	r3, r7
 800281c:	d001      	beq.n	8002822 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800281e:	2000      	movs	r0, #0
 8002820:	e017      	b.n	8002852 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002822:	1c6b      	adds	r3, r5, #1
 8002824:	d0f4      	beq.n	8002810 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002826:	f7ff fce5 	bl	80021f4 <HAL_GetTick>
 800282a:	9b06      	ldr	r3, [sp, #24]
 800282c:	1ac0      	subs	r0, r0, r3
 800282e:	42a8      	cmp	r0, r5
 8002830:	d801      	bhi.n	8002836 <I2C_WaitOnFlagUntilTimeout+0x32>
 8002832:	2d00      	cmp	r5, #0
 8002834:	d1eb      	bne.n	800280e <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002836:	2220      	movs	r2, #32
 8002838:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800283a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	4313      	orrs	r3, r2
 800283e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002840:	0023      	movs	r3, r4
 8002842:	3341      	adds	r3, #65	; 0x41
 8002844:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002846:	0022      	movs	r2, r4
 8002848:	2300      	movs	r3, #0
 800284a:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800284c:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800284e:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8002850:	7023      	strb	r3, [r4, #0]
}
 8002852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002854 <I2C_RequestMemoryWrite>:
{
 8002854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002856:	0014      	movs	r4, r2
 8002858:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <I2C_RequestMemoryWrite+0x64>)
{
 800285e:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	2380      	movs	r3, #128	; 0x80
{
 8002864:	9f08      	ldr	r7, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002866:	045b      	lsls	r3, r3, #17
 8002868:	f7ff ff22 	bl	80026b0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800286c:	0039      	movs	r1, r7
 800286e:	0028      	movs	r0, r5
 8002870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002872:	f7ff ff75 	bl	8002760 <I2C_WaitOnTXISFlagUntilTimeout>
 8002876:	2800      	cmp	r0, #0
 8002878:	d001      	beq.n	800287e <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 800287a:	2001      	movs	r0, #1
}
 800287c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800287e:	682b      	ldr	r3, [r5, #0]
 8002880:	2e01      	cmp	r6, #1
 8002882:	d10d      	bne.n	80028a0 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002884:	b2e4      	uxtb	r4, r4
 8002886:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800288a:	2200      	movs	r2, #0
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2180      	movs	r1, #128	; 0x80
 8002890:	003b      	movs	r3, r7
 8002892:	0028      	movs	r0, r5
 8002894:	f7ff ffb6 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002898:	1e43      	subs	r3, r0, #1
 800289a:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800289c:	b2c0      	uxtb	r0, r0
 800289e:	e7ed      	b.n	800287c <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028a0:	0a22      	lsrs	r2, r4, #8
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a4:	0039      	movs	r1, r7
 80028a6:	0028      	movs	r0, r5
 80028a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028aa:	f7ff ff59 	bl	8002760 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d1e3      	bne.n	800287a <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028b2:	682b      	ldr	r3, [r5, #0]
 80028b4:	e7e6      	b.n	8002884 <I2C_RequestMemoryWrite+0x30>
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	80002000 	.word	0x80002000

080028bc <I2C_RequestMemoryRead>:
{
 80028bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028be:	0005      	movs	r5, r0
 80028c0:	0014      	movs	r4, r2
 80028c2:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <I2C_RequestMemoryRead+0x60>)
{
 80028c8:	9f08      	ldr	r7, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	2300      	movs	r3, #0
 80028ce:	f7ff feef 	bl	80026b0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d2:	0039      	movs	r1, r7
 80028d4:	0028      	movs	r0, r5
 80028d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028d8:	f7ff ff42 	bl	8002760 <I2C_WaitOnTXISFlagUntilTimeout>
 80028dc:	2800      	cmp	r0, #0
 80028de:	d001      	beq.n	80028e4 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80028e0:	2001      	movs	r0, #1
}
 80028e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028e4:	682b      	ldr	r3, [r5, #0]
 80028e6:	2e01      	cmp	r6, #1
 80028e8:	d10d      	bne.n	8002906 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028ea:	b2e4      	uxtb	r4, r4
 80028ec:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028f0:	2200      	movs	r2, #0
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2140      	movs	r1, #64	; 0x40
 80028f6:	003b      	movs	r3, r7
 80028f8:	0028      	movs	r0, r5
 80028fa:	f7ff ff83 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 80028fe:	1e43      	subs	r3, r0, #1
 8002900:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8002902:	b2c0      	uxtb	r0, r0
 8002904:	e7ed      	b.n	80028e2 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002906:	0a22      	lsrs	r2, r4, #8
 8002908:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800290a:	0039      	movs	r1, r7
 800290c:	0028      	movs	r0, r5
 800290e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002910:	f7ff ff26 	bl	8002760 <I2C_WaitOnTXISFlagUntilTimeout>
 8002914:	2800      	cmp	r0, #0
 8002916:	d1e3      	bne.n	80028e0 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002918:	682b      	ldr	r3, [r5, #0]
 800291a:	e7e6      	b.n	80028ea <I2C_RequestMemoryRead+0x2e>
 800291c:	80002000 	.word	0x80002000

08002920 <HAL_I2C_Init>:
{
 8002920:	b570      	push	{r4, r5, r6, lr}
 8002922:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002924:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8002926:	2c00      	cmp	r4, #0
 8002928:	d03f      	beq.n	80029aa <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800292a:	0025      	movs	r5, r4
 800292c:	3541      	adds	r5, #65	; 0x41
 800292e:	782b      	ldrb	r3, [r5, #0]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8002936:	0023      	movs	r3, r4
 8002938:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800293a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800293c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800293e:	f7ff f8cf 	bl	8001ae0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002942:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002944:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002946:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002948:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800294a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68a6      	ldr	r6, [r4, #8]
 8002950:	438a      	bics	r2, r1
 8002952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002954:	6861      	ldr	r1, [r4, #4]
 8002956:	4a1a      	ldr	r2, [pc, #104]	; (80029c0 <HAL_I2C_Init+0xa0>)
 8002958:	400a      	ands	r2, r1
 800295a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800295c:	6899      	ldr	r1, [r3, #8]
 800295e:	4a19      	ldr	r2, [pc, #100]	; (80029c4 <HAL_I2C_Init+0xa4>)
 8002960:	4011      	ands	r1, r2
 8002962:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002964:	2801      	cmp	r0, #1
 8002966:	d121      	bne.n	80029ac <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	0209      	lsls	r1, r1, #8
 800296c:	4331      	orrs	r1, r6
 800296e:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002970:	6858      	ldr	r0, [r3, #4]
 8002972:	4915      	ldr	r1, [pc, #84]	; (80029c8 <HAL_I2C_Init+0xa8>)
 8002974:	4301      	orrs	r1, r0
 8002976:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002978:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800297a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800297c:	400a      	ands	r2, r1
 800297e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002980:	6961      	ldr	r1, [r4, #20]
 8002982:	6922      	ldr	r2, [r4, #16]
 8002984:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002986:	69a1      	ldr	r1, [r4, #24]
 8002988:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800298a:	430a      	orrs	r2, r1
 800298c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800298e:	6a21      	ldr	r1, [r4, #32]
 8002990:	69e2      	ldr	r2, [r4, #28]
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002996:	2201      	movs	r2, #1
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800299e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029a2:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80029a4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a6:	3442      	adds	r4, #66	; 0x42
 80029a8:	7020      	strb	r0, [r4, #0]
}
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029ac:	2184      	movs	r1, #132	; 0x84
 80029ae:	0209      	lsls	r1, r1, #8
 80029b0:	4331      	orrs	r1, r6
 80029b2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029b4:	2802      	cmp	r0, #2
 80029b6:	d1db      	bne.n	8002970 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	0109      	lsls	r1, r1, #4
 80029bc:	6059      	str	r1, [r3, #4]
 80029be:	e7d7      	b.n	8002970 <HAL_I2C_Init+0x50>
 80029c0:	f0ffffff 	.word	0xf0ffffff
 80029c4:	ffff7fff 	.word	0xffff7fff
 80029c8:	02008000 	.word	0x02008000

080029cc <HAL_I2C_Mem_Write>:
{
 80029cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	9307      	str	r3, [sp, #28]
 80029d2:	ab0e      	add	r3, sp, #56	; 0x38
 80029d4:	9206      	str	r2, [sp, #24]
 80029d6:	cb04      	ldmia	r3!, {r2}
 80029d8:	0004      	movs	r4, r0
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	9203      	str	r2, [sp, #12]
 80029de:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e0:	0003      	movs	r3, r0
 80029e2:	3341      	adds	r3, #65	; 0x41
 80029e4:	9305      	str	r3, [sp, #20]
 80029e6:	781b      	ldrb	r3, [r3, #0]
{
 80029e8:	000f      	movs	r7, r1
    return HAL_BUSY;
 80029ea:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d108      	bne.n	8002a02 <HAL_I2C_Mem_Write+0x36>
    if ((pData == NULL) || (Size == 0U))
 80029f0:	2a00      	cmp	r2, #0
 80029f2:	d002      	beq.n	80029fa <HAL_I2C_Mem_Write+0x2e>
 80029f4:	9b04      	ldr	r3, [sp, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <HAL_I2C_Mem_Write+0x3a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002a00:	2001      	movs	r0, #1
}
 8002a02:	b009      	add	sp, #36	; 0x24
 8002a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002a06:	0023      	movs	r3, r4
 8002a08:	3340      	adds	r3, #64	; 0x40
 8002a0a:	9302      	str	r3, [sp, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 8002a0e:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d0f6      	beq.n	8002a02 <HAL_I2C_Mem_Write+0x36>
 8002a14:	2201      	movs	r2, #1
 8002a16:	9b02      	ldr	r3, [sp, #8]
 8002a18:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002a1a:	f7ff fbeb 	bl	80021f4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a1e:	2180      	movs	r1, #128	; 0x80
 8002a20:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002a22:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a24:	2319      	movs	r3, #25
 8002a26:	2201      	movs	r2, #1
 8002a28:	0020      	movs	r0, r4
 8002a2a:	0209      	lsls	r1, r1, #8
 8002a2c:	f7ff feea 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002a30:	1e06      	subs	r6, r0, #0
 8002a32:	d1e5      	bne.n	8002a00 <HAL_I2C_Mem_Write+0x34>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a34:	2321      	movs	r3, #33	; 0x21
 8002a36:	9a05      	ldr	r2, [sp, #20]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a38:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a3a:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a3c:	0023      	movs	r3, r4
 8002a3e:	3342      	adds	r3, #66	; 0x42
 8002a40:	9305      	str	r3, [sp, #20]
 8002a42:	2340      	movs	r3, #64	; 0x40
 8002a44:	9a05      	ldr	r2, [sp, #20]
 8002a46:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8002a48:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002a4c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a4e:	9b04      	ldr	r3, [sp, #16]
    hi2c->XferISR   = NULL;
 8002a50:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002a52:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002a56:	0020      	movs	r0, r4
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	9a06      	ldr	r2, [sp, #24]
 8002a5c:	9b07      	ldr	r3, [sp, #28]
 8002a5e:	9501      	str	r5, [sp, #4]
 8002a60:	f7ff fef8 	bl	8002854 <I2C_RequestMemoryWrite>
 8002a64:	2800      	cmp	r0, #0
 8002a66:	d002      	beq.n	8002a6e <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8002a68:	9b02      	ldr	r3, [sp, #8]
 8002a6a:	701e      	strb	r6, [r3, #0]
 8002a6c:	e7c8      	b.n	8002a00 <HAL_I2C_Mem_Write+0x34>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a70:	2bff      	cmp	r3, #255	; 0xff
 8002a72:	d954      	bls.n	8002b1e <HAL_I2C_Mem_Write+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a74:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a76:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a78:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a7a:	045b      	lsls	r3, r3, #17
 8002a7c:	9000      	str	r0, [sp, #0]
 8002a7e:	0039      	movs	r1, r7
 8002a80:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a82:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a84:	f7ff fe14 	bl	80026b0 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a88:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8a:	002a      	movs	r2, r5
 8002a8c:	0020      	movs	r0, r4
 8002a8e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002a90:	f7ff fe66 	bl	8002760 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d1b3      	bne.n	8002a00 <HAL_I2C_Mem_Write+0x34>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a9a:	6822      	ldr	r2, [r4, #0]
 8002a9c:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002a9e:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002aa0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002aa2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002aa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002aa6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002aae:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ab0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002ab2:	b292      	uxth	r2, r2
 8002ab4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d017      	beq.n	8002aea <HAL_I2C_Mem_Write+0x11e>
 8002aba:	2a00      	cmp	r2, #0
 8002abc:	d115      	bne.n	8002aea <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	0020      	movs	r0, r4
 8002ac2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002ac4:	9500      	str	r5, [sp, #0]
 8002ac6:	f7ff fe9d 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002aca:	2800      	cmp	r0, #0
 8002acc:	d000      	beq.n	8002ad0 <HAL_I2C_Mem_Write+0x104>
 8002ace:	e797      	b.n	8002a00 <HAL_I2C_Mem_Write+0x34>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ad2:	2bff      	cmp	r3, #255	; 0xff
 8002ad4:	d92b      	bls.n	8002b2e <HAL_I2C_Mem_Write+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ad6:	23ff      	movs	r3, #255	; 0xff
 8002ad8:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	22ff      	movs	r2, #255	; 0xff
 8002ade:	9000      	str	r0, [sp, #0]
 8002ae0:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae2:	0039      	movs	r1, r7
 8002ae4:	0020      	movs	r0, r4
 8002ae6:	f7ff fde3 	bl	80026b0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002aea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1cc      	bne.n	8002a8a <HAL_I2C_Mem_Write+0xbe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af0:	002a      	movs	r2, r5
 8002af2:	0020      	movs	r0, r4
 8002af4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002af6:	f7ff fe5d 	bl	80027b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002afa:	2800      	cmp	r0, #0
 8002afc:	d000      	beq.n	8002b00 <HAL_I2C_Mem_Write+0x134>
 8002afe:	e77f      	b.n	8002a00 <HAL_I2C_Mem_Write+0x34>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b00:	2120      	movs	r1, #32
 8002b02:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002b04:	4d0d      	ldr	r5, [pc, #52]	; (8002b3c <HAL_I2C_Mem_Write+0x170>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b06:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	402a      	ands	r2, r5
 8002b0c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	0023      	movs	r3, r4
 8002b10:	3341      	adds	r3, #65	; 0x41
 8002b12:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b14:	9b05      	ldr	r3, [sp, #20]
    __HAL_UNLOCK(hi2c);
 8002b16:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b18:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002b1a:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002b1c:	e771      	b.n	8002a02 <HAL_I2C_Mem_Write+0x36>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b1e:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8002b20:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b22:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8002b24:	b292      	uxth	r2, r2
 8002b26:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	9000      	str	r0, [sp, #0]
 8002b2c:	e7a7      	b.n	8002a7e <HAL_I2C_Mem_Write+0xb2>
          hi2c->XferSize = hi2c->XferCount;
 8002b2e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b30:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 8002b32:	b292      	uxth	r2, r2
 8002b34:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	9000      	str	r0, [sp, #0]
 8002b3a:	e7d2      	b.n	8002ae2 <HAL_I2C_Mem_Write+0x116>
 8002b3c:	fe00e800 	.word	0xfe00e800

08002b40 <HAL_I2C_Mem_Read>:
{
 8002b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b42:	b08b      	sub	sp, #44	; 0x2c
 8002b44:	9309      	str	r3, [sp, #36]	; 0x24
 8002b46:	ab10      	add	r3, sp, #64	; 0x40
 8002b48:	9208      	str	r2, [sp, #32]
 8002b4a:	cb04      	ldmia	r3!, {r2}
 8002b4c:	0004      	movs	r4, r0
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	9205      	str	r2, [sp, #20]
 8002b52:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b54:	0003      	movs	r3, r0
 8002b56:	3341      	adds	r3, #65	; 0x41
 8002b58:	9307      	str	r3, [sp, #28]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
{
 8002b5c:	000d      	movs	r5, r1
    return HAL_BUSY;
 8002b5e:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d108      	bne.n	8002b76 <HAL_I2C_Mem_Read+0x36>
    if ((pData == NULL) || (Size == 0U))
 8002b64:	2a00      	cmp	r2, #0
 8002b66:	d002      	beq.n	8002b6e <HAL_I2C_Mem_Read+0x2e>
 8002b68:	9b06      	ldr	r3, [sp, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d105      	bne.n	8002b7a <HAL_I2C_Mem_Read+0x3a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002b74:	2001      	movs	r0, #1
}
 8002b76:	b00b      	add	sp, #44	; 0x2c
 8002b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002b7a:	0023      	movs	r3, r4
 8002b7c:	3340      	adds	r3, #64	; 0x40
 8002b7e:	9304      	str	r3, [sp, #16]
 8002b80:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 8002b82:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d0f6      	beq.n	8002b76 <HAL_I2C_Mem_Read+0x36>
 8002b88:	2701      	movs	r7, #1
 8002b8a:	9b04      	ldr	r3, [sp, #16]
 8002b8c:	701f      	strb	r7, [r3, #0]
    tickstart = HAL_GetTick();
 8002b8e:	f7ff fb31 	bl	80021f4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b92:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8002b94:	9003      	str	r0, [sp, #12]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b96:	9000      	str	r0, [sp, #0]
 8002b98:	2319      	movs	r3, #25
 8002b9a:	003a      	movs	r2, r7
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	0209      	lsls	r1, r1, #8
 8002ba0:	f7ff fe30 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002ba4:	1e06      	subs	r6, r0, #0
 8002ba6:	d1e5      	bne.n	8002b74 <HAL_I2C_Mem_Read+0x34>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ba8:	2322      	movs	r3, #34	; 0x22
 8002baa:	9a07      	ldr	r2, [sp, #28]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bac:	0029      	movs	r1, r5
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bae:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bb0:	0023      	movs	r3, r4
 8002bb2:	3342      	adds	r3, #66	; 0x42
 8002bb4:	9307      	str	r3, [sp, #28]
 8002bb6:	2340      	movs	r3, #64	; 0x40
 8002bb8:	9a07      	ldr	r2, [sp, #28]
 8002bba:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8002bbc:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bbe:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002bc0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bc2:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 8002bc4:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002bc6:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bc8:	9b03      	ldr	r3, [sp, #12]
 8002bca:	0020      	movs	r0, r4
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002bd0:	9a08      	ldr	r2, [sp, #32]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bd6:	f7ff fe71 	bl	80028bc <I2C_RequestMemoryRead>
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_I2C_Mem_Read+0xa4>
      __HAL_UNLOCK(hi2c);
 8002bde:	9b04      	ldr	r3, [sp, #16]
 8002be0:	701e      	strb	r6, [r3, #0]
      return HAL_ERROR;
 8002be2:	e7c7      	b.n	8002b74 <HAL_I2C_Mem_Read+0x34>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002be6:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <HAL_I2C_Mem_Read+0x180>)
 8002be8:	2aff      	cmp	r2, #255	; 0xff
 8002bea:	d959      	bls.n	8002ca0 <HAL_I2C_Mem_Read+0x160>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bec:	22ff      	movs	r2, #255	; 0xff
 8002bee:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	045b      	lsls	r3, r3, #17
 8002bf6:	0029      	movs	r1, r5
 8002bf8:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bfa:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bfc:	f7ff fd58 	bl	80026b0 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c00:	27ff      	movs	r7, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c02:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c04:	9b03      	ldr	r3, [sp, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	0020      	movs	r0, r4
 8002c0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002c10:	f7ff fdf8 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d1ad      	bne.n	8002b74 <HAL_I2C_Mem_Read+0x34>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002c22:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002c24:	3301      	adds	r3, #1
 8002c26:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002c28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002c2a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002c34:	b292      	uxth	r2, r2
 8002c36:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d017      	beq.n	8002c6c <HAL_I2C_Mem_Read+0x12c>
 8002c3c:	2a00      	cmp	r2, #0
 8002c3e:	d115      	bne.n	8002c6c <HAL_I2C_Mem_Read+0x12c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c40:	9b03      	ldr	r3, [sp, #12]
 8002c42:	2180      	movs	r1, #128	; 0x80
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	0020      	movs	r0, r4
 8002c48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002c4a:	f7ff fddb 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002c4e:	2800      	cmp	r0, #0
 8002c50:	d000      	beq.n	8002c54 <HAL_I2C_Mem_Read+0x114>
 8002c52:	e78f      	b.n	8002b74 <HAL_I2C_Mem_Read+0x34>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c56:	2bff      	cmp	r3, #255	; 0xff
 8002c58:	d92a      	bls.n	8002cb0 <HAL_I2C_Mem_Read+0x170>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c5e:	8527      	strh	r7, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c60:	045b      	lsls	r3, r3, #17
 8002c62:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c64:	0029      	movs	r1, r5
 8002c66:	0020      	movs	r0, r4
 8002c68:	f7ff fd22 	bl	80026b0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002c6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1c8      	bne.n	8002c04 <HAL_I2C_Mem_Read+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c72:	0020      	movs	r0, r4
 8002c74:	9a03      	ldr	r2, [sp, #12]
 8002c76:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002c78:	f7ff fd9c 	bl	80027b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	d000      	beq.n	8002c82 <HAL_I2C_Mem_Read+0x142>
 8002c80:	e778      	b.n	8002b74 <HAL_I2C_Mem_Read+0x34>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c82:	2120      	movs	r1, #32
 8002c84:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002c86:	4d0f      	ldr	r5, [pc, #60]	; (8002cc4 <HAL_I2C_Mem_Read+0x184>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c88:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	402a      	ands	r2, r5
 8002c8e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	0023      	movs	r3, r4
 8002c92:	3341      	adds	r3, #65	; 0x41
 8002c94:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c96:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8002c98:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c9a:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002c9c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002c9e:	e76a      	b.n	8002b76 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = hi2c->XferCount;
 8002ca0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002ca2:	b292      	uxth	r2, r2
 8002ca4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	049b      	lsls	r3, r3, #18
 8002cae:	e7a2      	b.n	8002bf6 <HAL_I2C_Mem_Read+0xb6>
          hi2c->XferSize = hi2c->XferCount;
 8002cb0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cb2:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	9000      	str	r0, [sp, #0]
 8002cbc:	e7d2      	b.n	8002c64 <HAL_I2C_Mem_Read+0x124>
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	80002400 	.word	0x80002400
 8002cc4:	fe00e800 	.word	0xfe00e800

08002cc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cca:	0004      	movs	r4, r0
 8002ccc:	3441      	adds	r4, #65	; 0x41
 8002cce:	7822      	ldrb	r2, [r4, #0]
{
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002cd4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd6:	b2d6      	uxtb	r6, r2
 8002cd8:	2a20      	cmp	r2, #32
 8002cda:	d118      	bne.n	8002d0e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8002cdc:	001d      	movs	r5, r3
 8002cde:	3540      	adds	r5, #64	; 0x40
 8002ce0:	782a      	ldrb	r2, [r5, #0]
 8002ce2:	2a01      	cmp	r2, #1
 8002ce4:	d013      	beq.n	8002d0e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce6:	2224      	movs	r2, #36	; 0x24
 8002ce8:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3a23      	subs	r2, #35	; 0x23
 8002cee:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cf0:	4807      	ldr	r0, [pc, #28]	; (8002d10 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8002cf2:	4391      	bics	r1, r2
 8002cf4:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cf6:	6819      	ldr	r1, [r3, #0]
 8002cf8:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8002cfa:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cfc:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	4339      	orrs	r1, r7
 8002d02:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d0a:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002d0c:	7028      	strb	r0, [r5, #0]
  }
}
 8002d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d10:	ffffefff 	.word	0xffffefff

08002d14 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d14:	0002      	movs	r2, r0
{
 8002d16:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d18:	3241      	adds	r2, #65	; 0x41
 8002d1a:	7814      	ldrb	r4, [r2, #0]
{
 8002d1c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1e:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d22:	2c20      	cmp	r4, #32
 8002d24:	d117      	bne.n	8002d56 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002d26:	001c      	movs	r4, r3
 8002d28:	3440      	adds	r4, #64	; 0x40
 8002d2a:	7826      	ldrb	r6, [r4, #0]
 8002d2c:	2e01      	cmp	r6, #1
 8002d2e:	d012      	beq.n	8002d56 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d30:	3022      	adds	r0, #34	; 0x22
 8002d32:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3823      	subs	r0, #35	; 0x23
 8002d38:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002d3a:	4f07      	ldr	r7, [pc, #28]	; (8002d58 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8002d3c:	4386      	bics	r6, r0
 8002d3e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002d40:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8002d42:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002d44:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002d46:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002d48:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002d4a:	6819      	ldr	r1, [r3, #0]
 8002d4c:	4308      	orrs	r0, r1
 8002d4e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002d50:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002d52:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002d54:	7020      	strb	r0, [r4, #0]
  }
}
 8002d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d58:	fffff0ff 	.word	0xfffff0ff

08002d5c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
  {
    return HAL_ERROR;
 8002d60:	2001      	movs	r0, #1
  if (hiwdg == NULL)
 8002d62:	2c00      	cmp	r4, #0
 8002d64:	d017      	beq.n	8002d96 <HAL_IWDG_Init+0x3a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <HAL_IWDG_Init+0x58>)

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002d6a:	2507      	movs	r5, #7
  __HAL_IWDG_START(hiwdg);
 8002d6c:	601a      	str	r2, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <HAL_IWDG_Init+0x5c>)
 8002d70:	601a      	str	r2, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002d72:	6862      	ldr	r2, [r4, #4]
 8002d74:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002d76:	68a2      	ldr	r2, [r4, #8]
 8002d78:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 8002d7a:	f7ff fa3b 	bl	80021f4 <HAL_GetTick>
 8002d7e:	0006      	movs	r6, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	0010      	movs	r0, r2
 8002d86:	4028      	ands	r0, r5
 8002d88:	422a      	tst	r2, r5
 8002d8a:	d105      	bne.n	8002d98 <HAL_IWDG_Init+0x3c>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002d8c:	6919      	ldr	r1, [r3, #16]
 8002d8e:	68e2      	ldr	r2, [r4, #12]
 8002d90:	4291      	cmp	r1, r2
 8002d92:	d00c      	beq.n	8002dae <HAL_IWDG_Init+0x52>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002d94:	611a      	str	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002d98:	f7ff fa2c 	bl	80021f4 <HAL_GetTick>
 8002d9c:	1b80      	subs	r0, r0, r6
 8002d9e:	282a      	cmp	r0, #42	; 0x2a
 8002da0:	d9ee      	bls.n	8002d80 <HAL_IWDG_Init+0x24>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	422b      	tst	r3, r5
 8002da8:	d0ea      	beq.n	8002d80 <HAL_IWDG_Init+0x24>
        return HAL_TIMEOUT;
 8002daa:	2003      	movs	r0, #3
 8002dac:	e7f3      	b.n	8002d96 <HAL_IWDG_Init+0x3a>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002dae:	4a03      	ldr	r2, [pc, #12]	; (8002dbc <HAL_IWDG_Init+0x60>)
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e7f0      	b.n	8002d96 <HAL_IWDG_Init+0x3a>
 8002db4:	0000cccc 	.word	0x0000cccc
 8002db8:	00005555 	.word	0x00005555
 8002dbc:	0000aaaa 	.word	0x0000aaaa

08002dc0 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002dc0:	6803      	ldr	r3, [r0, #0]
 8002dc2:	4a02      	ldr	r2, [pc, #8]	; (8002dcc <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 8002dc4:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002dc6:	601a      	str	r2, [r3, #0]
}
 8002dc8:	4770      	bx	lr
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	0000aaaa 	.word	0x0000aaaa

08002dd0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <HAL_PWR_EnableBkUpAccess+0x10>)
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	6811      	ldr	r1, [r2, #0]
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	6013      	str	r3, [r2, #0]
}
 8002ddc:	4770      	bx	lr
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	40007000 	.word	0x40007000

08002de4 <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_PWR_EnterSTOPMode+0x68>)
{
 8002de6:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002de8:	681e      	ldr	r6, [r3, #0]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002dea:	4c19      	ldr	r4, [pc, #100]	; (8002e50 <HAL_PWR_EnterSTOPMode+0x6c>)
{
 8002dec:	0002      	movs	r2, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002dee:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002df0:	6a27      	ldr	r7, [r4, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002df2:	0035      	movs	r5, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002df4:	2401      	movs	r4, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002df6:	0080      	lsls	r0, r0, #2
 8002df8:	4005      	ands	r5, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002dfa:	403c      	ands	r4, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8002dfc:	4206      	tst	r6, r0
 8002dfe:	d005      	beq.n	8002e0c <HAL_PWR_EnterSTOPMode+0x28>
 8002e00:	2c00      	cmp	r4, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	4e13      	ldr	r6, [pc, #76]	; (8002e54 <HAL_PWR_EnterSTOPMode+0x70>)
 8002e08:	4030      	ands	r0, r6
 8002e0a:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002e0c:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8002e0e:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002e10:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8002e12:	4310      	orrs	r0, r2

  /* Store the new value */
  PWR->CR = tmpreg;
 8002e14:	6018      	str	r0, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002e16:	2004      	movs	r0, #4
 8002e18:	4a0f      	ldr	r2, [pc, #60]	; (8002e58 <HAL_PWR_EnterSTOPMode+0x74>)
 8002e1a:	6916      	ldr	r6, [r2, #16]
 8002e1c:	4330      	orrs	r0, r6
 8002e1e:	6110      	str	r0, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002e20:	2901      	cmp	r1, #1
 8002e22:	d10e      	bne.n	8002e42 <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002e24:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002e26:	2004      	movs	r0, #4
 8002e28:	6911      	ldr	r1, [r2, #16]
 8002e2a:	4381      	bics	r1, r0
 8002e2c:	6111      	str	r1, [r2, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8002e2e:	2d00      	cmp	r5, #0
 8002e30:	d006      	beq.n	8002e40 <HAL_PWR_EnterSTOPMode+0x5c>
 8002e32:	2c00      	cmp	r4, #0
 8002e34:	d004      	beq.n	8002e40 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	6819      	ldr	r1, [r3, #0]
 8002e3a:	0092      	lsls	r2, r2, #2
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]
  }
}
 8002e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8002e42:	bf40      	sev
    __WFE();
 8002e44:	bf20      	wfe
    __WFE();
 8002e46:	bf20      	wfe
 8002e48:	e7ed      	b.n	8002e26 <HAL_PWR_EnterSTOPMode+0x42>
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	40010000 	.word	0x40010000
 8002e54:	fffffdff 	.word	0xfffffdff
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e5c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8002e60:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8002e62:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002e64:	4022      	ands	r2, r4
 8002e66:	2a08      	cmp	r2, #8
 8002e68:	d031      	beq.n	8002ece <HAL_RCC_GetSysClockFreq+0x72>
 8002e6a:	2a0c      	cmp	r2, #12
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCC_GetSysClockFreq+0x26>
 8002e6e:	2a04      	cmp	r2, #4
 8002e70:	d125      	bne.n	8002ebe <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e72:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e76:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8002e78:	17c0      	asrs	r0, r0, #31
 8002e7a:	4018      	ands	r0, r3
 8002e7c:	4b17      	ldr	r3, [pc, #92]	; (8002edc <HAL_RCC_GetSysClockFreq+0x80>)
 8002e7e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8002e80:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e82:	02a2      	lsls	r2, r4, #10
 8002e84:	4816      	ldr	r0, [pc, #88]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x84>)
 8002e86:	0f12      	lsrs	r2, r2, #28
 8002e88:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e8a:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002e8c:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e8e:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002e90:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e92:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002e94:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e96:	4211      	tst	r1, r2
 8002e98:	d009      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e9a:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x88>)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	f7fd faee 	bl	8000480 <__aeabi_lmul>
 8002ea4:	0022      	movs	r2, r4
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f7fd faca 	bl	8000440 <__aeabi_uldivmod>
 8002eac:	e7e8      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2310      	movs	r3, #16
 8002eb2:	421a      	tst	r2, r3
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002eb6:	4a0c      	ldr	r2, [pc, #48]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002eb8:	e7f0      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002eba:	4a08      	ldr	r2, [pc, #32]	; (8002edc <HAL_RCC_GetSysClockFreq+0x80>)
 8002ebc:	e7ee      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002ebe:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002ec0:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002ec2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002ec4:	041b      	lsls	r3, r3, #16
 8002ec6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002ec8:	3301      	adds	r3, #1
 8002eca:	4098      	lsls	r0, r3
  return sysclockfreq;
 8002ecc:	e7d8      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8002ece:	4805      	ldr	r0, [pc, #20]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x88>)
 8002ed0:	e7d6      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x24>
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	ff48e500 	.word	0xff48e500
 8002edc:	00f42400 	.word	0x00f42400
 8002ee0:	080051a7 	.word	0x080051a7
 8002ee4:	007a1200 	.word	0x007a1200
 8002ee8:	003d0900 	.word	0x003d0900

08002eec <HAL_RCC_OscConfig>:
{
 8002eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eee:	0005      	movs	r5, r0
 8002ef0:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d055      	beq.n	8002fa2 <HAL_RCC_OscConfig+0xb6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef6:	230c      	movs	r3, #12
 8002ef8:	4cb6      	ldr	r4, [pc, #728]	; (80031d4 <HAL_RCC_OscConfig+0x2e8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efa:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002efc:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002efe:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f00:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	025b      	lsls	r3, r3, #9
 8002f06:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f08:	07d2      	lsls	r2, r2, #31
 8002f0a:	d43e      	bmi.n	8002f8a <HAL_RCC_OscConfig+0x9e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0c:	682b      	ldr	r3, [r5, #0]
 8002f0e:	079b      	lsls	r3, r3, #30
 8002f10:	d500      	bpl.n	8002f14 <HAL_RCC_OscConfig+0x28>
 8002f12:	e087      	b.n	8003024 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f14:	682b      	ldr	r3, [r5, #0]
 8002f16:	06db      	lsls	r3, r3, #27
 8002f18:	d529      	bpl.n	8002f6e <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f1a:	2e00      	cmp	r6, #0
 8002f1c:	d000      	beq.n	8002f20 <HAL_RCC_OscConfig+0x34>
 8002f1e:	e0e0      	b.n	80030e2 <HAL_RCC_OscConfig+0x1f6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	059b      	lsls	r3, r3, #22
 8002f24:	d502      	bpl.n	8002f2c <HAL_RCC_OscConfig+0x40>
 8002f26:	69ab      	ldr	r3, [r5, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d03a      	beq.n	8002fa2 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f2c:	6862      	ldr	r2, [r4, #4]
 8002f2e:	49aa      	ldr	r1, [pc, #680]	; (80031d8 <HAL_RCC_OscConfig+0x2ec>)
 8002f30:	6a2b      	ldr	r3, [r5, #32]
 8002f32:	400a      	ands	r2, r1
 8002f34:	431a      	orrs	r2, r3
 8002f36:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f38:	6861      	ldr	r1, [r4, #4]
 8002f3a:	69ea      	ldr	r2, [r5, #28]
 8002f3c:	0209      	lsls	r1, r1, #8
 8002f3e:	0a09      	lsrs	r1, r1, #8
 8002f40:	0612      	lsls	r2, r2, #24
 8002f42:	430a      	orrs	r2, r1
 8002f44:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	0b5b      	lsrs	r3, r3, #13
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	0212      	lsls	r2, r2, #8
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f52:	68e1      	ldr	r1, [r4, #12]
 8002f54:	060a      	lsls	r2, r1, #24
 8002f56:	49a1      	ldr	r1, [pc, #644]	; (80031dc <HAL_RCC_OscConfig+0x2f0>)
 8002f58:	0f12      	lsrs	r2, r2, #28
 8002f5a:	5c8a      	ldrb	r2, [r1, r2]
 8002f5c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f5e:	4aa0      	ldr	r2, [pc, #640]	; (80031e0 <HAL_RCC_OscConfig+0x2f4>)
 8002f60:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8002f62:	4ba0      	ldr	r3, [pc, #640]	; (80031e4 <HAL_RCC_OscConfig+0x2f8>)
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	f7ff f901 	bl	800216c <HAL_InitTick>
        if(status != HAL_OK)
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d130      	bne.n	8002fd0 <HAL_RCC_OscConfig+0xe4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6e:	682b      	ldr	r3, [r5, #0]
 8002f70:	071b      	lsls	r3, r3, #28
 8002f72:	d500      	bpl.n	8002f76 <HAL_RCC_OscConfig+0x8a>
 8002f74:	e0ec      	b.n	8003150 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f76:	682b      	ldr	r3, [r5, #0]
 8002f78:	075b      	lsls	r3, r3, #29
 8002f7a:	d500      	bpl.n	8002f7e <HAL_RCC_OscConfig+0x92>
 8002f7c:	e10e      	b.n	800319c <HAL_RCC_OscConfig+0x2b0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d000      	beq.n	8002f86 <HAL_RCC_OscConfig+0x9a>
 8002f84:	e195      	b.n	80032b2 <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 8002f86:	2000      	movs	r0, #0
 8002f88:	e022      	b.n	8002fd0 <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f8a:	2e08      	cmp	r6, #8
 8002f8c:	d003      	beq.n	8002f96 <HAL_RCC_OscConfig+0xaa>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f8e:	2e0c      	cmp	r6, #12
 8002f90:	d109      	bne.n	8002fa6 <HAL_RCC_OscConfig+0xba>
 8002f92:	2f00      	cmp	r7, #0
 8002f94:	d007      	beq.n	8002fa6 <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	039b      	lsls	r3, r3, #14
 8002f9a:	d5b7      	bpl.n	8002f0c <HAL_RCC_OscConfig+0x20>
 8002f9c:	686b      	ldr	r3, [r5, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1b4      	bne.n	8002f0c <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	e014      	b.n	8002fd0 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa6:	686a      	ldr	r2, [r5, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d113      	bne.n	8002fd4 <HAL_RCC_OscConfig+0xe8>
 8002fac:	6822      	ldr	r2, [r4, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002fb2:	f7ff f91f 	bl	80021f4 <HAL_GetTick>
 8002fb6:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	0292      	lsls	r2, r2, #10
 8002fbe:	4213      	tst	r3, r2
 8002fc0:	d1a4      	bne.n	8002f0c <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc2:	f7ff f917 	bl	80021f4 <HAL_GetTick>
 8002fc6:	9b01      	ldr	r3, [sp, #4]
 8002fc8:	1ac0      	subs	r0, r0, r3
 8002fca:	2864      	cmp	r0, #100	; 0x64
 8002fcc:	d9f4      	bls.n	8002fb8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002fce:	2003      	movs	r0, #3
}
 8002fd0:	b007      	add	sp, #28
 8002fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd4:	21a0      	movs	r1, #160	; 0xa0
 8002fd6:	02c9      	lsls	r1, r1, #11
 8002fd8:	428a      	cmp	r2, r1
 8002fda:	d105      	bne.n	8002fe8 <HAL_RCC_OscConfig+0xfc>
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	6821      	ldr	r1, [r4, #0]
 8002fe0:	02d2      	lsls	r2, r2, #11
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	6022      	str	r2, [r4, #0]
 8002fe6:	e7e1      	b.n	8002fac <HAL_RCC_OscConfig+0xc0>
 8002fe8:	6821      	ldr	r1, [r4, #0]
 8002fea:	487f      	ldr	r0, [pc, #508]	; (80031e8 <HAL_RCC_OscConfig+0x2fc>)
 8002fec:	4001      	ands	r1, r0
 8002fee:	6021      	str	r1, [r4, #0]
 8002ff0:	6821      	ldr	r1, [r4, #0]
 8002ff2:	400b      	ands	r3, r1
 8002ff4:	9305      	str	r3, [sp, #20]
 8002ff6:	9b05      	ldr	r3, [sp, #20]
 8002ff8:	497c      	ldr	r1, [pc, #496]	; (80031ec <HAL_RCC_OscConfig+0x300>)
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	400b      	ands	r3, r1
 8002ffe:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003000:	2a00      	cmp	r2, #0
 8003002:	d1d6      	bne.n	8002fb2 <HAL_RCC_OscConfig+0xc6>
        tickstart = HAL_GetTick();
 8003004:	f7ff f8f6 	bl	80021f4 <HAL_GetTick>
 8003008:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	0292      	lsls	r2, r2, #10
 8003010:	4213      	tst	r3, r2
 8003012:	d100      	bne.n	8003016 <HAL_RCC_OscConfig+0x12a>
 8003014:	e77a      	b.n	8002f0c <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003016:	f7ff f8ed 	bl	80021f4 <HAL_GetTick>
 800301a:	9b01      	ldr	r3, [sp, #4]
 800301c:	1ac0      	subs	r0, r0, r3
 800301e:	2864      	cmp	r0, #100	; 0x64
 8003020:	d9f3      	bls.n	800300a <HAL_RCC_OscConfig+0x11e>
 8003022:	e7d4      	b.n	8002fce <HAL_RCC_OscConfig+0xe2>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003024:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8003026:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003028:	4213      	tst	r3, r2
 800302a:	d003      	beq.n	8003034 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800302c:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800302e:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003030:	4311      	orrs	r1, r2
 8003032:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003034:	2e04      	cmp	r6, #4
 8003036:	d003      	beq.n	8003040 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003038:	2e0c      	cmp	r6, #12
 800303a:	d124      	bne.n	8003086 <HAL_RCC_OscConfig+0x19a>
 800303c:	2f00      	cmp	r7, #0
 800303e:	d122      	bne.n	8003086 <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003040:	6822      	ldr	r2, [r4, #0]
 8003042:	0752      	lsls	r2, r2, #29
 8003044:	d501      	bpl.n	800304a <HAL_RCC_OscConfig+0x15e>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ab      	beq.n	8002fa2 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304a:	6861      	ldr	r1, [r4, #4]
 800304c:	692a      	ldr	r2, [r5, #16]
 800304e:	4868      	ldr	r0, [pc, #416]	; (80031f0 <HAL_RCC_OscConfig+0x304>)
 8003050:	0212      	lsls	r2, r2, #8
 8003052:	4001      	ands	r1, r0
 8003054:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003056:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800305a:	6822      	ldr	r2, [r4, #0]
 800305c:	438a      	bics	r2, r1
 800305e:	4313      	orrs	r3, r2
 8003060:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003062:	f7ff fefb 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 8003066:	68e3      	ldr	r3, [r4, #12]
 8003068:	4a5c      	ldr	r2, [pc, #368]	; (80031dc <HAL_RCC_OscConfig+0x2f0>)
 800306a:	061b      	lsls	r3, r3, #24
 800306c:	0f1b      	lsrs	r3, r3, #28
 800306e:	5cd3      	ldrb	r3, [r2, r3]
 8003070:	40d8      	lsrs	r0, r3
 8003072:	4b5b      	ldr	r3, [pc, #364]	; (80031e0 <HAL_RCC_OscConfig+0x2f4>)
 8003074:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8003076:	4b5b      	ldr	r3, [pc, #364]	; (80031e4 <HAL_RCC_OscConfig+0x2f8>)
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	f7ff f877 	bl	800216c <HAL_InitTick>
      if(status != HAL_OK)
 800307e:	2800      	cmp	r0, #0
 8003080:	d100      	bne.n	8003084 <HAL_RCC_OscConfig+0x198>
 8003082:	e747      	b.n	8002f14 <HAL_RCC_OscConfig+0x28>
 8003084:	e7a4      	b.n	8002fd0 <HAL_RCC_OscConfig+0xe4>
      if(hsi_state != RCC_HSI_OFF)
 8003086:	2b00      	cmp	r3, #0
 8003088:	d019      	beq.n	80030be <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800308a:	2109      	movs	r1, #9
 800308c:	6822      	ldr	r2, [r4, #0]
 800308e:	438a      	bics	r2, r1
 8003090:	4313      	orrs	r3, r2
 8003092:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003094:	f7ff f8ae 	bl	80021f4 <HAL_GetTick>
 8003098:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800309a:	2204      	movs	r2, #4
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	4213      	tst	r3, r2
 80030a0:	d007      	beq.n	80030b2 <HAL_RCC_OscConfig+0x1c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a2:	6862      	ldr	r2, [r4, #4]
 80030a4:	692b      	ldr	r3, [r5, #16]
 80030a6:	4952      	ldr	r1, [pc, #328]	; (80031f0 <HAL_RCC_OscConfig+0x304>)
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	400a      	ands	r2, r1
 80030ac:	4313      	orrs	r3, r2
 80030ae:	6063      	str	r3, [r4, #4]
 80030b0:	e730      	b.n	8002f14 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b2:	f7ff f89f 	bl	80021f4 <HAL_GetTick>
 80030b6:	1bc0      	subs	r0, r0, r7
 80030b8:	2802      	cmp	r0, #2
 80030ba:	d9ee      	bls.n	800309a <HAL_RCC_OscConfig+0x1ae>
 80030bc:	e787      	b.n	8002fce <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 80030be:	2201      	movs	r2, #1
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	4393      	bics	r3, r2
 80030c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80030c6:	f7ff f895 	bl	80021f4 <HAL_GetTick>
 80030ca:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030cc:	2204      	movs	r2, #4
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	4213      	tst	r3, r2
 80030d2:	d100      	bne.n	80030d6 <HAL_RCC_OscConfig+0x1ea>
 80030d4:	e71e      	b.n	8002f14 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d6:	f7ff f88d 	bl	80021f4 <HAL_GetTick>
 80030da:	1bc0      	subs	r0, r0, r7
 80030dc:	2802      	cmp	r0, #2
 80030de:	d9f5      	bls.n	80030cc <HAL_RCC_OscConfig+0x1e0>
 80030e0:	e775      	b.n	8002fce <HAL_RCC_OscConfig+0xe2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030e2:	69ab      	ldr	r3, [r5, #24]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_MSI_ENABLE();
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	6822      	ldr	r2, [r4, #0]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4313      	orrs	r3, r2
 80030f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80030f2:	f7ff f87f 	bl	80021f4 <HAL_GetTick>
 80030f6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030f8:	2280      	movs	r2, #128	; 0x80
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	0092      	lsls	r2, r2, #2
 80030fe:	4213      	tst	r3, r2
 8003100:	d00d      	beq.n	800311e <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003102:	6863      	ldr	r3, [r4, #4]
 8003104:	4a34      	ldr	r2, [pc, #208]	; (80031d8 <HAL_RCC_OscConfig+0x2ec>)
 8003106:	4013      	ands	r3, r2
 8003108:	6a2a      	ldr	r2, [r5, #32]
 800310a:	4313      	orrs	r3, r2
 800310c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800310e:	6862      	ldr	r2, [r4, #4]
 8003110:	69eb      	ldr	r3, [r5, #28]
 8003112:	0212      	lsls	r2, r2, #8
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	0a12      	lsrs	r2, r2, #8
 8003118:	4313      	orrs	r3, r2
 800311a:	6063      	str	r3, [r4, #4]
 800311c:	e727      	b.n	8002f6e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800311e:	f7ff f869 	bl	80021f4 <HAL_GetTick>
 8003122:	1bc0      	subs	r0, r0, r7
 8003124:	2802      	cmp	r0, #2
 8003126:	d9e7      	bls.n	80030f8 <HAL_RCC_OscConfig+0x20c>
 8003128:	e751      	b.n	8002fce <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_MSI_DISABLE();
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	4a31      	ldr	r2, [pc, #196]	; (80031f4 <HAL_RCC_OscConfig+0x308>)
 800312e:	4013      	ands	r3, r2
 8003130:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003132:	f7ff f85f 	bl	80021f4 <HAL_GetTick>
 8003136:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	0092      	lsls	r2, r2, #2
 800313e:	4213      	tst	r3, r2
 8003140:	d100      	bne.n	8003144 <HAL_RCC_OscConfig+0x258>
 8003142:	e714      	b.n	8002f6e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003144:	f7ff f856 	bl	80021f4 <HAL_GetTick>
 8003148:	1bc0      	subs	r0, r0, r7
 800314a:	2802      	cmp	r0, #2
 800314c:	d9f4      	bls.n	8003138 <HAL_RCC_OscConfig+0x24c>
 800314e:	e73e      	b.n	8002fce <HAL_RCC_OscConfig+0xe2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003150:	696a      	ldr	r2, [r5, #20]
 8003152:	2301      	movs	r3, #1
 8003154:	2a00      	cmp	r2, #0
 8003156:	d010      	beq.n	800317a <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_LSI_ENABLE();
 8003158:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800315a:	4313      	orrs	r3, r2
 800315c:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800315e:	f7ff f849 	bl	80021f4 <HAL_GetTick>
 8003162:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003164:	2202      	movs	r2, #2
 8003166:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003168:	4213      	tst	r3, r2
 800316a:	d000      	beq.n	800316e <HAL_RCC_OscConfig+0x282>
 800316c:	e703      	b.n	8002f76 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800316e:	f7ff f841 	bl	80021f4 <HAL_GetTick>
 8003172:	1bc0      	subs	r0, r0, r7
 8003174:	2802      	cmp	r0, #2
 8003176:	d9f5      	bls.n	8003164 <HAL_RCC_OscConfig+0x278>
 8003178:	e729      	b.n	8002fce <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_LSI_DISABLE();
 800317a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800317c:	439a      	bics	r2, r3
 800317e:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003180:	f7ff f838 	bl	80021f4 <HAL_GetTick>
 8003184:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003186:	2202      	movs	r2, #2
 8003188:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800318a:	4213      	tst	r3, r2
 800318c:	d100      	bne.n	8003190 <HAL_RCC_OscConfig+0x2a4>
 800318e:	e6f2      	b.n	8002f76 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003190:	f7ff f830 	bl	80021f4 <HAL_GetTick>
 8003194:	1bc0      	subs	r0, r0, r7
 8003196:	2802      	cmp	r0, #2
 8003198:	d9f5      	bls.n	8003186 <HAL_RCC_OscConfig+0x29a>
 800319a:	e718      	b.n	8002fce <HAL_RCC_OscConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319c:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800319e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031a2:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80031a4:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a6:	421a      	tst	r2, r3
 80031a8:	d104      	bne.n	80031b4 <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031ac:	4313      	orrs	r3, r2
 80031ae:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80031b0:	2301      	movs	r3, #1
 80031b2:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	4f10      	ldr	r7, [pc, #64]	; (80031f8 <HAL_RCC_OscConfig+0x30c>)
 80031b8:	0052      	lsls	r2, r2, #1
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	4213      	tst	r3, r2
 80031be:	d01d      	beq.n	80031fc <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c0:	2280      	movs	r2, #128	; 0x80
 80031c2:	68ab      	ldr	r3, [r5, #8]
 80031c4:	0052      	lsls	r2, r2, #1
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d12e      	bne.n	8003228 <HAL_RCC_OscConfig+0x33c>
 80031ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80031cc:	4313      	orrs	r3, r2
 80031ce:	6523      	str	r3, [r4, #80]	; 0x50
 80031d0:	e04f      	b.n	8003272 <HAL_RCC_OscConfig+0x386>
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	40021000 	.word	0x40021000
 80031d8:	ffff1fff 	.word	0xffff1fff
 80031dc:	0800518f 	.word	0x0800518f
 80031e0:	20000004 	.word	0x20000004
 80031e4:	2000000c 	.word	0x2000000c
 80031e8:	fffeffff 	.word	0xfffeffff
 80031ec:	fffbffff 	.word	0xfffbffff
 80031f0:	ffffe0ff 	.word	0xffffe0ff
 80031f4:	fffffeff 	.word	0xfffffeff
 80031f8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031fc:	2280      	movs	r2, #128	; 0x80
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	0052      	lsls	r2, r2, #1
 8003202:	4313      	orrs	r3, r2
 8003204:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003206:	f7fe fff5 	bl	80021f4 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 800320e:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003210:	9303      	str	r3, [sp, #12]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	9a03      	ldr	r2, [sp, #12]
 8003216:	4213      	tst	r3, r2
 8003218:	d1d2      	bne.n	80031c0 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321a:	f7fe ffeb 	bl	80021f4 <HAL_GetTick>
 800321e:	9b02      	ldr	r3, [sp, #8]
 8003220:	1ac0      	subs	r0, r0, r3
 8003222:	2864      	cmp	r0, #100	; 0x64
 8003224:	d9f5      	bls.n	8003212 <HAL_RCC_OscConfig+0x326>
 8003226:	e6d2      	b.n	8002fce <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003228:	2b00      	cmp	r3, #0
 800322a:	d116      	bne.n	800325a <HAL_RCC_OscConfig+0x36e>
 800322c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800322e:	4a51      	ldr	r2, [pc, #324]	; (8003374 <HAL_RCC_OscConfig+0x488>)
 8003230:	4013      	ands	r3, r2
 8003232:	6523      	str	r3, [r4, #80]	; 0x50
 8003234:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003236:	4a50      	ldr	r2, [pc, #320]	; (8003378 <HAL_RCC_OscConfig+0x48c>)
 8003238:	4013      	ands	r3, r2
 800323a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800323c:	f7fe ffda 	bl	80021f4 <HAL_GetTick>
 8003240:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003242:	2280      	movs	r2, #128	; 0x80
 8003244:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003246:	0092      	lsls	r2, r2, #2
 8003248:	4213      	tst	r3, r2
 800324a:	d01a      	beq.n	8003282 <HAL_RCC_OscConfig+0x396>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800324c:	f7fe ffd2 	bl	80021f4 <HAL_GetTick>
 8003250:	4b4a      	ldr	r3, [pc, #296]	; (800337c <HAL_RCC_OscConfig+0x490>)
 8003252:	1bc0      	subs	r0, r0, r7
 8003254:	4298      	cmp	r0, r3
 8003256:	d9f4      	bls.n	8003242 <HAL_RCC_OscConfig+0x356>
 8003258:	e6b9      	b.n	8002fce <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325a:	21a0      	movs	r1, #160	; 0xa0
 800325c:	00c9      	lsls	r1, r1, #3
 800325e:	428b      	cmp	r3, r1
 8003260:	d118      	bne.n	8003294 <HAL_RCC_OscConfig+0x3a8>
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	430b      	orrs	r3, r1
 800326a:	6523      	str	r3, [r4, #80]	; 0x50
 800326c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800326e:	431a      	orrs	r2, r3
 8003270:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003272:	f7fe ffbf 	bl	80021f4 <HAL_GetTick>
 8003276:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003278:	2280      	movs	r2, #128	; 0x80
 800327a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800327c:	0092      	lsls	r2, r2, #2
 800327e:	4213      	tst	r3, r2
 8003280:	d010      	beq.n	80032a4 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8003282:	9b01      	ldr	r3, [sp, #4]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d000      	beq.n	800328a <HAL_RCC_OscConfig+0x39e>
 8003288:	e679      	b.n	8002f7e <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 800328a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800328c:	4a3c      	ldr	r2, [pc, #240]	; (8003380 <HAL_RCC_OscConfig+0x494>)
 800328e:	4013      	ands	r3, r2
 8003290:	63a3      	str	r3, [r4, #56]	; 0x38
 8003292:	e674      	b.n	8002f7e <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003294:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003296:	4a37      	ldr	r2, [pc, #220]	; (8003374 <HAL_RCC_OscConfig+0x488>)
 8003298:	4013      	ands	r3, r2
 800329a:	6523      	str	r3, [r4, #80]	; 0x50
 800329c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800329e:	4a36      	ldr	r2, [pc, #216]	; (8003378 <HAL_RCC_OscConfig+0x48c>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	e794      	b.n	80031ce <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fe ffa6 	bl	80021f4 <HAL_GetTick>
 80032a8:	4b34      	ldr	r3, [pc, #208]	; (800337c <HAL_RCC_OscConfig+0x490>)
 80032aa:	1bc0      	subs	r0, r0, r7
 80032ac:	4298      	cmp	r0, r3
 80032ae:	d9e3      	bls.n	8003278 <HAL_RCC_OscConfig+0x38c>
 80032b0:	e68d      	b.n	8002fce <HAL_RCC_OscConfig+0xe2>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b2:	2e0c      	cmp	r6, #12
 80032b4:	d043      	beq.n	800333e <HAL_RCC_OscConfig+0x452>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b6:	4a33      	ldr	r2, [pc, #204]	; (8003384 <HAL_RCC_OscConfig+0x498>)
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d12e      	bne.n	800331a <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_DISABLE();
 80032bc:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032be:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80032c0:	4013      	ands	r3, r2
 80032c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80032c4:	f7fe ff96 	bl	80021f4 <HAL_GetTick>
 80032c8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032ca:	04bf      	lsls	r7, r7, #18
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	423b      	tst	r3, r7
 80032d0:	d11d      	bne.n	800330e <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80032d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80032d6:	68e2      	ldr	r2, [r4, #12]
 80032d8:	430b      	orrs	r3, r1
 80032da:	492b      	ldr	r1, [pc, #172]	; (8003388 <HAL_RCC_OscConfig+0x49c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032dc:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032de:	400a      	ands	r2, r1
 80032e0:	4313      	orrs	r3, r2
 80032e2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032e4:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	6822      	ldr	r2, [r4, #0]
 80032ee:	045b      	lsls	r3, r3, #17
 80032f0:	4313      	orrs	r3, r2
 80032f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80032f4:	f7fe ff7e 	bl	80021f4 <HAL_GetTick>
 80032f8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	4233      	tst	r3, r6
 80032fe:	d000      	beq.n	8003302 <HAL_RCC_OscConfig+0x416>
 8003300:	e641      	b.n	8002f86 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003302:	f7fe ff77 	bl	80021f4 <HAL_GetTick>
 8003306:	1b40      	subs	r0, r0, r5
 8003308:	2802      	cmp	r0, #2
 800330a:	d9f6      	bls.n	80032fa <HAL_RCC_OscConfig+0x40e>
 800330c:	e65f      	b.n	8002fce <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330e:	f7fe ff71 	bl	80021f4 <HAL_GetTick>
 8003312:	1b80      	subs	r0, r0, r6
 8003314:	2802      	cmp	r0, #2
 8003316:	d9d9      	bls.n	80032cc <HAL_RCC_OscConfig+0x3e0>
 8003318:	e659      	b.n	8002fce <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_PLL_DISABLE();
 800331a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800331c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800331e:	4013      	ands	r3, r2
 8003320:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003322:	f7fe ff67 	bl	80021f4 <HAL_GetTick>
 8003326:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003328:	04b6      	lsls	r6, r6, #18
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	4233      	tst	r3, r6
 800332e:	d100      	bne.n	8003332 <HAL_RCC_OscConfig+0x446>
 8003330:	e629      	b.n	8002f86 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003332:	f7fe ff5f 	bl	80021f4 <HAL_GetTick>
 8003336:	1b40      	subs	r0, r0, r5
 8003338:	2802      	cmp	r0, #2
 800333a:	d9f6      	bls.n	800332a <HAL_RCC_OscConfig+0x43e>
 800333c:	e647      	b.n	8002fce <HAL_RCC_OscConfig+0xe2>
        return HAL_ERROR;
 800333e:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003340:	2b01      	cmp	r3, #1
 8003342:	d100      	bne.n	8003346 <HAL_RCC_OscConfig+0x45a>
 8003344:	e644      	b.n	8002fd0 <HAL_RCC_OscConfig+0xe4>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003346:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8003348:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800334c:	0252      	lsls	r2, r2, #9
 800334e:	401a      	ands	r2, r3
 8003350:	428a      	cmp	r2, r1
 8003352:	d000      	beq.n	8003356 <HAL_RCC_OscConfig+0x46a>
 8003354:	e625      	b.n	8002fa2 <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003356:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003358:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800335a:	0392      	lsls	r2, r2, #14
 800335c:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	428a      	cmp	r2, r1
 8003360:	d000      	beq.n	8003364 <HAL_RCC_OscConfig+0x478>
 8003362:	e61e      	b.n	8002fa2 <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003364:	22c0      	movs	r2, #192	; 0xc0
 8003366:	0412      	lsls	r2, r2, #16
 8003368:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800336a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800336c:	4293      	cmp	r3, r2
 800336e:	d100      	bne.n	8003372 <HAL_RCC_OscConfig+0x486>
 8003370:	e609      	b.n	8002f86 <HAL_RCC_OscConfig+0x9a>
 8003372:	e616      	b.n	8002fa2 <HAL_RCC_OscConfig+0xb6>
 8003374:	fffffeff 	.word	0xfffffeff
 8003378:	fffffbff 	.word	0xfffffbff
 800337c:	00001388 	.word	0x00001388
 8003380:	efffffff 	.word	0xefffffff
 8003384:	feffffff 	.word	0xfeffffff
 8003388:	ff02ffff 	.word	0xff02ffff

0800338c <HAL_RCC_ClockConfig>:
{
 800338c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800338e:	1e04      	subs	r4, r0, #0
 8003390:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8003392:	d101      	bne.n	8003398 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8003394:	2001      	movs	r0, #1
}
 8003396:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003398:	2601      	movs	r6, #1
 800339a:	4d5b      	ldr	r5, [pc, #364]	; (8003508 <HAL_RCC_ClockConfig+0x17c>)
 800339c:	9a01      	ldr	r2, [sp, #4]
 800339e:	682b      	ldr	r3, [r5, #0]
 80033a0:	4033      	ands	r3, r6
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d331      	bcc.n	800340a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a6:	6822      	ldr	r2, [r4, #0]
 80033a8:	0793      	lsls	r3, r2, #30
 80033aa:	d443      	bmi.n	8003434 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ac:	07d3      	lsls	r3, r2, #31
 80033ae:	d449      	bmi.n	8003444 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033b0:	2601      	movs	r6, #1
 80033b2:	682b      	ldr	r3, [r5, #0]
 80033b4:	9a01      	ldr	r2, [sp, #4]
 80033b6:	4033      	ands	r3, r6
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d909      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	43b3      	bics	r3, r6
 80033c0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80033c2:	f7fe ff17 	bl	80021f4 <HAL_GetTick>
 80033c6:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	4233      	tst	r3, r6
 80033cc:	d000      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x44>
 80033ce:	e08c      	b.n	80034ea <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	6822      	ldr	r2, [r4, #0]
 80033d2:	4d4e      	ldr	r5, [pc, #312]	; (800350c <HAL_RCC_ClockConfig+0x180>)
 80033d4:	0753      	lsls	r3, r2, #29
 80033d6:	d500      	bpl.n	80033da <HAL_RCC_ClockConfig+0x4e>
 80033d8:	e08f      	b.n	80034fa <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033da:	0713      	lsls	r3, r2, #28
 80033dc:	d506      	bpl.n	80033ec <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033de:	68ea      	ldr	r2, [r5, #12]
 80033e0:	6923      	ldr	r3, [r4, #16]
 80033e2:	494b      	ldr	r1, [pc, #300]	; (8003510 <HAL_RCC_ClockConfig+0x184>)
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	400a      	ands	r2, r1
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ec:	f7ff fd36 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 80033f0:	68eb      	ldr	r3, [r5, #12]
 80033f2:	4a48      	ldr	r2, [pc, #288]	; (8003514 <HAL_RCC_ClockConfig+0x188>)
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	0f1b      	lsrs	r3, r3, #28
 80033f8:	5cd3      	ldrb	r3, [r2, r3]
 80033fa:	40d8      	lsrs	r0, r3
 80033fc:	4b46      	ldr	r3, [pc, #280]	; (8003518 <HAL_RCC_ClockConfig+0x18c>)
 80033fe:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003400:	4b46      	ldr	r3, [pc, #280]	; (800351c <HAL_RCC_ClockConfig+0x190>)
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	f7fe feb2 	bl	800216c <HAL_InitTick>
  if(status != HAL_OK)
 8003408:	e7c5      	b.n	8003396 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	682b      	ldr	r3, [r5, #0]
 800340c:	9a01      	ldr	r2, [sp, #4]
 800340e:	43b3      	bics	r3, r6
 8003410:	4313      	orrs	r3, r2
 8003412:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003414:	f7fe feee 	bl	80021f4 <HAL_GetTick>
 8003418:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	682b      	ldr	r3, [r5, #0]
 800341c:	9a01      	ldr	r2, [sp, #4]
 800341e:	4033      	ands	r3, r6
 8003420:	4293      	cmp	r3, r2
 8003422:	d0c0      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fe fee6 	bl	80021f4 <HAL_GetTick>
 8003428:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <HAL_RCC_ClockConfig+0x194>)
 800342a:	1bc0      	subs	r0, r0, r7
 800342c:	4298      	cmp	r0, r3
 800342e:	d9f4      	bls.n	800341a <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8003430:	2003      	movs	r0, #3
 8003432:	e7b0      	b.n	8003396 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003434:	20f0      	movs	r0, #240	; 0xf0
 8003436:	4935      	ldr	r1, [pc, #212]	; (800350c <HAL_RCC_ClockConfig+0x180>)
 8003438:	68cb      	ldr	r3, [r1, #12]
 800343a:	4383      	bics	r3, r0
 800343c:	68a0      	ldr	r0, [r4, #8]
 800343e:	4303      	orrs	r3, r0
 8003440:	60cb      	str	r3, [r1, #12]
 8003442:	e7b3      	b.n	80033ac <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003444:	4e31      	ldr	r6, [pc, #196]	; (800350c <HAL_RCC_ClockConfig+0x180>)
 8003446:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003448:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344a:	2a02      	cmp	r2, #2
 800344c:	d118      	bne.n	8003480 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800344e:	039b      	lsls	r3, r3, #14
 8003450:	d5a0      	bpl.n	8003394 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003452:	2103      	movs	r1, #3
 8003454:	68f3      	ldr	r3, [r6, #12]
 8003456:	438b      	bics	r3, r1
 8003458:	4313      	orrs	r3, r2
 800345a:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800345c:	f7fe feca 	bl	80021f4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003460:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8003462:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003464:	2b02      	cmp	r3, #2
 8003466:	d118      	bne.n	800349a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003468:	220c      	movs	r2, #12
 800346a:	68f3      	ldr	r3, [r6, #12]
 800346c:	4013      	ands	r3, r2
 800346e:	2b08      	cmp	r3, #8
 8003470:	d09e      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003472:	f7fe febf 	bl	80021f4 <HAL_GetTick>
 8003476:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_RCC_ClockConfig+0x194>)
 8003478:	1bc0      	subs	r0, r0, r7
 800347a:	4298      	cmp	r0, r3
 800347c:	d9f4      	bls.n	8003468 <HAL_RCC_ClockConfig+0xdc>
 800347e:	e7d7      	b.n	8003430 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003480:	2a03      	cmp	r2, #3
 8003482:	d102      	bne.n	800348a <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003484:	019b      	lsls	r3, r3, #6
 8003486:	d4e4      	bmi.n	8003452 <HAL_RCC_ClockConfig+0xc6>
 8003488:	e784      	b.n	8003394 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800348a:	2a01      	cmp	r2, #1
 800348c:	d102      	bne.n	8003494 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800348e:	075b      	lsls	r3, r3, #29
 8003490:	d4df      	bmi.n	8003452 <HAL_RCC_ClockConfig+0xc6>
 8003492:	e77f      	b.n	8003394 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003494:	059b      	lsls	r3, r3, #22
 8003496:	d4dc      	bmi.n	8003452 <HAL_RCC_ClockConfig+0xc6>
 8003498:	e77c      	b.n	8003394 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800349a:	2b03      	cmp	r3, #3
 800349c:	d10b      	bne.n	80034b6 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800349e:	220c      	movs	r2, #12
 80034a0:	68f3      	ldr	r3, [r6, #12]
 80034a2:	4013      	ands	r3, r2
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d083      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a8:	f7fe fea4 	bl	80021f4 <HAL_GetTick>
 80034ac:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <HAL_RCC_ClockConfig+0x194>)
 80034ae:	1bc0      	subs	r0, r0, r7
 80034b0:	4298      	cmp	r0, r3
 80034b2:	d9f4      	bls.n	800349e <HAL_RCC_ClockConfig+0x112>
 80034b4:	e7bc      	b.n	8003430 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d011      	beq.n	80034de <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80034ba:	220c      	movs	r2, #12
 80034bc:	68f3      	ldr	r3, [r6, #12]
 80034be:	4213      	tst	r3, r2
 80034c0:	d100      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x138>
 80034c2:	e775      	b.n	80033b0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7fe fe96 	bl	80021f4 <HAL_GetTick>
 80034c8:	4b15      	ldr	r3, [pc, #84]	; (8003520 <HAL_RCC_ClockConfig+0x194>)
 80034ca:	1bc0      	subs	r0, r0, r7
 80034cc:	4298      	cmp	r0, r3
 80034ce:	d9f4      	bls.n	80034ba <HAL_RCC_ClockConfig+0x12e>
 80034d0:	e7ae      	b.n	8003430 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d2:	f7fe fe8f 	bl	80021f4 <HAL_GetTick>
 80034d6:	4b12      	ldr	r3, [pc, #72]	; (8003520 <HAL_RCC_ClockConfig+0x194>)
 80034d8:	1bc0      	subs	r0, r0, r7
 80034da:	4298      	cmp	r0, r3
 80034dc:	d8a8      	bhi.n	8003430 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034de:	220c      	movs	r2, #12
 80034e0:	68f3      	ldr	r3, [r6, #12]
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d1f4      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x146>
 80034e8:	e762      	b.n	80033b0 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ea:	f7fe fe83 	bl	80021f4 <HAL_GetTick>
 80034ee:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <HAL_RCC_ClockConfig+0x194>)
 80034f0:	1bc0      	subs	r0, r0, r7
 80034f2:	4298      	cmp	r0, r3
 80034f4:	d800      	bhi.n	80034f8 <HAL_RCC_ClockConfig+0x16c>
 80034f6:	e767      	b.n	80033c8 <HAL_RCC_ClockConfig+0x3c>
 80034f8:	e79a      	b.n	8003430 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034fa:	68eb      	ldr	r3, [r5, #12]
 80034fc:	4909      	ldr	r1, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x198>)
 80034fe:	400b      	ands	r3, r1
 8003500:	68e1      	ldr	r1, [r4, #12]
 8003502:	430b      	orrs	r3, r1
 8003504:	60eb      	str	r3, [r5, #12]
 8003506:	e768      	b.n	80033da <HAL_RCC_ClockConfig+0x4e>
 8003508:	40022000 	.word	0x40022000
 800350c:	40021000 	.word	0x40021000
 8003510:	ffffc7ff 	.word	0xffffc7ff
 8003514:	0800518f 	.word	0x0800518f
 8003518:	20000004 	.word	0x20000004
 800351c:	2000000c 	.word	0x2000000c
 8003520:	00001388 	.word	0x00001388
 8003524:	fffff8ff 	.word	0xfffff8ff

08003528 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <HAL_RCC_GetPCLK1Freq+0x14>)
 800352a:	4a05      	ldr	r2, [pc, #20]	; (8003540 <HAL_RCC_GetPCLK1Freq+0x18>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	055b      	lsls	r3, r3, #21
 8003530:	0f5b      	lsrs	r3, r3, #29
 8003532:	5cd3      	ldrb	r3, [r2, r3]
 8003534:	4a03      	ldr	r2, [pc, #12]	; (8003544 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003536:	6810      	ldr	r0, [r2, #0]
 8003538:	40d8      	lsrs	r0, r3
}
 800353a:	4770      	bx	lr
 800353c:	40021000 	.word	0x40021000
 8003540:	0800519f 	.word	0x0800519f
 8003544:	20000004 	.word	0x20000004

08003548 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <HAL_RCC_GetPCLK2Freq+0x14>)
 800354a:	4a05      	ldr	r2, [pc, #20]	; (8003560 <HAL_RCC_GetPCLK2Freq+0x18>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	049b      	lsls	r3, r3, #18
 8003550:	0f5b      	lsrs	r3, r3, #29
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	4a03      	ldr	r2, [pc, #12]	; (8003564 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003556:	6810      	ldr	r0, [r2, #0]
 8003558:	40d8      	lsrs	r0, r3
}
 800355a:	4770      	bx	lr
 800355c:	40021000 	.word	0x40021000
 8003560:	0800519f 	.word	0x0800519f
 8003564:	20000004 	.word	0x20000004

08003568 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003568:	6803      	ldr	r3, [r0, #0]
{
 800356a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800356c:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800356e:	069b      	lsls	r3, r3, #26
 8003570:	d53d      	bpl.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x86>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8003574:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003576:	4c50      	ldr	r4, [pc, #320]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003578:	055b      	lsls	r3, r3, #21
 800357a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 800357c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357e:	421a      	tst	r2, r3
 8003580:	d104      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003582:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003584:	4313      	orrs	r3, r2
 8003586:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003588:	2301      	movs	r3, #1
 800358a:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	2780      	movs	r7, #128	; 0x80
 800358e:	4e4b      	ldr	r6, [pc, #300]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003590:	007f      	lsls	r7, r7, #1
 8003592:	6833      	ldr	r3, [r6, #0]
 8003594:	423b      	tst	r3, r7
 8003596:	d051      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003598:	686b      	ldr	r3, [r5, #4]
 800359a:	22c0      	movs	r2, #192	; 0xc0
 800359c:	20c0      	movs	r0, #192	; 0xc0
 800359e:	001e      	movs	r6, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80035a0:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80035a2:	0292      	lsls	r2, r2, #10
 80035a4:	0380      	lsls	r0, r0, #14
 80035a6:	0017      	movs	r7, r2
 80035a8:	4016      	ands	r6, r2
 80035aa:	4003      	ands	r3, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80035ac:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80035ae:	428b      	cmp	r3, r1
 80035b0:	d155      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xf6>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80035b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80035b4:	001a      	movs	r2, r3
 80035b6:	403a      	ands	r2, r7

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80035b8:	423b      	tst	r3, r7
 80035ba:	d157      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x104>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035bc:	6869      	ldr	r1, [r5, #4]
 80035be:	23c0      	movs	r3, #192	; 0xc0
 80035c0:	000a      	movs	r2, r1
 80035c2:	029b      	lsls	r3, r3, #10
 80035c4:	401a      	ands	r2, r3
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d107      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x72>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	483c      	ldr	r0, [pc, #240]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80035ce:	4003      	ands	r3, r0
 80035d0:	20c0      	movs	r0, #192	; 0xc0
 80035d2:	0380      	lsls	r0, r0, #14
 80035d4:	4001      	ands	r1, r0
 80035d6:	430b      	orrs	r3, r1
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80035dc:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035de:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e0:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d103      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035e8:	4a36      	ldr	r2, [pc, #216]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ee:	682a      	ldr	r2, [r5, #0]
 80035f0:	0793      	lsls	r3, r2, #30
 80035f2:	d506      	bpl.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035f4:	200c      	movs	r0, #12
 80035f6:	4930      	ldr	r1, [pc, #192]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80035f8:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80035fa:	4383      	bics	r3, r0
 80035fc:	68a8      	ldr	r0, [r5, #8]
 80035fe:	4303      	orrs	r3, r0
 8003600:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003602:	0753      	lsls	r3, r2, #29
 8003604:	d506      	bpl.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003606:	492c      	ldr	r1, [pc, #176]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003608:	482f      	ldr	r0, [pc, #188]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800360c:	4003      	ands	r3, r0
 800360e:	68e8      	ldr	r0, [r5, #12]
 8003610:	4303      	orrs	r3, r0
 8003612:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003614:	0713      	lsls	r3, r2, #28
 8003616:	d506      	bpl.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003618:	4927      	ldr	r1, [pc, #156]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800361a:	482c      	ldr	r0, [pc, #176]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800361c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800361e:	4003      	ands	r3, r0
 8003620:	6928      	ldr	r0, [r5, #16]
 8003622:	4303      	orrs	r3, r0
 8003624:	64cb      	str	r3, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8003626:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003628:	0613      	lsls	r3, r2, #24
 800362a:	d517      	bpl.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800362c:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800362e:	4928      	ldr	r1, [pc, #160]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003630:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003632:	400b      	ands	r3, r1
 8003634:	6969      	ldr	r1, [r5, #20]
 8003636:	430b      	orrs	r3, r1
 8003638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800363a:	e00f      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800363c:	6833      	ldr	r3, [r6, #0]
 800363e:	433b      	orrs	r3, r7
 8003640:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003642:	f7fe fdd7 	bl	80021f4 <HAL_GetTick>
 8003646:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	6833      	ldr	r3, [r6, #0]
 800364a:	423b      	tst	r3, r7
 800364c:	d1a4      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364e:	f7fe fdd1 	bl	80021f4 <HAL_GetTick>
 8003652:	9b01      	ldr	r3, [sp, #4]
 8003654:	1ac0      	subs	r0, r0, r3
 8003656:	2864      	cmp	r0, #100	; 0x64
 8003658:	d9f6      	bls.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xe0>
          return HAL_TIMEOUT;
 800365a:	2003      	movs	r0, #3
}
 800365c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800365e:	4296      	cmp	r6, r2
 8003660:	d1a7      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003662:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8003664:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003666:	039b      	lsls	r3, r3, #14
 8003668:	d5a3      	bpl.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800366a:	e7f7      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800366c:	42b2      	cmp	r2, r6
 800366e:	d0a5      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x54>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003670:	682b      	ldr	r3, [r5, #0]
 8003672:	069b      	lsls	r3, r3, #26
 8003674:	d5a2      	bpl.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003676:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003678:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800367a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800367c:	0312      	lsls	r2, r2, #12
 800367e:	4302      	orrs	r2, r0
 8003680:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003682:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003686:	4814      	ldr	r0, [pc, #80]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x170>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003688:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800368a:	4002      	ands	r2, r0
 800368c:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800368e:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003690:	05cb      	lsls	r3, r1, #23
 8003692:	d400      	bmi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8003694:	e792      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8003696:	f7fe fdad 	bl	80021f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800369a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800369c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800369e:	00bf      	lsls	r7, r7, #2
 80036a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80036a2:	423b      	tst	r3, r7
 80036a4:	d000      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80036a6:	e789      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fe fda4 	bl	80021f4 <HAL_GetTick>
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80036ae:	1b80      	subs	r0, r0, r6
 80036b0:	4298      	cmp	r0, r3
 80036b2:	d9f5      	bls.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 80036b4:	e7d1      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xf2>
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40007000 	.word	0x40007000
 80036c0:	ffcfffff 	.word	0xffcfffff
 80036c4:	efffffff 	.word	0xefffffff
 80036c8:	fffff3ff 	.word	0xfffff3ff
 80036cc:	ffffcfff 	.word	0xffffcfff
 80036d0:	fff3ffff 	.word	0xfff3ffff
 80036d4:	fffcffff 	.word	0xfffcffff
 80036d8:	fff7ffff 	.word	0xfff7ffff
 80036dc:	00001388 	.word	0x00001388

080036e0 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80036e0:	21a0      	movs	r1, #160	; 0xa0
 80036e2:	6802      	ldr	r2, [r0, #0]
{
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80036e6:	68d3      	ldr	r3, [r2, #12]
{
 80036e8:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80036ea:	438b      	bics	r3, r1
 80036ec:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80036ee:	f7fe fd81 	bl	80021f4 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036f2:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80036f4:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036f6:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036f8:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	4233      	tst	r3, r6
 8003700:	d001      	beq.n	8003706 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8003702:	2000      	movs	r0, #0
}
 8003704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003706:	f7fe fd75 	bl	80021f4 <HAL_GetTick>
 800370a:	1b40      	subs	r0, r0, r5
 800370c:	42b8      	cmp	r0, r7
 800370e:	d9f4      	bls.n	80036fa <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8003710:	2003      	movs	r0, #3
 8003712:	e7f7      	b.n	8003704 <HAL_RTC_WaitForSynchro+0x24>

08003714 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003716:	2440      	movs	r4, #64	; 0x40
 8003718:	6803      	ldr	r3, [r0, #0]
{
 800371a:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	4222      	tst	r2, r4
 8003720:	d001      	beq.n	8003726 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003722:	2000      	movs	r0, #0
}
 8003724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003726:	2201      	movs	r2, #1
 8003728:	4252      	negs	r2, r2
 800372a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800372c:	f7fe fd62 	bl	80021f4 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003730:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8003732:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003734:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003736:	682b      	ldr	r3, [r5, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	4223      	tst	r3, r4
 800373c:	d1f1      	bne.n	8003722 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800373e:	f7fe fd59 	bl	80021f4 <HAL_GetTick>
 8003742:	1b80      	subs	r0, r0, r6
 8003744:	42b8      	cmp	r0, r7
 8003746:	d9f6      	bls.n	8003736 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8003748:	2003      	movs	r0, #3
 800374a:	e7eb      	b.n	8003724 <RTC_EnterInitMode+0x10>

0800374c <HAL_RTC_Init>:
{
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003750:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8003752:	2800      	cmp	r0, #0
 8003754:	d01a      	beq.n	800378c <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003756:	1c86      	adds	r6, r0, #2
 8003758:	7ff3      	ldrb	r3, [r6, #31]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d103      	bne.n	8003768 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8003760:	1943      	adds	r3, r0, r5
 8003762:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8003764:	f7fe fb58 	bl	8001e18 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003768:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800376a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800376c:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800376e:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003770:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003772:	625a      	str	r2, [r3, #36]	; 0x24
 8003774:	3a77      	subs	r2, #119	; 0x77
 8003776:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003778:	f7ff ffcc 	bl	8003714 <RTC_EnterInitMode>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	1e05      	subs	r5, r0, #0
 8003780:	d006      	beq.n	8003790 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003782:	22ff      	movs	r2, #255	; 0xff
 8003784:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003786:	2304      	movs	r3, #4
 8003788:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800378a:	2501      	movs	r5, #1
}
 800378c:	0028      	movs	r0, r5
 800378e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	491b      	ldr	r1, [pc, #108]	; (8003800 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003794:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003796:	400a      	ands	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800379a:	6862      	ldr	r2, [r4, #4]
 800379c:	6899      	ldr	r1, [r3, #8]
 800379e:	4302      	orrs	r2, r0
 80037a0:	69a0      	ldr	r0, [r4, #24]
 80037a2:	4302      	orrs	r2, r0
 80037a4:	430a      	orrs	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80037a8:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80037aa:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80037ac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80037ae:	68a2      	ldr	r2, [r4, #8]
 80037b0:	6919      	ldr	r1, [r3, #16]
 80037b2:	0412      	lsls	r2, r2, #16
 80037b4:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80037b6:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80037b8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	438a      	bics	r2, r1
 80037be:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80037c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c2:	397d      	subs	r1, #125	; 0x7d
 80037c4:	438a      	bics	r2, r1
 80037c6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80037c8:	69e2      	ldr	r2, [r4, #28]
 80037ca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80037cc:	4302      	orrs	r2, r0
 80037ce:	430a      	orrs	r2, r1
 80037d0:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	069b      	lsls	r3, r3, #26
 80037d6:	d40c      	bmi.n	80037f2 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037d8:	0020      	movs	r0, r4
 80037da:	f7ff ff81 	bl	80036e0 <HAL_RTC_WaitForSynchro>
 80037de:	2800      	cmp	r0, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037e2:	22ff      	movs	r2, #255	; 0xff
 80037e4:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 80037e6:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80037ea:	2304      	movs	r3, #4
 80037ec:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80037ee:	77e5      	strb	r5, [r4, #31]
 80037f0:	e7cb      	b.n	800378a <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037f2:	22ff      	movs	r2, #255	; 0xff
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80037f8:	2301      	movs	r3, #1
 80037fa:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 80037fc:	e7c6      	b.n	800378c <HAL_RTC_Init+0x40>
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	ff8fffbf 	.word	0xff8fffbf

08003804 <HAL_RTCEx_SetWakeUpTimer_IT>:
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003804:	2302      	movs	r3, #2
{
 8003806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003808:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800380a:	1c46      	adds	r6, r0, #1
{
 800380c:	9101      	str	r1, [sp, #4]
 800380e:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(hrtc);
 8003810:	7ff2      	ldrb	r2, [r6, #31]
{
 8003812:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8003814:	0018      	movs	r0, r3
 8003816:	2a01      	cmp	r2, #1
 8003818:	d05a      	beq.n	80038d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
 800381a:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;
 800381c:	18e7      	adds	r7, r4, r3
  __HAL_LOCK(hrtc);
 800381e:	77f2      	strb	r2, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003820:	77fb      	strb	r3, [r7, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	32c9      	adds	r2, #201	; 0xc9
 8003826:	625a      	str	r2, [r3, #36]	; 0x24
 8003828:	3a77      	subs	r2, #119	; 0x77
 800382a:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	055b      	lsls	r3, r3, #21
 8003830:	d438      	bmi.n	80038a4 <HAL_RTCEx_SetWakeUpTimer_IT+0xa0>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	492f      	ldr	r1, [pc, #188]	; (80038f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 8003836:	689a      	ldr	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);

  tickstart = HAL_GetTick();

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003838:	2504      	movs	r5, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800383a:	400a      	ands	r2, r1
 800383c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800383e:	68d9      	ldr	r1, [r3, #12]
 8003840:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8003842:	b2c9      	uxtb	r1, r1
 8003844:	430a      	orrs	r2, r1
 8003846:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 8003848:	f7fe fcd4 	bl	80021f4 <HAL_GetTick>
 800384c:	9000      	str	r0, [sp, #0]
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	0011      	movs	r1, r2
 8003854:	4029      	ands	r1, r5
 8003856:	9103      	str	r1, [sp, #12]
 8003858:	422a      	tst	r2, r5
 800385a:	d03b      	beq.n	80038d4 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800385c:	2107      	movs	r1, #7
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800385e:	9a01      	ldr	r2, [sp, #4]
 8003860:	615a      	str	r2, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	438a      	bics	r2, r1
 8003866:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	9902      	ldr	r1, [sp, #8]
 800386c:	430a      	orrs	r2, r1

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800386e:	2180      	movs	r1, #128	; 0x80
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003870:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003872:	4a22      	ldr	r2, [pc, #136]	; (80038fc <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8003874:	0349      	lsls	r1, r1, #13
 8003876:	6810      	ldr	r0, [r2, #0]
 8003878:	4308      	orrs	r0, r1
 800387a:	6010      	str	r0, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800387c:	6890      	ldr	r0, [r2, #8]
 800387e:	4301      	orrs	r1, r0
 8003880:	6091      	str	r1, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	6899      	ldr	r1, [r3, #8]
 8003886:	01d2      	lsls	r2, r2, #7
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800388c:	2280      	movs	r2, #128	; 0x80
 800388e:	6899      	ldr	r1, [r3, #8]
 8003890:	00d2      	lsls	r2, r2, #3
 8003892:	430a      	orrs	r2, r1
 8003894:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003896:	22ff      	movs	r2, #255	; 0xff

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003898:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800389a:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800389c:	2301      	movs	r3, #1
 800389e:	77fb      	strb	r3, [r7, #31]
  __HAL_UNLOCK(hrtc);
 80038a0:	77f0      	strb	r0, [r6, #31]

  return HAL_OK;
 80038a2:	e015      	b.n	80038d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
    tickstart = HAL_GetTick();
 80038a4:	f7fe fca6 	bl	80021f4 <HAL_GetTick>
 80038a8:	0005      	movs	r5, r0
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80038aa:	2204      	movs	r2, #4
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	4213      	tst	r3, r2
 80038b2:	d0be      	beq.n	8003832 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038b4:	f7fe fc9e 	bl	80021f4 <HAL_GetTick>
 80038b8:	23fa      	movs	r3, #250	; 0xfa
 80038ba:	1b40      	subs	r0, r0, r5
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4298      	cmp	r0, r3
 80038c0:	d9f3      	bls.n	80038aa <HAL_RTCEx_SetWakeUpTimer_IT+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038c2:	22ff      	movs	r2, #255	; 0xff
 80038c4:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038c6:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 80038ca:	2300      	movs	r3, #0
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038cc:	77f8      	strb	r0, [r7, #31]
      __HAL_UNLOCK(hrtc);
 80038ce:	77f3      	strb	r3, [r6, #31]
}
 80038d0:	b005      	add	sp, #20
 80038d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038d4:	f7fe fc8e 	bl	80021f4 <HAL_GetTick>
 80038d8:	9b00      	ldr	r3, [sp, #0]
 80038da:	1ac0      	subs	r0, r0, r3
 80038dc:	23fa      	movs	r3, #250	; 0xfa
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4298      	cmp	r0, r3
 80038e2:	d9b4      	bls.n	800384e <HAL_RTCEx_SetWakeUpTimer_IT+0x4a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038e4:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038e6:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_UNLOCK(hrtc);
 80038ec:	9b03      	ldr	r3, [sp, #12]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038ee:	77f8      	strb	r0, [r7, #31]
      __HAL_UNLOCK(hrtc);
 80038f0:	e7ed      	b.n	80038ce <HAL_RTCEx_SetWakeUpTimer_IT+0xca>
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	fffffbff 	.word	0xfffffbff
 80038f8:	fffffb7f 	.word	0xfffffb7f
 80038fc:	40010400 	.word	0x40010400

08003900 <HAL_RTCEx_DeactivateWakeUpTimer>:
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003900:	2302      	movs	r3, #2
{
 8003902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003904:	1c45      	adds	r5, r0, #1
 8003906:	7fea      	ldrb	r2, [r5, #31]
{
 8003908:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800390a:	0018      	movs	r0, r3
 800390c:	2a01      	cmp	r2, #1
 800390e:	d031      	beq.n	8003974 <HAL_RTCEx_DeactivateWakeUpTimer+0x74>
 8003910:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003912:	18e6      	adds	r6, r4, r3
  __HAL_LOCK(hrtc);
 8003914:	77ea      	strb	r2, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003916:	77f3      	strb	r3, [r6, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	32c9      	adds	r2, #201	; 0xc9
 800391c:	625a      	str	r2, [r3, #36]	; 0x24
 800391e:	3a77      	subs	r2, #119	; 0x77
 8003920:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	4914      	ldr	r1, [pc, #80]	; (8003978 <HAL_RTCEx_DeactivateWakeUpTimer+0x78>)
  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);

  tickstart = HAL_GetTick();
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003926:	2704      	movs	r7, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003928:	400a      	ands	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	4913      	ldr	r1, [pc, #76]	; (800397c <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>)
 8003930:	400a      	ands	r2, r1
 8003932:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 8003934:	f7fe fc5e 	bl	80021f4 <HAL_GetTick>
 8003938:	9000      	str	r0, [sp, #0]
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	0011      	movs	r1, r2
 8003940:	4039      	ands	r1, r7
 8003942:	9101      	str	r1, [sp, #4]
 8003944:	423a      	tst	r2, r7
 8003946:	d006      	beq.n	8003956 <HAL_RTCEx_DeactivateWakeUpTimer+0x56>
      return HAL_TIMEOUT;
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003948:	22ff      	movs	r2, #255	; 0xff

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800394a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800394c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800394e:	2301      	movs	r3, #1
 8003950:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8003952:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
 8003954:	e00e      	b.n	8003974 <HAL_RTCEx_DeactivateWakeUpTimer+0x74>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003956:	f7fe fc4d 	bl	80021f4 <HAL_GetTick>
 800395a:	9b00      	ldr	r3, [sp, #0]
 800395c:	1ac0      	subs	r0, r0, r3
 800395e:	23fa      	movs	r3, #250	; 0xfa
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4298      	cmp	r0, r3
 8003964:	d9e9      	bls.n	800393a <HAL_RTCEx_DeactivateWakeUpTimer+0x3a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003966:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003968:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_UNLOCK(hrtc);
 800396e:	9b01      	ldr	r3, [sp, #4]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003970:	77f0      	strb	r0, [r6, #31]
      __HAL_UNLOCK(hrtc);
 8003972:	77eb      	strb	r3, [r5, #31]
}
 8003974:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	fffffbff 	.word	0xfffffbff
 800397c:	ffffbfff 	.word	0xffffbfff

08003980 <HAL_RTCEx_WakeUpTimerEventCallback>:
 8003980:	4770      	bx	lr
	...

08003984 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003984:	6803      	ldr	r3, [r0, #0]
{
 8003986:	b510      	push	{r4, lr}
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003988:	68db      	ldr	r3, [r3, #12]
{
 800398a:	0004      	movs	r4, r0
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800398c:	055b      	lsls	r3, r3, #21
 800398e:	d507      	bpl.n	80039a0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003990:	f7ff fff6 	bl	8003980 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003994:	6821      	ldr	r1, [r4, #0]
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8003998:	68ca      	ldr	r2, [r1, #12]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	4313      	orrs	r3, r2
 800399e:	60cb      	str	r3, [r1, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80039a0:	2280      	movs	r2, #128	; 0x80
 80039a2:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80039a4:	0352      	lsls	r2, r2, #13
 80039a6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80039a8:	2301      	movs	r3, #1
 80039aa:	3402      	adds	r4, #2
 80039ac:	77e3      	strb	r3, [r4, #31]
}
 80039ae:	bd10      	pop	{r4, pc}
 80039b0:	fffffb7f 	.word	0xfffffb7f
 80039b4:	40010400 	.word	0x40010400

080039b8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b8:	2280      	movs	r2, #128	; 0x80
{
 80039ba:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80039bc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039be:	05d2      	lsls	r2, r2, #23
 80039c0:	4290      	cmp	r0, r2
 80039c2:	d005      	beq.n	80039d0 <TIM_Base_SetConfig+0x18>
 80039c4:	4c10      	ldr	r4, [pc, #64]	; (8003a08 <TIM_Base_SetConfig+0x50>)
 80039c6:	42a0      	cmp	r0, r4
 80039c8:	d002      	beq.n	80039d0 <TIM_Base_SetConfig+0x18>
 80039ca:	4c10      	ldr	r4, [pc, #64]	; (8003a0c <TIM_Base_SetConfig+0x54>)
 80039cc:	42a0      	cmp	r0, r4
 80039ce:	d10f      	bne.n	80039f0 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d0:	2470      	movs	r4, #112	; 0x70
 80039d2:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80039d4:	684c      	ldr	r4, [r1, #4]
 80039d6:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d8:	4290      	cmp	r0, r2
 80039da:	d005      	beq.n	80039e8 <TIM_Base_SetConfig+0x30>
 80039dc:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <TIM_Base_SetConfig+0x50>)
 80039de:	4290      	cmp	r0, r2
 80039e0:	d002      	beq.n	80039e8 <TIM_Base_SetConfig+0x30>
 80039e2:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <TIM_Base_SetConfig+0x54>)
 80039e4:	4290      	cmp	r0, r2
 80039e6:	d103      	bne.n	80039f0 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e8:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <TIM_Base_SetConfig+0x58>)
 80039ea:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ec:	68ca      	ldr	r2, [r1, #12]
 80039ee:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f0:	2280      	movs	r2, #128	; 0x80
 80039f2:	4393      	bics	r3, r2
 80039f4:	690a      	ldr	r2, [r1, #16]
 80039f6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80039f8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039fa:	688b      	ldr	r3, [r1, #8]
 80039fc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039fe:	680b      	ldr	r3, [r1, #0]
 8003a00:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a02:	2301      	movs	r3, #1
 8003a04:	6143      	str	r3, [r0, #20]
}
 8003a06:	bd10      	pop	{r4, pc}
 8003a08:	40010800 	.word	0x40010800
 8003a0c:	40011400 	.word	0x40011400
 8003a10:	fffffcff 	.word	0xfffffcff

08003a14 <HAL_TIM_Base_Init>:
{
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003a18:	2001      	movs	r0, #1
  if (htim == NULL)
 8003a1a:	2c00      	cmp	r4, #0
 8003a1c:	d01d      	beq.n	8003a5a <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1e:	0025      	movs	r5, r4
 8003a20:	3539      	adds	r5, #57	; 0x39
 8003a22:	782b      	ldrb	r3, [r5, #0]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d105      	bne.n	8003a36 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003a2a:	0023      	movs	r3, r4
 8003a2c:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8003a2e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003a30:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8003a32:	f7fe faff 	bl	8002034 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a36:	2302      	movs	r3, #2
 8003a38:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a3a:	6820      	ldr	r0, [r4, #0]
 8003a3c:	1d21      	adds	r1, r4, #4
 8003a3e:	f7ff ffbb 	bl	80039b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a42:	0022      	movs	r2, r4
 8003a44:	2301      	movs	r3, #1
  return HAL_OK;
 8003a46:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a48:	323e      	adds	r2, #62	; 0x3e
 8003a4a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	343d      	adds	r4, #61	; 0x3d
 8003a4e:	3a04      	subs	r2, #4
 8003a50:	7013      	strb	r3, [r2, #0]
 8003a52:	7053      	strb	r3, [r2, #1]
 8003a54:	7093      	strb	r3, [r2, #2]
 8003a56:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	702b      	strb	r3, [r5, #0]
}
 8003a5a:	bd70      	pop	{r4, r5, r6, pc}

08003a5c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003a5c:	0002      	movs	r2, r0
{
 8003a5e:	0003      	movs	r3, r0
    return HAL_ERROR;
 8003a60:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8003a62:	3239      	adds	r2, #57	; 0x39
 8003a64:	7811      	ldrb	r1, [r2, #0]
 8003a66:	4281      	cmp	r1, r0
 8003a68:	d116      	bne.n	8003a98 <HAL_TIM_Base_Start+0x3c>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6a:	2102      	movs	r1, #2
 8003a6c:	7011      	strb	r1, [r2, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6e:	2280      	movs	r2, #128	; 0x80
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	05d2      	lsls	r2, r2, #23
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d005      	beq.n	8003a84 <HAL_TIM_Base_Start+0x28>
 8003a78:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <HAL_TIM_Base_Start+0x48>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d002      	beq.n	8003a84 <HAL_TIM_Base_Start+0x28>
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <HAL_TIM_Base_Start+0x4c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d10a      	bne.n	8003a9a <HAL_TIM_Base_Start+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a84:	2107      	movs	r1, #7
 8003a86:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8003a88:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a8a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8c:	2a06      	cmp	r2, #6
 8003a8e:	d003      	beq.n	8003a98 <HAL_TIM_Base_Start+0x3c>
      __HAL_TIM_ENABLE(htim);
 8003a90:	2201      	movs	r2, #1
 8003a92:	6819      	ldr	r1, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]
}
 8003a98:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4310      	orrs	r0, r2
 8003a9e:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	e7f9      	b.n	8003a98 <HAL_TIM_Base_Start+0x3c>
 8003aa4:	40010800 	.word	0x40010800
 8003aa8:	40011400 	.word	0x40011400

08003aac <HAL_TIM_ConfigClockSource>:
{
 8003aac:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003aae:	0005      	movs	r5, r0
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	3538      	adds	r5, #56	; 0x38
 8003ab4:	782c      	ldrb	r4, [r5, #0]
{
 8003ab6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003ab8:	0010      	movs	r0, r2
 8003aba:	2c01      	cmp	r4, #1
 8003abc:	d01d      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003abe:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8003ac0:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac2:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 8003ac4:	702c      	strb	r4, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac6:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003ac8:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aca:	4849      	ldr	r0, [pc, #292]	; (8003bf0 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr = htim->Instance->SMCR;
 8003acc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ace:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8003ad0:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8003ad2:	680a      	ldr	r2, [r1, #0]
 8003ad4:	2a60      	cmp	r2, #96	; 0x60
 8003ad6:	d05d      	beq.n	8003b94 <HAL_TIM_ConfigClockSource+0xe8>
 8003ad8:	d830      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x90>
 8003ada:	2a40      	cmp	r2, #64	; 0x40
 8003adc:	d100      	bne.n	8003ae0 <HAL_TIM_ConfigClockSource+0x34>
 8003ade:	e071      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x118>
 8003ae0:	d814      	bhi.n	8003b0c <HAL_TIM_ConfigClockSource+0x60>
 8003ae2:	2a20      	cmp	r2, #32
 8003ae4:	d00c      	beq.n	8003b00 <HAL_TIM_ConfigClockSource+0x54>
 8003ae6:	d809      	bhi.n	8003afc <HAL_TIM_ConfigClockSource+0x50>
 8003ae8:	2110      	movs	r1, #16
 8003aea:	0010      	movs	r0, r2
 8003aec:	4388      	bics	r0, r1
 8003aee:	d007      	beq.n	8003b00 <HAL_TIM_ConfigClockSource+0x54>
 8003af0:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 8003af2:	2301      	movs	r3, #1
 8003af4:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8003af6:	2300      	movs	r3, #0
 8003af8:	702b      	strb	r3, [r5, #0]
}
 8003afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8003afc:	2a30      	cmp	r2, #48	; 0x30
 8003afe:	d1f7      	bne.n	8003af0 <HAL_TIM_ConfigClockSource+0x44>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b00:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003b02:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b04:	4381      	bics	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b06:	430a      	orrs	r2, r1
 8003b08:	2107      	movs	r1, #7
 8003b0a:	e030      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0xc2>
  switch (sClockSourceConfig->ClockSource)
 8003b0c:	2a50      	cmp	r2, #80	; 0x50
 8003b0e:	d1ef      	bne.n	8003af0 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b10:	6848      	ldr	r0, [r1, #4]
 8003b12:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8003b14:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b16:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b18:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1a:	43a7      	bics	r7, r4
 8003b1c:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b1e:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003b20:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b22:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b24:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b26:	240a      	movs	r4, #10
 8003b28:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8003b2a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003b2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b2e:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b30:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003b32:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b34:	438a      	bics	r2, r1
 8003b36:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b38:	2257      	movs	r2, #87	; 0x57
 8003b3a:	e018      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0xc2>
  switch (sClockSourceConfig->ClockSource)
 8003b3c:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 8003b40:	017f      	lsls	r7, r7, #5
 8003b42:	42ba      	cmp	r2, r7
 8003b44:	d0d5      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0x46>
 8003b46:	2080      	movs	r0, #128	; 0x80
 8003b48:	0180      	lsls	r0, r0, #6
 8003b4a:	4282      	cmp	r2, r0
 8003b4c:	d013      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0xca>
 8003b4e:	0020      	movs	r0, r4
 8003b50:	2a70      	cmp	r2, #112	; 0x70
 8003b52:	d1ce      	bne.n	8003af2 <HAL_TIM_ConfigClockSource+0x46>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b54:	689a      	ldr	r2, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b56:	4827      	ldr	r0, [pc, #156]	; (8003bf4 <HAL_TIM_ConfigClockSource+0x148>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b58:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b5a:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b5c:	688a      	ldr	r2, [r1, #8]
 8003b5e:	68c9      	ldr	r1, [r1, #12]
 8003b60:	4322      	orrs	r2, r4
 8003b62:	0209      	lsls	r1, r1, #8
 8003b64:	430a      	orrs	r2, r1
 8003b66:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b68:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b6a:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8003b6c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b6e:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8003b70:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003b72:	609a      	str	r2, [r3, #8]
}
 8003b74:	e7bd      	b.n	8003af2 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8003b76:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b78:	481e      	ldr	r0, [pc, #120]	; (8003bf4 <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b7a:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b7c:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b7e:	688a      	ldr	r2, [r1, #8]
 8003b80:	68c9      	ldr	r1, [r1, #12]
 8003b82:	4322      	orrs	r2, r4
 8003b84:	0209      	lsls	r1, r1, #8
 8003b86:	430a      	orrs	r2, r1
 8003b88:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 8003b8a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b8c:	2280      	movs	r2, #128	; 0x80
 8003b8e:	6899      	ldr	r1, [r3, #8]
 8003b90:	01d2      	lsls	r2, r2, #7
 8003b92:	e7ec      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0xc2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b94:	2410      	movs	r4, #16
 8003b96:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b98:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9a:	43a0      	bics	r0, r4
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b9c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba0:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba2:	4f15      	ldr	r7, [pc, #84]	; (8003bf8 <HAL_TIM_ConfigClockSource+0x14c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ba4:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba6:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ba8:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003baa:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8003bac:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8003bae:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bb0:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bb2:	43a0      	bics	r0, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bb4:	0112      	lsls	r2, r2, #4
 8003bb6:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8003bb8:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003bba:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bbc:	438a      	bics	r2, r1
 8003bbe:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bc0:	2267      	movs	r2, #103	; 0x67
 8003bc2:	e7d4      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0xc2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc4:	6848      	ldr	r0, [r1, #4]
 8003bc6:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8003bc8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bca:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bcc:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bce:	43a7      	bics	r7, r4
 8003bd0:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bd2:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003bd4:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bd6:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd8:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bda:	240a      	movs	r4, #10
 8003bdc:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8003bde:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003be0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be2:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003be4:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003be6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003be8:	438a      	bics	r2, r1
 8003bea:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bec:	2247      	movs	r2, #71	; 0x47
 8003bee:	e7be      	b.n	8003b6e <HAL_TIM_ConfigClockSource+0xc2>
 8003bf0:	ffff0088 	.word	0xffff0088
 8003bf4:	ffff00ff 	.word	0xffff00ff
 8003bf8:	ffff0fff 	.word	0xffff0fff

08003bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bfc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfe:	0004      	movs	r4, r0
 8003c00:	2202      	movs	r2, #2
 8003c02:	3438      	adds	r4, #56	; 0x38
 8003c04:	7825      	ldrb	r5, [r4, #0]
{
 8003c06:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003c08:	0010      	movs	r0, r2
 8003c0a:	2d01      	cmp	r5, #1
 8003c0c:	d01d      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c10:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8003c12:	3539      	adds	r5, #57	; 0x39
 8003c14:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003c1a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c1c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c1e:	680e      	ldr	r6, [r1, #0]
 8003c20:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c22:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c24:	2080      	movs	r0, #128	; 0x80
 8003c26:	05c0      	lsls	r0, r0, #23
 8003c28:	4283      	cmp	r3, r0
 8003c2a:	d005      	beq.n	8003c38 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003c2c:	4807      	ldr	r0, [pc, #28]	; (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8003c2e:	4283      	cmp	r3, r0
 8003c30:	d002      	beq.n	8003c38 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003c32:	4807      	ldr	r0, [pc, #28]	; (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8003c34:	4283      	cmp	r3, r0
 8003c36:	d104      	bne.n	8003c42 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c38:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c3a:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c3c:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c3e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c42:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003c44:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c46:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003c48:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
 8003c4c:	40010800 	.word	0x40010800
 8003c50:	40011400 	.word	0x40011400

08003c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c54:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c56:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c60:	6801      	ldr	r1, [r0, #0]
 8003c62:	4d12      	ldr	r5, [pc, #72]	; (8003cac <UART_EndRxTransfer+0x58>)
 8003c64:	680b      	ldr	r3, [r1, #0]
 8003c66:	402b      	ands	r3, r5
 8003c68:	600b      	str	r3, [r1, #0]
 8003c6a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c72:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c76:	6801      	ldr	r1, [r0, #0]
 8003c78:	688b      	ldr	r3, [r1, #8]
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
 8003c7e:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c82:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d10a      	bne.n	8003c9e <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c88:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8c:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c90:	2410      	movs	r4, #16
 8003c92:	6802      	ldr	r2, [r0, #0]
 8003c94:	6813      	ldr	r3, [r2, #0]
 8003c96:	43a3      	bics	r3, r4
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c9e:	2320      	movs	r3, #32
 8003ca0:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ca6:	6643      	str	r3, [r0, #100]	; 0x64
}
 8003ca8:	bd30      	pop	{r4, r5, pc}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	fffffedf 	.word	0xfffffedf

08003cb0 <HAL_UART_TxCpltCallback>:
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_UART_RxCpltCallback>:
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_UART_RxHalfCpltCallback>:
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_UART_ErrorCallback>:
 8003cb6:	4770      	bx	lr

08003cb8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cba:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003cbc:	6822      	ldr	r2, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003cbe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003cc0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003cc2:	6892      	ldr	r2, [r2, #8]
 8003cc4:	0612      	lsls	r2, r2, #24
 8003cc6:	d513      	bpl.n	8003cf0 <UART_DMAError+0x38>
 8003cc8:	2b21      	cmp	r3, #33	; 0x21
 8003cca:	d111      	bne.n	8003cf0 <UART_DMAError+0x38>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003ccc:	0023      	movs	r3, r4
 8003cce:	2200      	movs	r2, #0
 8003cd0:	3352      	adds	r3, #82	; 0x52
 8003cd2:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003cde:	25c0      	movs	r5, #192	; 0xc0
 8003ce0:	6822      	ldr	r2, [r4, #0]
 8003ce2:	6813      	ldr	r3, [r2, #0]
 8003ce4:	43ab      	bics	r3, r5
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 8003cec:	2320      	movs	r3, #32
 8003cee:	67a3      	str	r3, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	065b      	lsls	r3, r3, #25
 8003cf6:	d508      	bpl.n	8003d0a <UART_DMAError+0x52>
 8003cf8:	2922      	cmp	r1, #34	; 0x22
 8003cfa:	d106      	bne.n	8003d0a <UART_DMAError+0x52>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003cfc:	0023      	movs	r3, r4
 8003cfe:	2200      	movs	r2, #0
 8003d00:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 8003d02:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8003d04:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8003d06:	f7ff ffa5 	bl	8003c54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d0a:	2310      	movs	r3, #16
 8003d0c:	1d22      	adds	r2, r4, #4
 8003d0e:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d10:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d12:	430b      	orrs	r3, r1
 8003d14:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8003d16:	f7ff ffce 	bl	8003cb6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}

08003d1c <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d1c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	0002      	movs	r2, r0
{
 8003d22:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003d24:	325a      	adds	r2, #90	; 0x5a
 8003d26:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8003d28:	3a08      	subs	r2, #8
 8003d2a:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d2c:	f7ff ffc3 	bl	8003cb6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d30:	bd10      	pop	{r4, pc}
	...

08003d34 <HAL_UART_IRQHandler>:
{
 8003d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d36:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d38:	6800      	ldr	r0, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d3a:	4ba7      	ldr	r3, [pc, #668]	; (8003fd8 <HAL_UART_IRQHandler+0x2a4>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d3c:	69c1      	ldr	r1, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d3e:	6806      	ldr	r6, [r0, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d40:	6885      	ldr	r5, [r0, #8]
  if (errorflags == 0U)
 8003d42:	4219      	tst	r1, r3
 8003d44:	d10b      	bne.n	8003d5e <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d46:	2320      	movs	r3, #32
 8003d48:	4219      	tst	r1, r3
 8003d4a:	d100      	bne.n	8003d4e <HAL_UART_IRQHandler+0x1a>
 8003d4c:	e07f      	b.n	8003e4e <HAL_UART_IRQHandler+0x11a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d4e:	421e      	tst	r6, r3
 8003d50:	d100      	bne.n	8003d54 <HAL_UART_IRQHandler+0x20>
 8003d52:	e07c      	b.n	8003e4e <HAL_UART_IRQHandler+0x11a>
      if (huart->RxISR != NULL)
 8003d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8003d56:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d16e      	bne.n	8003e3a <HAL_UART_IRQHandler+0x106>
 8003d5c:	e06e      	b.n	8003e3c <HAL_UART_IRQHandler+0x108>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d5e:	2301      	movs	r3, #1
 8003d60:	002f      	movs	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d62:	4a9e      	ldr	r2, [pc, #632]	; (8003fdc <HAL_UART_IRQHandler+0x2a8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d64:	401f      	ands	r7, r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d66:	4032      	ands	r2, r6
 8003d68:	433a      	orrs	r2, r7
 8003d6a:	d100      	bne.n	8003d6e <HAL_UART_IRQHandler+0x3a>
 8003d6c:	e06f      	b.n	8003e4e <HAL_UART_IRQHandler+0x11a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d6e:	1d25      	adds	r5, r4, #4
 8003d70:	4219      	tst	r1, r3
 8003d72:	d005      	beq.n	8003d80 <HAL_UART_IRQHandler+0x4c>
 8003d74:	05f2      	lsls	r2, r6, #23
 8003d76:	d503      	bpl.n	8003d80 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d78:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d7a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d80:	2302      	movs	r3, #2
 8003d82:	4219      	tst	r1, r3
 8003d84:	d006      	beq.n	8003d94 <HAL_UART_IRQHandler+0x60>
 8003d86:	2f00      	cmp	r7, #0
 8003d88:	d004      	beq.n	8003d94 <HAL_UART_IRQHandler+0x60>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d8a:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d8c:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8003d8e:	18db      	adds	r3, r3, r3
 8003d90:	4313      	orrs	r3, r2
 8003d92:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d94:	2304      	movs	r3, #4
 8003d96:	4219      	tst	r1, r3
 8003d98:	d006      	beq.n	8003da8 <HAL_UART_IRQHandler+0x74>
 8003d9a:	2f00      	cmp	r7, #0
 8003d9c:	d004      	beq.n	8003da8 <HAL_UART_IRQHandler+0x74>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d9e:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003da0:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8003da2:	3b02      	subs	r3, #2
 8003da4:	4313      	orrs	r3, r2
 8003da6:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003da8:	2308      	movs	r3, #8
 8003daa:	4219      	tst	r1, r3
 8003dac:	d007      	beq.n	8003dbe <HAL_UART_IRQHandler+0x8a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dae:	2220      	movs	r2, #32
 8003db0:	4032      	ands	r2, r6
 8003db2:	433a      	orrs	r2, r7
 8003db4:	d003      	beq.n	8003dbe <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003db6:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003db8:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	4219      	tst	r1, r3
 8003dc4:	d006      	beq.n	8003dd4 <HAL_UART_IRQHandler+0xa0>
 8003dc6:	0172      	lsls	r2, r6, #5
 8003dc8:	d504      	bpl.n	8003dd4 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dca:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003dcc:	2320      	movs	r3, #32
 8003dce:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dd4:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d030      	beq.n	8003e3c <HAL_UART_IRQHandler+0x108>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dda:	2320      	movs	r3, #32
 8003ddc:	4219      	tst	r1, r3
 8003dde:	d006      	beq.n	8003dee <HAL_UART_IRQHandler+0xba>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003de0:	421e      	tst	r6, r3
 8003de2:	d004      	beq.n	8003dee <HAL_UART_IRQHandler+0xba>
        if (huart->RxISR != NULL)
 8003de4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_UART_IRQHandler+0xba>
          huart->RxISR(huart);
 8003dea:	0020      	movs	r0, r4
 8003dec:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dee:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8003df0:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003df2:	2740      	movs	r7, #64	; 0x40
 8003df4:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003df6:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003df8:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dfa:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8003dfc:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dfe:	431e      	orrs	r6, r3
 8003e00:	d021      	beq.n	8003e46 <HAL_UART_IRQHandler+0x112>
        UART_EndRxTransfer(huart);
 8003e02:	f7ff ff27 	bl	8003c54 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	423b      	tst	r3, r7
 8003e0c:	d017      	beq.n	8003e3e <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e12:	2301      	movs	r3, #1
 8003e14:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e18:	6822      	ldr	r2, [r4, #0]
 8003e1a:	6893      	ldr	r3, [r2, #8]
 8003e1c:	43bb      	bics	r3, r7
 8003e1e:	6093      	str	r3, [r2, #8]
 8003e20:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8003e24:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d009      	beq.n	8003e3e <HAL_UART_IRQHandler+0x10a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e2a:	4b6d      	ldr	r3, [pc, #436]	; (8003fe0 <HAL_UART_IRQHandler+0x2ac>)
 8003e2c:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e2e:	f7fe fafd 	bl	800242c <HAL_DMA_Abort_IT>
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_UART_IRQHandler+0x108>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e36:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003e38:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003e3a:	4798      	blx	r3
}
 8003e3c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8003e3e:	0020      	movs	r0, r4
 8003e40:	f7ff ff39 	bl	8003cb6 <HAL_UART_ErrorCallback>
 8003e44:	e7fa      	b.n	8003e3c <HAL_UART_IRQHandler+0x108>
        HAL_UART_ErrorCallback(huart);
 8003e46:	f7ff ff36 	bl	8003cb6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4a:	67ee      	str	r6, [r5, #124]	; 0x7c
 8003e4c:	e7f6      	b.n	8003e3c <HAL_UART_IRQHandler+0x108>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d000      	beq.n	8003e56 <HAL_UART_IRQHandler+0x122>
 8003e54:	e094      	b.n	8003f80 <HAL_UART_IRQHandler+0x24c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e56:	2210      	movs	r2, #16
 8003e58:	4211      	tst	r1, r2
 8003e5a:	d100      	bne.n	8003e5e <HAL_UART_IRQHandler+0x12a>
 8003e5c:	e090      	b.n	8003f80 <HAL_UART_IRQHandler+0x24c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e5e:	4216      	tst	r6, r2
 8003e60:	d100      	bne.n	8003e64 <HAL_UART_IRQHandler+0x130>
 8003e62:	e08d      	b.n	8003f80 <HAL_UART_IRQHandler+0x24c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e64:	6202      	str	r2, [r0, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e66:	6881      	ldr	r1, [r0, #8]
 8003e68:	2040      	movs	r0, #64	; 0x40
 8003e6a:	000d      	movs	r5, r1
 8003e6c:	4005      	ands	r5, r0
 8003e6e:	4201      	tst	r1, r0
 8003e70:	d050      	beq.n	8003f14 <HAL_UART_IRQHandler+0x1e0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e72:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003e74:	680d      	ldr	r5, [r1, #0]
 8003e76:	6869      	ldr	r1, [r5, #4]
 8003e78:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8003e7a:	2900      	cmp	r1, #0
 8003e7c:	d0de      	beq.n	8003e3c <HAL_UART_IRQHandler+0x108>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e7e:	0026      	movs	r6, r4
 8003e80:	3658      	adds	r6, #88	; 0x58
 8003e82:	8836      	ldrh	r6, [r6, #0]
 8003e84:	428e      	cmp	r6, r1
 8003e86:	d9d9      	bls.n	8003e3c <HAL_UART_IRQHandler+0x108>
        huart->RxXferCount = nb_remaining_rx_data;
 8003e88:	0026      	movs	r6, r4
 8003e8a:	365a      	adds	r6, #90	; 0x5a
 8003e8c:	8031      	strh	r1, [r6, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e8e:	682d      	ldr	r5, [r5, #0]
 8003e90:	2120      	movs	r1, #32
 8003e92:	002e      	movs	r6, r5
 8003e94:	400e      	ands	r6, r1
 8003e96:	9601      	str	r6, [sp, #4]
 8003e98:	420d      	tst	r5, r1
 8003e9a:	d12f      	bne.n	8003efc <HAL_UART_IRQHandler+0x1c8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e9c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ea4:	6826      	ldr	r6, [r4, #0]
 8003ea6:	4a4f      	ldr	r2, [pc, #316]	; (8003fe4 <HAL_UART_IRQHandler+0x2b0>)
 8003ea8:	6835      	ldr	r5, [r6, #0]
 8003eaa:	4015      	ands	r5, r2
 8003eac:	6035      	str	r5, [r6, #0]
 8003eae:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb6:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eba:	6826      	ldr	r6, [r4, #0]
 8003ebc:	68b5      	ldr	r5, [r6, #8]
 8003ebe:	439d      	bics	r5, r3
 8003ec0:	60b5      	str	r5, [r6, #8]
 8003ec2:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eca:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ece:	6825      	ldr	r5, [r4, #0]
 8003ed0:	68af      	ldr	r7, [r5, #8]
 8003ed2:	4387      	bics	r7, r0
 8003ed4:	60af      	str	r7, [r5, #8]
 8003ed6:	f386 8810 	msr	PRIMASK, r6
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eda:	9a01      	ldr	r2, [sp, #4]
          huart->RxState = HAL_UART_STATE_READY;
 8003edc:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ede:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee8:	2210      	movs	r2, #16
 8003eea:	6821      	ldr	r1, [r4, #0]
 8003eec:	680b      	ldr	r3, [r1, #0]
 8003eee:	4393      	bics	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
 8003ef2:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ef6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003ef8:	f7fe fa78 	bl	80023ec <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003efc:	0023      	movs	r3, r4
 8003efe:	0022      	movs	r2, r4
 8003f00:	335a      	adds	r3, #90	; 0x5a
 8003f02:	3258      	adds	r2, #88	; 0x58
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	8811      	ldrh	r1, [r2, #0]
 8003f08:	1ac9      	subs	r1, r1, r3
 8003f0a:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f0c:	0020      	movs	r0, r4
 8003f0e:	f7fd ff1f 	bl	8001d50 <HAL_UARTEx_RxEventCallback>
 8003f12:	e793      	b.n	8003e3c <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f14:	0026      	movs	r6, r4
 8003f16:	365a      	adds	r6, #90	; 0x5a
 8003f18:	8830      	ldrh	r0, [r6, #0]
      if ((huart->RxXferCount > 0U)
 8003f1a:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f1c:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8003f1e:	2900      	cmp	r1, #0
 8003f20:	d100      	bne.n	8003f24 <HAL_UART_IRQHandler+0x1f0>
 8003f22:	e78b      	b.n	8003e3c <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f24:	0021      	movs	r1, r4
 8003f26:	3158      	adds	r1, #88	; 0x58
 8003f28:	8809      	ldrh	r1, [r1, #0]
 8003f2a:	1a09      	subs	r1, r1, r0
 8003f2c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003f2e:	2900      	cmp	r1, #0
 8003f30:	d100      	bne.n	8003f34 <HAL_UART_IRQHandler+0x200>
 8003f32:	e783      	b.n	8003e3c <HAL_UART_IRQHandler+0x108>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f34:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f38:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f3c:	6826      	ldr	r6, [r4, #0]
 8003f3e:	4a2a      	ldr	r2, [pc, #168]	; (8003fe8 <HAL_UART_IRQHandler+0x2b4>)
 8003f40:	6830      	ldr	r0, [r6, #0]
 8003f42:	4010      	ands	r0, r2
 8003f44:	6030      	str	r0, [r6, #0]
 8003f46:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f4a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f52:	6826      	ldr	r6, [r4, #0]
 8003f54:	68b0      	ldr	r0, [r6, #8]
 8003f56:	4398      	bics	r0, r3
 8003f58:	60b0      	str	r0, [r6, #8]
 8003f5a:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	2020      	movs	r0, #32
        huart->RxISR = NULL;
 8003f60:	6665      	str	r5, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 8003f62:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f64:	6625      	str	r5, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f66:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6a:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6e:	6820      	ldr	r0, [r4, #0]
 8003f70:	3232      	adds	r2, #50	; 0x32
 8003f72:	6803      	ldr	r3, [r0, #0]
 8003f74:	32ff      	adds	r2, #255	; 0xff
 8003f76:	4393      	bics	r3, r2
 8003f78:	6003      	str	r3, [r0, #0]
 8003f7a:	f385 8810 	msr	PRIMASK, r5
 8003f7e:	e7c5      	b.n	8003f0c <HAL_UART_IRQHandler+0x1d8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	035b      	lsls	r3, r3, #13
 8003f84:	4219      	tst	r1, r3
 8003f86:	d006      	beq.n	8003f96 <HAL_UART_IRQHandler+0x262>
 8003f88:	026a      	lsls	r2, r5, #9
 8003f8a:	d504      	bpl.n	8003f96 <HAL_UART_IRQHandler+0x262>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f8c:	6203      	str	r3, [r0, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003f8e:	0020      	movs	r0, r4
 8003f90:	f000 fb76 	bl	8004680 <HAL_UARTEx_WakeupCallback>
    return;
 8003f94:	e752      	b.n	8003e3c <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	4219      	tst	r1, r3
 8003f9a:	d003      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x270>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f9c:	421e      	tst	r6, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x270>
    if (huart->TxISR != NULL)
 8003fa0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003fa2:	e6d8      	b.n	8003d56 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fa4:	2240      	movs	r2, #64	; 0x40
 8003fa6:	4211      	tst	r1, r2
 8003fa8:	d100      	bne.n	8003fac <HAL_UART_IRQHandler+0x278>
 8003faa:	e747      	b.n	8003e3c <HAL_UART_IRQHandler+0x108>
 8003fac:	4216      	tst	r6, r2
 8003fae:	d100      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x27e>
 8003fb0:	e744      	b.n	8003e3c <HAL_UART_IRQHandler+0x108>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fbc:	6821      	ldr	r1, [r4, #0]
 8003fbe:	680b      	ldr	r3, [r1, #0]
 8003fc0:	4393      	bics	r3, r2
 8003fc2:	600b      	str	r3, [r1, #0]
 8003fc4:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fc8:	2320      	movs	r3, #32
 8003fca:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fcc:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fce:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8003fd0:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8003fd2:	f7ff fe6d 	bl	8003cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fd6:	e731      	b.n	8003e3c <HAL_UART_IRQHandler+0x108>
 8003fd8:	0000080f 	.word	0x0000080f
 8003fdc:	04000120 	.word	0x04000120
 8003fe0:	08003d1d 	.word	0x08003d1d
 8003fe4:	fffffeff 	.word	0xfffffeff
 8003fe8:	fffffedf 	.word	0xfffffedf

08003fec <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fec:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8003fee:	b510      	push	{r4, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d106      	bne.n	8004004 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	3358      	adds	r3, #88	; 0x58
 8003ffa:	8819      	ldrh	r1, [r3, #0]
 8003ffc:	0849      	lsrs	r1, r1, #1
 8003ffe:	f7fd fea7 	bl	8001d50 <HAL_UARTEx_RxEventCallback>
}
 8004002:	bd10      	pop	{r4, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8004004:	f7ff fe56 	bl	8003cb4 <HAL_UART_RxHalfCpltCallback>
}
 8004008:	e7fb      	b.n	8004002 <UART_DMARxHalfCplt+0x16>
	...

0800400c <UART_DMAReceiveCplt>:
{
 800400c:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2220      	movs	r2, #32
 8004012:	681b      	ldr	r3, [r3, #0]
{
 8004014:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004016:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004018:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800401a:	4011      	ands	r1, r2
 800401c:	4213      	tst	r3, r2
 800401e:	d132      	bne.n	8004086 <UART_DMAReceiveCplt+0x7a>
    huart->RxXferCount = 0U;
 8004020:	0003      	movs	r3, r0
 8004022:	335a      	adds	r3, #90	; 0x5a
 8004024:	8019      	strh	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004026:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402a:	2301      	movs	r3, #1
 800402c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004030:	6804      	ldr	r4, [r0, #0]
 8004032:	4e1b      	ldr	r6, [pc, #108]	; (80040a0 <UART_DMAReceiveCplt+0x94>)
 8004034:	6821      	ldr	r1, [r4, #0]
 8004036:	4031      	ands	r1, r6
 8004038:	6021      	str	r1, [r4, #0]
 800403a:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800403e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004042:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	6804      	ldr	r4, [r0, #0]
 8004048:	68a1      	ldr	r1, [r4, #8]
 800404a:	4399      	bics	r1, r3
 800404c:	60a1      	str	r1, [r4, #8]
 800404e:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004052:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004056:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405a:	2540      	movs	r5, #64	; 0x40
 800405c:	6801      	ldr	r1, [r0, #0]
 800405e:	688b      	ldr	r3, [r1, #8]
 8004060:	43ab      	bics	r3, r5
 8004062:	608b      	str	r3, [r1, #8]
 8004064:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 8004068:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800406a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800406c:	2b01      	cmp	r3, #1
 800406e:	d10a      	bne.n	8004086 <UART_DMAReceiveCplt+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004070:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004074:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004078:	2410      	movs	r4, #16
 800407a:	6802      	ldr	r2, [r0, #0]
 800407c:	6813      	ldr	r3, [r2, #0]
 800407e:	43a3      	bics	r3, r4
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004086:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <UART_DMAReceiveCplt+0x8c>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800408c:	0003      	movs	r3, r0
 800408e:	3358      	adds	r3, #88	; 0x58
 8004090:	8819      	ldrh	r1, [r3, #0]
 8004092:	f7fd fe5d 	bl	8001d50 <HAL_UARTEx_RxEventCallback>
}
 8004096:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_RxCpltCallback(huart);
 8004098:	f7ff fe0b 	bl	8003cb2 <HAL_UART_RxCpltCallback>
}
 800409c:	e7fb      	b.n	8004096 <UART_DMAReceiveCplt+0x8a>
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	fffffeff 	.word	0xfffffeff

080040a4 <UART_SetConfig>:
{
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040a8:	6925      	ldr	r5, [r4, #16]
 80040aa:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80040ac:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040ae:	4329      	orrs	r1, r5
 80040b0:	6965      	ldr	r5, [r4, #20]
 80040b2:	69c3      	ldr	r3, [r0, #28]
 80040b4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040b6:	6810      	ldr	r0, [r2, #0]
 80040b8:	4d6b      	ldr	r5, [pc, #428]	; (8004268 <UART_SetConfig+0x1c4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040ba:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040bc:	4028      	ands	r0, r5
 80040be:	4301      	orrs	r1, r0
 80040c0:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c2:	6851      	ldr	r1, [r2, #4]
 80040c4:	4869      	ldr	r0, [pc, #420]	; (800426c <UART_SetConfig+0x1c8>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040c6:	4d6a      	ldr	r5, [pc, #424]	; (8004270 <UART_SetConfig+0x1cc>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c8:	4001      	ands	r1, r0
 80040ca:	68e0      	ldr	r0, [r4, #12]
 80040cc:	4301      	orrs	r1, r0
 80040ce:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040d0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040d2:	42aa      	cmp	r2, r5
 80040d4:	d001      	beq.n	80040da <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80040d6:	6a21      	ldr	r1, [r4, #32]
 80040d8:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040da:	6891      	ldr	r1, [r2, #8]
 80040dc:	4e65      	ldr	r6, [pc, #404]	; (8004274 <UART_SetConfig+0x1d0>)
 80040de:	4031      	ands	r1, r6
 80040e0:	4301      	orrs	r1, r0
 80040e2:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040e4:	4964      	ldr	r1, [pc, #400]	; (8004278 <UART_SetConfig+0x1d4>)
 80040e6:	428a      	cmp	r2, r1
 80040e8:	d113      	bne.n	8004112 <UART_SetConfig+0x6e>
 80040ea:	200c      	movs	r0, #12
 80040ec:	4a63      	ldr	r2, [pc, #396]	; (800427c <UART_SetConfig+0x1d8>)
 80040ee:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80040f0:	4001      	ands	r1, r0
 80040f2:	4863      	ldr	r0, [pc, #396]	; (8004280 <UART_SetConfig+0x1dc>)
 80040f4:	5c40      	ldrb	r0, [r0, r1]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f6:	2180      	movs	r1, #128	; 0x80
 80040f8:	0209      	lsls	r1, r1, #8
 80040fa:	428b      	cmp	r3, r1
 80040fc:	d000      	beq.n	8004100 <UART_SetConfig+0x5c>
 80040fe:	e07f      	b.n	8004200 <UART_SetConfig+0x15c>
    switch (clocksource)
 8004100:	2808      	cmp	r0, #8
 8004102:	d819      	bhi.n	8004138 <UART_SetConfig+0x94>
 8004104:	f7fc f812 	bl	800012c <__gnu_thumb1_case_uqi>
 8004108:	18595651 	.word	0x18595651
 800410c:	18181879 	.word	0x18181879
 8004110:	63          	.byte	0x63
 8004111:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004112:	42aa      	cmp	r2, r5
 8004114:	d000      	beq.n	8004118 <UART_SetConfig+0x74>
 8004116:	e09f      	b.n	8004258 <UART_SetConfig+0x1b4>
 8004118:	21c0      	movs	r1, #192	; 0xc0
 800411a:	2080      	movs	r0, #128	; 0x80
 800411c:	4a57      	ldr	r2, [pc, #348]	; (800427c <UART_SetConfig+0x1d8>)
 800411e:	0109      	lsls	r1, r1, #4
 8004120:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004122:	0100      	lsls	r0, r0, #4
 8004124:	400b      	ands	r3, r1
 8004126:	4283      	cmp	r3, r0
 8004128:	d016      	beq.n	8004158 <UART_SetConfig+0xb4>
 800412a:	d807      	bhi.n	800413c <UART_SetConfig+0x98>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <UART_SetConfig+0xa2>
 8004130:	2280      	movs	r2, #128	; 0x80
 8004132:	00d2      	lsls	r2, r2, #3
 8004134:	4293      	cmp	r3, r2
 8004136:	d035      	beq.n	80041a4 <UART_SetConfig+0x100>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004138:	2001      	movs	r0, #1
 800413a:	e009      	b.n	8004150 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800413c:	428b      	cmp	r3, r1
 800413e:	d1fb      	bne.n	8004138 <UART_SetConfig+0x94>
 8004140:	2080      	movs	r0, #128	; 0x80
 8004142:	0200      	lsls	r0, r0, #8
 8004144:	e012      	b.n	800416c <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004146:	f7ff f9ef 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800414a:	2800      	cmp	r0, #0
 800414c:	d10e      	bne.n	800416c <UART_SetConfig+0xc8>
 800414e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8004150:	2300      	movs	r3, #0
 8004152:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8004154:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8004156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004158:	2310      	movs	r3, #16
 800415a:	6810      	ldr	r0, [r2, #0]
 800415c:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800415e:	4243      	negs	r3, r0
 8004160:	4158      	adcs	r0, r3
 8004162:	4b48      	ldr	r3, [pc, #288]	; (8004284 <UART_SetConfig+0x1e0>)
 8004164:	4240      	negs	r0, r0
 8004166:	4018      	ands	r0, r3
 8004168:	4b47      	ldr	r3, [pc, #284]	; (8004288 <UART_SetConfig+0x1e4>)
 800416a:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800416c:	2203      	movs	r2, #3
 800416e:	6863      	ldr	r3, [r4, #4]
 8004170:	435a      	muls	r2, r3
 8004172:	4282      	cmp	r2, r0
 8004174:	d8e0      	bhi.n	8004138 <UART_SetConfig+0x94>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004176:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004178:	4282      	cmp	r2, r0
 800417a:	d3dd      	bcc.n	8004138 <UART_SetConfig+0x94>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800417c:	2700      	movs	r7, #0
 800417e:	0e02      	lsrs	r2, r0, #24
 8004180:	0201      	lsls	r1, r0, #8
 8004182:	085e      	lsrs	r6, r3, #1
 8004184:	1989      	adds	r1, r1, r6
 8004186:	417a      	adcs	r2, r7
 8004188:	0008      	movs	r0, r1
 800418a:	0011      	movs	r1, r2
 800418c:	001a      	movs	r2, r3
 800418e:	003b      	movs	r3, r7
 8004190:	f7fc f956 	bl	8000440 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004194:	4b3d      	ldr	r3, [pc, #244]	; (800428c <UART_SetConfig+0x1e8>)
 8004196:	18c2      	adds	r2, r0, r3
 8004198:	4b3d      	ldr	r3, [pc, #244]	; (8004290 <UART_SetConfig+0x1ec>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800419a:	429a      	cmp	r2, r3
 800419c:	d8cc      	bhi.n	8004138 <UART_SetConfig+0x94>
        huart->Instance->BRR = usartdiv;
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	60d8      	str	r0, [r3, #12]
 80041a2:	e7d4      	b.n	800414e <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 80041a4:	f7fe fe5a 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
        break;
 80041a8:	e7cf      	b.n	800414a <UART_SetConfig+0xa6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80041aa:	f7ff f9bd 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80041ae:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80041b0:	d0cd      	beq.n	800414e <UART_SetConfig+0xaa>
 80041b2:	e00c      	b.n	80041ce <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80041b4:	f7ff f9c8 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
 80041b8:	e7f9      	b.n	80041ae <UART_SetConfig+0x10a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041ba:	2310      	movs	r3, #16
 80041bc:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80041be:	4a32      	ldr	r2, [pc, #200]	; (8004288 <UART_SetConfig+0x1e4>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041c0:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80041c2:	4243      	negs	r3, r0
 80041c4:	4158      	adcs	r0, r3
 80041c6:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <UART_SetConfig+0x1e0>)
 80041c8:	4240      	negs	r0, r0
 80041ca:	4003      	ands	r3, r0
 80041cc:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041ce:	0058      	lsls	r0, r3, #1
 80041d0:	6863      	ldr	r3, [r4, #4]
 80041d2:	6861      	ldr	r1, [r4, #4]
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	18c0      	adds	r0, r0, r3
 80041d8:	f7fb ffbc 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041dc:	492d      	ldr	r1, [pc, #180]	; (8004294 <UART_SetConfig+0x1f0>)
 80041de:	b282      	uxth	r2, r0
 80041e0:	3a10      	subs	r2, #16
 80041e2:	0403      	lsls	r3, r0, #16
 80041e4:	428a      	cmp	r2, r1
 80041e6:	d8a7      	bhi.n	8004138 <UART_SetConfig+0x94>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041e8:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ea:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041ec:	4390      	bics	r0, r2
 80041ee:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80041f0:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041f2:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80041f4:	4318      	orrs	r0, r3
 80041f6:	60d0      	str	r0, [r2, #12]
 80041f8:	e7a9      	b.n	800414e <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 80041fa:	f7fe fe2f 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 80041fe:	e7d6      	b.n	80041ae <UART_SetConfig+0x10a>
    switch (clocksource)
 8004200:	2808      	cmp	r0, #8
 8004202:	d899      	bhi.n	8004138 <UART_SetConfig+0x94>
 8004204:	f7fb ff88 	bl	8000118 <__gnu_thumb1_case_sqi>
 8004208:	980d0a05 	.word	0x980d0a05
 800420c:	98989822 	.word	0x98989822
 8004210:	25          	.byte	0x25
 8004211:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8004212:	f7ff f989 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004216:	2800      	cmp	r0, #0
 8004218:	d099      	beq.n	800414e <UART_SetConfig+0xaa>
 800421a:	e00c      	b.n	8004236 <UART_SetConfig+0x192>
        pclk = HAL_RCC_GetPCLK2Freq();
 800421c:	f7ff f994 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
        break;
 8004220:	e7f9      	b.n	8004216 <UART_SetConfig+0x172>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004222:	2310      	movs	r3, #16
 8004224:	6810      	ldr	r0, [r2, #0]
 8004226:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004228:	4243      	negs	r3, r0
 800422a:	4158      	adcs	r0, r3
 800422c:	4b15      	ldr	r3, [pc, #84]	; (8004284 <UART_SetConfig+0x1e0>)
 800422e:	4240      	negs	r0, r0
 8004230:	4018      	ands	r0, r3
 8004232:	4b15      	ldr	r3, [pc, #84]	; (8004288 <UART_SetConfig+0x1e4>)
 8004234:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004236:	6863      	ldr	r3, [r4, #4]
 8004238:	6861      	ldr	r1, [r4, #4]
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	1818      	adds	r0, r3, r0
 800423e:	f7fb ff89 	bl	8000154 <__udivsi3>
 8004242:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004244:	0002      	movs	r2, r0
 8004246:	4b13      	ldr	r3, [pc, #76]	; (8004294 <UART_SetConfig+0x1f0>)
 8004248:	3a10      	subs	r2, #16
 800424a:	e7a6      	b.n	800419a <UART_SetConfig+0xf6>
        pclk = HAL_RCC_GetSysClockFreq();
 800424c:	f7fe fe06 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
        break;
 8004250:	e7e1      	b.n	8004216 <UART_SetConfig+0x172>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004252:	2080      	movs	r0, #128	; 0x80
 8004254:	0200      	lsls	r0, r0, #8
 8004256:	e7ee      	b.n	8004236 <UART_SetConfig+0x192>
 8004258:	2280      	movs	r2, #128	; 0x80
 800425a:	2001      	movs	r0, #1
 800425c:	0212      	lsls	r2, r2, #8
 800425e:	4293      	cmp	r3, r2
 8004260:	d100      	bne.n	8004264 <UART_SetConfig+0x1c0>
 8004262:	e775      	b.n	8004150 <UART_SetConfig+0xac>
 8004264:	e768      	b.n	8004138 <UART_SetConfig+0x94>
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	efff69f3 	.word	0xefff69f3
 800426c:	ffffcfff 	.word	0xffffcfff
 8004270:	40004800 	.word	0x40004800
 8004274:	fffff4ff 	.word	0xfffff4ff
 8004278:	40004400 	.word	0x40004400
 800427c:	40021000 	.word	0x40021000
 8004280:	080051b0 	.word	0x080051b0
 8004284:	00b71b00 	.word	0x00b71b00
 8004288:	003d0900 	.word	0x003d0900
 800428c:	fffffd00 	.word	0xfffffd00
 8004290:	000ffcff 	.word	0x000ffcff
 8004294:	0000ffef 	.word	0x0000ffef

08004298 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004298:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800429a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800429c:	07da      	lsls	r2, r3, #31
 800429e:	d506      	bpl.n	80042ae <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042a0:	6801      	ldr	r1, [r0, #0]
 80042a2:	4c28      	ldr	r4, [pc, #160]	; (8004344 <UART_AdvFeatureConfig+0xac>)
 80042a4:	684a      	ldr	r2, [r1, #4]
 80042a6:	4022      	ands	r2, r4
 80042a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80042aa:	4322      	orrs	r2, r4
 80042ac:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042ae:	079a      	lsls	r2, r3, #30
 80042b0:	d506      	bpl.n	80042c0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042b2:	6801      	ldr	r1, [r0, #0]
 80042b4:	4c24      	ldr	r4, [pc, #144]	; (8004348 <UART_AdvFeatureConfig+0xb0>)
 80042b6:	684a      	ldr	r2, [r1, #4]
 80042b8:	4022      	ands	r2, r4
 80042ba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80042bc:	4322      	orrs	r2, r4
 80042be:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042c0:	075a      	lsls	r2, r3, #29
 80042c2:	d506      	bpl.n	80042d2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042c4:	6801      	ldr	r1, [r0, #0]
 80042c6:	4c21      	ldr	r4, [pc, #132]	; (800434c <UART_AdvFeatureConfig+0xb4>)
 80042c8:	684a      	ldr	r2, [r1, #4]
 80042ca:	4022      	ands	r2, r4
 80042cc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80042ce:	4322      	orrs	r2, r4
 80042d0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042d2:	071a      	lsls	r2, r3, #28
 80042d4:	d506      	bpl.n	80042e4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042d6:	6801      	ldr	r1, [r0, #0]
 80042d8:	4c1d      	ldr	r4, [pc, #116]	; (8004350 <UART_AdvFeatureConfig+0xb8>)
 80042da:	684a      	ldr	r2, [r1, #4]
 80042dc:	4022      	ands	r2, r4
 80042de:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80042e0:	4322      	orrs	r2, r4
 80042e2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042e4:	06da      	lsls	r2, r3, #27
 80042e6:	d506      	bpl.n	80042f6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042e8:	6801      	ldr	r1, [r0, #0]
 80042ea:	4c1a      	ldr	r4, [pc, #104]	; (8004354 <UART_AdvFeatureConfig+0xbc>)
 80042ec:	688a      	ldr	r2, [r1, #8]
 80042ee:	4022      	ands	r2, r4
 80042f0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80042f2:	4322      	orrs	r2, r4
 80042f4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042f6:	069a      	lsls	r2, r3, #26
 80042f8:	d506      	bpl.n	8004308 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042fa:	6801      	ldr	r1, [r0, #0]
 80042fc:	4c16      	ldr	r4, [pc, #88]	; (8004358 <UART_AdvFeatureConfig+0xc0>)
 80042fe:	688a      	ldr	r2, [r1, #8]
 8004300:	4022      	ands	r2, r4
 8004302:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004304:	4322      	orrs	r2, r4
 8004306:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004308:	065a      	lsls	r2, r3, #25
 800430a:	d510      	bpl.n	800432e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800430c:	6801      	ldr	r1, [r0, #0]
 800430e:	4d13      	ldr	r5, [pc, #76]	; (800435c <UART_AdvFeatureConfig+0xc4>)
 8004310:	684a      	ldr	r2, [r1, #4]
 8004312:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004314:	402a      	ands	r2, r5
 8004316:	4322      	orrs	r2, r4
 8004318:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800431a:	2280      	movs	r2, #128	; 0x80
 800431c:	0352      	lsls	r2, r2, #13
 800431e:	4294      	cmp	r4, r2
 8004320:	d105      	bne.n	800432e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004322:	684a      	ldr	r2, [r1, #4]
 8004324:	4c0e      	ldr	r4, [pc, #56]	; (8004360 <UART_AdvFeatureConfig+0xc8>)
 8004326:	4022      	ands	r2, r4
 8004328:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800432a:	4322      	orrs	r2, r4
 800432c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800432e:	061b      	lsls	r3, r3, #24
 8004330:	d506      	bpl.n	8004340 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004332:	6802      	ldr	r2, [r0, #0]
 8004334:	490b      	ldr	r1, [pc, #44]	; (8004364 <UART_AdvFeatureConfig+0xcc>)
 8004336:	6853      	ldr	r3, [r2, #4]
 8004338:	400b      	ands	r3, r1
 800433a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800433c:	430b      	orrs	r3, r1
 800433e:	6053      	str	r3, [r2, #4]
}
 8004340:	bd30      	pop	{r4, r5, pc}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	fffdffff 	.word	0xfffdffff
 8004348:	fffeffff 	.word	0xfffeffff
 800434c:	fffbffff 	.word	0xfffbffff
 8004350:	ffff7fff 	.word	0xffff7fff
 8004354:	ffffefff 	.word	0xffffefff
 8004358:	ffffdfff 	.word	0xffffdfff
 800435c:	ffefffff 	.word	0xffefffff
 8004360:	ff9fffff 	.word	0xff9fffff
 8004364:	fff7ffff 	.word	0xfff7ffff

08004368 <UART_WaitOnFlagUntilTimeout>:
{
 8004368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800436a:	2780      	movs	r7, #128	; 0x80
{
 800436c:	0004      	movs	r4, r0
 800436e:	000d      	movs	r5, r1
 8004370:	0016      	movs	r6, r2
 8004372:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004374:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004376:	6822      	ldr	r2, [r4, #0]
 8004378:	69d3      	ldr	r3, [r2, #28]
 800437a:	402b      	ands	r3, r5
 800437c:	1b5b      	subs	r3, r3, r5
 800437e:	4259      	negs	r1, r3
 8004380:	414b      	adcs	r3, r1
 8004382:	42b3      	cmp	r3, r6
 8004384:	d001      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8004386:	2000      	movs	r0, #0
 8004388:	e028      	b.n	80043dc <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 800438a:	9b08      	ldr	r3, [sp, #32]
 800438c:	3301      	adds	r3, #1
 800438e:	d0f3      	beq.n	8004378 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004390:	f7fd ff30 	bl	80021f4 <HAL_GetTick>
 8004394:	9b01      	ldr	r3, [sp, #4]
 8004396:	1ac0      	subs	r0, r0, r3
 8004398:	9b08      	ldr	r3, [sp, #32]
 800439a:	4298      	cmp	r0, r3
 800439c:	d801      	bhi.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x3a>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d11d      	bne.n	80043de <UART_WaitOnFlagUntilTimeout+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a6:	2201      	movs	r2, #1
 80043a8:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ac:	6821      	ldr	r1, [r4, #0]
 80043ae:	4d1e      	ldr	r5, [pc, #120]	; (8004428 <UART_WaitOnFlagUntilTimeout+0xc0>)
 80043b0:	680b      	ldr	r3, [r1, #0]
 80043b2:	402b      	ands	r3, r5
 80043b4:	600b      	str	r3, [r1, #0]
 80043b6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c2:	6821      	ldr	r1, [r4, #0]
 80043c4:	688b      	ldr	r3, [r1, #8]
 80043c6:	4393      	bics	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
 80043ca:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 80043ce:	2320      	movs	r3, #32
 80043d0:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043d2:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80043d4:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80043d6:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80043d8:	3474      	adds	r4, #116	; 0x74
 80043da:	7023      	strb	r3, [r4, #0]
}
 80043dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043de:	2104      	movs	r1, #4
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	420a      	tst	r2, r1
 80043e6:	d0c6      	beq.n	8004376 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043e8:	69da      	ldr	r2, [r3, #28]
 80043ea:	423a      	tst	r2, r7
 80043ec:	d0c3      	beq.n	8004376 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043ee:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f4:	2201      	movs	r2, #1
 80043f6:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043fa:	6821      	ldr	r1, [r4, #0]
 80043fc:	4d0a      	ldr	r5, [pc, #40]	; (8004428 <UART_WaitOnFlagUntilTimeout+0xc0>)
 80043fe:	680b      	ldr	r3, [r1, #0]
 8004400:	402b      	ands	r3, r5
 8004402:	600b      	str	r3, [r1, #0]
 8004404:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004408:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004410:	6821      	ldr	r1, [r4, #0]
 8004412:	688b      	ldr	r3, [r1, #8]
 8004414:	4393      	bics	r3, r2
 8004416:	608b      	str	r3, [r1, #8]
 8004418:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800441c:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800441e:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8004420:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004422:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004424:	67d3      	str	r3, [r2, #124]	; 0x7c
 8004426:	e7d5      	b.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x6c>
 8004428:	fffffe5f 	.word	0xfffffe5f

0800442c <HAL_UART_Transmit>:
{
 800442c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442e:	b087      	sub	sp, #28
 8004430:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8004432:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8004434:	0004      	movs	r4, r0
 8004436:	000d      	movs	r5, r1
 8004438:	0016      	movs	r6, r2
    return HAL_BUSY;
 800443a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800443c:	2b20      	cmp	r3, #32
 800443e:	d151      	bne.n	80044e4 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 8004440:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004442:	2900      	cmp	r1, #0
 8004444:	d04e      	beq.n	80044e4 <HAL_UART_Transmit+0xb8>
 8004446:	2a00      	cmp	r2, #0
 8004448:	d04c      	beq.n	80044e4 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	68a2      	ldr	r2, [r4, #8]
 800444e:	015b      	lsls	r3, r3, #5
 8004450:	429a      	cmp	r2, r3
 8004452:	d104      	bne.n	800445e <HAL_UART_Transmit+0x32>
 8004454:	6923      	ldr	r3, [r4, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 800445a:	4201      	tst	r1, r0
 800445c:	d142      	bne.n	80044e4 <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 800445e:	0023      	movs	r3, r4
 8004460:	3374      	adds	r3, #116	; 0x74
 8004462:	9303      	str	r3, [sp, #12]
 8004464:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 8004466:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004468:	2b01      	cmp	r3, #1
 800446a:	d03b      	beq.n	80044e4 <HAL_UART_Transmit+0xb8>
 800446c:	2301      	movs	r3, #1
 800446e:	9a03      	ldr	r2, [sp, #12]
 8004470:	7013      	strb	r3, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004472:	2200      	movs	r2, #0
 8004474:	1d23      	adds	r3, r4, #4
 8004476:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004478:	2321      	movs	r3, #33	; 0x21
 800447a:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 800447c:	f7fd feba 	bl	80021f4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8004480:	0023      	movs	r3, r4
 8004482:	3350      	adds	r3, #80	; 0x50
 8004484:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8004486:	3302      	adds	r3, #2
 8004488:	801e      	strh	r6, [r3, #0]
 800448a:	9304      	str	r3, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8004490:	0007      	movs	r7, r0
      pdata16bits = NULL;
 8004492:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004494:	015b      	lsls	r3, r3, #5
 8004496:	429a      	cmp	r2, r3
 8004498:	d104      	bne.n	80044a4 <HAL_UART_Transmit+0x78>
 800449a:	6923      	ldr	r3, [r4, #16]
 800449c:	42b3      	cmp	r3, r6
 800449e:	d101      	bne.n	80044a4 <HAL_UART_Transmit+0x78>
 80044a0:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80044a2:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 80044a4:	2300      	movs	r3, #0
 80044a6:	9a03      	ldr	r2, [sp, #12]
 80044a8:	7013      	strb	r3, [r2, #0]
    while (huart->TxXferCount > 0U)
 80044aa:	0023      	movs	r3, r4
 80044ac:	3352      	adds	r3, #82	; 0x52
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <HAL_UART_Transmit+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044b6:	9b05      	ldr	r3, [sp, #20]
 80044b8:	2140      	movs	r1, #64	; 0x40
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	0020      	movs	r0, r4
 80044be:	003b      	movs	r3, r7
 80044c0:	f7ff ff52 	bl	8004368 <UART_WaitOnFlagUntilTimeout>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d10c      	bne.n	80044e2 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80044c8:	2320      	movs	r3, #32
 80044ca:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80044cc:	e00a      	b.n	80044e4 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ce:	9b05      	ldr	r3, [sp, #20]
 80044d0:	2200      	movs	r2, #0
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	2180      	movs	r1, #128	; 0x80
 80044d6:	003b      	movs	r3, r7
 80044d8:	0020      	movs	r0, r4
 80044da:	f7ff ff45 	bl	8004368 <UART_WaitOnFlagUntilTimeout>
 80044de:	2800      	cmp	r0, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 80044e2:	2003      	movs	r0, #3
}
 80044e4:	b007      	add	sp, #28
 80044e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdata8bits == NULL)
 80044e8:	6822      	ldr	r2, [r4, #0]
 80044ea:	2d00      	cmp	r5, #0
 80044ec:	d10b      	bne.n	8004506 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ee:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80044f0:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044f2:	05db      	lsls	r3, r3, #23
 80044f4:	0ddb      	lsrs	r3, r3, #23
 80044f6:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80044f8:	9b04      	ldr	r3, [sp, #16]
 80044fa:	9a04      	ldr	r2, [sp, #16]
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29b      	uxth	r3, r3
 8004502:	8013      	strh	r3, [r2, #0]
 8004504:	e7d1      	b.n	80044aa <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004506:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8004508:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800450a:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 800450c:	e7f4      	b.n	80044f8 <HAL_UART_Transmit+0xcc>
	...

08004510 <UART_CheckIdleState>:
{
 8004510:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004512:	2600      	movs	r6, #0
{
 8004514:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004516:	1d03      	adds	r3, r0, #4
 8004518:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800451a:	f7fd fe6b 	bl	80021f4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800451e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004520:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	071b      	lsls	r3, r3, #28
 8004526:	d416      	bmi.n	8004556 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	075b      	lsls	r3, r3, #29
 800452e:	d50a      	bpl.n	8004546 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004530:	2180      	movs	r1, #128	; 0x80
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <UART_CheckIdleState+0x60>)
 8004534:	2200      	movs	r2, #0
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	0020      	movs	r0, r4
 800453a:	002b      	movs	r3, r5
 800453c:	03c9      	lsls	r1, r1, #15
 800453e:	f7ff ff13 	bl	8004368 <UART_WaitOnFlagUntilTimeout>
 8004542:	2800      	cmp	r0, #0
 8004544:	d112      	bne.n	800456c <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8004546:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004548:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800454a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800454c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454e:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8004550:	3474      	adds	r4, #116	; 0x74
 8004552:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8004554:	e00b      	b.n	800456e <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004556:	2180      	movs	r1, #128	; 0x80
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <UART_CheckIdleState+0x60>)
 800455a:	0032      	movs	r2, r6
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	0389      	lsls	r1, r1, #14
 8004560:	0003      	movs	r3, r0
 8004562:	0020      	movs	r0, r4
 8004564:	f7ff ff00 	bl	8004368 <UART_WaitOnFlagUntilTimeout>
 8004568:	2800      	cmp	r0, #0
 800456a:	d0dd      	beq.n	8004528 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800456c:	2003      	movs	r0, #3
}
 800456e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004570:	01ffffff 	.word	0x01ffffff

08004574 <HAL_UART_Init>:
{
 8004574:	b510      	push	{r4, lr}
 8004576:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004578:	d101      	bne.n	800457e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800457a:	2001      	movs	r0, #1
}
 800457c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800457e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004580:	2b00      	cmp	r3, #0
 8004582:	d104      	bne.n	800458e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8004584:	0002      	movs	r2, r0
 8004586:	3274      	adds	r2, #116	; 0x74
 8004588:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800458a:	f7fd fd7d 	bl	8002088 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800458e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004590:	2101      	movs	r1, #1
 8004592:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004594:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8004596:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004598:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800459a:	438b      	bics	r3, r1
 800459c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800459e:	f7ff fd81 	bl	80040a4 <UART_SetConfig>
 80045a2:	2801      	cmp	r0, #1
 80045a4:	d0e9      	beq.n	800457a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80045ac:	0020      	movs	r0, r4
 80045ae:	f7ff fe73 	bl	8004298 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	4907      	ldr	r1, [pc, #28]	; (80045d4 <HAL_UART_Init+0x60>)
 80045b6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80045b8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ba:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045bc:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	438a      	bics	r2, r1
 80045c4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80045c6:	2201      	movs	r2, #1
 80045c8:	6819      	ldr	r1, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80045ce:	f7ff ff9f 	bl	8004510 <UART_CheckIdleState>
 80045d2:	e7d3      	b.n	800457c <HAL_UART_Init+0x8>
 80045d4:	ffffb7ff 	.word	0xffffb7ff

080045d8 <UART_Start_Receive_DMA>:
{
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 80045dc:	0002      	movs	r2, r0
{
 80045de:	0004      	movs	r4, r0
  huart->RxXferSize = Size;
 80045e0:	3258      	adds	r2, #88	; 0x58
  huart->pRxBuffPtr = pData;
 80045e2:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e4:	2500      	movs	r5, #0
  huart->RxXferSize = Size;
 80045e6:	8013      	strh	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045e8:	2222      	movs	r2, #34	; 0x22
 80045ea:	0026      	movs	r6, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	1d07      	adds	r7, r0, #4
 80045ee:	67fd      	str	r5, [r7, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045f0:	67c2      	str	r2, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 80045f2:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80045f4:	3674      	adds	r6, #116	; 0x74
 80045f6:	42a8      	cmp	r0, r5
 80045f8:	d016      	beq.n	8004628 <UART_Start_Receive_DMA+0x50>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045fa:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 80045fc:	6385      	str	r5, [r0, #56]	; 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045fe:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004600:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <UART_Start_Receive_DMA+0xa0>)
 8004602:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004604:	4a1d      	ldr	r2, [pc, #116]	; (800467c <UART_Start_Receive_DMA+0xa4>)
 8004606:	6342      	str	r2, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004608:	6822      	ldr	r2, [r4, #0]
 800460a:	3224      	adds	r2, #36	; 0x24
 800460c:	4694      	mov	ip, r2
 800460e:	000a      	movs	r2, r1
 8004610:	4661      	mov	r1, ip
 8004612:	f7fd feab 	bl	800236c <HAL_DMA_Start_IT>
 8004616:	42a8      	cmp	r0, r5
 8004618:	d006      	beq.n	8004628 <UART_Start_Receive_DMA+0x50>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800461a:	2310      	movs	r3, #16
      return HAL_ERROR;
 800461c:	2001      	movs	r0, #1
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800461e:	67fb      	str	r3, [r7, #124]	; 0x7c
      huart->RxState = HAL_UART_STATE_READY;
 8004620:	18db      	adds	r3, r3, r3
      __HAL_UNLOCK(huart);
 8004622:	7035      	strb	r5, [r6, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8004624:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8004626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_UNLOCK(huart);
 8004628:	2000      	movs	r0, #0
 800462a:	7030      	strb	r0, [r6, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004630:	2301      	movs	r3, #1
 8004632:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004636:	2280      	movs	r2, #128	; 0x80
 8004638:	6821      	ldr	r1, [r4, #0]
 800463a:	0052      	lsls	r2, r2, #1
 800463c:	680e      	ldr	r6, [r1, #0]
 800463e:	4332      	orrs	r2, r6
 8004640:	600a      	str	r2, [r1, #0]
 8004642:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004646:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464a:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464e:	6821      	ldr	r1, [r4, #0]
 8004650:	688a      	ldr	r2, [r1, #8]
 8004652:	431a      	orrs	r2, r3
 8004654:	608a      	str	r2, [r1, #8]
 8004656:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465e:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004662:	6822      	ldr	r2, [r4, #0]
 8004664:	333f      	adds	r3, #63	; 0x3f
 8004666:	6894      	ldr	r4, [r2, #8]
 8004668:	4323      	orrs	r3, r4
 800466a:	6093      	str	r3, [r2, #8]
 800466c:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8004670:	e7d9      	b.n	8004626 <UART_Start_Receive_DMA+0x4e>
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	0800400d 	.word	0x0800400d
 8004678:	08003fed 	.word	0x08003fed
 800467c:	08003cb9 	.word	0x08003cb9

08004680 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004680:	4770      	bx	lr

08004682 <HAL_UARTEx_ReceiveToIdle_DMA>:
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004682:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	0004      	movs	r4, r0

    return status;
  }
  else
  {
    return HAL_BUSY;
 8004688:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800468a:	2b20      	cmp	r3, #32
 800468c:	d102      	bne.n	8004694 <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
    if ((pData == NULL) || (Size == 0U))
 800468e:	2900      	cmp	r1, #0
 8004690:	d101      	bne.n	8004696 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
      return HAL_ERROR;
 8004692:	2001      	movs	r0, #1
  }
}
 8004694:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) || (Size == 0U))
 8004696:	2a00      	cmp	r2, #0
 8004698:	d0fb      	beq.n	8004692 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800469a:	2380      	movs	r3, #128	; 0x80
 800469c:	68a0      	ldr	r0, [r4, #8]
 800469e:	015b      	lsls	r3, r3, #5
 80046a0:	4298      	cmp	r0, r3
 80046a2:	d104      	bne.n	80046ae <HAL_UARTEx_ReceiveToIdle_DMA+0x2c>
 80046a4:	6923      	ldr	r3, [r4, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_UARTEx_ReceiveToIdle_DMA+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 80046aa:	07cb      	lsls	r3, r1, #31
 80046ac:	d4f1      	bmi.n	8004692 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
    __HAL_LOCK(huart);
 80046ae:	0025      	movs	r5, r4
 80046b0:	3574      	adds	r5, #116	; 0x74
 80046b2:	782b      	ldrb	r3, [r5, #0]
    return HAL_BUSY;
 80046b4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d0ec      	beq.n	8004694 <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
 80046ba:	2301      	movs	r3, #1
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80046bc:	0020      	movs	r0, r4
    __HAL_LOCK(huart);
 80046be:	702b      	strb	r3, [r5, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80046c0:	6623      	str	r3, [r4, #96]	; 0x60
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80046c2:	f7ff ff89 	bl	80045d8 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d1e4      	bne.n	8004694 <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ca:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80046cc:	2a01      	cmp	r2, #1
 80046ce:	d1e0      	bne.n	8004692 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046d0:	2310      	movs	r3, #16
 80046d2:	6821      	ldr	r1, [r4, #0]
 80046d4:	620b      	str	r3, [r1, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046da:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046de:	6822      	ldr	r2, [r4, #0]
 80046e0:	6814      	ldr	r4, [r2, #0]
 80046e2:	4323      	orrs	r3, r4
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	f381 8810 	msr	PRIMASK, r1
}
 80046ea:	e7d3      	b.n	8004694 <HAL_UARTEx_ReceiveToIdle_DMA+0x12>

080046ec <__errno>:
 80046ec:	4b01      	ldr	r3, [pc, #4]	; (80046f4 <__errno+0x8>)
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	4770      	bx	lr
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	20000010 	.word	0x20000010

080046f8 <__libc_init_array>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	2600      	movs	r6, #0
 80046fc:	4d0c      	ldr	r5, [pc, #48]	; (8004730 <__libc_init_array+0x38>)
 80046fe:	4c0d      	ldr	r4, [pc, #52]	; (8004734 <__libc_init_array+0x3c>)
 8004700:	1b64      	subs	r4, r4, r5
 8004702:	10a4      	asrs	r4, r4, #2
 8004704:	42a6      	cmp	r6, r4
 8004706:	d109      	bne.n	800471c <__libc_init_array+0x24>
 8004708:	2600      	movs	r6, #0
 800470a:	f000 fc73 	bl	8004ff4 <_init>
 800470e:	4d0a      	ldr	r5, [pc, #40]	; (8004738 <__libc_init_array+0x40>)
 8004710:	4c0a      	ldr	r4, [pc, #40]	; (800473c <__libc_init_array+0x44>)
 8004712:	1b64      	subs	r4, r4, r5
 8004714:	10a4      	asrs	r4, r4, #2
 8004716:	42a6      	cmp	r6, r4
 8004718:	d105      	bne.n	8004726 <__libc_init_array+0x2e>
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	00b3      	lsls	r3, r6, #2
 800471e:	58eb      	ldr	r3, [r5, r3]
 8004720:	4798      	blx	r3
 8004722:	3601      	adds	r6, #1
 8004724:	e7ee      	b.n	8004704 <__libc_init_array+0xc>
 8004726:	00b3      	lsls	r3, r6, #2
 8004728:	58eb      	ldr	r3, [r5, r3]
 800472a:	4798      	blx	r3
 800472c:	3601      	adds	r6, #1
 800472e:	e7f2      	b.n	8004716 <__libc_init_array+0x1e>
 8004730:	080051f8 	.word	0x080051f8
 8004734:	080051f8 	.word	0x080051f8
 8004738:	080051f8 	.word	0x080051f8
 800473c:	080051fc 	.word	0x080051fc

08004740 <memset>:
 8004740:	0003      	movs	r3, r0
 8004742:	1882      	adds	r2, r0, r2
 8004744:	4293      	cmp	r3, r2
 8004746:	d100      	bne.n	800474a <memset+0xa>
 8004748:	4770      	bx	lr
 800474a:	7019      	strb	r1, [r3, #0]
 800474c:	3301      	adds	r3, #1
 800474e:	e7f9      	b.n	8004744 <memset+0x4>

08004750 <siprintf>:
 8004750:	b40e      	push	{r1, r2, r3}
 8004752:	b500      	push	{lr}
 8004754:	490b      	ldr	r1, [pc, #44]	; (8004784 <siprintf+0x34>)
 8004756:	b09c      	sub	sp, #112	; 0x70
 8004758:	ab1d      	add	r3, sp, #116	; 0x74
 800475a:	9002      	str	r0, [sp, #8]
 800475c:	9006      	str	r0, [sp, #24]
 800475e:	9107      	str	r1, [sp, #28]
 8004760:	9104      	str	r1, [sp, #16]
 8004762:	4809      	ldr	r0, [pc, #36]	; (8004788 <siprintf+0x38>)
 8004764:	4909      	ldr	r1, [pc, #36]	; (800478c <siprintf+0x3c>)
 8004766:	cb04      	ldmia	r3!, {r2}
 8004768:	9105      	str	r1, [sp, #20]
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	a902      	add	r1, sp, #8
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	f000 f89c 	bl	80048ac <_svfiprintf_r>
 8004774:	2300      	movs	r3, #0
 8004776:	9a02      	ldr	r2, [sp, #8]
 8004778:	7013      	strb	r3, [r2, #0]
 800477a:	b01c      	add	sp, #112	; 0x70
 800477c:	bc08      	pop	{r3}
 800477e:	b003      	add	sp, #12
 8004780:	4718      	bx	r3
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	7fffffff 	.word	0x7fffffff
 8004788:	20000010 	.word	0x20000010
 800478c:	ffff0208 	.word	0xffff0208

08004790 <strcat>:
 8004790:	0002      	movs	r2, r0
 8004792:	b510      	push	{r4, lr}
 8004794:	7813      	ldrb	r3, [r2, #0]
 8004796:	0014      	movs	r4, r2
 8004798:	3201      	adds	r2, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1fa      	bne.n	8004794 <strcat+0x4>
 800479e:	5cca      	ldrb	r2, [r1, r3]
 80047a0:	54e2      	strb	r2, [r4, r3]
 80047a2:	3301      	adds	r3, #1
 80047a4:	2a00      	cmp	r2, #0
 80047a6:	d1fa      	bne.n	800479e <strcat+0xe>
 80047a8:	bd10      	pop	{r4, pc}

080047aa <strcpy>:
 80047aa:	0003      	movs	r3, r0
 80047ac:	780a      	ldrb	r2, [r1, #0]
 80047ae:	3101      	adds	r1, #1
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	3301      	adds	r3, #1
 80047b4:	2a00      	cmp	r2, #0
 80047b6:	d1f9      	bne.n	80047ac <strcpy+0x2>
 80047b8:	4770      	bx	lr

080047ba <strstr>:
 80047ba:	780a      	ldrb	r2, [r1, #0]
 80047bc:	b530      	push	{r4, r5, lr}
 80047be:	2a00      	cmp	r2, #0
 80047c0:	d10c      	bne.n	80047dc <strstr+0x22>
 80047c2:	bd30      	pop	{r4, r5, pc}
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d108      	bne.n	80047da <strstr+0x20>
 80047c8:	2301      	movs	r3, #1
 80047ca:	5ccc      	ldrb	r4, [r1, r3]
 80047cc:	2c00      	cmp	r4, #0
 80047ce:	d0f8      	beq.n	80047c2 <strstr+0x8>
 80047d0:	5cc5      	ldrb	r5, [r0, r3]
 80047d2:	42a5      	cmp	r5, r4
 80047d4:	d101      	bne.n	80047da <strstr+0x20>
 80047d6:	3301      	adds	r3, #1
 80047d8:	e7f7      	b.n	80047ca <strstr+0x10>
 80047da:	3001      	adds	r0, #1
 80047dc:	7803      	ldrb	r3, [r0, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <strstr+0xa>
 80047e2:	0018      	movs	r0, r3
 80047e4:	e7ed      	b.n	80047c2 <strstr+0x8>
	...

080047e8 <__ssputs_r>:
 80047e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ea:	688e      	ldr	r6, [r1, #8]
 80047ec:	b085      	sub	sp, #20
 80047ee:	0007      	movs	r7, r0
 80047f0:	000c      	movs	r4, r1
 80047f2:	9203      	str	r2, [sp, #12]
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	429e      	cmp	r6, r3
 80047f8:	d83c      	bhi.n	8004874 <__ssputs_r+0x8c>
 80047fa:	2390      	movs	r3, #144	; 0x90
 80047fc:	898a      	ldrh	r2, [r1, #12]
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	421a      	tst	r2, r3
 8004802:	d034      	beq.n	800486e <__ssputs_r+0x86>
 8004804:	2503      	movs	r5, #3
 8004806:	6909      	ldr	r1, [r1, #16]
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	1a5b      	subs	r3, r3, r1
 800480c:	9302      	str	r3, [sp, #8]
 800480e:	6963      	ldr	r3, [r4, #20]
 8004810:	9802      	ldr	r0, [sp, #8]
 8004812:	435d      	muls	r5, r3
 8004814:	0feb      	lsrs	r3, r5, #31
 8004816:	195d      	adds	r5, r3, r5
 8004818:	9b01      	ldr	r3, [sp, #4]
 800481a:	106d      	asrs	r5, r5, #1
 800481c:	3301      	adds	r3, #1
 800481e:	181b      	adds	r3, r3, r0
 8004820:	42ab      	cmp	r3, r5
 8004822:	d900      	bls.n	8004826 <__ssputs_r+0x3e>
 8004824:	001d      	movs	r5, r3
 8004826:	0553      	lsls	r3, r2, #21
 8004828:	d532      	bpl.n	8004890 <__ssputs_r+0xa8>
 800482a:	0029      	movs	r1, r5
 800482c:	0038      	movs	r0, r7
 800482e:	f000 fb31 	bl	8004e94 <_malloc_r>
 8004832:	1e06      	subs	r6, r0, #0
 8004834:	d109      	bne.n	800484a <__ssputs_r+0x62>
 8004836:	230c      	movs	r3, #12
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	2340      	movs	r3, #64	; 0x40
 800483c:	2001      	movs	r0, #1
 800483e:	89a2      	ldrh	r2, [r4, #12]
 8004840:	4240      	negs	r0, r0
 8004842:	4313      	orrs	r3, r2
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	b005      	add	sp, #20
 8004848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800484a:	9a02      	ldr	r2, [sp, #8]
 800484c:	6921      	ldr	r1, [r4, #16]
 800484e:	f000 faba 	bl	8004dc6 <memcpy>
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <__ssputs_r+0xc0>)
 8004856:	401a      	ands	r2, r3
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	4313      	orrs	r3, r2
 800485c:	81a3      	strh	r3, [r4, #12]
 800485e:	9b02      	ldr	r3, [sp, #8]
 8004860:	6126      	str	r6, [r4, #16]
 8004862:	18f6      	adds	r6, r6, r3
 8004864:	6026      	str	r6, [r4, #0]
 8004866:	6165      	str	r5, [r4, #20]
 8004868:	9e01      	ldr	r6, [sp, #4]
 800486a:	1aed      	subs	r5, r5, r3
 800486c:	60a5      	str	r5, [r4, #8]
 800486e:	9b01      	ldr	r3, [sp, #4]
 8004870:	429e      	cmp	r6, r3
 8004872:	d900      	bls.n	8004876 <__ssputs_r+0x8e>
 8004874:	9e01      	ldr	r6, [sp, #4]
 8004876:	0032      	movs	r2, r6
 8004878:	9903      	ldr	r1, [sp, #12]
 800487a:	6820      	ldr	r0, [r4, #0]
 800487c:	f000 faac 	bl	8004dd8 <memmove>
 8004880:	68a3      	ldr	r3, [r4, #8]
 8004882:	2000      	movs	r0, #0
 8004884:	1b9b      	subs	r3, r3, r6
 8004886:	60a3      	str	r3, [r4, #8]
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	199e      	adds	r6, r3, r6
 800488c:	6026      	str	r6, [r4, #0]
 800488e:	e7da      	b.n	8004846 <__ssputs_r+0x5e>
 8004890:	002a      	movs	r2, r5
 8004892:	0038      	movs	r0, r7
 8004894:	f000 fb5c 	bl	8004f50 <_realloc_r>
 8004898:	1e06      	subs	r6, r0, #0
 800489a:	d1e0      	bne.n	800485e <__ssputs_r+0x76>
 800489c:	0038      	movs	r0, r7
 800489e:	6921      	ldr	r1, [r4, #16]
 80048a0:	f000 faae 	bl	8004e00 <_free_r>
 80048a4:	e7c7      	b.n	8004836 <__ssputs_r+0x4e>
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	fffffb7f 	.word	0xfffffb7f

080048ac <_svfiprintf_r>:
 80048ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ae:	b0a1      	sub	sp, #132	; 0x84
 80048b0:	9003      	str	r0, [sp, #12]
 80048b2:	001d      	movs	r5, r3
 80048b4:	898b      	ldrh	r3, [r1, #12]
 80048b6:	000f      	movs	r7, r1
 80048b8:	0016      	movs	r6, r2
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	d511      	bpl.n	80048e2 <_svfiprintf_r+0x36>
 80048be:	690b      	ldr	r3, [r1, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10e      	bne.n	80048e2 <_svfiprintf_r+0x36>
 80048c4:	2140      	movs	r1, #64	; 0x40
 80048c6:	f000 fae5 	bl	8004e94 <_malloc_r>
 80048ca:	6038      	str	r0, [r7, #0]
 80048cc:	6138      	str	r0, [r7, #16]
 80048ce:	2800      	cmp	r0, #0
 80048d0:	d105      	bne.n	80048de <_svfiprintf_r+0x32>
 80048d2:	230c      	movs	r3, #12
 80048d4:	9a03      	ldr	r2, [sp, #12]
 80048d6:	3801      	subs	r0, #1
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	b021      	add	sp, #132	; 0x84
 80048dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048de:	2340      	movs	r3, #64	; 0x40
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	2300      	movs	r3, #0
 80048e4:	ac08      	add	r4, sp, #32
 80048e6:	6163      	str	r3, [r4, #20]
 80048e8:	3320      	adds	r3, #32
 80048ea:	7663      	strb	r3, [r4, #25]
 80048ec:	3310      	adds	r3, #16
 80048ee:	76a3      	strb	r3, [r4, #26]
 80048f0:	9507      	str	r5, [sp, #28]
 80048f2:	0035      	movs	r5, r6
 80048f4:	782b      	ldrb	r3, [r5, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <_svfiprintf_r+0x52>
 80048fa:	2b25      	cmp	r3, #37	; 0x25
 80048fc:	d147      	bne.n	800498e <_svfiprintf_r+0xe2>
 80048fe:	1bab      	subs	r3, r5, r6
 8004900:	9305      	str	r3, [sp, #20]
 8004902:	42b5      	cmp	r5, r6
 8004904:	d00c      	beq.n	8004920 <_svfiprintf_r+0x74>
 8004906:	0032      	movs	r2, r6
 8004908:	0039      	movs	r1, r7
 800490a:	9803      	ldr	r0, [sp, #12]
 800490c:	f7ff ff6c 	bl	80047e8 <__ssputs_r>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d100      	bne.n	8004916 <_svfiprintf_r+0x6a>
 8004914:	e0ae      	b.n	8004a74 <_svfiprintf_r+0x1c8>
 8004916:	6962      	ldr	r2, [r4, #20]
 8004918:	9b05      	ldr	r3, [sp, #20]
 800491a:	4694      	mov	ip, r2
 800491c:	4463      	add	r3, ip
 800491e:	6163      	str	r3, [r4, #20]
 8004920:	782b      	ldrb	r3, [r5, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d100      	bne.n	8004928 <_svfiprintf_r+0x7c>
 8004926:	e0a5      	b.n	8004a74 <_svfiprintf_r+0x1c8>
 8004928:	2201      	movs	r2, #1
 800492a:	2300      	movs	r3, #0
 800492c:	4252      	negs	r2, r2
 800492e:	6062      	str	r2, [r4, #4]
 8004930:	a904      	add	r1, sp, #16
 8004932:	3254      	adds	r2, #84	; 0x54
 8004934:	1852      	adds	r2, r2, r1
 8004936:	1c6e      	adds	r6, r5, #1
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	60e3      	str	r3, [r4, #12]
 800493c:	60a3      	str	r3, [r4, #8]
 800493e:	7013      	strb	r3, [r2, #0]
 8004940:	65a3      	str	r3, [r4, #88]	; 0x58
 8004942:	2205      	movs	r2, #5
 8004944:	7831      	ldrb	r1, [r6, #0]
 8004946:	4854      	ldr	r0, [pc, #336]	; (8004a98 <_svfiprintf_r+0x1ec>)
 8004948:	f000 fa32 	bl	8004db0 <memchr>
 800494c:	1c75      	adds	r5, r6, #1
 800494e:	2800      	cmp	r0, #0
 8004950:	d11f      	bne.n	8004992 <_svfiprintf_r+0xe6>
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	06d3      	lsls	r3, r2, #27
 8004956:	d504      	bpl.n	8004962 <_svfiprintf_r+0xb6>
 8004958:	2353      	movs	r3, #83	; 0x53
 800495a:	a904      	add	r1, sp, #16
 800495c:	185b      	adds	r3, r3, r1
 800495e:	2120      	movs	r1, #32
 8004960:	7019      	strb	r1, [r3, #0]
 8004962:	0713      	lsls	r3, r2, #28
 8004964:	d504      	bpl.n	8004970 <_svfiprintf_r+0xc4>
 8004966:	2353      	movs	r3, #83	; 0x53
 8004968:	a904      	add	r1, sp, #16
 800496a:	185b      	adds	r3, r3, r1
 800496c:	212b      	movs	r1, #43	; 0x2b
 800496e:	7019      	strb	r1, [r3, #0]
 8004970:	7833      	ldrb	r3, [r6, #0]
 8004972:	2b2a      	cmp	r3, #42	; 0x2a
 8004974:	d016      	beq.n	80049a4 <_svfiprintf_r+0xf8>
 8004976:	0035      	movs	r5, r6
 8004978:	2100      	movs	r1, #0
 800497a:	200a      	movs	r0, #10
 800497c:	68e3      	ldr	r3, [r4, #12]
 800497e:	782a      	ldrb	r2, [r5, #0]
 8004980:	1c6e      	adds	r6, r5, #1
 8004982:	3a30      	subs	r2, #48	; 0x30
 8004984:	2a09      	cmp	r2, #9
 8004986:	d94e      	bls.n	8004a26 <_svfiprintf_r+0x17a>
 8004988:	2900      	cmp	r1, #0
 800498a:	d111      	bne.n	80049b0 <_svfiprintf_r+0x104>
 800498c:	e017      	b.n	80049be <_svfiprintf_r+0x112>
 800498e:	3501      	adds	r5, #1
 8004990:	e7b0      	b.n	80048f4 <_svfiprintf_r+0x48>
 8004992:	4b41      	ldr	r3, [pc, #260]	; (8004a98 <_svfiprintf_r+0x1ec>)
 8004994:	6822      	ldr	r2, [r4, #0]
 8004996:	1ac0      	subs	r0, r0, r3
 8004998:	2301      	movs	r3, #1
 800499a:	4083      	lsls	r3, r0
 800499c:	4313      	orrs	r3, r2
 800499e:	002e      	movs	r6, r5
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	e7ce      	b.n	8004942 <_svfiprintf_r+0x96>
 80049a4:	9b07      	ldr	r3, [sp, #28]
 80049a6:	1d19      	adds	r1, r3, #4
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	9107      	str	r1, [sp, #28]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	db01      	blt.n	80049b4 <_svfiprintf_r+0x108>
 80049b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049b2:	e004      	b.n	80049be <_svfiprintf_r+0x112>
 80049b4:	425b      	negs	r3, r3
 80049b6:	60e3      	str	r3, [r4, #12]
 80049b8:	2302      	movs	r3, #2
 80049ba:	4313      	orrs	r3, r2
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	782b      	ldrb	r3, [r5, #0]
 80049c0:	2b2e      	cmp	r3, #46	; 0x2e
 80049c2:	d10a      	bne.n	80049da <_svfiprintf_r+0x12e>
 80049c4:	786b      	ldrb	r3, [r5, #1]
 80049c6:	2b2a      	cmp	r3, #42	; 0x2a
 80049c8:	d135      	bne.n	8004a36 <_svfiprintf_r+0x18a>
 80049ca:	9b07      	ldr	r3, [sp, #28]
 80049cc:	3502      	adds	r5, #2
 80049ce:	1d1a      	adds	r2, r3, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	9207      	str	r2, [sp, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	db2b      	blt.n	8004a30 <_svfiprintf_r+0x184>
 80049d8:	9309      	str	r3, [sp, #36]	; 0x24
 80049da:	4e30      	ldr	r6, [pc, #192]	; (8004a9c <_svfiprintf_r+0x1f0>)
 80049dc:	2203      	movs	r2, #3
 80049de:	0030      	movs	r0, r6
 80049e0:	7829      	ldrb	r1, [r5, #0]
 80049e2:	f000 f9e5 	bl	8004db0 <memchr>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d006      	beq.n	80049f8 <_svfiprintf_r+0x14c>
 80049ea:	2340      	movs	r3, #64	; 0x40
 80049ec:	1b80      	subs	r0, r0, r6
 80049ee:	4083      	lsls	r3, r0
 80049f0:	6822      	ldr	r2, [r4, #0]
 80049f2:	3501      	adds	r5, #1
 80049f4:	4313      	orrs	r3, r2
 80049f6:	6023      	str	r3, [r4, #0]
 80049f8:	7829      	ldrb	r1, [r5, #0]
 80049fa:	2206      	movs	r2, #6
 80049fc:	4828      	ldr	r0, [pc, #160]	; (8004aa0 <_svfiprintf_r+0x1f4>)
 80049fe:	1c6e      	adds	r6, r5, #1
 8004a00:	7621      	strb	r1, [r4, #24]
 8004a02:	f000 f9d5 	bl	8004db0 <memchr>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d03c      	beq.n	8004a84 <_svfiprintf_r+0x1d8>
 8004a0a:	4b26      	ldr	r3, [pc, #152]	; (8004aa4 <_svfiprintf_r+0x1f8>)
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d125      	bne.n	8004a5c <_svfiprintf_r+0x1b0>
 8004a10:	2207      	movs	r2, #7
 8004a12:	9b07      	ldr	r3, [sp, #28]
 8004a14:	3307      	adds	r3, #7
 8004a16:	4393      	bics	r3, r2
 8004a18:	3308      	adds	r3, #8
 8004a1a:	9307      	str	r3, [sp, #28]
 8004a1c:	6963      	ldr	r3, [r4, #20]
 8004a1e:	9a04      	ldr	r2, [sp, #16]
 8004a20:	189b      	adds	r3, r3, r2
 8004a22:	6163      	str	r3, [r4, #20]
 8004a24:	e765      	b.n	80048f2 <_svfiprintf_r+0x46>
 8004a26:	4343      	muls	r3, r0
 8004a28:	0035      	movs	r5, r6
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	189b      	adds	r3, r3, r2
 8004a2e:	e7a6      	b.n	800497e <_svfiprintf_r+0xd2>
 8004a30:	2301      	movs	r3, #1
 8004a32:	425b      	negs	r3, r3
 8004a34:	e7d0      	b.n	80049d8 <_svfiprintf_r+0x12c>
 8004a36:	2300      	movs	r3, #0
 8004a38:	200a      	movs	r0, #10
 8004a3a:	001a      	movs	r2, r3
 8004a3c:	3501      	adds	r5, #1
 8004a3e:	6063      	str	r3, [r4, #4]
 8004a40:	7829      	ldrb	r1, [r5, #0]
 8004a42:	1c6e      	adds	r6, r5, #1
 8004a44:	3930      	subs	r1, #48	; 0x30
 8004a46:	2909      	cmp	r1, #9
 8004a48:	d903      	bls.n	8004a52 <_svfiprintf_r+0x1a6>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0c5      	beq.n	80049da <_svfiprintf_r+0x12e>
 8004a4e:	9209      	str	r2, [sp, #36]	; 0x24
 8004a50:	e7c3      	b.n	80049da <_svfiprintf_r+0x12e>
 8004a52:	4342      	muls	r2, r0
 8004a54:	0035      	movs	r5, r6
 8004a56:	2301      	movs	r3, #1
 8004a58:	1852      	adds	r2, r2, r1
 8004a5a:	e7f1      	b.n	8004a40 <_svfiprintf_r+0x194>
 8004a5c:	ab07      	add	r3, sp, #28
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	003a      	movs	r2, r7
 8004a62:	0021      	movs	r1, r4
 8004a64:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <_svfiprintf_r+0x1fc>)
 8004a66:	9803      	ldr	r0, [sp, #12]
 8004a68:	e000      	b.n	8004a6c <_svfiprintf_r+0x1c0>
 8004a6a:	bf00      	nop
 8004a6c:	9004      	str	r0, [sp, #16]
 8004a6e:	9b04      	ldr	r3, [sp, #16]
 8004a70:	3301      	adds	r3, #1
 8004a72:	d1d3      	bne.n	8004a1c <_svfiprintf_r+0x170>
 8004a74:	89bb      	ldrh	r3, [r7, #12]
 8004a76:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004a78:	065b      	lsls	r3, r3, #25
 8004a7a:	d400      	bmi.n	8004a7e <_svfiprintf_r+0x1d2>
 8004a7c:	e72d      	b.n	80048da <_svfiprintf_r+0x2e>
 8004a7e:	2001      	movs	r0, #1
 8004a80:	4240      	negs	r0, r0
 8004a82:	e72a      	b.n	80048da <_svfiprintf_r+0x2e>
 8004a84:	ab07      	add	r3, sp, #28
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	003a      	movs	r2, r7
 8004a8a:	0021      	movs	r1, r4
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <_svfiprintf_r+0x1fc>)
 8004a8e:	9803      	ldr	r0, [sp, #12]
 8004a90:	f000 f87c 	bl	8004b8c <_printf_i>
 8004a94:	e7ea      	b.n	8004a6c <_svfiprintf_r+0x1c0>
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	080051bd 	.word	0x080051bd
 8004a9c:	080051c3 	.word	0x080051c3
 8004aa0:	080051c7 	.word	0x080051c7
 8004aa4:	00000000 	.word	0x00000000
 8004aa8:	080047e9 	.word	0x080047e9

08004aac <_printf_common>:
 8004aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aae:	0015      	movs	r5, r2
 8004ab0:	9301      	str	r3, [sp, #4]
 8004ab2:	688a      	ldr	r2, [r1, #8]
 8004ab4:	690b      	ldr	r3, [r1, #16]
 8004ab6:	000c      	movs	r4, r1
 8004ab8:	9000      	str	r0, [sp, #0]
 8004aba:	4293      	cmp	r3, r2
 8004abc:	da00      	bge.n	8004ac0 <_printf_common+0x14>
 8004abe:	0013      	movs	r3, r2
 8004ac0:	0022      	movs	r2, r4
 8004ac2:	602b      	str	r3, [r5, #0]
 8004ac4:	3243      	adds	r2, #67	; 0x43
 8004ac6:	7812      	ldrb	r2, [r2, #0]
 8004ac8:	2a00      	cmp	r2, #0
 8004aca:	d001      	beq.n	8004ad0 <_printf_common+0x24>
 8004acc:	3301      	adds	r3, #1
 8004ace:	602b      	str	r3, [r5, #0]
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	069b      	lsls	r3, r3, #26
 8004ad4:	d502      	bpl.n	8004adc <_printf_common+0x30>
 8004ad6:	682b      	ldr	r3, [r5, #0]
 8004ad8:	3302      	adds	r3, #2
 8004ada:	602b      	str	r3, [r5, #0]
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	2306      	movs	r3, #6
 8004ae0:	0017      	movs	r7, r2
 8004ae2:	401f      	ands	r7, r3
 8004ae4:	421a      	tst	r2, r3
 8004ae6:	d027      	beq.n	8004b38 <_printf_common+0x8c>
 8004ae8:	0023      	movs	r3, r4
 8004aea:	3343      	adds	r3, #67	; 0x43
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	1e5a      	subs	r2, r3, #1
 8004af0:	4193      	sbcs	r3, r2
 8004af2:	6822      	ldr	r2, [r4, #0]
 8004af4:	0692      	lsls	r2, r2, #26
 8004af6:	d430      	bmi.n	8004b5a <_printf_common+0xae>
 8004af8:	0022      	movs	r2, r4
 8004afa:	9901      	ldr	r1, [sp, #4]
 8004afc:	9800      	ldr	r0, [sp, #0]
 8004afe:	9e08      	ldr	r6, [sp, #32]
 8004b00:	3243      	adds	r2, #67	; 0x43
 8004b02:	47b0      	blx	r6
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d025      	beq.n	8004b54 <_printf_common+0xa8>
 8004b08:	2306      	movs	r3, #6
 8004b0a:	6820      	ldr	r0, [r4, #0]
 8004b0c:	682a      	ldr	r2, [r5, #0]
 8004b0e:	68e1      	ldr	r1, [r4, #12]
 8004b10:	2500      	movs	r5, #0
 8004b12:	4003      	ands	r3, r0
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d103      	bne.n	8004b20 <_printf_common+0x74>
 8004b18:	1a8d      	subs	r5, r1, r2
 8004b1a:	43eb      	mvns	r3, r5
 8004b1c:	17db      	asrs	r3, r3, #31
 8004b1e:	401d      	ands	r5, r3
 8004b20:	68a3      	ldr	r3, [r4, #8]
 8004b22:	6922      	ldr	r2, [r4, #16]
 8004b24:	4293      	cmp	r3, r2
 8004b26:	dd01      	ble.n	8004b2c <_printf_common+0x80>
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	18ed      	adds	r5, r5, r3
 8004b2c:	2700      	movs	r7, #0
 8004b2e:	42bd      	cmp	r5, r7
 8004b30:	d120      	bne.n	8004b74 <_printf_common+0xc8>
 8004b32:	2000      	movs	r0, #0
 8004b34:	e010      	b.n	8004b58 <_printf_common+0xac>
 8004b36:	3701      	adds	r7, #1
 8004b38:	68e3      	ldr	r3, [r4, #12]
 8004b3a:	682a      	ldr	r2, [r5, #0]
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	42bb      	cmp	r3, r7
 8004b40:	ddd2      	ble.n	8004ae8 <_printf_common+0x3c>
 8004b42:	0022      	movs	r2, r4
 8004b44:	2301      	movs	r3, #1
 8004b46:	9901      	ldr	r1, [sp, #4]
 8004b48:	9800      	ldr	r0, [sp, #0]
 8004b4a:	9e08      	ldr	r6, [sp, #32]
 8004b4c:	3219      	adds	r2, #25
 8004b4e:	47b0      	blx	r6
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d1f0      	bne.n	8004b36 <_printf_common+0x8a>
 8004b54:	2001      	movs	r0, #1
 8004b56:	4240      	negs	r0, r0
 8004b58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b5a:	2030      	movs	r0, #48	; 0x30
 8004b5c:	18e1      	adds	r1, r4, r3
 8004b5e:	3143      	adds	r1, #67	; 0x43
 8004b60:	7008      	strb	r0, [r1, #0]
 8004b62:	0021      	movs	r1, r4
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	3145      	adds	r1, #69	; 0x45
 8004b68:	7809      	ldrb	r1, [r1, #0]
 8004b6a:	18a2      	adds	r2, r4, r2
 8004b6c:	3243      	adds	r2, #67	; 0x43
 8004b6e:	3302      	adds	r3, #2
 8004b70:	7011      	strb	r1, [r2, #0]
 8004b72:	e7c1      	b.n	8004af8 <_printf_common+0x4c>
 8004b74:	0022      	movs	r2, r4
 8004b76:	2301      	movs	r3, #1
 8004b78:	9901      	ldr	r1, [sp, #4]
 8004b7a:	9800      	ldr	r0, [sp, #0]
 8004b7c:	9e08      	ldr	r6, [sp, #32]
 8004b7e:	321a      	adds	r2, #26
 8004b80:	47b0      	blx	r6
 8004b82:	1c43      	adds	r3, r0, #1
 8004b84:	d0e6      	beq.n	8004b54 <_printf_common+0xa8>
 8004b86:	3701      	adds	r7, #1
 8004b88:	e7d1      	b.n	8004b2e <_printf_common+0x82>
	...

08004b8c <_printf_i>:
 8004b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b8e:	b08b      	sub	sp, #44	; 0x2c
 8004b90:	9206      	str	r2, [sp, #24]
 8004b92:	000a      	movs	r2, r1
 8004b94:	3243      	adds	r2, #67	; 0x43
 8004b96:	9307      	str	r3, [sp, #28]
 8004b98:	9005      	str	r0, [sp, #20]
 8004b9a:	9204      	str	r2, [sp, #16]
 8004b9c:	7e0a      	ldrb	r2, [r1, #24]
 8004b9e:	000c      	movs	r4, r1
 8004ba0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ba2:	2a78      	cmp	r2, #120	; 0x78
 8004ba4:	d806      	bhi.n	8004bb4 <_printf_i+0x28>
 8004ba6:	2a62      	cmp	r2, #98	; 0x62
 8004ba8:	d808      	bhi.n	8004bbc <_printf_i+0x30>
 8004baa:	2a00      	cmp	r2, #0
 8004bac:	d100      	bne.n	8004bb0 <_printf_i+0x24>
 8004bae:	e0c0      	b.n	8004d32 <_printf_i+0x1a6>
 8004bb0:	2a58      	cmp	r2, #88	; 0x58
 8004bb2:	d052      	beq.n	8004c5a <_printf_i+0xce>
 8004bb4:	0026      	movs	r6, r4
 8004bb6:	3642      	adds	r6, #66	; 0x42
 8004bb8:	7032      	strb	r2, [r6, #0]
 8004bba:	e022      	b.n	8004c02 <_printf_i+0x76>
 8004bbc:	0010      	movs	r0, r2
 8004bbe:	3863      	subs	r0, #99	; 0x63
 8004bc0:	2815      	cmp	r0, #21
 8004bc2:	d8f7      	bhi.n	8004bb4 <_printf_i+0x28>
 8004bc4:	f7fb fabc 	bl	8000140 <__gnu_thumb1_case_shi>
 8004bc8:	001f0016 	.word	0x001f0016
 8004bcc:	fff6fff6 	.word	0xfff6fff6
 8004bd0:	fff6fff6 	.word	0xfff6fff6
 8004bd4:	fff6001f 	.word	0xfff6001f
 8004bd8:	fff6fff6 	.word	0xfff6fff6
 8004bdc:	00a8fff6 	.word	0x00a8fff6
 8004be0:	009a0036 	.word	0x009a0036
 8004be4:	fff6fff6 	.word	0xfff6fff6
 8004be8:	fff600b9 	.word	0xfff600b9
 8004bec:	fff60036 	.word	0xfff60036
 8004bf0:	009efff6 	.word	0x009efff6
 8004bf4:	0026      	movs	r6, r4
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	3642      	adds	r6, #66	; 0x42
 8004bfa:	1d11      	adds	r1, r2, #4
 8004bfc:	6019      	str	r1, [r3, #0]
 8004bfe:	6813      	ldr	r3, [r2, #0]
 8004c00:	7033      	strb	r3, [r6, #0]
 8004c02:	2301      	movs	r3, #1
 8004c04:	e0a7      	b.n	8004d56 <_printf_i+0x1ca>
 8004c06:	6808      	ldr	r0, [r1, #0]
 8004c08:	6819      	ldr	r1, [r3, #0]
 8004c0a:	1d0a      	adds	r2, r1, #4
 8004c0c:	0605      	lsls	r5, r0, #24
 8004c0e:	d50b      	bpl.n	8004c28 <_printf_i+0x9c>
 8004c10:	680d      	ldr	r5, [r1, #0]
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	2d00      	cmp	r5, #0
 8004c16:	da03      	bge.n	8004c20 <_printf_i+0x94>
 8004c18:	232d      	movs	r3, #45	; 0x2d
 8004c1a:	9a04      	ldr	r2, [sp, #16]
 8004c1c:	426d      	negs	r5, r5
 8004c1e:	7013      	strb	r3, [r2, #0]
 8004c20:	4b61      	ldr	r3, [pc, #388]	; (8004da8 <_printf_i+0x21c>)
 8004c22:	270a      	movs	r7, #10
 8004c24:	9303      	str	r3, [sp, #12]
 8004c26:	e032      	b.n	8004c8e <_printf_i+0x102>
 8004c28:	680d      	ldr	r5, [r1, #0]
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	0641      	lsls	r1, r0, #25
 8004c2e:	d5f1      	bpl.n	8004c14 <_printf_i+0x88>
 8004c30:	b22d      	sxth	r5, r5
 8004c32:	e7ef      	b.n	8004c14 <_printf_i+0x88>
 8004c34:	680d      	ldr	r5, [r1, #0]
 8004c36:	6819      	ldr	r1, [r3, #0]
 8004c38:	1d08      	adds	r0, r1, #4
 8004c3a:	6018      	str	r0, [r3, #0]
 8004c3c:	062e      	lsls	r6, r5, #24
 8004c3e:	d501      	bpl.n	8004c44 <_printf_i+0xb8>
 8004c40:	680d      	ldr	r5, [r1, #0]
 8004c42:	e003      	b.n	8004c4c <_printf_i+0xc0>
 8004c44:	066d      	lsls	r5, r5, #25
 8004c46:	d5fb      	bpl.n	8004c40 <_printf_i+0xb4>
 8004c48:	680d      	ldr	r5, [r1, #0]
 8004c4a:	b2ad      	uxth	r5, r5
 8004c4c:	4b56      	ldr	r3, [pc, #344]	; (8004da8 <_printf_i+0x21c>)
 8004c4e:	270a      	movs	r7, #10
 8004c50:	9303      	str	r3, [sp, #12]
 8004c52:	2a6f      	cmp	r2, #111	; 0x6f
 8004c54:	d117      	bne.n	8004c86 <_printf_i+0xfa>
 8004c56:	2708      	movs	r7, #8
 8004c58:	e015      	b.n	8004c86 <_printf_i+0xfa>
 8004c5a:	3145      	adds	r1, #69	; 0x45
 8004c5c:	700a      	strb	r2, [r1, #0]
 8004c5e:	4a52      	ldr	r2, [pc, #328]	; (8004da8 <_printf_i+0x21c>)
 8004c60:	9203      	str	r2, [sp, #12]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	6821      	ldr	r1, [r4, #0]
 8004c66:	ca20      	ldmia	r2!, {r5}
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	0608      	lsls	r0, r1, #24
 8004c6c:	d550      	bpl.n	8004d10 <_printf_i+0x184>
 8004c6e:	07cb      	lsls	r3, r1, #31
 8004c70:	d502      	bpl.n	8004c78 <_printf_i+0xec>
 8004c72:	2320      	movs	r3, #32
 8004c74:	4319      	orrs	r1, r3
 8004c76:	6021      	str	r1, [r4, #0]
 8004c78:	2710      	movs	r7, #16
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	d103      	bne.n	8004c86 <_printf_i+0xfa>
 8004c7e:	2320      	movs	r3, #32
 8004c80:	6822      	ldr	r2, [r4, #0]
 8004c82:	439a      	bics	r2, r3
 8004c84:	6022      	str	r2, [r4, #0]
 8004c86:	0023      	movs	r3, r4
 8004c88:	2200      	movs	r2, #0
 8004c8a:	3343      	adds	r3, #67	; 0x43
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	6863      	ldr	r3, [r4, #4]
 8004c90:	60a3      	str	r3, [r4, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	db03      	blt.n	8004c9e <_printf_i+0x112>
 8004c96:	2204      	movs	r2, #4
 8004c98:	6821      	ldr	r1, [r4, #0]
 8004c9a:	4391      	bics	r1, r2
 8004c9c:	6021      	str	r1, [r4, #0]
 8004c9e:	2d00      	cmp	r5, #0
 8004ca0:	d102      	bne.n	8004ca8 <_printf_i+0x11c>
 8004ca2:	9e04      	ldr	r6, [sp, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00c      	beq.n	8004cc2 <_printf_i+0x136>
 8004ca8:	9e04      	ldr	r6, [sp, #16]
 8004caa:	0028      	movs	r0, r5
 8004cac:	0039      	movs	r1, r7
 8004cae:	f7fb fad7 	bl	8000260 <__aeabi_uidivmod>
 8004cb2:	9b03      	ldr	r3, [sp, #12]
 8004cb4:	3e01      	subs	r6, #1
 8004cb6:	5c5b      	ldrb	r3, [r3, r1]
 8004cb8:	7033      	strb	r3, [r6, #0]
 8004cba:	002b      	movs	r3, r5
 8004cbc:	0005      	movs	r5, r0
 8004cbe:	429f      	cmp	r7, r3
 8004cc0:	d9f3      	bls.n	8004caa <_printf_i+0x11e>
 8004cc2:	2f08      	cmp	r7, #8
 8004cc4:	d109      	bne.n	8004cda <_printf_i+0x14e>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	07db      	lsls	r3, r3, #31
 8004cca:	d506      	bpl.n	8004cda <_printf_i+0x14e>
 8004ccc:	6863      	ldr	r3, [r4, #4]
 8004cce:	6922      	ldr	r2, [r4, #16]
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	dc02      	bgt.n	8004cda <_printf_i+0x14e>
 8004cd4:	2330      	movs	r3, #48	; 0x30
 8004cd6:	3e01      	subs	r6, #1
 8004cd8:	7033      	strb	r3, [r6, #0]
 8004cda:	9b04      	ldr	r3, [sp, #16]
 8004cdc:	1b9b      	subs	r3, r3, r6
 8004cde:	6123      	str	r3, [r4, #16]
 8004ce0:	9b07      	ldr	r3, [sp, #28]
 8004ce2:	0021      	movs	r1, r4
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	9805      	ldr	r0, [sp, #20]
 8004ce8:	9b06      	ldr	r3, [sp, #24]
 8004cea:	aa09      	add	r2, sp, #36	; 0x24
 8004cec:	f7ff fede 	bl	8004aac <_printf_common>
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d135      	bne.n	8004d60 <_printf_i+0x1d4>
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	4240      	negs	r0, r0
 8004cf8:	b00b      	add	sp, #44	; 0x2c
 8004cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	6809      	ldr	r1, [r1, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	6022      	str	r2, [r4, #0]
 8004d04:	0022      	movs	r2, r4
 8004d06:	2178      	movs	r1, #120	; 0x78
 8004d08:	3245      	adds	r2, #69	; 0x45
 8004d0a:	7011      	strb	r1, [r2, #0]
 8004d0c:	4a27      	ldr	r2, [pc, #156]	; (8004dac <_printf_i+0x220>)
 8004d0e:	e7a7      	b.n	8004c60 <_printf_i+0xd4>
 8004d10:	0648      	lsls	r0, r1, #25
 8004d12:	d5ac      	bpl.n	8004c6e <_printf_i+0xe2>
 8004d14:	b2ad      	uxth	r5, r5
 8004d16:	e7aa      	b.n	8004c6e <_printf_i+0xe2>
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	680d      	ldr	r5, [r1, #0]
 8004d1c:	1d10      	adds	r0, r2, #4
 8004d1e:	6949      	ldr	r1, [r1, #20]
 8004d20:	6018      	str	r0, [r3, #0]
 8004d22:	6813      	ldr	r3, [r2, #0]
 8004d24:	062e      	lsls	r6, r5, #24
 8004d26:	d501      	bpl.n	8004d2c <_printf_i+0x1a0>
 8004d28:	6019      	str	r1, [r3, #0]
 8004d2a:	e002      	b.n	8004d32 <_printf_i+0x1a6>
 8004d2c:	066d      	lsls	r5, r5, #25
 8004d2e:	d5fb      	bpl.n	8004d28 <_printf_i+0x19c>
 8004d30:	8019      	strh	r1, [r3, #0]
 8004d32:	2300      	movs	r3, #0
 8004d34:	9e04      	ldr	r6, [sp, #16]
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	e7d2      	b.n	8004ce0 <_printf_i+0x154>
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	1d11      	adds	r1, r2, #4
 8004d3e:	6019      	str	r1, [r3, #0]
 8004d40:	6816      	ldr	r6, [r2, #0]
 8004d42:	2100      	movs	r1, #0
 8004d44:	0030      	movs	r0, r6
 8004d46:	6862      	ldr	r2, [r4, #4]
 8004d48:	f000 f832 	bl	8004db0 <memchr>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d001      	beq.n	8004d54 <_printf_i+0x1c8>
 8004d50:	1b80      	subs	r0, r0, r6
 8004d52:	6060      	str	r0, [r4, #4]
 8004d54:	6863      	ldr	r3, [r4, #4]
 8004d56:	6123      	str	r3, [r4, #16]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	9a04      	ldr	r2, [sp, #16]
 8004d5c:	7013      	strb	r3, [r2, #0]
 8004d5e:	e7bf      	b.n	8004ce0 <_printf_i+0x154>
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	0032      	movs	r2, r6
 8004d64:	9906      	ldr	r1, [sp, #24]
 8004d66:	9805      	ldr	r0, [sp, #20]
 8004d68:	9d07      	ldr	r5, [sp, #28]
 8004d6a:	47a8      	blx	r5
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d0c1      	beq.n	8004cf4 <_printf_i+0x168>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	079b      	lsls	r3, r3, #30
 8004d74:	d415      	bmi.n	8004da2 <_printf_i+0x216>
 8004d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d78:	68e0      	ldr	r0, [r4, #12]
 8004d7a:	4298      	cmp	r0, r3
 8004d7c:	dabc      	bge.n	8004cf8 <_printf_i+0x16c>
 8004d7e:	0018      	movs	r0, r3
 8004d80:	e7ba      	b.n	8004cf8 <_printf_i+0x16c>
 8004d82:	0022      	movs	r2, r4
 8004d84:	2301      	movs	r3, #1
 8004d86:	9906      	ldr	r1, [sp, #24]
 8004d88:	9805      	ldr	r0, [sp, #20]
 8004d8a:	9e07      	ldr	r6, [sp, #28]
 8004d8c:	3219      	adds	r2, #25
 8004d8e:	47b0      	blx	r6
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d0af      	beq.n	8004cf4 <_printf_i+0x168>
 8004d94:	3501      	adds	r5, #1
 8004d96:	68e3      	ldr	r3, [r4, #12]
 8004d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	42ab      	cmp	r3, r5
 8004d9e:	dcf0      	bgt.n	8004d82 <_printf_i+0x1f6>
 8004da0:	e7e9      	b.n	8004d76 <_printf_i+0x1ea>
 8004da2:	2500      	movs	r5, #0
 8004da4:	e7f7      	b.n	8004d96 <_printf_i+0x20a>
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	080051ce 	.word	0x080051ce
 8004dac:	080051df 	.word	0x080051df

08004db0 <memchr>:
 8004db0:	b2c9      	uxtb	r1, r1
 8004db2:	1882      	adds	r2, r0, r2
 8004db4:	4290      	cmp	r0, r2
 8004db6:	d101      	bne.n	8004dbc <memchr+0xc>
 8004db8:	2000      	movs	r0, #0
 8004dba:	4770      	bx	lr
 8004dbc:	7803      	ldrb	r3, [r0, #0]
 8004dbe:	428b      	cmp	r3, r1
 8004dc0:	d0fb      	beq.n	8004dba <memchr+0xa>
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	e7f6      	b.n	8004db4 <memchr+0x4>

08004dc6 <memcpy>:
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	b510      	push	{r4, lr}
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d100      	bne.n	8004dd0 <memcpy+0xa>
 8004dce:	bd10      	pop	{r4, pc}
 8004dd0:	5ccc      	ldrb	r4, [r1, r3]
 8004dd2:	54c4      	strb	r4, [r0, r3]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	e7f8      	b.n	8004dca <memcpy+0x4>

08004dd8 <memmove>:
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	4288      	cmp	r0, r1
 8004ddc:	d902      	bls.n	8004de4 <memmove+0xc>
 8004dde:	188b      	adds	r3, r1, r2
 8004de0:	4298      	cmp	r0, r3
 8004de2:	d303      	bcc.n	8004dec <memmove+0x14>
 8004de4:	2300      	movs	r3, #0
 8004de6:	e007      	b.n	8004df8 <memmove+0x20>
 8004de8:	5c8b      	ldrb	r3, [r1, r2]
 8004dea:	5483      	strb	r3, [r0, r2]
 8004dec:	3a01      	subs	r2, #1
 8004dee:	d2fb      	bcs.n	8004de8 <memmove+0x10>
 8004df0:	bd10      	pop	{r4, pc}
 8004df2:	5ccc      	ldrb	r4, [r1, r3]
 8004df4:	54c4      	strb	r4, [r0, r3]
 8004df6:	3301      	adds	r3, #1
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d1fa      	bne.n	8004df2 <memmove+0x1a>
 8004dfc:	e7f8      	b.n	8004df0 <memmove+0x18>
	...

08004e00 <_free_r>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	0005      	movs	r5, r0
 8004e04:	2900      	cmp	r1, #0
 8004e06:	d010      	beq.n	8004e2a <_free_r+0x2a>
 8004e08:	1f0c      	subs	r4, r1, #4
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	da00      	bge.n	8004e12 <_free_r+0x12>
 8004e10:	18e4      	adds	r4, r4, r3
 8004e12:	0028      	movs	r0, r5
 8004e14:	f000 f8d4 	bl	8004fc0 <__malloc_lock>
 8004e18:	4a1d      	ldr	r2, [pc, #116]	; (8004e90 <_free_r+0x90>)
 8004e1a:	6813      	ldr	r3, [r2, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d105      	bne.n	8004e2c <_free_r+0x2c>
 8004e20:	6063      	str	r3, [r4, #4]
 8004e22:	6014      	str	r4, [r2, #0]
 8004e24:	0028      	movs	r0, r5
 8004e26:	f000 f8d3 	bl	8004fd0 <__malloc_unlock>
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
 8004e2c:	42a3      	cmp	r3, r4
 8004e2e:	d908      	bls.n	8004e42 <_free_r+0x42>
 8004e30:	6821      	ldr	r1, [r4, #0]
 8004e32:	1860      	adds	r0, r4, r1
 8004e34:	4283      	cmp	r3, r0
 8004e36:	d1f3      	bne.n	8004e20 <_free_r+0x20>
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	1841      	adds	r1, r0, r1
 8004e3e:	6021      	str	r1, [r4, #0]
 8004e40:	e7ee      	b.n	8004e20 <_free_r+0x20>
 8004e42:	001a      	movs	r2, r3
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <_free_r+0x4e>
 8004e4a:	42a3      	cmp	r3, r4
 8004e4c:	d9f9      	bls.n	8004e42 <_free_r+0x42>
 8004e4e:	6811      	ldr	r1, [r2, #0]
 8004e50:	1850      	adds	r0, r2, r1
 8004e52:	42a0      	cmp	r0, r4
 8004e54:	d10b      	bne.n	8004e6e <_free_r+0x6e>
 8004e56:	6820      	ldr	r0, [r4, #0]
 8004e58:	1809      	adds	r1, r1, r0
 8004e5a:	1850      	adds	r0, r2, r1
 8004e5c:	6011      	str	r1, [r2, #0]
 8004e5e:	4283      	cmp	r3, r0
 8004e60:	d1e0      	bne.n	8004e24 <_free_r+0x24>
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	1841      	adds	r1, r0, r1
 8004e68:	6011      	str	r1, [r2, #0]
 8004e6a:	6053      	str	r3, [r2, #4]
 8004e6c:	e7da      	b.n	8004e24 <_free_r+0x24>
 8004e6e:	42a0      	cmp	r0, r4
 8004e70:	d902      	bls.n	8004e78 <_free_r+0x78>
 8004e72:	230c      	movs	r3, #12
 8004e74:	602b      	str	r3, [r5, #0]
 8004e76:	e7d5      	b.n	8004e24 <_free_r+0x24>
 8004e78:	6821      	ldr	r1, [r4, #0]
 8004e7a:	1860      	adds	r0, r4, r1
 8004e7c:	4283      	cmp	r3, r0
 8004e7e:	d103      	bne.n	8004e88 <_free_r+0x88>
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	1841      	adds	r1, r0, r1
 8004e86:	6021      	str	r1, [r4, #0]
 8004e88:	6063      	str	r3, [r4, #4]
 8004e8a:	6054      	str	r4, [r2, #4]
 8004e8c:	e7ca      	b.n	8004e24 <_free_r+0x24>
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	20000094 	.word	0x20000094

08004e94 <_malloc_r>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	2303      	movs	r3, #3
 8004e98:	1ccd      	adds	r5, r1, #3
 8004e9a:	439d      	bics	r5, r3
 8004e9c:	3508      	adds	r5, #8
 8004e9e:	0006      	movs	r6, r0
 8004ea0:	2d0c      	cmp	r5, #12
 8004ea2:	d21f      	bcs.n	8004ee4 <_malloc_r+0x50>
 8004ea4:	250c      	movs	r5, #12
 8004ea6:	42a9      	cmp	r1, r5
 8004ea8:	d81e      	bhi.n	8004ee8 <_malloc_r+0x54>
 8004eaa:	0030      	movs	r0, r6
 8004eac:	f000 f888 	bl	8004fc0 <__malloc_lock>
 8004eb0:	4925      	ldr	r1, [pc, #148]	; (8004f48 <_malloc_r+0xb4>)
 8004eb2:	680a      	ldr	r2, [r1, #0]
 8004eb4:	0014      	movs	r4, r2
 8004eb6:	2c00      	cmp	r4, #0
 8004eb8:	d11a      	bne.n	8004ef0 <_malloc_r+0x5c>
 8004eba:	4f24      	ldr	r7, [pc, #144]	; (8004f4c <_malloc_r+0xb8>)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d104      	bne.n	8004ecc <_malloc_r+0x38>
 8004ec2:	0021      	movs	r1, r4
 8004ec4:	0030      	movs	r0, r6
 8004ec6:	f000 f869 	bl	8004f9c <_sbrk_r>
 8004eca:	6038      	str	r0, [r7, #0]
 8004ecc:	0029      	movs	r1, r5
 8004ece:	0030      	movs	r0, r6
 8004ed0:	f000 f864 	bl	8004f9c <_sbrk_r>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d12b      	bne.n	8004f30 <_malloc_r+0x9c>
 8004ed8:	230c      	movs	r3, #12
 8004eda:	0030      	movs	r0, r6
 8004edc:	6033      	str	r3, [r6, #0]
 8004ede:	f000 f877 	bl	8004fd0 <__malloc_unlock>
 8004ee2:	e003      	b.n	8004eec <_malloc_r+0x58>
 8004ee4:	2d00      	cmp	r5, #0
 8004ee6:	dade      	bge.n	8004ea6 <_malloc_r+0x12>
 8004ee8:	230c      	movs	r3, #12
 8004eea:	6033      	str	r3, [r6, #0]
 8004eec:	2000      	movs	r0, #0
 8004eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	1b5b      	subs	r3, r3, r5
 8004ef4:	d419      	bmi.n	8004f2a <_malloc_r+0x96>
 8004ef6:	2b0b      	cmp	r3, #11
 8004ef8:	d903      	bls.n	8004f02 <_malloc_r+0x6e>
 8004efa:	6023      	str	r3, [r4, #0]
 8004efc:	18e4      	adds	r4, r4, r3
 8004efe:	6025      	str	r5, [r4, #0]
 8004f00:	e003      	b.n	8004f0a <_malloc_r+0x76>
 8004f02:	6863      	ldr	r3, [r4, #4]
 8004f04:	42a2      	cmp	r2, r4
 8004f06:	d10e      	bne.n	8004f26 <_malloc_r+0x92>
 8004f08:	600b      	str	r3, [r1, #0]
 8004f0a:	0030      	movs	r0, r6
 8004f0c:	f000 f860 	bl	8004fd0 <__malloc_unlock>
 8004f10:	0020      	movs	r0, r4
 8004f12:	2207      	movs	r2, #7
 8004f14:	300b      	adds	r0, #11
 8004f16:	1d23      	adds	r3, r4, #4
 8004f18:	4390      	bics	r0, r2
 8004f1a:	1ac2      	subs	r2, r0, r3
 8004f1c:	4298      	cmp	r0, r3
 8004f1e:	d0e6      	beq.n	8004eee <_malloc_r+0x5a>
 8004f20:	1a1b      	subs	r3, r3, r0
 8004f22:	50a3      	str	r3, [r4, r2]
 8004f24:	e7e3      	b.n	8004eee <_malloc_r+0x5a>
 8004f26:	6053      	str	r3, [r2, #4]
 8004f28:	e7ef      	b.n	8004f0a <_malloc_r+0x76>
 8004f2a:	0022      	movs	r2, r4
 8004f2c:	6864      	ldr	r4, [r4, #4]
 8004f2e:	e7c2      	b.n	8004eb6 <_malloc_r+0x22>
 8004f30:	2303      	movs	r3, #3
 8004f32:	1cc4      	adds	r4, r0, #3
 8004f34:	439c      	bics	r4, r3
 8004f36:	42a0      	cmp	r0, r4
 8004f38:	d0e1      	beq.n	8004efe <_malloc_r+0x6a>
 8004f3a:	1a21      	subs	r1, r4, r0
 8004f3c:	0030      	movs	r0, r6
 8004f3e:	f000 f82d 	bl	8004f9c <_sbrk_r>
 8004f42:	1c43      	adds	r3, r0, #1
 8004f44:	d1db      	bne.n	8004efe <_malloc_r+0x6a>
 8004f46:	e7c7      	b.n	8004ed8 <_malloc_r+0x44>
 8004f48:	20000094 	.word	0x20000094
 8004f4c:	20000098 	.word	0x20000098

08004f50 <_realloc_r>:
 8004f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f52:	0007      	movs	r7, r0
 8004f54:	000d      	movs	r5, r1
 8004f56:	0016      	movs	r6, r2
 8004f58:	2900      	cmp	r1, #0
 8004f5a:	d105      	bne.n	8004f68 <_realloc_r+0x18>
 8004f5c:	0011      	movs	r1, r2
 8004f5e:	f7ff ff99 	bl	8004e94 <_malloc_r>
 8004f62:	0004      	movs	r4, r0
 8004f64:	0020      	movs	r0, r4
 8004f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f68:	2a00      	cmp	r2, #0
 8004f6a:	d103      	bne.n	8004f74 <_realloc_r+0x24>
 8004f6c:	f7ff ff48 	bl	8004e00 <_free_r>
 8004f70:	0034      	movs	r4, r6
 8004f72:	e7f7      	b.n	8004f64 <_realloc_r+0x14>
 8004f74:	f000 f834 	bl	8004fe0 <_malloc_usable_size_r>
 8004f78:	002c      	movs	r4, r5
 8004f7a:	42b0      	cmp	r0, r6
 8004f7c:	d2f2      	bcs.n	8004f64 <_realloc_r+0x14>
 8004f7e:	0031      	movs	r1, r6
 8004f80:	0038      	movs	r0, r7
 8004f82:	f7ff ff87 	bl	8004e94 <_malloc_r>
 8004f86:	1e04      	subs	r4, r0, #0
 8004f88:	d0ec      	beq.n	8004f64 <_realloc_r+0x14>
 8004f8a:	0029      	movs	r1, r5
 8004f8c:	0032      	movs	r2, r6
 8004f8e:	f7ff ff1a 	bl	8004dc6 <memcpy>
 8004f92:	0029      	movs	r1, r5
 8004f94:	0038      	movs	r0, r7
 8004f96:	f7ff ff33 	bl	8004e00 <_free_r>
 8004f9a:	e7e3      	b.n	8004f64 <_realloc_r+0x14>

08004f9c <_sbrk_r>:
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	b570      	push	{r4, r5, r6, lr}
 8004fa0:	4d06      	ldr	r5, [pc, #24]	; (8004fbc <_sbrk_r+0x20>)
 8004fa2:	0004      	movs	r4, r0
 8004fa4:	0008      	movs	r0, r1
 8004fa6:	602b      	str	r3, [r5, #0]
 8004fa8:	f7fc ffe6 	bl	8001f78 <_sbrk>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d103      	bne.n	8004fb8 <_sbrk_r+0x1c>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d000      	beq.n	8004fb8 <_sbrk_r+0x1c>
 8004fb6:	6023      	str	r3, [r4, #0]
 8004fb8:	bd70      	pop	{r4, r5, r6, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	200004b0 	.word	0x200004b0

08004fc0 <__malloc_lock>:
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	4802      	ldr	r0, [pc, #8]	; (8004fcc <__malloc_lock+0xc>)
 8004fc4:	f000 f814 	bl	8004ff0 <__retarget_lock_acquire_recursive>
 8004fc8:	bd10      	pop	{r4, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	200004b8 	.word	0x200004b8

08004fd0 <__malloc_unlock>:
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	4802      	ldr	r0, [pc, #8]	; (8004fdc <__malloc_unlock+0xc>)
 8004fd4:	f000 f80d 	bl	8004ff2 <__retarget_lock_release_recursive>
 8004fd8:	bd10      	pop	{r4, pc}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	200004b8 	.word	0x200004b8

08004fe0 <_malloc_usable_size_r>:
 8004fe0:	1f0b      	subs	r3, r1, #4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	1f18      	subs	r0, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	da01      	bge.n	8004fee <_malloc_usable_size_r+0xe>
 8004fea:	580b      	ldr	r3, [r1, r0]
 8004fec:	18c0      	adds	r0, r0, r3
 8004fee:	4770      	bx	lr

08004ff0 <__retarget_lock_acquire_recursive>:
 8004ff0:	4770      	bx	lr

08004ff2 <__retarget_lock_release_recursive>:
 8004ff2:	4770      	bx	lr

08004ff4 <_init>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr

08005000 <_fini>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr
