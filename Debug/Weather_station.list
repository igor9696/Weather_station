
Weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006730  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080067f0  080067f0  000167f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b0  080069b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080069b0  080069b0  000169b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069b8  080069b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b8  080069b8  000169b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069bc  080069bc  000169bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080069c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000070  08006a30  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08006a30  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018402  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f1  00000000  00000000  0003849a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0003bd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  0003ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141c2  00000000  00000000  0003ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b0b  00000000  00000000  00051fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007008b  00000000  00000000  00069ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9b50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f00  00000000  00000000  000d9ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080067d8 	.word	0x080067d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080067d8 	.word	0x080067d8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f82e 	bl	80004a8 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	0415      	lsls	r5, r2, #16
 800045c:	0c2d      	lsrs	r5, r5, #16
 800045e:	000f      	movs	r7, r1
 8000460:	0001      	movs	r1, r0
 8000462:	002e      	movs	r6, r5
 8000464:	46c6      	mov	lr, r8
 8000466:	4684      	mov	ip, r0
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	0c14      	lsrs	r4, r2, #16
 800046c:	0c00      	lsrs	r0, r0, #16
 800046e:	0c09      	lsrs	r1, r1, #16
 8000470:	4346      	muls	r6, r0
 8000472:	434d      	muls	r5, r1
 8000474:	4360      	muls	r0, r4
 8000476:	4361      	muls	r1, r4
 8000478:	1940      	adds	r0, r0, r5
 800047a:	0c34      	lsrs	r4, r6, #16
 800047c:	1824      	adds	r4, r4, r0
 800047e:	b500      	push	{lr}
 8000480:	42a5      	cmp	r5, r4
 8000482:	d903      	bls.n	800048c <__aeabi_lmul+0x34>
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	0240      	lsls	r0, r0, #9
 8000488:	4680      	mov	r8, r0
 800048a:	4441      	add	r1, r8
 800048c:	0c25      	lsrs	r5, r4, #16
 800048e:	186d      	adds	r5, r5, r1
 8000490:	4661      	mov	r1, ip
 8000492:	4359      	muls	r1, r3
 8000494:	437a      	muls	r2, r7
 8000496:	0430      	lsls	r0, r6, #16
 8000498:	1949      	adds	r1, r1, r5
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c00      	lsrs	r0, r0, #16
 800049e:	1820      	adds	r0, r4, r0
 80004a0:	1889      	adds	r1, r1, r2
 80004a2:	bc80      	pop	{r7}
 80004a4:	46b8      	mov	r8, r7
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000d      	movs	r5, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b083      	sub	sp, #12
 80004be:	428b      	cmp	r3, r1
 80004c0:	d830      	bhi.n	8000524 <__udivmoddi4+0x7c>
 80004c2:	d02d      	beq.n	8000520 <__udivmoddi4+0x78>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f000 f8d8 	bl	800067c <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f000 f8d3 	bl	800067c <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	469b      	mov	fp, r3
 80004de:	d433      	bmi.n	8000548 <__udivmoddi4+0xa0>
 80004e0:	465a      	mov	r2, fp
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d83a      	bhi.n	800056a <__udivmoddi4+0xc2>
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d100      	bne.n	80004fa <__udivmoddi4+0x52>
 80004f8:	e078      	b.n	80005ec <__udivmoddi4+0x144>
 80004fa:	465b      	mov	r3, fp
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	41bd      	sbcs	r5, r7
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <__udivmoddi4+0x5e>
 8000504:	e075      	b.n	80005f2 <__udivmoddi4+0x14a>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	465a      	mov	r2, fp
 8000512:	4093      	lsls	r3, r2
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4642      	mov	r2, r8
 800051a:	4093      	lsls	r3, r2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	e028      	b.n	8000572 <__udivmoddi4+0xca>
 8000520:	4282      	cmp	r2, r0
 8000522:	d9cf      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <__udivmoddi4+0x8e>
 8000532:	601c      	str	r4, [r3, #0]
 8000534:	605d      	str	r5, [r3, #4]
 8000536:	9800      	ldr	r0, [sp, #0]
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bcf0      	pop	{r4, r5, r6, r7}
 800053e:	46bb      	mov	fp, r7
 8000540:	46b2      	mov	sl, r6
 8000542:	46a9      	mov	r9, r5
 8000544:	46a0      	mov	r8, r4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4642      	mov	r2, r8
 800054a:	2320      	movs	r3, #32
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	4652      	mov	r2, sl
 8000550:	40da      	lsrs	r2, r3
 8000552:	4641      	mov	r1, r8
 8000554:	0013      	movs	r3, r2
 8000556:	464a      	mov	r2, r9
 8000558:	408a      	lsls	r2, r1
 800055a:	0017      	movs	r7, r2
 800055c:	4642      	mov	r2, r8
 800055e:	431f      	orrs	r7, r3
 8000560:	4653      	mov	r3, sl
 8000562:	4093      	lsls	r3, r2
 8000564:	001e      	movs	r6, r3
 8000566:	42af      	cmp	r7, r5
 8000568:	d9c4      	bls.n	80004f4 <__udivmoddi4+0x4c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	4643      	mov	r3, r8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0d9      	beq.n	800052c <__udivmoddi4+0x84>
 8000578:	07fb      	lsls	r3, r7, #31
 800057a:	0872      	lsrs	r2, r6, #1
 800057c:	431a      	orrs	r2, r3
 800057e:	4646      	mov	r6, r8
 8000580:	087b      	lsrs	r3, r7, #1
 8000582:	e00e      	b.n	80005a2 <__udivmoddi4+0xfa>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d101      	bne.n	800058c <__udivmoddi4+0xe4>
 8000588:	42a2      	cmp	r2, r4
 800058a:	d80c      	bhi.n	80005a6 <__udivmoddi4+0xfe>
 800058c:	1aa4      	subs	r4, r4, r2
 800058e:	419d      	sbcs	r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2100      	movs	r1, #0
 8000598:	3e01      	subs	r6, #1
 800059a:	1824      	adds	r4, r4, r0
 800059c:	414d      	adcs	r5, r1
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d006      	beq.n	80005b0 <__udivmoddi4+0x108>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d9ee      	bls.n	8000584 <__udivmoddi4+0xdc>
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f8      	bne.n	80005a2 <__udivmoddi4+0xfa>
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	465b      	mov	r3, fp
 80005b6:	1900      	adds	r0, r0, r4
 80005b8:	4169      	adcs	r1, r5
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db24      	blt.n	8000608 <__udivmoddi4+0x160>
 80005be:	002b      	movs	r3, r5
 80005c0:	465a      	mov	r2, fp
 80005c2:	4644      	mov	r4, r8
 80005c4:	40d3      	lsrs	r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	40e2      	lsrs	r2, r4
 80005ca:	001c      	movs	r4, r3
 80005cc:	465b      	mov	r3, fp
 80005ce:	0015      	movs	r5, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db2a      	blt.n	800062a <__udivmoddi4+0x182>
 80005d4:	0026      	movs	r6, r4
 80005d6:	409e      	lsls	r6, r3
 80005d8:	0033      	movs	r3, r6
 80005da:	0026      	movs	r6, r4
 80005dc:	4647      	mov	r7, r8
 80005de:	40be      	lsls	r6, r7
 80005e0:	0032      	movs	r2, r6
 80005e2:	1a80      	subs	r0, r0, r2
 80005e4:	4199      	sbcs	r1, r3
 80005e6:	9000      	str	r0, [sp, #0]
 80005e8:	9101      	str	r1, [sp, #4]
 80005ea:	e79f      	b.n	800052c <__udivmoddi4+0x84>
 80005ec:	42a3      	cmp	r3, r4
 80005ee:	d8bc      	bhi.n	800056a <__udivmoddi4+0xc2>
 80005f0:	e783      	b.n	80004fa <__udivmoddi4+0x52>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	40da      	lsrs	r2, r3
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	e786      	b.n	8000516 <__udivmoddi4+0x6e>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	4646      	mov	r6, r8
 8000612:	409a      	lsls	r2, r3
 8000614:	0023      	movs	r3, r4
 8000616:	40f3      	lsrs	r3, r6
 8000618:	4644      	mov	r4, r8
 800061a:	4313      	orrs	r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	40e2      	lsrs	r2, r4
 8000620:	001c      	movs	r4, r3
 8000622:	465b      	mov	r3, fp
 8000624:	0015      	movs	r5, r2
 8000626:	2b00      	cmp	r3, #0
 8000628:	dad4      	bge.n	80005d4 <__udivmoddi4+0x12c>
 800062a:	4642      	mov	r2, r8
 800062c:	002f      	movs	r7, r5
 800062e:	2320      	movs	r3, #32
 8000630:	0026      	movs	r6, r4
 8000632:	4097      	lsls	r7, r2
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	40de      	lsrs	r6, r3
 8000638:	003b      	movs	r3, r7
 800063a:	4333      	orrs	r3, r6
 800063c:	e7cd      	b.n	80005da <__udivmoddi4+0x132>
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	; (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <__clzdi2>:
 800067c:	b510      	push	{r4, lr}
 800067e:	2900      	cmp	r1, #0
 8000680:	d103      	bne.n	800068a <__clzdi2+0xe>
 8000682:	f7ff ffdd 	bl	8000640 <__clzsi2>
 8000686:	3020      	adds	r0, #32
 8000688:	e002      	b.n	8000690 <__clzdi2+0x14>
 800068a:	1c08      	adds	r0, r1, #0
 800068c:	f7ff ffd8 	bl	8000640 <__clzsi2>
 8000690:	bd10      	pop	{r4, pc}
 8000692:	46c0      	nop			; (mov r8, r8)

08000694 <read8>:

BMP280_t sensor;

// Read / Write functions
static uint8_t read8(uint8_t memory_address)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af04      	add	r7, sp, #16
 800069a:	0002      	movs	r2, r0
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, &tmp, 1, I2C_Timeout);
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <read8+0x3c>)
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <read8+0x3c>)
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	b299      	uxth	r1, r3
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	9302      	str	r3, [sp, #8]
 80006b4:	2301      	movs	r3, #1
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	240f      	movs	r4, #15
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2301      	movs	r3, #1
 80006c0:	f002 fba0 	bl	8002e04 <HAL_I2C_Mem_Read>
	return tmp;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	781b      	ldrb	r3, [r3, #0]
}
 80006c8:	0018      	movs	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b005      	add	sp, #20
 80006ce:	bd90      	pop	{r4, r7, pc}
 80006d0:	20000098 	.word	0x20000098

080006d4 <read16>:

static uint16_t read16(uint8_t memory_address)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af04      	add	r7, sp, #16
 80006da:	0002      	movs	r2, r0
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	701a      	strb	r2, [r3, #0]
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, tmp, 2, I2C_Timeout);
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <read16+0x50>)
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <read16+0x50>)
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	b299      	uxth	r1, r3
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	2364      	movs	r3, #100	; 0x64
 80006f2:	9302      	str	r3, [sp, #8]
 80006f4:	2302      	movs	r3, #2
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	240c      	movs	r4, #12
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2301      	movs	r3, #1
 8000700:	f002 fb80 	bl	8002e04 <HAL_I2C_Mem_Read>
	return (tmp[1] << 8) | (tmp[0]);
 8000704:	0021      	movs	r1, r4
 8000706:	187b      	adds	r3, r7, r1
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	b21a      	sxth	r2, r3
 800070e:	187b      	adds	r3, r7, r1
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b21b      	sxth	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	b21b      	sxth	r3, r3
 8000718:	b29b      	uxth	r3, r3
}
 800071a:	0018      	movs	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	b005      	add	sp, #20
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	20000098 	.word	0x20000098

08000728 <temp_press_burst_read>:

static void temp_press_burst_read(uint8_t* buff)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af04      	add	r7, sp, #16
 800072e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, press_msb, 1, buff, 6, I2C_Timeout);
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <temp_press_burst_read+0x30>)
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <temp_press_burst_read+0x30>)
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	b299      	uxth	r1, r3
 800073a:	2364      	movs	r3, #100	; 0x64
 800073c:	9302      	str	r3, [sp, #8]
 800073e:	2306      	movs	r3, #6
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2301      	movs	r3, #1
 8000748:	22f7      	movs	r2, #247	; 0xf7
 800074a:	f002 fb5b 	bl	8002e04 <HAL_I2C_Mem_Read>
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b002      	add	sp, #8
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	20000098 	.word	0x20000098

0800075c <write8>:

static void write8(uint8_t memory_address, uint8_t* data)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af04      	add	r7, sp, #16
 8000762:	0002      	movs	r2, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, data, 1, I2C_Timeout);
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <write8+0x38>)
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <write8+0x38>)
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	b299      	uxth	r1, r3
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b29a      	uxth	r2, r3
 800077a:	2364      	movs	r3, #100	; 0x64
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2301      	movs	r3, #1
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	f002 fa0e 	bl	8002ba8 <HAL_I2C_Mem_Write>
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b002      	add	sp, #8
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000098 	.word	0x20000098

08000798 <BMP280_set_mode>:

// User functions
void BMP280_set_mode(BMP_Mode mode)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = read8(ctrl_meas);
 80007a4:	20f4      	movs	r0, #244	; 0xf4
 80007a6:	f7ff ff75 	bl	8000694 <read8>
 80007aa:	0003      	movs	r3, r0
 80007ac:	001a      	movs	r2, r3
 80007ae:	230f      	movs	r3, #15
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	701a      	strb	r2, [r3, #0]

	switch(mode)
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d028      	beq.n	800080e <BMP280_set_mode+0x76>
 80007bc:	dc3c      	bgt.n	8000838 <BMP280_set_mode+0xa0>
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <BMP280_set_mode+0x30>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d00e      	beq.n	80007e4 <BMP280_set_mode+0x4c>
		tmp &= 0xFC;
		tmp |= 0x03;
		write8(ctrl_meas, &tmp);
		break;
	}
}
 80007c6:	e037      	b.n	8000838 <BMP280_set_mode+0xa0>
		tmp &= 0xFC;
 80007c8:	210f      	movs	r1, #15
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2203      	movs	r2, #3
 80007d0:	4393      	bics	r3, r2
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	701a      	strb	r2, [r3, #0]
		write8(ctrl_meas, &tmp);
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	0019      	movs	r1, r3
 80007dc:	20f4      	movs	r0, #244	; 0xf4
 80007de:	f7ff ffbd 	bl	800075c <write8>
		break;
 80007e2:	e029      	b.n	8000838 <BMP280_set_mode+0xa0>
		tmp &= 0xFC;
 80007e4:	210f      	movs	r1, #15
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2203      	movs	r2, #3
 80007ec:	4393      	bics	r3, r2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	701a      	strb	r2, [r3, #0]
		tmp |= 0x01;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	701a      	strb	r2, [r3, #0]
		write8(ctrl_meas, &tmp);
 8000802:	187b      	adds	r3, r7, r1
 8000804:	0019      	movs	r1, r3
 8000806:	20f4      	movs	r0, #244	; 0xf4
 8000808:	f7ff ffa8 	bl	800075c <write8>
		break;
 800080c:	e014      	b.n	8000838 <BMP280_set_mode+0xa0>
		tmp &= 0xFC;
 800080e:	210f      	movs	r1, #15
 8000810:	187b      	adds	r3, r7, r1
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2203      	movs	r2, #3
 8000816:	4393      	bics	r3, r2
 8000818:	b2da      	uxtb	r2, r3
 800081a:	187b      	adds	r3, r7, r1
 800081c:	701a      	strb	r2, [r3, #0]
		tmp |= 0x03;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2203      	movs	r2, #3
 8000824:	4313      	orrs	r3, r2
 8000826:	b2da      	uxtb	r2, r3
 8000828:	187b      	adds	r3, r7, r1
 800082a:	701a      	strb	r2, [r3, #0]
		write8(ctrl_meas, &tmp);
 800082c:	187b      	adds	r3, r7, r1
 800082e:	0019      	movs	r1, r3
 8000830:	20f4      	movs	r0, #244	; 0xf4
 8000832:	f7ff ff93 	bl	800075c <write8>
		break;
 8000836:	46c0      	nop			; (mov r8, r8)
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b004      	add	sp, #16
 800083e:	bd80      	pop	{r7, pc}

08000840 <BMP280_set_temp_OVS>:

void BMP280_set_temp_OVS(BMP_OVS_rate Rate)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	0002      	movs	r2, r0
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = read8(ctrl_meas);
 800084c:	20f4      	movs	r0, #244	; 0xf4
 800084e:	f7ff ff21 	bl	8000694 <read8>
 8000852:	0003      	movs	r3, r0
 8000854:	001a      	movs	r2, r3
 8000856:	210f      	movs	r1, #15
 8000858:	187b      	adds	r3, r7, r1
 800085a:	701a      	strb	r2, [r3, #0]

	tmp &= 0x1F; // CLEAR bits
 800085c:	187b      	adds	r3, r7, r1
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	221f      	movs	r2, #31
 8000862:	4013      	ands	r3, r2
 8000864:	b2da      	uxtb	r2, r3
 8000866:	187b      	adds	r3, r7, r1
 8000868:	701a      	strb	r2, [r3, #0]
	tmp |= (Rate << 5);
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	015b      	lsls	r3, r3, #5
 8000870:	b25a      	sxtb	r2, r3
 8000872:	187b      	adds	r3, r7, r1
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b25b      	sxtb	r3, r3
 8000878:	4313      	orrs	r3, r2
 800087a:	b25b      	sxtb	r3, r3
 800087c:	b2da      	uxtb	r2, r3
 800087e:	187b      	adds	r3, r7, r1
 8000880:	701a      	strb	r2, [r3, #0]
	write8(ctrl_meas, &tmp);
 8000882:	187b      	adds	r3, r7, r1
 8000884:	0019      	movs	r1, r3
 8000886:	20f4      	movs	r0, #244	; 0xf4
 8000888:	f7ff ff68 	bl	800075c <write8>
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b004      	add	sp, #16
 8000892:	bd80      	pop	{r7, pc}

08000894 <BMP280_set_press_OVS>:


void BMP280_set_press_OVS(BMP_OVS_rate Rate)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	0002      	movs	r2, r0
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = read8(ctrl_meas);
 80008a0:	20f4      	movs	r0, #244	; 0xf4
 80008a2:	f7ff fef7 	bl	8000694 <read8>
 80008a6:	0003      	movs	r3, r0
 80008a8:	001a      	movs	r2, r3
 80008aa:	210f      	movs	r1, #15
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	701a      	strb	r2, [r3, #0]

	tmp &= 0xE3; // CLEAR bits
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	221c      	movs	r2, #28
 80008b6:	4393      	bics	r3, r2
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	701a      	strb	r2, [r3, #0]
	tmp |= (Rate << 2);
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	b25a      	sxtb	r2, r3
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b25b      	sxtb	r3, r3
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	701a      	strb	r2, [r3, #0]

	write8(ctrl_meas, &tmp);
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	0019      	movs	r1, r3
 80008da:	20f4      	movs	r0, #244	; 0xf4
 80008dc:	f7ff ff3e 	bl	800075c <write8>
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b004      	add	sp, #16
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <BMP280_set_filter>:

void BMP280_set_filter(BMP_filter_rate Rate)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	0002      	movs	r2, r0
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = read8(config);
 80008f4:	20f5      	movs	r0, #245	; 0xf5
 80008f6:	f7ff fecd 	bl	8000694 <read8>
 80008fa:	0003      	movs	r3, r0
 80008fc:	001a      	movs	r2, r3
 80008fe:	210f      	movs	r1, #15
 8000900:	187b      	adds	r3, r7, r1
 8000902:	701a      	strb	r2, [r3, #0]
	tmp &= 0xE3; // CLEAR bits
 8000904:	187b      	adds	r3, r7, r1
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	221c      	movs	r2, #28
 800090a:	4393      	bics	r3, r2
 800090c:	b2da      	uxtb	r2, r3
 800090e:	187b      	adds	r3, r7, r1
 8000910:	701a      	strb	r2, [r3, #0]
	tmp |= (Rate << 2);
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	b25a      	sxtb	r2, r3
 800091a:	187b      	adds	r3, r7, r1
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b25b      	sxtb	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b25b      	sxtb	r3, r3
 8000924:	b2da      	uxtb	r2, r3
 8000926:	187b      	adds	r3, r7, r1
 8000928:	701a      	strb	r2, [r3, #0]

	write8(ctrl_meas, &tmp);
 800092a:	187b      	adds	r3, r7, r1
 800092c:	0019      	movs	r1, r3
 800092e:	20f4      	movs	r0, #244	; 0xf4
 8000930:	f7ff ff14 	bl	800075c <write8>
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b004      	add	sp, #16
 800093a:	bd80      	pop	{r7, pc}

0800093c <BMP280_temp_compensate>:


static int32_t BMP280_temp_compensate(int32_t temp_raw)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, t_fine;

	var1 = ((((temp_raw>>3)-((int32_t)sensor.dig_t1<<1))) * ((int32_t)sensor.dig_t2)) >> 11;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	10da      	asrs	r2, r3, #3
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <BMP280_temp_compensate+0x58>)
 800094a:	88db      	ldrh	r3, [r3, #6]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	4a10      	ldr	r2, [pc, #64]	; (8000994 <BMP280_temp_compensate+0x58>)
 8000952:	2108      	movs	r1, #8
 8000954:	5e52      	ldrsh	r2, [r2, r1]
 8000956:	4353      	muls	r3, r2
 8000958:	12db      	asrs	r3, r3, #11
 800095a:	617b      	str	r3, [r7, #20]
	var2 = (((((temp_raw>>4)-((int32_t)sensor.dig_t1)) * ((temp_raw>>4)-((int32_t)sensor.dig_t1))) >> 12) *  ((int32_t)sensor.dig_t3)) >> 14;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	111b      	asrs	r3, r3, #4
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <BMP280_temp_compensate+0x58>)
 8000962:	88d2      	ldrh	r2, [r2, #6]
 8000964:	1a9b      	subs	r3, r3, r2
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	1112      	asrs	r2, r2, #4
 800096a:	490a      	ldr	r1, [pc, #40]	; (8000994 <BMP280_temp_compensate+0x58>)
 800096c:	88c9      	ldrh	r1, [r1, #6]
 800096e:	1a52      	subs	r2, r2, r1
 8000970:	4353      	muls	r3, r2
 8000972:	131b      	asrs	r3, r3, #12
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <BMP280_temp_compensate+0x58>)
 8000976:	210a      	movs	r1, #10
 8000978:	5e52      	ldrsh	r2, [r2, r1]
 800097a:	4353      	muls	r3, r2
 800097c:	139b      	asrs	r3, r3, #14
 800097e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	18d3      	adds	r3, r2, r3
 8000986:	60fb      	str	r3, [r7, #12]

	return t_fine;
 8000988:	68fb      	ldr	r3, [r7, #12]
}
 800098a:	0018      	movs	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	b006      	add	sp, #24
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	20000098 	.word	0x20000098

08000998 <BMP280_press_compensate>:

static uint32_t BMP280_press_compensate(int32_t press_raw, int32_t t_fine)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
	int32_t var1, var2;
	uint32_t p;
	var1 = (((int32_t)t_fine)>>1)-(int32_t)64000;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	105b      	asrs	r3, r3, #1
 80009a6:	4a4a      	ldr	r2, [pc, #296]	; (8000ad0 <BMP280_press_compensate+0x138>)
 80009a8:	4694      	mov	ip, r2
 80009aa:	4463      	add	r3, ip
 80009ac:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)sensor.dig_p6);
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	109b      	asrs	r3, r3, #2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	1092      	asrs	r2, r2, #2
 80009b6:	4353      	muls	r3, r2
 80009b8:	12db      	asrs	r3, r3, #11
 80009ba:	4a46      	ldr	r2, [pc, #280]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 80009bc:	2116      	movs	r1, #22
 80009be:	5e52      	ldrsh	r2, [r2, r1]
 80009c0:	4353      	muls	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((int32_t)sensor.dig_p5))<<1);
 80009c4:	4b43      	ldr	r3, [pc, #268]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 80009c6:	2214      	movs	r2, #20
 80009c8:	5e9b      	ldrsh	r3, [r3, r2]
 80009ca:	001a      	movs	r2, r3
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	4353      	muls	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	18d3      	adds	r3, r2, r3
 80009d6:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((int32_t)sensor.dig_p4)<<16);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	109a      	asrs	r2, r3, #2
 80009dc:	4b3d      	ldr	r3, [pc, #244]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 80009de:	2112      	movs	r1, #18
 80009e0:	5e5b      	ldrsh	r3, [r3, r1]
 80009e2:	041b      	lsls	r3, r3, #16
 80009e4:	18d3      	adds	r3, r2, r3
 80009e6:	60fb      	str	r3, [r7, #12]
	var1 = (((sensor.dig_p3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)sensor.dig_p2) * var1)>>1))>>18;
 80009e8:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 80009ea:	2210      	movs	r2, #16
 80009ec:	5e9b      	ldrsh	r3, [r3, r2]
 80009ee:	0019      	movs	r1, r3
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	109b      	asrs	r3, r3, #2
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	1092      	asrs	r2, r2, #2
 80009f8:	4353      	muls	r3, r2
 80009fa:	135b      	asrs	r3, r3, #13
 80009fc:	434b      	muls	r3, r1
 80009fe:	10da      	asrs	r2, r3, #3
 8000a00:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 8000a02:	210e      	movs	r1, #14
 8000a04:	5e5b      	ldrsh	r3, [r3, r1]
 8000a06:	0019      	movs	r1, r3
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	434b      	muls	r3, r1
 8000a0c:	105b      	asrs	r3, r3, #1
 8000a0e:	18d3      	adds	r3, r2, r3
 8000a10:	149b      	asrs	r3, r3, #18
 8000a12:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((int32_t)sensor.dig_p1))>>15);
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	0212      	lsls	r2, r2, #8
 8000a1a:	4694      	mov	ip, r2
 8000a1c:	4463      	add	r3, ip
 8000a1e:	4a2d      	ldr	r2, [pc, #180]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 8000a20:	8992      	ldrh	r2, [r2, #12]
 8000a22:	4353      	muls	r3, r2
 8000a24:	13db      	asrs	r3, r3, #15
 8000a26:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d101      	bne.n	8000a32 <BMP280_press_compensate+0x9a>
	{
	return 0; // avoid exception caused by division by zero
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e049      	b.n	8000ac6 <BMP280_press_compensate+0x12e>
	}
	p = (((uint32_t)(((int32_t)1048576)-press_raw)-(var2>>12)))*3125;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	131b      	asrs	r3, r3, #12
 8000a36:	001a      	movs	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	18d2      	adds	r2, r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	015b      	lsls	r3, r3, #5
 8000a40:	1a9b      	subs	r3, r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	189b      	adds	r3, r3, r2
 8000a46:	009a      	lsls	r2, r3, #2
 8000a48:	189b      	adds	r3, r3, r2
 8000a4a:	009a      	lsls	r2, r3, #2
 8000a4c:	189b      	adds	r3, r3, r2
 8000a4e:	425b      	negs	r3, r3
 8000a50:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <BMP280_press_compensate+0x140>)
 8000a52:	4694      	mov	ip, r2
 8000a54:	4463      	add	r3, ip
 8000a56:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db09      	blt.n	8000a72 <BMP280_press_compensate+0xda>
	{
	p = (p << 1) / ((uint32_t)var1);
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f7ff fb60 	bl	800012c <__udivsi3>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e007      	b.n	8000a82 <BMP280_press_compensate+0xea>
	}
	else
	{
	p = (p / (uint32_t)var1) * 2;
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	0019      	movs	r1, r3
 8000a76:	6978      	ldr	r0, [r7, #20]
 8000a78:	f7ff fb58 	bl	800012c <__udivsi3>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t)sensor.dig_p9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 8000a84:	221c      	movs	r2, #28
 8000a86:	5e9b      	ldrsh	r3, [r3, r2]
 8000a88:	0019      	movs	r1, r3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	08d2      	lsrs	r2, r2, #3
 8000a92:	4353      	muls	r3, r2
 8000a94:	0b5b      	lsrs	r3, r3, #13
 8000a96:	434b      	muls	r3, r1
 8000a98:	131b      	asrs	r3, r3, #12
 8000a9a:	613b      	str	r3, [r7, #16]
	var2 = (((int32_t)(p>>2)) * ((int32_t)sensor.dig_p8))>>13;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 8000aa4:	211a      	movs	r1, #26
 8000aa6:	5e5b      	ldrsh	r3, [r3, r1]
 8000aa8:	4353      	muls	r3, r2
 8000aaa:	135b      	asrs	r3, r3, #13
 8000aac:	60fb      	str	r3, [r7, #12]
	p = (uint32_t)((int32_t)p + ((var1 + var2 + sensor.dig_p7) >> 4));
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	18d3      	adds	r3, r2, r3
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 8000ab6:	2118      	movs	r1, #24
 8000ab8:	5e52      	ldrsh	r2, [r2, r1]
 8000aba:	189b      	adds	r3, r3, r2
 8000abc:	111a      	asrs	r2, r3, #4
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	18d3      	adds	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
	return p;
 8000ac4:	697b      	ldr	r3, [r7, #20]

}
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b006      	add	sp, #24
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	ffff0600 	.word	0xffff0600
 8000ad4:	20000098 	.word	0x20000098
 8000ad8:	c3500000 	.word	0xc3500000

08000adc <BMP280_get_data_FORCED>:


void BMP280_get_data_FORCED(int32_t* temperature, uint32_t* pressure)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
	BMP280_set_mode(FORCED); // start conversion
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff fe56 	bl	8000798 <BMP280_set_mode>
	int32_t press_raw;
	uint8_t tmp_buff[6];
	int32_t t_fine;


	temp_press_burst_read(tmp_buff);
 8000aec:	240c      	movs	r4, #12
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff fe19 	bl	8000728 <temp_press_burst_read>
	press_raw = tmp_buff[0] << 12 | (tmp_buff[1] << 4) | (tmp_buff[2] >> 4);
 8000af6:	0021      	movs	r1, r4
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	031a      	lsls	r2, r3, #12
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	785b      	ldrb	r3, [r3, #1]
 8000b02:	011b      	lsls	r3, r3, #4
 8000b04:	4313      	orrs	r3, r2
 8000b06:	187a      	adds	r2, r7, r1
 8000b08:	7892      	ldrb	r2, [r2, #2]
 8000b0a:	0912      	lsrs	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	61fb      	str	r3, [r7, #28]
	temp_raw = tmp_buff[3] << 12 | (tmp_buff[4] << 4) | (tmp_buff[5] >> 4);
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	78db      	ldrb	r3, [r3, #3]
 8000b16:	031a      	lsls	r2, r3, #12
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	791b      	ldrb	r3, [r3, #4]
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	187a      	adds	r2, r7, r1
 8000b22:	7952      	ldrb	r2, [r2, #5]
 8000b24:	0912      	lsrs	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]

	// compensate temperature
	t_fine = BMP280_temp_compensate(temp_raw);
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff ff04 	bl	800093c <BMP280_temp_compensate>
 8000b34:	0003      	movs	r3, r0
 8000b36:	617b      	str	r3, [r7, #20]
	*temperature = ((t_fine * 5 + 128) >> 8) / 100; // return temperature in [C]
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	0013      	movs	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	189b      	adds	r3, r3, r2
 8000b40:	3380      	adds	r3, #128	; 0x80
 8000b42:	121b      	asrs	r3, r3, #8
 8000b44:	2164      	movs	r1, #100	; 0x64
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fb7a 	bl	8000240 <__divsi3>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	001a      	movs	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	601a      	str	r2, [r3, #0]

	// compensate pressure
	*pressure = (BMP280_press_compensate(press_raw, t_fine)) / 100; // return pressure in [Pa]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	0011      	movs	r1, r2
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f7ff ff1c 	bl	8000998 <BMP280_press_compensate>
 8000b60:	0003      	movs	r3, r0
 8000b62:	2164      	movs	r1, #100	; 0x64
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff fae1 	bl	800012c <__udivsi3>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	601a      	str	r2, [r3, #0]
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b009      	add	sp, #36	; 0x24
 8000b78:	bd90      	pop	{r4, r7, pc}
	...

08000b7c <BMP280_Init>:




BMP_Status BMP280_Init(I2C_HandleTypeDef* hi2c, uint8_t I2C_Address)
{
 8000b7c:	b5b0      	push	{r4, r5, r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	000a      	movs	r2, r1
 8000b86:	1cfb      	adds	r3, r7, #3
 8000b88:	701a      	strb	r2, [r3, #0]
	sensor.hi2c = hi2c;
 8000b8a:	4b3c      	ldr	r3, [pc, #240]	; (8000c7c <BMP280_Init+0x100>)
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	601a      	str	r2, [r3, #0]
	sensor.I2C_Addr = (I2C_Address << 1);
 8000b90:	1cfb      	adds	r3, r7, #3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	18db      	adds	r3, r3, r3
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b38      	ldr	r3, [pc, #224]	; (8000c7c <BMP280_Init+0x100>)
 8000b9a:	711a      	strb	r2, [r3, #4]

	// check sensor ID
	uint8_t sensor_id = read8(ID);
 8000b9c:	250f      	movs	r5, #15
 8000b9e:	197c      	adds	r4, r7, r5
 8000ba0:	20d0      	movs	r0, #208	; 0xd0
 8000ba2:	f7ff fd77 	bl	8000694 <read8>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	7023      	strb	r3, [r4, #0]
	if(sensor_id != CHIP_ID)
 8000baa:	197b      	adds	r3, r7, r5
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b58      	cmp	r3, #88	; 0x58
 8000bb0:	d001      	beq.n	8000bb6 <BMP280_Init+0x3a>
	{
		return BMP280_NOK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e05d      	b.n	8000c72 <BMP280_Init+0xf6>
	}

	// load calibration coefficients
	sensor.dig_t1 = read16(dig_T1);
 8000bb6:	2088      	movs	r0, #136	; 0x88
 8000bb8:	f7ff fd8c 	bl	80006d4 <read16>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <BMP280_Init+0x100>)
 8000bc2:	80da      	strh	r2, [r3, #6]
	sensor.dig_t2 = read16(dig_T2);
 8000bc4:	208a      	movs	r0, #138	; 0x8a
 8000bc6:	f7ff fd85 	bl	80006d4 <read16>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	b21a      	sxth	r2, r3
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <BMP280_Init+0x100>)
 8000bd0:	811a      	strh	r2, [r3, #8]
	sensor.dig_t3 = read16(dig_T3);
 8000bd2:	208c      	movs	r0, #140	; 0x8c
 8000bd4:	f7ff fd7e 	bl	80006d4 <read16>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <BMP280_Init+0x100>)
 8000bde:	815a      	strh	r2, [r3, #10]
	sensor.dig_p1 = read16(dig_P1);
 8000be0:	208e      	movs	r0, #142	; 0x8e
 8000be2:	f7ff fd77 	bl	80006d4 <read16>
 8000be6:	0003      	movs	r3, r0
 8000be8:	001a      	movs	r2, r3
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <BMP280_Init+0x100>)
 8000bec:	819a      	strh	r2, [r3, #12]
	sensor.dig_p2 = read16(dig_P2);
 8000bee:	2090      	movs	r0, #144	; 0x90
 8000bf0:	f7ff fd70 	bl	80006d4 <read16>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <BMP280_Init+0x100>)
 8000bfa:	81da      	strh	r2, [r3, #14]
	sensor.dig_p3 = read16(dig_P3);
 8000bfc:	2092      	movs	r0, #146	; 0x92
 8000bfe:	f7ff fd69 	bl	80006d4 <read16>
 8000c02:	0003      	movs	r3, r0
 8000c04:	b21a      	sxth	r2, r3
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <BMP280_Init+0x100>)
 8000c08:	821a      	strh	r2, [r3, #16]
	sensor.dig_p4 = read16(dig_P4);
 8000c0a:	2094      	movs	r0, #148	; 0x94
 8000c0c:	f7ff fd62 	bl	80006d4 <read16>
 8000c10:	0003      	movs	r3, r0
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <BMP280_Init+0x100>)
 8000c16:	825a      	strh	r2, [r3, #18]
	sensor.dig_p5 = read16(dig_P5);
 8000c18:	2096      	movs	r0, #150	; 0x96
 8000c1a:	f7ff fd5b 	bl	80006d4 <read16>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <BMP280_Init+0x100>)
 8000c24:	829a      	strh	r2, [r3, #20]
	sensor.dig_p6 = read16(dig_P6);
 8000c26:	2098      	movs	r0, #152	; 0x98
 8000c28:	f7ff fd54 	bl	80006d4 <read16>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <BMP280_Init+0x100>)
 8000c32:	82da      	strh	r2, [r3, #22]
	sensor.dig_p7 = read16(dig_P7);
 8000c34:	209a      	movs	r0, #154	; 0x9a
 8000c36:	f7ff fd4d 	bl	80006d4 <read16>
 8000c3a:	0003      	movs	r3, r0
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <BMP280_Init+0x100>)
 8000c40:	831a      	strh	r2, [r3, #24]
	sensor.dig_p8 = read16(dig_P8);
 8000c42:	209c      	movs	r0, #156	; 0x9c
 8000c44:	f7ff fd46 	bl	80006d4 <read16>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <BMP280_Init+0x100>)
 8000c4e:	835a      	strh	r2, [r3, #26]
	sensor.dig_p9 = read16(dig_P9);
 8000c50:	209e      	movs	r0, #158	; 0x9e
 8000c52:	f7ff fd3f 	bl	80006d4 <read16>
 8000c56:	0003      	movs	r3, r0
 8000c58:	b21a      	sxth	r2, r3
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <BMP280_Init+0x100>)
 8000c5c:	839a      	strh	r2, [r3, #28]

	// initial sensor setup
	// Mode - Forced, Oversampling - UltraLowPower, osrs_p - x1, osrs_t - x1, IIR - off
	// Timing - 1/min, ODR - 1/60Hz, BW - Full

	 BMP280_set_filter(OFF);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fe42 	bl	80008e8 <BMP280_set_filter>
	 BMP280_set_temp_OVS(x1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff fdeb 	bl	8000840 <BMP280_set_temp_OVS>
	 BMP280_set_press_OVS(x1);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff fe12 	bl	8000894 <BMP280_set_press_OVS>

	return BMP280_OK;
 8000c70:	2301      	movs	r3, #1
}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b004      	add	sp, #16
 8000c78:	bdb0      	pop	{r4, r5, r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	20000098 	.word	0x20000098

08000c80 <ESP8266_Check_OK_Respond>:
#include "ESP01.h"

extern const char API_Key[];

static ESP_status ESP8266_Check_OK_Respond(ESP8266_t* ESP)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	if(ESP->ESP_RX_Buff.BUFFER_EMPTY_FLAG)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	228b      	movs	r2, #139	; 0x8b
 8000c8c:	5c9b      	ldrb	r3, [r3, r2]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <ESP8266_Check_OK_Respond+0x16>
	{
		return ESP_NOK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e015      	b.n	8000cc2 <ESP8266_Check_OK_Respond+0x42>
	}

	Parser_clean_string(&ESP->ESP_RX_Buff, ESP->MessageReceive);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3308      	adds	r3, #8
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	338d      	adds	r3, #141	; 0x8d
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	f000 ff5d 	bl	8001b62 <Parser_clean_string>

	if(!(Parser_simple_parse("OK", ESP->MessageReceive)))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	338d      	adds	r3, #141	; 0x8d
 8000cac:	001a      	movs	r2, r3
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <ESP8266_Check_OK_Respond+0x4c>)
 8000cb0:	0011      	movs	r1, r2
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f000 ff9e 	bl	8001bf4 <Parser_simple_parse>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d101      	bne.n	8000cc0 <ESP8266_Check_OK_Respond+0x40>
	{
		return ESP_NOK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e000      	b.n	8000cc2 <ESP8266_Check_OK_Respond+0x42>
	}

	return ESP_OK;
 8000cc0:	2301      	movs	r3, #1
}
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	080067f0 	.word	0x080067f0

08000cd0 <ESP8266_is_TCP_disconnected>:


static ESP_status ESP8266_is_TCP_disconnected(ESP8266_t* ESP)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	if(ESP->ESP_RX_Buff.BUFFER_EMPTY_FLAG)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	228b      	movs	r2, #139	; 0x8b
 8000cdc:	5c9b      	ldrb	r3, [r3, r2]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <ESP8266_is_TCP_disconnected+0x16>
	{
		return ESP_NOK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e015      	b.n	8000d12 <ESP8266_is_TCP_disconnected+0x42>
	}

	Parser_clean_string(&ESP->ESP_RX_Buff, ESP->MessageReceive);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3308      	adds	r3, #8
 8000cea:	001a      	movs	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	338d      	adds	r3, #141	; 0x8d
 8000cf0:	0019      	movs	r1, r3
 8000cf2:	0010      	movs	r0, r2
 8000cf4:	f000 ff35 	bl	8001b62 <Parser_clean_string>

	if(!(Parser_simple_parse("CLOSED", ESP->MessageReceive)))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	338d      	adds	r3, #141	; 0x8d
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <ESP8266_is_TCP_disconnected+0x4c>)
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 ff76 	bl	8001bf4 <Parser_simple_parse>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d101      	bne.n	8000d10 <ESP8266_is_TCP_disconnected+0x40>
	{
		return ESP_NOK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e000      	b.n	8000d12 <ESP8266_is_TCP_disconnected+0x42>
	}

	return ESP_OK;
 8000d10:	2301      	movs	r3, #1

}
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	080067f4 	.word	0x080067f4

08000d20 <ESP8266_CheckAT>:



static ESP_status ESP8266_CheckAT(ESP8266_t* ESP)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	RX_RESPOND_FLAG = 1;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <ESP8266_CheckAT+0x48>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
	UART_send_string("AT\r\n");
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <ESP8266_CheckAT+0x4c>)
 8000d30:	0018      	movs	r0, r3
 8000d32:	f000 fb03 	bl	800133c <UART_send_string>
	//HAL_Delay(ESP_RESPOND_TIME);
	while(RX_RESPOND_FLAG); // wait for receiving message
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <ESP8266_CheckAT+0x48>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1fa      	bne.n	8000d38 <ESP8266_CheckAT+0x18>

	if(ESP8266_Check_OK_Respond(ESP) != ESP_OK)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff ff9b 	bl	8000c80 <ESP8266_Check_OK_Respond>
 8000d4a:	0003      	movs	r3, r0
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d001      	beq.n	8000d54 <ESP8266_CheckAT+0x34>
	{
		return ESP_NOK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	e005      	b.n	8000d60 <ESP8266_CheckAT+0x40>
	}

	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3308      	adds	r3, #8
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f000 fadc 	bl	8001316 <RB_Flush>
	return ESP_OK;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200000b8 	.word	0x200000b8
 8000d6c:	080067fc 	.word	0x080067fc

08000d70 <ESP8266_Connect_To_Router>:


static ESP_status ESP8266_Connect_To_Router(ESP8266_t* ESP)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b08d      	sub	sp, #52	; 0x34
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	RX_RESPOND_FLAG = 1;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <ESP8266_Connect_To_Router+0x74>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
	uint8_t message[36];
	uint8_t length;
	length = sprintf((char*)message, "AT+CWJAP=\"%s\",\"%s\"\r\n", ESP->SSID, ESP->PSWD);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4918      	ldr	r1, [pc, #96]	; (8000de8 <ESP8266_Connect_To_Router+0x78>)
 8000d88:	2408      	movs	r4, #8
 8000d8a:	1938      	adds	r0, r7, r4
 8000d8c:	f005 f8e4 	bl	8005f58 <siprintf>
 8000d90:	0002      	movs	r2, r0
 8000d92:	212f      	movs	r1, #47	; 0x2f
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	701a      	strb	r2, [r3, #0]
	UART_send_message((char*)message, length);
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	193b      	adds	r3, r7, r4
 8000d9e:	0011      	movs	r1, r2
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 fae9 	bl	8001378 <UART_send_message>

	while(RX_RESPOND_FLAG);
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <ESP8266_Connect_To_Router+0x74>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1fa      	bne.n	8000da8 <ESP8266_Connect_To_Router+0x38>

	HAL_Delay(5 * ESP_RESPOND_TIME);
 8000db2:	23fa      	movs	r3, #250	; 0xfa
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	0018      	movs	r0, r3
 8000db8:	f001 f958 	bl	800206c <HAL_Delay>

	if(ESP8266_Check_OK_Respond(ESP) != ESP_OK)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff ff5e 	bl	8000c80 <ESP8266_Check_OK_Respond>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d001      	beq.n	8000dce <ESP8266_Connect_To_Router+0x5e>
	{
		return ESP_NOK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e005      	b.n	8000dda <ESP8266_Connect_To_Router+0x6a>
	}

	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3308      	adds	r3, #8
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 fa9f 	bl	8001316 <RB_Flush>
	return ESP_OK;
 8000dd8:	2301      	movs	r3, #1
}
 8000dda:	0018      	movs	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b00d      	add	sp, #52	; 0x34
 8000de0:	bd90      	pop	{r4, r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	200000b8 	.word	0x200000b8
 8000de8:	08006804 	.word	0x08006804

08000dec <ESP8266_SetMode>:

ESP_status ESP8266_SetMode(ESP8266_t* ESP, ESP_mode mode)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	000a      	movs	r2, r1
 8000df6:	1cfb      	adds	r3, r7, #3
 8000df8:	701a      	strb	r2, [r3, #0]
	RX_RESPOND_FLAG = 1;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <ESP8266_SetMode+0x78>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
	switch(mode)
 8000e00:	1cfb      	adds	r3, r7, #3
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d00f      	beq.n	8000e28 <ESP8266_SetMode+0x3c>
 8000e08:	dc13      	bgt.n	8000e32 <ESP8266_SetMode+0x46>
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d002      	beq.n	8000e14 <ESP8266_SetMode+0x28>
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d005      	beq.n	8000e1e <ESP8266_SetMode+0x32>
 8000e12:	e00e      	b.n	8000e32 <ESP8266_SetMode+0x46>
	{
	case STATION:
		UART_send_string("AT+CWMODE=1\r\n"); // Set WiFi mode to station mode
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <ESP8266_SetMode+0x7c>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 fa90 	bl	800133c <UART_send_string>
		break;
 8000e1c:	e009      	b.n	8000e32 <ESP8266_SetMode+0x46>

	case ACCESS_POINT:
		UART_send_string("AT+CWMODE=2\r\n"); // Set WiFi mode to access point
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <ESP8266_SetMode+0x80>)
 8000e20:	0018      	movs	r0, r3
 8000e22:	f000 fa8b 	bl	800133c <UART_send_string>
		break;
 8000e26:	e004      	b.n	8000e32 <ESP8266_SetMode+0x46>

	case AP_STATION:
		UART_send_string("AT+CWMODE=3\r\n"); // Set WiFi mode to station mode + AP mode
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <ESP8266_SetMode+0x84>)
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 fa86 	bl	800133c <UART_send_string>
		break;
 8000e30:	46c0      	nop			; (mov r8, r8)
	}

	while(RX_RESPOND_FLAG); // wait for receiving message
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <ESP8266_SetMode+0x78>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1fa      	bne.n	8000e34 <ESP8266_SetMode+0x48>
	if(ESP8266_Check_OK_Respond(ESP) != ESP_OK)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff ff1d 	bl	8000c80 <ESP8266_Check_OK_Respond>
 8000e46:	0003      	movs	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d001      	beq.n	8000e50 <ESP8266_SetMode+0x64>
	{
		return ESP_NOK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e005      	b.n	8000e5c <ESP8266_SetMode+0x70>
	}

	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3308      	adds	r3, #8
 8000e54:	0018      	movs	r0, r3
 8000e56:	f000 fa5e 	bl	8001316 <RB_Flush>
	return ESP_OK;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200000b8 	.word	0x200000b8
 8000e68:	0800681c 	.word	0x0800681c
 8000e6c:	0800682c 	.word	0x0800682c
 8000e70:	0800683c 	.word	0x0800683c

08000e74 <ESP8266_Init>:


ESP_status ESP8266_Init(ESP8266_t* ESP, char* SSID, char* PSWD, ESP_mode Mode)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	001a      	movs	r2, r3
 8000e82:	1cfb      	adds	r3, r7, #3
 8000e84:	701a      	strb	r2, [r3, #0]
	ESP->SSID = SSID;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	68ba      	ldr	r2, [r7, #8]
 8000e8a:	601a      	str	r2, [r3, #0]
	ESP->PSWD = PSWD;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	605a      	str	r2, [r3, #4]
	RingBuffer_Init(&ESP->ESP_RX_Buff);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3308      	adds	r3, #8
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 f9aa 	bl	80011f0 <RingBuffer_Init>

	// TCP client connection config:
	// 0. Check AT
	if(ESP8266_CheckAT(ESP) != ESP_OK)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff ff3e 	bl	8000d20 <ESP8266_CheckAT>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d001      	beq.n	8000eae <ESP8266_Init+0x3a>
	{
		return ESP_NOK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e015      	b.n	8000eda <ESP8266_Init+0x66>
	}
	// 1. Set WiFi mode
	if(ESP8266_SetMode(ESP, Mode) != ESP_OK)
 8000eae:	1cfb      	adds	r3, r7, #3
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff ff98 	bl	8000dec <ESP8266_SetMode>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d001      	beq.n	8000ec6 <ESP8266_Init+0x52>
	{
		return ESP_NOK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e009      	b.n	8000eda <ESP8266_Init+0x66>
	}
	// 2. Connect to a router
	if(ESP8266_Connect_To_Router(ESP) != ESP_OK)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff ff51 	bl	8000d70 <ESP8266_Connect_To_Router>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d001      	beq.n	8000ed8 <ESP8266_Init+0x64>
	{
		return ESP_NOK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e000      	b.n	8000eda <ESP8266_Init+0x66>
	}

	return ESP_OK;
 8000ed8:	2301      	movs	r3, #1
}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b004      	add	sp, #16
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <ESP8266_SetConnectionMode>:

ESP_status ESP8266_SetConnectionMode(ESP8266_t* ESP, ESP_ConnectionMode mode)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	000a      	movs	r2, r1
 8000eee:	1cfb      	adds	r3, r7, #3
 8000ef0:	701a      	strb	r2, [r3, #0]
	RX_RESPOND_FLAG = 1;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <ESP8266_SetConnectionMode+0x68>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]

	switch(mode)
 8000ef8:	1cfb      	adds	r3, r7, #3
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <ESP8266_SetConnectionMode+0x22>
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d005      	beq.n	8000f10 <ESP8266_SetConnectionMode+0x2c>
 8000f04:	e009      	b.n	8000f1a <ESP8266_SetConnectionMode+0x36>
	{
	case SINGLE_CONNECTION:
		UART_send_string("AT+CIPMUX=0\r\n");
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <ESP8266_SetConnectionMode+0x6c>)
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f000 fa17 	bl	800133c <UART_send_string>
		break;
 8000f0e:	e004      	b.n	8000f1a <ESP8266_SetConnectionMode+0x36>
	case MULTIPLE_CONNECTION:
		UART_send_string("AT+CIPMUX=1\r\n");
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <ESP8266_SetConnectionMode+0x70>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 fa12 	bl	800133c <UART_send_string>
		break;
 8000f18:	46c0      	nop			; (mov r8, r8)
	}

	while(RX_RESPOND_FLAG);
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <ESP8266_SetConnectionMode+0x68>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1fa      	bne.n	8000f1c <ESP8266_SetConnectionMode+0x38>
	if(ESP8266_Check_OK_Respond(ESP) != ESP_OK)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff fea9 	bl	8000c80 <ESP8266_Check_OK_Respond>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d001      	beq.n	8000f38 <ESP8266_SetConnectionMode+0x54>
	{
		return ESP_NOK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	e005      	b.n	8000f44 <ESP8266_SetConnectionMode+0x60>
	}

	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3308      	adds	r3, #8
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f000 f9ea 	bl	8001316 <RB_Flush>
	return ESP_OK;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b002      	add	sp, #8
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200000b8 	.word	0x200000b8
 8000f50:	0800684c 	.word	0x0800684c
 8000f54:	0800685c 	.word	0x0800685c

08000f58 <ESP8266_Connect_TCP>:


ESP_status ESP8266_Connect_TCP(ESP8266_t* ESP, char* Target_IP, char* PORT, ESP_ConnectionMode mode)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b0a7      	sub	sp, #156	; 0x9c
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	001a      	movs	r2, r3
 8000f66:	1cfb      	adds	r3, r7, #3
 8000f68:	701a      	strb	r2, [r3, #0]
	RX_RESPOND_FLAG = 1;
 8000f6a:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <ESP8266_Connect_TCP+0x9c>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
	if(ESP8266_SetConnectionMode(ESP, mode) != ESP_OK)
 8000f70:	1cfb      	adds	r3, r7, #3
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	0011      	movs	r1, r2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff ffb3 	bl	8000ee4 <ESP8266_SetConnectionMode>
 8000f7e:	0003      	movs	r3, r0
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d004      	beq.n	8000f8e <ESP8266_Connect_TCP+0x36>
	{
		ESP->ESP8266_status = ESP_NOK;
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	230e      	movs	r3, #14
 8000f88:	33ff      	adds	r3, #255	; 0xff
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	54d1      	strb	r1, [r2, r3]
	}

	uint8_t message[128];
	uint8_t length;
	length = sprintf((char*)message, "AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", Target_IP, PORT);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	4919      	ldr	r1, [pc, #100]	; (8000ff8 <ESP8266_Connect_TCP+0xa0>)
 8000f94:	2414      	movs	r4, #20
 8000f96:	1938      	adds	r0, r7, r4
 8000f98:	f004 ffde 	bl	8005f58 <siprintf>
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	2197      	movs	r1, #151	; 0x97
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	701a      	strb	r2, [r3, #0]
	UART_send_message((char*)message, length);
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	0011      	movs	r1, r2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f000 f9e3 	bl	8001378 <UART_send_message>

	while(RX_RESPOND_FLAG);
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <ESP8266_Connect_TCP+0x9c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1fa      	bne.n	8000fb4 <ESP8266_Connect_TCP+0x5c>
	if(ESP8266_Check_OK_Respond(ESP) != ESP_OK)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff fe5d 	bl	8000c80 <ESP8266_Check_OK_Respond>
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d004      	beq.n	8000fd6 <ESP8266_Connect_TCP+0x7e>
	{
		ESP->ESP8266_status = ESP_NOK;
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	230e      	movs	r3, #14
 8000fd0:	33ff      	adds	r3, #255	; 0xff
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	54d1      	strb	r1, [r2, r3]
	}


	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3308      	adds	r3, #8
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f000 f99b 	bl	8001316 <RB_Flush>
	ESP->ESP8266_status = ESP_OK;
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	230e      	movs	r3, #14
 8000fe4:	33ff      	adds	r3, #255	; 0xff
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	54d1      	strb	r1, [r2, r3]

	return ESP_OK;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b027      	add	sp, #156	; 0x9c
 8000ff2:	bd90      	pop	{r4, r7, pc}
 8000ff4:	200000b8 	.word	0x200000b8
 8000ff8:	0800686c 	.word	0x0800686c

08000ffc <ESP8266_Disconnect_TCP>:

ESP_status ESP8266_Disconnect_TCP(ESP8266_t* ESP)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	RX_RESPOND_FLAG = 1;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <ESP8266_Disconnect_TCP+0x48>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
	UART_send_string("AT+CIPCLOSE\r\n");
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <ESP8266_Disconnect_TCP+0x4c>)
 800100c:	0018      	movs	r0, r3
 800100e:	f000 f995 	bl	800133c <UART_send_string>

	while(RX_RESPOND_FLAG);
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <ESP8266_Disconnect_TCP+0x48>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1fa      	bne.n	8001014 <ESP8266_Disconnect_TCP+0x18>
	if(ESP8266_Check_OK_Respond(ESP) != ESP_OK)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff fe2d 	bl	8000c80 <ESP8266_Check_OK_Respond>
 8001026:	0003      	movs	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d001      	beq.n	8001030 <ESP8266_Disconnect_TCP+0x34>
	{
		return ESP_NOK;
 800102c:	2300      	movs	r3, #0
 800102e:	e005      	b.n	800103c <ESP8266_Disconnect_TCP+0x40>
	}

	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3308      	adds	r3, #8
 8001034:	0018      	movs	r0, r3
 8001036:	f000 f96e 	bl	8001316 <RB_Flush>
	return ESP_OK;
 800103a:	2301      	movs	r3, #1
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	b002      	add	sp, #8
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200000b8 	.word	0x200000b8
 8001048:	08006888 	.word	0x08006888

0800104c <ESP8266_TS_Send_Data_MultiField>:




ESP_status ESP8266_TS_Send_Data_MultiField(ESP8266_t* ESP, uint8_t number_of_fields, uint16_t data_buffer[])
{
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b0b6      	sub	sp, #216	; 0xd8
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	230b      	movs	r3, #11
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	1c0a      	adds	r2, r1, #0
 800105c:	701a      	strb	r2, [r3, #0]
	if(ESP8266_Connect_TCP(ESP, "184.106.153.149", "80", SINGLE_CONNECTION) != ESP_OK)
 800105e:	4a5c      	ldr	r2, [pc, #368]	; (80011d0 <ESP8266_TS_Send_Data_MultiField+0x184>)
 8001060:	495c      	ldr	r1, [pc, #368]	; (80011d4 <ESP8266_TS_Send_Data_MultiField+0x188>)
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	2300      	movs	r3, #0
 8001066:	f7ff ff77 	bl	8000f58 <ESP8266_Connect_TCP>
 800106a:	0003      	movs	r3, r0
 800106c:	2b01      	cmp	r3, #1
 800106e:	d004      	beq.n	800107a <ESP8266_TS_Send_Data_MultiField+0x2e>
	{
		ESP->ESP8266_status = ESP_NOK;
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	230e      	movs	r3, #14
 8001074:	33ff      	adds	r3, #255	; 0xff
 8001076:	2100      	movs	r1, #0
 8001078:	54d1      	strb	r1, [r2, r3]
	}

	char cipsend_buff[25] = {0};
 800107a:	23b8      	movs	r3, #184	; 0xb8
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	3304      	adds	r3, #4
 8001084:	2215      	movs	r2, #21
 8001086:	2100      	movs	r1, #0
 8001088:	0018      	movs	r0, r3
 800108a:	f004 ff5c 	bl	8005f46 <memset>
	char field_buff[35] = {0};
 800108e:	2394      	movs	r3, #148	; 0x94
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	3304      	adds	r3, #4
 8001098:	221f      	movs	r2, #31
 800109a:	2100      	movs	r1, #0
 800109c:	0018      	movs	r0, r3
 800109e:	f004 ff52 	bl	8005f46 <memset>
	char message[128] = {0};
 80010a2:	2414      	movs	r4, #20
 80010a4:	193b      	adds	r3, r7, r4
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	3304      	adds	r3, #4
 80010ac:	227c      	movs	r2, #124	; 0x7c
 80010ae:	2100      	movs	r1, #0
 80010b0:	0018      	movs	r0, r3
 80010b2:	f004 ff48 	bl	8005f46 <memset>

	// prepare message
	sprintf(message, "GET /update?api_key=%s", API_Key);
 80010b6:	4a48      	ldr	r2, [pc, #288]	; (80011d8 <ESP8266_TS_Send_Data_MultiField+0x18c>)
 80010b8:	4948      	ldr	r1, [pc, #288]	; (80011dc <ESP8266_TS_Send_Data_MultiField+0x190>)
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	0018      	movs	r0, r3
 80010be:	f004 ff4b 	bl	8005f58 <siprintf>
	for(int i = 1; i < number_of_fields + 1; i++)
 80010c2:	2301      	movs	r3, #1
 80010c4:	22d4      	movs	r2, #212	; 0xd4
 80010c6:	18ba      	adds	r2, r7, r2
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e01d      	b.n	8001108 <ESP8266_TS_Send_Data_MultiField+0xbc>
	{
		sprintf(field_buff, "&field%d=%u", i, data_buffer[i - 1]);
 80010cc:	21d4      	movs	r1, #212	; 0xd4
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a43      	ldr	r2, [pc, #268]	; (80011e0 <ESP8266_TS_Send_Data_MultiField+0x194>)
 80010d4:	4694      	mov	ip, r2
 80010d6:	4463      	add	r3, ip
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	18d3      	adds	r3, r2, r3
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	000c      	movs	r4, r1
 80010e2:	187a      	adds	r2, r7, r1
 80010e4:	6812      	ldr	r2, [r2, #0]
 80010e6:	493f      	ldr	r1, [pc, #252]	; (80011e4 <ESP8266_TS_Send_Data_MultiField+0x198>)
 80010e8:	2594      	movs	r5, #148	; 0x94
 80010ea:	1978      	adds	r0, r7, r5
 80010ec:	f004 ff34 	bl	8005f58 <siprintf>
		strcat(message, field_buff);
 80010f0:	197a      	adds	r2, r7, r5
 80010f2:	2314      	movs	r3, #20
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	0011      	movs	r1, r2
 80010f8:	0018      	movs	r0, r3
 80010fa:	f004 ff4d 	bl	8005f98 <strcat>
	for(int i = 1; i < number_of_fields + 1; i++)
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	193a      	adds	r2, r7, r4
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	230b      	movs	r3, #11
 800110a:	18fb      	adds	r3, r7, r3
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	22d4      	movs	r2, #212	; 0xd4
 8001110:	18ba      	adds	r2, r7, r2
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	ddd9      	ble.n	80010cc <ESP8266_TS_Send_Data_MultiField+0x80>
	}

	strcat(message, "\r\n");
 8001118:	2414      	movs	r4, #20
 800111a:	193b      	adds	r3, r7, r4
 800111c:	0018      	movs	r0, r3
 800111e:	f7fe fff3 	bl	8000108 <strlen>
 8001122:	0003      	movs	r3, r0
 8001124:	001a      	movs	r2, r3
 8001126:	193b      	adds	r3, r7, r4
 8001128:	189a      	adds	r2, r3, r2
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <ESP8266_TS_Send_Data_MultiField+0x19c>)
 800112c:	0010      	movs	r0, r2
 800112e:	0019      	movs	r1, r3
 8001130:	2303      	movs	r3, #3
 8001132:	001a      	movs	r2, r3
 8001134:	f004 fefe 	bl	8005f34 <memcpy>

	// send data length information
	sprintf(cipsend_buff, "AT+CIPSEND=%d\r\n", strlen(message));
 8001138:	193b      	adds	r3, r7, r4
 800113a:	0018      	movs	r0, r3
 800113c:	f7fe ffe4 	bl	8000108 <strlen>
 8001140:	0002      	movs	r2, r0
 8001142:	492a      	ldr	r1, [pc, #168]	; (80011ec <ESP8266_TS_Send_Data_MultiField+0x1a0>)
 8001144:	24b8      	movs	r4, #184	; 0xb8
 8001146:	193b      	adds	r3, r7, r4
 8001148:	0018      	movs	r0, r3
 800114a:	f004 ff05 	bl	8005f58 <siprintf>
	UART_send_message(cipsend_buff, strlen(cipsend_buff));
 800114e:	193b      	adds	r3, r7, r4
 8001150:	0018      	movs	r0, r3
 8001152:	f7fe ffd9 	bl	8000108 <strlen>
 8001156:	0003      	movs	r3, r0
 8001158:	b2da      	uxtb	r2, r3
 800115a:	193b      	adds	r3, r7, r4
 800115c:	0011      	movs	r1, r2
 800115e:	0018      	movs	r0, r3
 8001160:	f000 f90a 	bl	8001378 <UART_send_message>
	HAL_Delay(ESP_RESPOND_TIME);
 8001164:	2064      	movs	r0, #100	; 0x64
 8001166:	f000 ff81 	bl	800206c <HAL_Delay>

	if(ESP8266_Check_OK_Respond(ESP) != ESP_OK)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	0018      	movs	r0, r3
 800116e:	f7ff fd87 	bl	8000c80 <ESP8266_Check_OK_Respond>
 8001172:	0003      	movs	r3, r0
 8001174:	2b01      	cmp	r3, #1
 8001176:	d004      	beq.n	8001182 <ESP8266_TS_Send_Data_MultiField+0x136>
	{
		ESP->ESP8266_status = ESP_NOK;
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	230e      	movs	r3, #14
 800117c:	33ff      	adds	r3, #255	; 0xff
 800117e:	2100      	movs	r1, #0
 8001180:	54d1      	strb	r1, [r2, r3]
	}

	UART_send_message(message, strlen(message)); // send data
 8001182:	2414      	movs	r4, #20
 8001184:	193b      	adds	r3, r7, r4
 8001186:	0018      	movs	r0, r3
 8001188:	f7fe ffbe 	bl	8000108 <strlen>
 800118c:	0003      	movs	r3, r0
 800118e:	b2da      	uxtb	r2, r3
 8001190:	193b      	adds	r3, r7, r4
 8001192:	0011      	movs	r1, r2
 8001194:	0018      	movs	r0, r3
 8001196:	f000 f8ef 	bl	8001378 <UART_send_message>
	HAL_Delay(1000);
 800119a:	23fa      	movs	r3, #250	; 0xfa
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 ff64 	bl	800206c <HAL_Delay>

	// if TCP isn't closed
	if(ESP8266_is_TCP_disconnected(ESP) != ESP_OK)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7ff fd92 	bl	8000cd0 <ESP8266_is_TCP_disconnected>
 80011ac:	0003      	movs	r3, r0
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d003      	beq.n	80011ba <ESP8266_TS_Send_Data_MultiField+0x16e>
	{
		ESP8266_Disconnect_TCP(ESP);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff ff21 	bl	8000ffc <ESP8266_Disconnect_TCP>
	}

	ESP->ESP8266_status = ESP_OK;
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	230e      	movs	r3, #14
 80011be:	33ff      	adds	r3, #255	; 0xff
 80011c0:	2101      	movs	r1, #1
 80011c2:	54d1      	strb	r1, [r2, r3]
	return ESP_OK;
 80011c4:	2301      	movs	r3, #1
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b036      	add	sp, #216	; 0xd8
 80011cc:	bdb0      	pop	{r4, r5, r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	08006898 	.word	0x08006898
 80011d4:	0800689c 	.word	0x0800689c
 80011d8:	080068fc 	.word	0x080068fc
 80011dc:	080068ac 	.word	0x080068ac
 80011e0:	7fffffff 	.word	0x7fffffff
 80011e4:	080068c4 	.word	0x080068c4
 80011e8:	080068d0 	.word	0x080068d0
 80011ec:	080068d4 	.word	0x080068d4

080011f0 <RingBuffer_Init>:

#include "RingBuffer.h"


void RingBuffer_Init(RingBuffer_t* RingBuffer)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	RingBuffer->head = 0;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	705a      	strb	r2, [r3, #1]
	RingBuffer->tail = 0;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
	RingBuffer->BUFFER_FULL_FLAG = 0;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2282      	movs	r2, #130	; 0x82
 8001208:	2100      	movs	r1, #0
 800120a:	5499      	strb	r1, [r3, r2]
	RingBuffer->BUFFER_EMPTY_FLAG = 1;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2283      	movs	r2, #131	; 0x83
 8001210:	2101      	movs	r1, #1
 8001212:	5499      	strb	r1, [r3, r2]
	RingBuffer->data_counter = 0;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2284      	movs	r2, #132	; 0x84
 8001218:	2100      	movs	r1, #0
 800121a:	5499      	strb	r1, [r3, r2]
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}

08001224 <RB_Buff_Write>:
	while(*string++ && (!RingBuffer->BUFFER_FULL_FLAG));
}


void RB_Buff_Write(RingBuffer_t* RingBuffer, uint8_t value)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	000a      	movs	r2, r1
 800122e:	1cfb      	adds	r3, r7, #3
 8001230:	701a      	strb	r2, [r3, #0]
	if(((RingBuffer->head + 1) % BUFFER_SIZE) != RingBuffer->tail)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	785b      	ldrb	r3, [r3, #1]
 8001236:	3301      	adds	r3, #1
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <RB_Buff_Write+0x84>)
 800123a:	4013      	ands	r3, r2
 800123c:	d504      	bpl.n	8001248 <RB_Buff_Write+0x24>
 800123e:	3b01      	subs	r3, #1
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	4252      	negs	r2, r2
 8001244:	4313      	orrs	r3, r2
 8001246:	3301      	adds	r3, #1
 8001248:	001a      	movs	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d021      	beq.n	8001296 <RB_Buff_Write+0x72>
	{
		RingBuffer->BUFFER_EMPTY_FLAG = 0;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2283      	movs	r2, #131	; 0x83
 8001256:	2100      	movs	r1, #0
 8001258:	5499      	strb	r1, [r3, r2]
		RingBuffer->buffer[RingBuffer->head] = value;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	001a      	movs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	189b      	adds	r3, r3, r2
 8001264:	1cfa      	adds	r2, r7, #3
 8001266:	7812      	ldrb	r2, [r2, #0]
 8001268:	709a      	strb	r2, [r3, #2]
		RingBuffer->head++;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	785b      	ldrb	r3, [r3, #1]
 800126e:	3301      	adds	r3, #1
 8001270:	b2da      	uxtb	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	705a      	strb	r2, [r3, #1]
		RingBuffer->head %= BUFFER_SIZE;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	227f      	movs	r2, #127	; 0x7f
 800127c:	4013      	ands	r3, r2
 800127e:	b2da      	uxtb	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	705a      	strb	r2, [r3, #1]
		RingBuffer->data_counter++;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2284      	movs	r2, #132	; 0x84
 8001288:	5c9b      	ldrb	r3, [r3, r2]
 800128a:	3301      	adds	r3, #1
 800128c:	b2d9      	uxtb	r1, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2284      	movs	r2, #132	; 0x84
 8001292:	5499      	strb	r1, [r3, r2]
	}
	else
	{
		RingBuffer->BUFFER_FULL_FLAG = 1;
	}
}
 8001294:	e003      	b.n	800129e <RB_Buff_Write+0x7a>
		RingBuffer->BUFFER_FULL_FLAG = 1;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2282      	movs	r2, #130	; 0x82
 800129a:	2101      	movs	r1, #1
 800129c:	5499      	strb	r1, [r3, r2]
}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	8000007f 	.word	0x8000007f

080012ac <RB_Buff_Read>:



void RB_Buff_Read(RingBuffer_t* RingBuffer, uint8_t* data)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	if(RingBuffer->tail != RingBuffer->head)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	785b      	ldrb	r3, [r3, #1]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d021      	beq.n	8001306 <RB_Buff_Read+0x5a>
	{
		RingBuffer->BUFFER_FULL_FLAG = 0;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2282      	movs	r2, #130	; 0x82
 80012c6:	2100      	movs	r1, #0
 80012c8:	5499      	strb	r1, [r3, r2]
		*data = RingBuffer->buffer[RingBuffer->tail];
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	001a      	movs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	189b      	adds	r3, r3, r2
 80012d4:	789a      	ldrb	r2, [r3, #2]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	701a      	strb	r2, [r3, #0]
		RingBuffer->tail++;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	701a      	strb	r2, [r3, #0]
		RingBuffer->tail %= BUFFER_SIZE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	227f      	movs	r2, #127	; 0x7f
 80012ec:	4013      	ands	r3, r2
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	701a      	strb	r2, [r3, #0]
		RingBuffer->data_counter--;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2284      	movs	r2, #132	; 0x84
 80012f8:	5c9b      	ldrb	r3, [r3, r2]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	b2d9      	uxtb	r1, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2284      	movs	r2, #132	; 0x84
 8001302:	5499      	strb	r1, [r3, r2]

	else
	{
		RingBuffer->BUFFER_EMPTY_FLAG = 1;
	}
}
 8001304:	e003      	b.n	800130e <RB_Buff_Read+0x62>
		RingBuffer->BUFFER_EMPTY_FLAG = 1;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2283      	movs	r2, #131	; 0x83
 800130a:	2101      	movs	r1, #1
 800130c:	5499      	strb	r1, [r3, r2]
}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	b002      	add	sp, #8
 8001314:	bd80      	pop	{r7, pc}

08001316 <RB_Flush>:
{
	return RingBuffer->data_counter;
}

void RB_Flush(RingBuffer_t* RingBuffer)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
	// clear buffer
	RingBuffer->head = 0;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	705a      	strb	r2, [r3, #1]
	RingBuffer->tail = 0;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
	RingBuffer->data_counter = 0;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2284      	movs	r2, #132	; 0x84
 800132e:	2100      	movs	r1, #0
 8001330:	5499      	strb	r1, [r3, r2]
}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	b002      	add	sp, #8
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <UART_send_string>:
 */

#include "Utilis.h"

void UART_send_string(char* message)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b095      	sub	sp, #84	; 0x54
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	uint8_t length;
	uint8_t message_buf[64];
	length = sprintf((char*)message_buf, message);
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	240c      	movs	r4, #12
 8001348:	193b      	adds	r3, r7, r4
 800134a:	0011      	movs	r1, r2
 800134c:	0018      	movs	r0, r3
 800134e:	f004 fe03 	bl	8005f58 <siprintf>
 8001352:	0002      	movs	r2, r0
 8001354:	214f      	movs	r1, #79	; 0x4f
 8001356:	187b      	adds	r3, r7, r1
 8001358:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(UART, message_buf, length, 100);
 800135a:	187b      	adds	r3, r7, r1
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b29a      	uxth	r2, r3
 8001360:	1939      	adds	r1, r7, r4
 8001362:	4804      	ldr	r0, [pc, #16]	; (8001374 <UART_send_string+0x38>)
 8001364:	2364      	movs	r3, #100	; 0x64
 8001366:	f003 fb23 	bl	80049b0 <HAL_UART_Transmit>
}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	b015      	add	sp, #84	; 0x54
 8001370:	bd90      	pop	{r4, r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	2000034c 	.word	0x2000034c

08001378 <UART_send_message>:

void UART_send_message(char* string, uint8_t string_size)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	000a      	movs	r2, r1
 8001382:	1cfb      	adds	r3, r7, #3
 8001384:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(UART, (uint8_t*)string, string_size, 100);
 8001386:	1cfb      	adds	r3, r7, #3
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b29a      	uxth	r2, r3
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <UART_send_message+0x28>)
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	f003 fb0d 	bl	80049b0 <HAL_UART_Transmit>
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	2000034c 	.word	0x2000034c

080013a4 <delay_init>:

#include "main.h"
#include "delay.h"

void delay_init()
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(_TIMER);
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <delay_init+0x14>)
 80013aa:	0018      	movs	r0, r3
 80013ac:	f003 f84e 	bl	800444c <HAL_TIM_Base_Start>
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	200002c4 	.word	0x200002c4

080013bc <delay_us>:



void delay_us(uint16_t us)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	0002      	movs	r2, r0
 80013c4:	1dbb      	adds	r3, r7, #6
 80013c6:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(_TIMER, 0); // set CNT register to 0
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <delay_us+0x30>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(_TIMER) < us); // wait until timer reach us
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <delay_us+0x30>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d8:	1dbb      	adds	r3, r7, #6
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d3f8      	bcc.n	80013d2 <delay_us+0x16>
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b002      	add	sp, #8
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	200002c4 	.word	0x200002c4

080013f0 <delay_ms>:


void delay_ms(uint16_t ms)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	0002      	movs	r2, r0
 80013f8:	1dbb      	adds	r3, r7, #6
 80013fa:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<ms;i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e007      	b.n	8001412 <delay_ms+0x22>
	{
		delay_us(1000);
 8001402:	23fa      	movs	r3, #250	; 0xfa
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	0018      	movs	r0, r3
 8001408:	f7ff ffd8 	bl	80013bc <delay_us>
	for(int i=0;i<ms;i++)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	1dbb      	adds	r3, r7, #6
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	dbf2      	blt.n	8001402 <delay_ms+0x12>
	}
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b004      	add	sp, #16
 8001424:	bd80      	pop	{r7, pc}

08001426 <DHT11_Init>:
#include "main.h"
#include "delay.h"


void DHT11_Init(dht11_sensor* sensor, GPIO_TypeDef* _PORT, uint16_t _PIN)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b084      	sub	sp, #16
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	1dbb      	adds	r3, r7, #6
 8001432:	801a      	strh	r2, [r3, #0]
	sensor->Port = _PORT;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	601a      	str	r2, [r3, #0]
	sensor->Pin = _PIN;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1dba      	adds	r2, r7, #6
 800143e:	8812      	ldrh	r2, [r2, #0]
 8001440:	809a      	strh	r2, [r3, #4]
}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	46bd      	mov	sp, r7
 8001446:	b004      	add	sp, #16
 8001448:	bd80      	pop	{r7, pc}

0800144a <change_to_output>:



static void change_to_output(dht11_sensor* sensor)
{
 800144a:	b590      	push	{r4, r7, lr}
 800144c:	b089      	sub	sp, #36	; 0x24
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_data = {0};
 8001452:	240c      	movs	r4, #12
 8001454:	193b      	adds	r3, r7, r4
 8001456:	0018      	movs	r0, r3
 8001458:	2314      	movs	r3, #20
 800145a:	001a      	movs	r2, r3
 800145c:	2100      	movs	r1, #0
 800145e:	f004 fd72 	bl	8005f46 <memset>
	gpio_data.Pin = sensor->Pin;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	889b      	ldrh	r3, [r3, #4]
 8001466:	001a      	movs	r2, r3
 8001468:	0021      	movs	r1, r4
 800146a:	187b      	adds	r3, r7, r1
 800146c:	601a      	str	r2, [r3, #0]
	gpio_data.Mode = GPIO_MODE_OUTPUT_OD;
 800146e:	187b      	adds	r3, r7, r1
 8001470:	2211      	movs	r2, #17
 8001472:	605a      	str	r2, [r3, #4]
	gpio_data.Pull = GPIO_NOPULL;
 8001474:	187b      	adds	r3, r7, r1
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
	gpio_data.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	187b      	adds	r3, r7, r1
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]


	HAL_GPIO_Init(sensor->Port, &gpio_data);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	187a      	adds	r2, r7, r1
 8001486:	0011      	movs	r1, r2
 8001488:	0018      	movs	r0, r3
 800148a:	f001 f933 	bl	80026f4 <HAL_GPIO_Init>
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b009      	add	sp, #36	; 0x24
 8001494:	bd90      	pop	{r4, r7, pc}

08001496 <send_start_signal>:


static void send_start_signal(dht11_sensor* sensor)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->Port, sensor->Pin, GPIO_PIN_RESET); // set Data pin to LOW
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	889b      	ldrh	r3, [r3, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	0019      	movs	r1, r3
 80014aa:	f001 faae 	bl	8002a0a <HAL_GPIO_WritePin>
	delay_ms(18);
 80014ae:	2012      	movs	r0, #18
 80014b0:	f7ff ff9e 	bl	80013f0 <delay_ms>
	HAL_GPIO_WritePin(sensor->Port, sensor->Pin, GPIO_PIN_SET); // set Data pin to HIGH
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	889b      	ldrh	r3, [r3, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	0019      	movs	r1, r3
 80014c0:	f001 faa3 	bl	8002a0a <HAL_GPIO_WritePin>
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}

080014cc <change_to_input>:


static void change_to_input(dht11_sensor* sensor)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_data = {0};
 80014d4:	240c      	movs	r4, #12
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	0018      	movs	r0, r3
 80014da:	2314      	movs	r3, #20
 80014dc:	001a      	movs	r2, r3
 80014de:	2100      	movs	r1, #0
 80014e0:	f004 fd31 	bl	8005f46 <memset>
	gpio_data.Pin = sensor->Pin;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	889b      	ldrh	r3, [r3, #4]
 80014e8:	001a      	movs	r2, r3
 80014ea:	0021      	movs	r1, r4
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	601a      	str	r2, [r3, #0]
	gpio_data.Mode = GPIO_MODE_INPUT;
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	2200      	movs	r2, #0
 80014f4:	605a      	str	r2, [r3, #4]
	gpio_data.Pull = GPIO_NOPULL;
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
	gpio_data.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]


	HAL_GPIO_Init(sensor->Port, &gpio_data);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	187a      	adds	r2, r7, r1
 8001508:	0011      	movs	r1, r2
 800150a:	0018      	movs	r0, r3
 800150c:	f001 f8f2 	bl	80026f4 <HAL_GPIO_Init>

}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b009      	add	sp, #36	; 0x24
 8001516:	bd90      	pop	{r4, r7, pc}

08001518 <check_response>:


static void check_response(dht11_sensor* sensor)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	delay_us(RESPONSE_TIMEOUT);
 8001520:	2028      	movs	r0, #40	; 0x28
 8001522:	f7ff ff4b 	bl	80013bc <delay_us>
	if(!(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin)))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	889b      	ldrh	r3, [r3, #4]
 800152e:	0019      	movs	r1, r3
 8001530:	0010      	movs	r0, r2
 8001532:	f001 fa4d 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001536:	1e03      	subs	r3, r0, #0
 8001538:	d102      	bne.n	8001540 <check_response+0x28>
	{
		delay_us(LOW_HIGH_RESPONSE_TIME);
 800153a:	2050      	movs	r0, #80	; 0x50
 800153c:	f7ff ff3e 	bl	80013bc <delay_us>
	}

	while((HAL_GPIO_ReadPin(sensor->Port, sensor->Pin)));
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	889b      	ldrh	r3, [r3, #4]
 800154a:	0019      	movs	r1, r3
 800154c:	0010      	movs	r0, r2
 800154e:	f001 fa3f 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001552:	1e03      	subs	r3, r0, #0
 8001554:	d1f5      	bne.n	8001542 <check_response+0x2a>
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}

08001560 <read_byte>:


static uint8_t read_byte(dht11_sensor* sensor)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	for(int i=0; i<8; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	e046      	b.n	80015fc <read_byte+0x9c>
	{
		while(!(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin)));
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	889b      	ldrh	r3, [r3, #4]
 8001578:	0019      	movs	r1, r3
 800157a:	0010      	movs	r0, r2
 800157c:	f001 fa28 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001580:	1e03      	subs	r3, r0, #0
 8001582:	d0f5      	beq.n	8001570 <read_byte+0x10>
		delay_us(TRANSMISION_LOGIC_0_TIME);
 8001584:	2028      	movs	r0, #40	; 0x28
 8001586:	f7ff ff19 	bl	80013bc <delay_us>
		if(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	889b      	ldrh	r3, [r3, #4]
 8001592:	0019      	movs	r1, r3
 8001594:	0010      	movs	r0, r2
 8001596:	f001 fa1b 	bl	80029d0 <HAL_GPIO_ReadPin>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d00f      	beq.n	80015be <read_byte+0x5e>
		{
			//there is logic '1'
			byte |= (1<<(7-i));
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	2207      	movs	r2, #7
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2201      	movs	r2, #1
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	b25a      	sxtb	r2, r3
 80015ac:	210f      	movs	r1, #15
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b25a      	sxtb	r2, r3
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	e010      	b.n	80015e0 <read_byte+0x80>
		}

		else
		{
			// there is logic '0'
			byte &= ~(1<<(7-i));
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	2207      	movs	r2, #7
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2201      	movs	r2, #1
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	210f      	movs	r1, #15
 80015d2:	187a      	adds	r2, r7, r1
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	b252      	sxtb	r2, r2
 80015d8:	4013      	ands	r3, r2
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	701a      	strb	r2, [r3, #0]
		}
		//wait for pin to go low
		while(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin));
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	889b      	ldrh	r3, [r3, #4]
 80015ea:	0019      	movs	r1, r3
 80015ec:	0010      	movs	r0, r2
 80015ee:	f001 f9ef 	bl	80029d0 <HAL_GPIO_ReadPin>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d1f5      	bne.n	80015e2 <read_byte+0x82>
	for(int i=0; i<8; i++)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3301      	adds	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b07      	cmp	r3, #7
 8001600:	ddb5      	ble.n	800156e <read_byte+0xe>
	}

	return byte;
 8001602:	230f      	movs	r3, #15
 8001604:	18fb      	adds	r3, r7, r3
 8001606:	781b      	ldrb	r3, [r3, #0]
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	b004      	add	sp, #16
 800160e:	bd80      	pop	{r7, pc}

08001610 <read_data>:


static void read_data(dht11_sensor* sensor, uint8_t* humidity_val, int8_t* temp_val, uint8_t* check_sum)
{
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	603b      	str	r3, [r7, #0]
	uint8_t humidity_integral;
	uint8_t humidity_dec;
	uint8_t temp_integral;
	uint8_t temp_dec;

	humidity_integral = read_byte(sensor);
 800161e:	2517      	movs	r5, #23
 8001620:	197c      	adds	r4, r7, r5
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff ff9b 	bl	8001560 <read_byte>
 800162a:	0003      	movs	r3, r0
 800162c:	7023      	strb	r3, [r4, #0]
	humidity_dec = read_byte(sensor);
 800162e:	2316      	movs	r3, #22
 8001630:	18fc      	adds	r4, r7, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff ff93 	bl	8001560 <read_byte>
 800163a:	0003      	movs	r3, r0
 800163c:	7023      	strb	r3, [r4, #0]
	temp_integral = read_byte(sensor);
 800163e:	2615      	movs	r6, #21
 8001640:	19bc      	adds	r4, r7, r6
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff ff8b 	bl	8001560 <read_byte>
 800164a:	0003      	movs	r3, r0
 800164c:	7023      	strb	r3, [r4, #0]
	temp_dec = read_byte(sensor);
 800164e:	2314      	movs	r3, #20
 8001650:	18fc      	adds	r4, r7, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff ff83 	bl	8001560 <read_byte>
 800165a:	0003      	movs	r3, r0
 800165c:	7023      	strb	r3, [r4, #0]

	*check_sum = read_byte(sensor);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff ff7d 	bl	8001560 <read_byte>
 8001666:	0003      	movs	r3, r0
 8001668:	001a      	movs	r2, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	701a      	strb	r2, [r3, #0]
	*humidity_val = humidity_integral;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	197a      	adds	r2, r7, r5
 8001672:	7812      	ldrb	r2, [r2, #0]
 8001674:	701a      	strb	r2, [r3, #0]
	*temp_val = temp_integral;
 8001676:	19bb      	adds	r3, r7, r6
 8001678:	2200      	movs	r2, #0
 800167a:	569a      	ldrsb	r2, [r3, r2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	701a      	strb	r2, [r3, #0]
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b007      	add	sp, #28
 8001686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001688 <DHT11_get_data>:


void DHT11_get_data(dht11_sensor* sensor, uint8_t* humidity_val, int8_t* temp_val, uint8_t* check_sum)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
	send_start_signal(sensor);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	0018      	movs	r0, r3
 800169a:	f7ff fefc 	bl	8001496 <send_start_signal>
	change_to_input(sensor);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff ff13 	bl	80014cc <change_to_input>
	check_response(sensor);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7ff ff35 	bl	8001518 <check_response>
	read_data(sensor, humidity_val, temp_val, check_sum);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7ff ffab 	bl	8001610 <read_data>
	change_to_output(sensor);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	0018      	movs	r0, r3
 80016be:	f7ff fec4 	bl	800144a <change_to_output>
}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b004      	add	sp, #16
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_DMA_Init+0x38>)
 80016d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_DMA_Init+0x38>)
 80016d8:	2101      	movs	r1, #1
 80016da:	430a      	orrs	r2, r1
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_DMA_Init+0x38>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	2201      	movs	r2, #1
 80016e4:	4013      	ands	r3, r2
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	200b      	movs	r0, #11
 80016f0:	f000 fd8c 	bl	800220c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80016f4:	200b      	movs	r0, #11
 80016f6:	f000 fd9e 	bl	8002236 <HAL_NVIC_EnableIRQ>

}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	40021000 	.word	0x40021000

08001708 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	240c      	movs	r4, #12
 8001710:	193b      	adds	r3, r7, r4
 8001712:	0018      	movs	r0, r3
 8001714:	2314      	movs	r3, #20
 8001716:	001a      	movs	r2, r3
 8001718:	2100      	movs	r1, #0
 800171a:	f004 fc14 	bl	8005f46 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	4b2c      	ldr	r3, [pc, #176]	; (80017d0 <MX_GPIO_Init+0xc8>)
 8001720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <MX_GPIO_Init+0xc8>)
 8001724:	2104      	movs	r1, #4
 8001726:	430a      	orrs	r2, r1
 8001728:	62da      	str	r2, [r3, #44]	; 0x2c
 800172a:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <MX_GPIO_Init+0xc8>)
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	2204      	movs	r2, #4
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <MX_GPIO_Init+0xc8>)
 8001738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173a:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <MX_GPIO_Init+0xc8>)
 800173c:	2101      	movs	r1, #1
 800173e:	430a      	orrs	r2, r1
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <MX_GPIO_Init+0xc8>)
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	2201      	movs	r2, #1
 8001748:	4013      	ands	r3, r2
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <MX_GPIO_Init+0xc8>)
 8001750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <MX_GPIO_Init+0xc8>)
 8001754:	2102      	movs	r1, #2
 8001756:	430a      	orrs	r2, r1
 8001758:	62da      	str	r2, [r3, #44]	; 0x2c
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MX_GPIO_Init+0xc8>)
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	2202      	movs	r2, #2
 8001760:	4013      	ands	r3, r2
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <MX_GPIO_Init+0xcc>)
 8001768:	2200      	movs	r2, #0
 800176a:	2108      	movs	r1, #8
 800176c:	0018      	movs	r0, r3
 800176e:	f001 f94c 	bl	8002a0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_SIGNAL_GPIO_Port, DHT11_SIGNAL_Pin, GPIO_PIN_SET);
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <MX_GPIO_Init+0xcc>)
 8001774:	2201      	movs	r2, #1
 8001776:	2110      	movs	r1, #16
 8001778:	0018      	movs	r0, r3
 800177a:	f001 f946 	bl	8002a0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800177e:	193b      	adds	r3, r7, r4
 8001780:	2208      	movs	r2, #8
 8001782:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	193b      	adds	r3, r7, r4
 8001786:	2201      	movs	r2, #1
 8001788:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	193b      	adds	r3, r7, r4
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	193b      	adds	r3, r7, r4
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001796:	193b      	adds	r3, r7, r4
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <MX_GPIO_Init+0xcc>)
 800179a:	0019      	movs	r1, r3
 800179c:	0010      	movs	r0, r2
 800179e:	f000 ffa9 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_SIGNAL_Pin;
 80017a2:	0021      	movs	r1, r4
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	2210      	movs	r2, #16
 80017a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	2211      	movs	r2, #17
 80017ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT11_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <MX_GPIO_Init+0xcc>)
 80017c0:	0019      	movs	r1, r3
 80017c2:	0010      	movs	r0, r2
 80017c4:	f000 ff96 	bl	80026f4 <HAL_GPIO_Init>

}
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b009      	add	sp, #36	; 0x24
 80017ce:	bd90      	pop	{r4, r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	50000400 	.word	0x50000400

080017d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_I2C1_Init+0x74>)
 80017de:	4a1c      	ldr	r2, [pc, #112]	; (8001850 <MX_I2C1_Init+0x78>)
 80017e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40000A0B;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_I2C1_Init+0x74>)
 80017e4:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <MX_I2C1_Init+0x7c>)
 80017e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <MX_I2C1_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_I2C1_Init+0x74>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_I2C1_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_I2C1_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_I2C1_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_I2C1_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_I2C1_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_I2C1_Init+0x74>)
 8001814:	0018      	movs	r0, r3
 8001816:	f001 f931 	bl	8002a7c <HAL_I2C_Init>
 800181a:	1e03      	subs	r3, r0, #0
 800181c:	d001      	beq.n	8001822 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800181e:	f000 f99b 	bl	8001b58 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <MX_I2C1_Init+0x74>)
 8001824:	2100      	movs	r1, #0
 8001826:	0018      	movs	r0, r3
 8001828:	f001 fe72 	bl	8003510 <HAL_I2CEx_ConfigAnalogFilter>
 800182c:	1e03      	subs	r3, r0, #0
 800182e:	d001      	beq.n	8001834 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001830:	f000 f992 	bl	8001b58 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <MX_I2C1_Init+0x74>)
 8001836:	2100      	movs	r1, #0
 8001838:	0018      	movs	r0, r3
 800183a:	f001 feb5 	bl	80035a8 <HAL_I2CEx_ConfigDigitalFilter>
 800183e:	1e03      	subs	r3, r0, #0
 8001840:	d001      	beq.n	8001846 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001842:	f000 f989 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200000bc 	.word	0x200000bc
 8001850:	40005400 	.word	0x40005400
 8001854:	40000a0b 	.word	0x40000a0b

08001858 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	240c      	movs	r4, #12
 8001862:	193b      	adds	r3, r7, r4
 8001864:	0018      	movs	r0, r3
 8001866:	2314      	movs	r3, #20
 8001868:	001a      	movs	r2, r3
 800186a:	2100      	movs	r1, #0
 800186c:	f004 fb6b 	bl	8005f46 <memset>
  if(i2cHandle->Instance==I2C1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a18      	ldr	r2, [pc, #96]	; (80018d8 <HAL_I2C_MspInit+0x80>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d12a      	bne.n	80018d0 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_I2C_MspInit+0x84>)
 800187c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_I2C_MspInit+0x84>)
 8001880:	2101      	movs	r1, #1
 8001882:	430a      	orrs	r2, r1
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_I2C_MspInit+0x84>)
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	2201      	movs	r2, #1
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001892:	193b      	adds	r3, r7, r4
 8001894:	22c0      	movs	r2, #192	; 0xc0
 8001896:	00d2      	lsls	r2, r2, #3
 8001898:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189a:	0021      	movs	r1, r4
 800189c:	187b      	adds	r3, r7, r1
 800189e:	2212      	movs	r2, #18
 80018a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	187b      	adds	r3, r7, r1
 80018aa:	2203      	movs	r2, #3
 80018ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80018ae:	187b      	adds	r3, r7, r1
 80018b0:	2201      	movs	r2, #1
 80018b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	187a      	adds	r2, r7, r1
 80018b6:	23a0      	movs	r3, #160	; 0xa0
 80018b8:	05db      	lsls	r3, r3, #23
 80018ba:	0011      	movs	r1, r2
 80018bc:	0018      	movs	r0, r3
 80018be:	f000 ff19 	bl	80026f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_I2C_MspInit+0x84>)
 80018c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_I2C_MspInit+0x84>)
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	0389      	lsls	r1, r1, #14
 80018cc:	430a      	orrs	r2, r1
 80018ce:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018d0:	46c0      	nop			; (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b009      	add	sp, #36	; 0x24
 80018d6:	bd90      	pop	{r4, r7, pc}
 80018d8:	40005400 	.word	0x40005400
 80018dc:	40021000 	.word	0x40021000

080018e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e4:	f000 fb52 	bl	8001f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e8:	f000 f87c 	bl	80019e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ec:	f7ff ff0c 	bl	8001708 <MX_GPIO_Init>

  MX_DMA_Init();
 80018f0:	f7ff feec 	bl	80016cc <MX_DMA_Init>

  MX_USART2_UART_Init();
 80018f4:	f000 fa80 	bl	8001df8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80018f8:	f7ff ff6e 	bl	80017d8 <MX_I2C1_Init>
  MX_TIM2_Init();
 80018fc:	f000 fa12 	bl	8001d24 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001900:	f000 f8e4 	bl	8001acc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, UART_RX_val, 128);
 8001904:	4926      	ldr	r1, [pc, #152]	; (80019a0 <main+0xc0>)
 8001906:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <main+0xc4>)
 8001908:	2280      	movs	r2, #128	; 0x80
 800190a:	0018      	movs	r0, r3
 800190c:	f004 fa79 	bl	8005e02 <HAL_UARTEx_ReceiveToIdle_DMA>
  //HAL_UART_Receive_IT(&huart2, &UART_RX_val, 1);
  //INA219_Init(&hi2c1, INA_I2C_ADDR);
  delay_init();
 8001910:	f7ff fd48 	bl	80013a4 <delay_init>
  DHT11_Init(&DHT11, DHT11_SIGNAL_GPIO_Port, DHT11_SIGNAL_Pin);
 8001914:	4924      	ldr	r1, [pc, #144]	; (80019a8 <main+0xc8>)
 8001916:	4b25      	ldr	r3, [pc, #148]	; (80019ac <main+0xcc>)
 8001918:	2210      	movs	r2, #16
 800191a:	0018      	movs	r0, r3
 800191c:	f7ff fd83 	bl	8001426 <DHT11_Init>
  BMP280_Init(&hi2c1, 0x77);
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <main+0xd0>)
 8001922:	2177      	movs	r1, #119	; 0x77
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff f929 	bl	8000b7c <BMP280_Init>
  ESP8266_Init(&ESP_module, "t-mobil", "19962016igor", AP_STATION);
 800192a:	4a22      	ldr	r2, [pc, #136]	; (80019b4 <main+0xd4>)
 800192c:	4922      	ldr	r1, [pc, #136]	; (80019b8 <main+0xd8>)
 800192e:	4823      	ldr	r0, [pc, #140]	; (80019bc <main+0xdc>)
 8001930:	2302      	movs	r3, #2
 8001932:	f7ff fa9f 	bl	8000e74 <ESP8266_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <main+0xc8>)
 8001938:	2108      	movs	r1, #8
 800193a:	0018      	movs	r0, r3
 800193c:	f001 f882 	bl	8002a44 <HAL_GPIO_TogglePin>
	  //INA219_Get_Data_OneShot(&solar_voltage, &solar_current);
	  BMP280_get_data_FORCED(&bmp_temp, &bmp_press);
 8001940:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <main+0xe0>)
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <main+0xe4>)
 8001944:	0011      	movs	r1, r2
 8001946:	0018      	movs	r0, r3
 8001948:	f7ff f8c8 	bl	8000adc <BMP280_get_data_FORCED>
	  DHT11_get_data(&DHT11, &dht11_humidity, &dht11_temp, &dht11_check_sum);
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <main+0xe8>)
 800194e:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <main+0xec>)
 8001950:	491f      	ldr	r1, [pc, #124]	; (80019d0 <main+0xf0>)
 8001952:	4816      	ldr	r0, [pc, #88]	; (80019ac <main+0xcc>)
 8001954:	f7ff fe98 	bl	8001688 <DHT11_get_data>

	  sensors_data_buff[0] = bmp_temp;
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <main+0xe4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b29a      	uxth	r2, r3
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <main+0xf4>)
 8001960:	801a      	strh	r2, [r3, #0]
	  sensors_data_buff[1] = bmp_press;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <main+0xe0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <main+0xf4>)
 800196a:	805a      	strh	r2, [r3, #2]
	  sensors_data_buff[2] = dht11_humidity;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <main+0xf0>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b29a      	uxth	r2, r3
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <main+0xf4>)
 8001974:	809a      	strh	r2, [r3, #4]
	  sensors_data_buff[3] = solar_voltage;
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <main+0xf8>)
 8001978:	881a      	ldrh	r2, [r3, #0]
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <main+0xf4>)
 800197c:	80da      	strh	r2, [r3, #6]
	  sensors_data_buff[4] = solar_current;
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <main+0xfc>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b29a      	uxth	r2, r3
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <main+0xf4>)
 8001986:	811a      	strh	r2, [r3, #8]

	  ESP8266_TS_Send_Data_MultiField(&ESP_module, 5, sensors_data_buff);
 8001988:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <main+0xf4>)
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <main+0xdc>)
 800198c:	2105      	movs	r1, #5
 800198e:	0018      	movs	r0, r3
 8001990:	f7ff fb5c 	bl	800104c <ESP8266_TS_Send_Data_MultiField>
	  HAL_Delay(20000);
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <main+0x100>)
 8001996:	0018      	movs	r0, r3
 8001998:	f000 fb68 	bl	800206c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800199c:	e7cb      	b.n	8001936 <main+0x56>
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	20000230 	.word	0x20000230
 80019a4:	2000034c 	.word	0x2000034c
 80019a8:	50000400 	.word	0x50000400
 80019ac:	20000228 	.word	0x20000228
 80019b0:	200000bc 	.word	0x200000bc
 80019b4:	080068e4 	.word	0x080068e4
 80019b8:	080068f4 	.word	0x080068f4
 80019bc:	20000114 	.word	0x20000114
 80019c0:	2000010c 	.word	0x2000010c
 80019c4:	200002b0 	.word	0x200002b0
 80019c8:	200002b4 	.word	0x200002b4
 80019cc:	20000110 	.word	0x20000110
 80019d0:	20000224 	.word	0x20000224
 80019d4:	200002b8 	.word	0x200002b8
 80019d8:	20000108 	.word	0x20000108
 80019dc:	2000010a 	.word	0x2000010a
 80019e0:	00004e20 	.word	0x00004e20

080019e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b099      	sub	sp, #100	; 0x64
 80019e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ea:	242c      	movs	r4, #44	; 0x2c
 80019ec:	193b      	adds	r3, r7, r4
 80019ee:	0018      	movs	r0, r3
 80019f0:	2334      	movs	r3, #52	; 0x34
 80019f2:	001a      	movs	r2, r3
 80019f4:	2100      	movs	r1, #0
 80019f6:	f004 faa6 	bl	8005f46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fa:	2318      	movs	r3, #24
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	0018      	movs	r0, r3
 8001a00:	2314      	movs	r3, #20
 8001a02:	001a      	movs	r2, r3
 8001a04:	2100      	movs	r1, #0
 8001a06:	f004 fa9e 	bl	8005f46 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a0a:	003b      	movs	r3, r7
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	2318      	movs	r3, #24
 8001a10:	001a      	movs	r2, r3
 8001a12:	2100      	movs	r1, #0
 8001a14:	f004 fa97 	bl	8005f46 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a18:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <SystemClock_Config+0xe0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2a      	ldr	r2, [pc, #168]	; (8001ac8 <SystemClock_Config+0xe4>)
 8001a1e:	401a      	ands	r2, r3
 8001a20:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <SystemClock_Config+0xe0>)
 8001a22:	2180      	movs	r1, #128	; 0x80
 8001a24:	0109      	lsls	r1, r1, #4
 8001a26:	430a      	orrs	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2a:	0021      	movs	r1, r4
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	2202      	movs	r2, #2
 8001a30:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	2201      	movs	r2, #1
 8001a36:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	2210      	movs	r2, #16
 8001a3c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3e:	187b      	adds	r3, r7, r1
 8001a40:	2202      	movs	r2, #2
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	2200      	movs	r2, #0
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8001a4a:	187b      	adds	r3, r7, r1
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	03d2      	lsls	r2, r2, #15
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f001 fdf0 	bl	8003640 <HAL_RCC_OscConfig>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a64:	f000 f878 	bl	8001b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a68:	2118      	movs	r1, #24
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	2203      	movs	r2, #3
 8001a74:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	2280      	movs	r2, #128	; 0x80
 8001a7a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f002 f953 	bl	8003d38 <HAL_RCC_ClockConfig>
 8001a92:	1e03      	subs	r3, r0, #0
 8001a94:	d001      	beq.n	8001a9a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001a96:	f000 f85f 	bl	8001b58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001a9a:	003b      	movs	r3, r7
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aa0:	003b      	movs	r3, r7
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001aa6:	003b      	movs	r3, r7
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aac:	003b      	movs	r3, r7
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f002 fb66 	bl	8004180 <HAL_RCCEx_PeriphCLKConfig>
 8001ab4:	1e03      	subs	r3, r0, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001ab8:	f000 f84e 	bl	8001b58 <Error_Handler>
  }
}
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b019      	add	sp, #100	; 0x64
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	ffffe7ff 	.word	0xffffe7ff

08001acc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	201c      	movs	r0, #28
 8001ad6:	f000 fb99 	bl	800220c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ada:	201c      	movs	r0, #28
 8001adc:	f000 fbab 	bl	8002236 <HAL_NVIC_EnableIRQ>
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_UARTEx_RxEventCallback>:
//	HAL_UART_Receive_IT(&huart2, &UART_RX_val, 1);
//}


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	000a      	movs	r2, r1
 8001af2:	1cbb      	adds	r3, r7, #2
 8001af4:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <HAL_UARTEx_RxEventCallback+0x5c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d11c      	bne.n	8001b3a <HAL_UARTEx_RxEventCallback+0x52>
	{
		for(int i=0; i < Size; i++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e00b      	b.n	8001b1e <HAL_UARTEx_RxEventCallback+0x36>
		{
			RB_Buff_Write(&ESP_module.ESP_RX_Buff, UART_RX_val[i]);
 8001b06:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <HAL_UARTEx_RxEventCallback+0x60>)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	18d3      	adds	r3, r2, r3
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_UARTEx_RxEventCallback+0x64>)
 8001b10:	0011      	movs	r1, r2
 8001b12:	0018      	movs	r0, r3
 8001b14:	f7ff fb86 	bl	8001224 <RB_Buff_Write>
		for(int i=0; i < Size; i++)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	1cbb      	adds	r3, r7, #2
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dbee      	blt.n	8001b06 <HAL_UARTEx_RxEventCallback+0x1e>
		}

		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, UART_RX_val, 128);
 8001b28:	4907      	ldr	r1, [pc, #28]	; (8001b48 <HAL_UARTEx_RxEventCallback+0x60>)
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_UARTEx_RxEventCallback+0x68>)
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f004 f967 	bl	8005e02 <HAL_UARTEx_ReceiveToIdle_DMA>
		RX_RESPOND_FLAG = 0;
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]

	}
}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b004      	add	sp, #16
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	40004400 	.word	0x40004400
 8001b48:	20000230 	.word	0x20000230
 8001b4c:	2000011c 	.word	0x2000011c
 8001b50:	2000034c 	.word	0x2000034c
 8001b54:	200000b8 	.word	0x200000b8

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <Error_Handler+0x8>

08001b62 <Parser_clean_string>:


#include "parser.h"

void Parser_clean_string(RingBuffer_t* RX_buffer, uint8_t Destination_buffer[])
{
 8001b62:	b590      	push	{r4, r7, lr}
 8001b64:	b087      	sub	sp, #28
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
	uint8_t data_cnt = 0;
 8001b6c:	210f      	movs	r1, #15
 8001b6e:	187b      	adds	r3, r7, r1
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]


	uint8_t j = 0;
 8001b74:	2317      	movs	r3, #23
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]

	data_cnt = RX_buffer->data_counter;
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	2184      	movs	r1, #132	; 0x84
 8001b82:	5c52      	ldrb	r2, [r2, r1]
 8001b84:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < data_cnt - 2; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	e021      	b.n	8001bd0 <Parser_clean_string+0x6e>
	{
		uint8_t tmp;
		RB_Buff_Read(RX_buffer, &tmp);
 8001b8c:	240e      	movs	r4, #14
 8001b8e:	193a      	adds	r2, r7, r4
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	0011      	movs	r1, r2
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff fb89 	bl	80012ac <RB_Buff_Read>

		if((tmp=='\n') || (tmp=='\r'))
 8001b9a:	0021      	movs	r1, r4
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b0a      	cmp	r3, #10
 8001ba2:	d011      	beq.n	8001bc8 <Parser_clean_string+0x66>
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b0d      	cmp	r3, #13
 8001baa:	d00d      	beq.n	8001bc8 <Parser_clean_string+0x66>
			continue;
		}

		else
		{
			Destination_buffer[j] = tmp;
 8001bac:	2017      	movs	r0, #23
 8001bae:	183b      	adds	r3, r7, r0
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	18d3      	adds	r3, r2, r3
 8001bb6:	187a      	adds	r2, r7, r1
 8001bb8:	7812      	ldrb	r2, [r2, #0]
 8001bba:	701a      	strb	r2, [r3, #0]
			j++;
 8001bbc:	183b      	adds	r3, r7, r0
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	183b      	adds	r3, r7, r0
 8001bc2:	3201      	adds	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e000      	b.n	8001bca <Parser_clean_string+0x68>
			continue;
 8001bc8:	46c0      	nop			; (mov r8, r8)
	for(int i=0; i < data_cnt - 2; i++)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	230f      	movs	r3, #15
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	3b02      	subs	r3, #2
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dbd6      	blt.n	8001b8c <Parser_clean_string+0x2a>
		}
	}

	Destination_buffer[j] = '\0';
 8001bde:	2317      	movs	r3, #23
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	18d3      	adds	r3, r2, r3
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b007      	add	sp, #28
 8001bf2:	bd90      	pop	{r4, r7, pc}

08001bf4 <Parser_simple_parse>:
	return 0;
}


uint8_t Parser_simple_parse(char* message, uint8_t buffer[])
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
	char *ptr;

	ptr = strstr((char*)buffer, message);
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	0011      	movs	r1, r2
 8001c04:	0018      	movs	r0, r3
 8001c06:	f004 f9d4 	bl	8005fb2 <strstr>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	60fb      	str	r3, [r7, #12]
	if(ptr == NULL)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <Parser_simple_parse+0x24>
	{
		return 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	e000      	b.n	8001c1a <Parser_simple_parse+0x26>
	}

	else
	{
		return 1;
 8001c18:	2301      	movs	r3, #1
	}
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b004      	add	sp, #16
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_MspInit+0x24>)
 8001c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_MspInit+0x24>)
 8001c2e:	2101      	movs	r1, #1
 8001c30:	430a      	orrs	r2, r1
 8001c32:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <HAL_MspInit+0x24>)
 8001c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_MspInit+0x24>)
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	0549      	lsls	r1, r1, #21
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <NMI_Handler+0x4>

08001c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <HardFault_Handler+0x4>

08001c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c70:	f000 f9e0 	bl	8002034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 fc59 	bl	800253a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	20000304 	.word	0x20000304

08001c94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <USART2_IRQHandler+0x14>)
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f002 ff30 	bl	8004b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	2000034c 	.word	0x2000034c

08001cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <_sbrk+0x5c>)
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <_sbrk+0x60>)
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d102      	bne.n	8001cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <_sbrk+0x64>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <_sbrk+0x68>)
 8001ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	18d3      	adds	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d207      	bcs.n	8001cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cdc:	f004 f900 	bl	8005ee0 <__errno>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	425b      	negs	r3, r3
 8001cea:	e009      	b.n	8001d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	18d2      	adds	r2, r2, r3
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <_sbrk+0x64>)
 8001cfc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b006      	add	sp, #24
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20002000 	.word	0x20002000
 8001d0c:	00000400 	.word	0x00000400
 8001d10:	2000008c 	.word	0x2000008c
 8001d14:	200003e8 	.word	0x200003e8

08001d18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	0018      	movs	r0, r3
 8001d30:	2310      	movs	r3, #16
 8001d32:	001a      	movs	r2, r3
 8001d34:	2100      	movs	r1, #0
 8001d36:	f004 f906 	bl	8005f46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3a:	003b      	movs	r3, r7
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	2308      	movs	r3, #8
 8001d40:	001a      	movs	r2, r3
 8001d42:	2100      	movs	r1, #0
 8001d44:	f004 f8ff 	bl	8005f46 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d48:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <MX_TIM2_Init+0xa0>)
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	05d2      	lsls	r2, r2, #23
 8001d4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12;
 8001d50:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <MX_TIM2_Init+0xa0>)
 8001d52:	220c      	movs	r2, #12
 8001d54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <MX_TIM2_Init+0xa0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <MX_TIM2_Init+0xa0>)
 8001d5e:	4a1a      	ldr	r2, [pc, #104]	; (8001dc8 <MX_TIM2_Init+0xa4>)
 8001d60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <MX_TIM2_Init+0xa0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <MX_TIM2_Init+0xa0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <MX_TIM2_Init+0xa0>)
 8001d70:	0018      	movs	r0, r3
 8001d72:	f002 fb2b 	bl	80043cc <HAL_TIM_Base_Init>
 8001d76:	1e03      	subs	r3, r0, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d7a:	f7ff feed 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7e:	2108      	movs	r1, #8
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	0152      	lsls	r2, r2, #5
 8001d86:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d88:	187a      	adds	r2, r7, r1
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <MX_TIM2_Init+0xa0>)
 8001d8c:	0011      	movs	r1, r2
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f002 fba0 	bl	80044d4 <HAL_TIM_ConfigClockSource>
 8001d94:	1e03      	subs	r3, r0, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001d98:	f7ff fede 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9c:	003b      	movs	r3, r7
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da2:	003b      	movs	r3, r7
 8001da4:	2200      	movs	r2, #0
 8001da6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001da8:	003a      	movs	r2, r7
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_TIM2_Init+0xa0>)
 8001dac:	0011      	movs	r1, r2
 8001dae:	0018      	movs	r0, r3
 8001db0:	f002 fd52 	bl	8004858 <HAL_TIMEx_MasterConfigSynchronization>
 8001db4:	1e03      	subs	r3, r0, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001db8:	f7ff fece 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b006      	add	sp, #24
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200002c4 	.word	0x200002c4
 8001dc8:	0000ffff 	.word	0x0000ffff

08001dcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	05db      	lsls	r3, r3, #23
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d105      	bne.n	8001dec <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <HAL_TIM_Base_MspInit+0x28>)
 8001de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_TIM_Base_MspInit+0x28>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	430a      	orrs	r2, r1
 8001dea:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b002      	add	sp, #8
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000

08001df8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001dfe:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <MX_USART2_UART_Init+0x5c>)
 8001e00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e04:	22e1      	movs	r2, #225	; 0xe1
 8001e06:	0252      	lsls	r2, r2, #9
 8001e08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e1e:	220c      	movs	r2, #12
 8001e20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <MX_USART2_UART_Init+0x58>)
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f002 fd63 	bl	8004908 <HAL_UART_Init>
 8001e42:	1e03      	subs	r3, r0, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e46:	f7ff fe87 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	2000034c 	.word	0x2000034c
 8001e54:	40004400 	.word	0x40004400

08001e58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	240c      	movs	r4, #12
 8001e62:	193b      	adds	r3, r7, r4
 8001e64:	0018      	movs	r0, r3
 8001e66:	2314      	movs	r3, #20
 8001e68:	001a      	movs	r2, r3
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	f004 f86b 	bl	8005f46 <memset>
  if(uartHandle->Instance==USART2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a2c      	ldr	r2, [pc, #176]	; (8001f28 <HAL_UART_MspInit+0xd0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d152      	bne.n	8001f20 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <HAL_UART_MspInit+0xd4>)
 8001e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <HAL_UART_MspInit+0xd4>)
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	0289      	lsls	r1, r1, #10
 8001e84:	430a      	orrs	r2, r1
 8001e86:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e88:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <HAL_UART_MspInit+0xd4>)
 8001e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_UART_MspInit+0xd4>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	430a      	orrs	r2, r1
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e94:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <HAL_UART_MspInit+0xd4>)
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_3;
 8001ea0:	0021      	movs	r1, r4
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	220c      	movs	r2, #12
 8001ea6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	2202      	movs	r2, #2
 8001eac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001eba:	187b      	adds	r3, r7, r1
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	187a      	adds	r2, r7, r1
 8001ec2:	23a0      	movs	r3, #160	; 0xa0
 8001ec4:	05db      	lsls	r3, r3, #23
 8001ec6:	0011      	movs	r1, r2
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f000 fc13 	bl	80026f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_UART_MspInit+0xd8>)
 8001ed0:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <HAL_UART_MspInit+0xdc>)
 8001ed2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_UART_MspInit+0xd8>)
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_UART_MspInit+0xd8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_UART_MspInit+0xd8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_UART_MspInit+0xd8>)
 8001ee8:	2280      	movs	r2, #128	; 0x80
 8001eea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_UART_MspInit+0xd8>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_UART_MspInit+0xd8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_UART_MspInit+0xd8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_UART_MspInit+0xd8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_UART_MspInit+0xd8>)
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 f9b2 	bl	8002270 <HAL_DMA_Init>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8001f10:	f7ff fe22 	bl	8001b58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <HAL_UART_MspInit+0xd8>)
 8001f18:	671a      	str	r2, [r3, #112]	; 0x70
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_UART_MspInit+0xd8>)
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f20:	46c0      	nop			; (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b009      	add	sp, #36	; 0x24
 8001f26:	bd90      	pop	{r4, r7, pc}
 8001f28:	40004400 	.word	0x40004400
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	20000304 	.word	0x20000304
 8001f34:	40020058 	.word	0x40020058

08001f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001f38:	480d      	ldr	r0, [pc, #52]	; (8001f70 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001f3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f3c:	480d      	ldr	r0, [pc, #52]	; (8001f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f3e:	490e      	ldr	r1, [pc, #56]	; (8001f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f40:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <LoopForever+0xe>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f44:	e002      	b.n	8001f4c <LoopCopyDataInit>

08001f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4a:	3304      	adds	r3, #4

08001f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f50:	d3f9      	bcc.n	8001f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f54:	4c0b      	ldr	r4, [pc, #44]	; (8001f84 <LoopForever+0x16>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f58:	e001      	b.n	8001f5e <LoopFillZerobss>

08001f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f5c:	3204      	adds	r2, #4

08001f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f60:	d3fb      	bcc.n	8001f5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f62:	f7ff fed9 	bl	8001d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f66:	f003 ffc1 	bl	8005eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f6a:	f7ff fcb9 	bl	80018e0 <main>

08001f6e <LoopForever>:

LoopForever:
    b LoopForever
 8001f6e:	e7fe      	b.n	8001f6e <LoopForever>
   ldr   r0, =_estack
 8001f70:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f7c:	080069c0 	.word	0x080069c0
  ldr r2, =_sbss
 8001f80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f84:	200003e4 	.word	0x200003e4

08001f88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f88:	e7fe      	b.n	8001f88 <ADC1_COMP_IRQHandler>
	...

08001f8c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f92:	1dfb      	adds	r3, r7, #7
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_Init+0x3c>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_Init+0x3c>)
 8001f9e:	2140      	movs	r1, #64	; 0x40
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f000 f811 	bl	8001fcc <HAL_InitTick>
 8001faa:	1e03      	subs	r3, r0, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001fae:	1dfb      	adds	r3, r7, #7
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
 8001fb4:	e001      	b.n	8001fba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fb6:	f7ff fe35 	bl	8001c24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fba:	1dfb      	adds	r3, r7, #7
 8001fbc:	781b      	ldrb	r3, [r3, #0]
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	40022000 	.word	0x40022000

08001fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_InitTick+0x5c>)
 8001fd6:	681c      	ldr	r4, [r3, #0]
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_InitTick+0x60>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	0019      	movs	r1, r3
 8001fde:	23fa      	movs	r3, #250	; 0xfa
 8001fe0:	0098      	lsls	r0, r3, #2
 8001fe2:	f7fe f8a3 	bl	800012c <__udivsi3>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	0019      	movs	r1, r3
 8001fea:	0020      	movs	r0, r4
 8001fec:	f7fe f89e 	bl	800012c <__udivsi3>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f000 f92f 	bl	8002256 <HAL_SYSTICK_Config>
 8001ff8:	1e03      	subs	r3, r0, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e00f      	b.n	8002020 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d80b      	bhi.n	800201e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	2301      	movs	r3, #1
 800200a:	425b      	negs	r3, r3
 800200c:	2200      	movs	r2, #0
 800200e:	0018      	movs	r0, r3
 8002010:	f000 f8fc 	bl	800220c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_InitTick+0x64>)
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b003      	add	sp, #12
 8002026:	bd90      	pop	{r4, r7, pc}
 8002028:	20000000 	.word	0x20000000
 800202c:	20000008 	.word	0x20000008
 8002030:	20000004 	.word	0x20000004

08002034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_IncTick+0x1c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	001a      	movs	r2, r3
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_IncTick+0x20>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	18d2      	adds	r2, r2, r3
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_IncTick+0x20>)
 8002046:	601a      	str	r2, [r3, #0]
}
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	20000008 	.word	0x20000008
 8002054:	200003d0 	.word	0x200003d0

08002058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  return uwTick;
 800205c:	4b02      	ldr	r3, [pc, #8]	; (8002068 <HAL_GetTick+0x10>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	200003d0 	.word	0x200003d0

0800206c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff fff0 	bl	8002058 <HAL_GetTick>
 8002078:	0003      	movs	r3, r0
 800207a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3301      	adds	r3, #1
 8002084:	d005      	beq.n	8002092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_Delay+0x44>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	001a      	movs	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	189b      	adds	r3, r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	f7ff ffe0 	bl	8002058 <HAL_GetTick>
 8002098:	0002      	movs	r2, r0
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d8f7      	bhi.n	8002094 <HAL_Delay+0x28>
  {
  }
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b004      	add	sp, #16
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	20000008 	.word	0x20000008

080020b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	0002      	movs	r2, r0
 80020bc:	1dfb      	adds	r3, r7, #7
 80020be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020c0:	1dfb      	adds	r3, r7, #7
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b7f      	cmp	r3, #127	; 0x7f
 80020c6:	d809      	bhi.n	80020dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c8:	1dfb      	adds	r3, r7, #7
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	001a      	movs	r2, r3
 80020ce:	231f      	movs	r3, #31
 80020d0:	401a      	ands	r2, r3
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <__NVIC_EnableIRQ+0x30>)
 80020d4:	2101      	movs	r1, #1
 80020d6:	4091      	lsls	r1, r2
 80020d8:	000a      	movs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
  }
}
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	0002      	movs	r2, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	1dfb      	adds	r3, r7, #7
 80020f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b7f      	cmp	r3, #127	; 0x7f
 80020fc:	d828      	bhi.n	8002150 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020fe:	4a2f      	ldr	r2, [pc, #188]	; (80021bc <__NVIC_SetPriority+0xd4>)
 8002100:	1dfb      	adds	r3, r7, #7
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b25b      	sxtb	r3, r3
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	33c0      	adds	r3, #192	; 0xc0
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	589b      	ldr	r3, [r3, r2]
 800210e:	1dfa      	adds	r2, r7, #7
 8002110:	7812      	ldrb	r2, [r2, #0]
 8002112:	0011      	movs	r1, r2
 8002114:	2203      	movs	r2, #3
 8002116:	400a      	ands	r2, r1
 8002118:	00d2      	lsls	r2, r2, #3
 800211a:	21ff      	movs	r1, #255	; 0xff
 800211c:	4091      	lsls	r1, r2
 800211e:	000a      	movs	r2, r1
 8002120:	43d2      	mvns	r2, r2
 8002122:	401a      	ands	r2, r3
 8002124:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	019b      	lsls	r3, r3, #6
 800212a:	22ff      	movs	r2, #255	; 0xff
 800212c:	401a      	ands	r2, r3
 800212e:	1dfb      	adds	r3, r7, #7
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	0018      	movs	r0, r3
 8002134:	2303      	movs	r3, #3
 8002136:	4003      	ands	r3, r0
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800213c:	481f      	ldr	r0, [pc, #124]	; (80021bc <__NVIC_SetPriority+0xd4>)
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b25b      	sxtb	r3, r3
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	430a      	orrs	r2, r1
 8002148:	33c0      	adds	r3, #192	; 0xc0
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800214e:	e031      	b.n	80021b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002150:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <__NVIC_SetPriority+0xd8>)
 8002152:	1dfb      	adds	r3, r7, #7
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	0019      	movs	r1, r3
 8002158:	230f      	movs	r3, #15
 800215a:	400b      	ands	r3, r1
 800215c:	3b08      	subs	r3, #8
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3306      	adds	r3, #6
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	18d3      	adds	r3, r2, r3
 8002166:	3304      	adds	r3, #4
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	1dfa      	adds	r2, r7, #7
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	0011      	movs	r1, r2
 8002170:	2203      	movs	r2, #3
 8002172:	400a      	ands	r2, r1
 8002174:	00d2      	lsls	r2, r2, #3
 8002176:	21ff      	movs	r1, #255	; 0xff
 8002178:	4091      	lsls	r1, r2
 800217a:	000a      	movs	r2, r1
 800217c:	43d2      	mvns	r2, r2
 800217e:	401a      	ands	r2, r3
 8002180:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	019b      	lsls	r3, r3, #6
 8002186:	22ff      	movs	r2, #255	; 0xff
 8002188:	401a      	ands	r2, r3
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	0018      	movs	r0, r3
 8002190:	2303      	movs	r3, #3
 8002192:	4003      	ands	r3, r0
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002198:	4809      	ldr	r0, [pc, #36]	; (80021c0 <__NVIC_SetPriority+0xd8>)
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	001c      	movs	r4, r3
 80021a0:	230f      	movs	r3, #15
 80021a2:	4023      	ands	r3, r4
 80021a4:	3b08      	subs	r3, #8
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	430a      	orrs	r2, r1
 80021aa:	3306      	adds	r3, #6
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	18c3      	adds	r3, r0, r3
 80021b0:	3304      	adds	r3, #4
 80021b2:	601a      	str	r2, [r3, #0]
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b003      	add	sp, #12
 80021ba:	bd90      	pop	{r4, r7, pc}
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	1e5a      	subs	r2, r3, #1
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	045b      	lsls	r3, r3, #17
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d301      	bcc.n	80021dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d8:	2301      	movs	r3, #1
 80021da:	e010      	b.n	80021fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <SysTick_Config+0x44>)
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	3a01      	subs	r2, #1
 80021e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e4:	2301      	movs	r3, #1
 80021e6:	425b      	negs	r3, r3
 80021e8:	2103      	movs	r1, #3
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7ff ff7c 	bl	80020e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <SysTick_Config+0x44>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <SysTick_Config+0x44>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	0018      	movs	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	b002      	add	sp, #8
 8002204:	bd80      	pop	{r7, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	210f      	movs	r1, #15
 8002218:	187b      	adds	r3, r7, r1
 800221a:	1c02      	adds	r2, r0, #0
 800221c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	187b      	adds	r3, r7, r1
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b25b      	sxtb	r3, r3
 8002226:	0011      	movs	r1, r2
 8002228:	0018      	movs	r0, r3
 800222a:	f7ff ff5d 	bl	80020e8 <__NVIC_SetPriority>
}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b004      	add	sp, #16
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	0002      	movs	r2, r0
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b25b      	sxtb	r3, r3
 8002248:	0018      	movs	r0, r3
 800224a:	f7ff ff33 	bl	80020b4 <__NVIC_EnableIRQ>
}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	46bd      	mov	sp, r7
 8002252:	b002      	add	sp, #8
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	0018      	movs	r0, r3
 8002262:	f7ff ffaf 	bl	80021c4 <SysTick_Config>
 8002266:	0003      	movs	r3, r0
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e061      	b.n	8002346 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a32      	ldr	r2, [pc, #200]	; (8002350 <HAL_DMA_Init+0xe0>)
 8002288:	4694      	mov	ip, r2
 800228a:	4463      	add	r3, ip
 800228c:	2114      	movs	r1, #20
 800228e:	0018      	movs	r0, r3
 8002290:	f7fd ff4c 	bl	800012c <__udivsi3>
 8002294:	0003      	movs	r3, r0
 8002296:	009a      	lsls	r2, r3, #2
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a2d      	ldr	r2, [pc, #180]	; (8002354 <HAL_DMA_Init+0xe4>)
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2225      	movs	r2, #37	; 0x25
 80022a6:	2102      	movs	r1, #2
 80022a8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a28      	ldr	r2, [pc, #160]	; (8002358 <HAL_DMA_Init+0xe8>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80022c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	01db      	lsls	r3, r3, #7
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d018      	beq.n	800232e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_DMA_Init+0xec>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	211c      	movs	r1, #28
 8002306:	400b      	ands	r3, r1
 8002308:	210f      	movs	r1, #15
 800230a:	4099      	lsls	r1, r3
 800230c:	000b      	movs	r3, r1
 800230e:	43d9      	mvns	r1, r3
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_DMA_Init+0xec>)
 8002312:	400a      	ands	r2, r1
 8002314:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_DMA_Init+0xec>)
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	201c      	movs	r0, #28
 8002324:	4003      	ands	r3, r0
 8002326:	409a      	lsls	r2, r3
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <HAL_DMA_Init+0xec>)
 800232a:	430a      	orrs	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2225      	movs	r2, #37	; 0x25
 8002338:	2101      	movs	r1, #1
 800233a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2224      	movs	r2, #36	; 0x24
 8002340:	2100      	movs	r1, #0
 8002342:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	0018      	movs	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	b004      	add	sp, #16
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	bffdfff8 	.word	0xbffdfff8
 8002354:	40020000 	.word	0x40020000
 8002358:	ffff800f 	.word	0xffff800f
 800235c:	400200a8 	.word	0x400200a8

08002360 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800236e:	2317      	movs	r3, #23
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2224      	movs	r2, #36	; 0x24
 800237a:	5c9b      	ldrb	r3, [r3, r2]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_DMA_Start_IT+0x24>
 8002380:	2302      	movs	r3, #2
 8002382:	e04f      	b.n	8002424 <HAL_DMA_Start_IT+0xc4>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2224      	movs	r2, #36	; 0x24
 8002388:	2101      	movs	r1, #1
 800238a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2225      	movs	r2, #37	; 0x25
 8002390:	5c9b      	ldrb	r3, [r3, r2]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d13a      	bne.n	800240e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2225      	movs	r2, #37	; 0x25
 800239c:	2102      	movs	r1, #2
 800239e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2101      	movs	r1, #1
 80023b2:	438a      	bics	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f96a 	bl	8002696 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	210e      	movs	r1, #14
 80023d6:	430a      	orrs	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e00f      	b.n	80023fc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2104      	movs	r1, #4
 80023e8:	438a      	bics	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	210a      	movs	r1, #10
 80023f8:	430a      	orrs	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2101      	movs	r1, #1
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	e007      	b.n	800241e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2224      	movs	r2, #36	; 0x24
 8002412:	2100      	movs	r1, #0
 8002414:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002416:	2317      	movs	r3, #23
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	2202      	movs	r2, #2
 800241c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800241e:	2317      	movs	r3, #23
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	781b      	ldrb	r3, [r3, #0]
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b006      	add	sp, #24
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002434:	230f      	movs	r3, #15
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2225      	movs	r2, #37	; 0x25
 8002440:	5c9b      	ldrb	r3, [r3, r2]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d008      	beq.n	800245a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2204      	movs	r2, #4
 800244c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2224      	movs	r2, #36	; 0x24
 8002452:	2100      	movs	r1, #0
 8002454:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e024      	b.n	80024a4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	210e      	movs	r1, #14
 8002466:	438a      	bics	r2, r1
 8002468:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2101      	movs	r1, #1
 8002476:	438a      	bics	r2, r1
 8002478:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	221c      	movs	r2, #28
 8002480:	401a      	ands	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	2101      	movs	r1, #1
 8002488:	4091      	lsls	r1, r2
 800248a:	000a      	movs	r2, r1
 800248c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2225      	movs	r2, #37	; 0x25
 8002492:	2101      	movs	r1, #1
 8002494:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2224      	movs	r2, #36	; 0x24
 800249a:	2100      	movs	r1, #0
 800249c:	5499      	strb	r1, [r3, r2]

    return status;
 800249e:	230f      	movs	r3, #15
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b004      	add	sp, #16
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b4:	210f      	movs	r1, #15
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2225      	movs	r2, #37	; 0x25
 80024c0:	5c9b      	ldrb	r3, [r3, r2]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d006      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2204      	movs	r2, #4
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80024ce:	187b      	adds	r3, r7, r1
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
 80024d4:	e02a      	b.n	800252c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	210e      	movs	r1, #14
 80024e2:	438a      	bics	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2101      	movs	r1, #1
 80024f2:	438a      	bics	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	221c      	movs	r2, #28
 80024fc:	401a      	ands	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	2101      	movs	r1, #1
 8002504:	4091      	lsls	r1, r2
 8002506:	000a      	movs	r2, r1
 8002508:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2225      	movs	r2, #37	; 0x25
 800250e:	2101      	movs	r1, #1
 8002510:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2224      	movs	r2, #36	; 0x24
 8002516:	2100      	movs	r1, #0
 8002518:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	2b00      	cmp	r3, #0
 8002520:	d004      	beq.n	800252c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	0010      	movs	r0, r2
 800252a:	4798      	blx	r3
    }
  }
  return status;
 800252c:	230f      	movs	r3, #15
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	781b      	ldrb	r3, [r3, #0]
}
 8002532:	0018      	movs	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	b004      	add	sp, #16
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	221c      	movs	r2, #28
 8002558:	4013      	ands	r3, r2
 800255a:	2204      	movs	r2, #4
 800255c:	409a      	lsls	r2, r3
 800255e:	0013      	movs	r3, r2
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4013      	ands	r3, r2
 8002564:	d026      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x7a>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2204      	movs	r2, #4
 800256a:	4013      	ands	r3, r2
 800256c:	d022      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2220      	movs	r2, #32
 8002576:	4013      	ands	r3, r2
 8002578:	d107      	bne.n	800258a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2104      	movs	r1, #4
 8002586:	438a      	bics	r2, r1
 8002588:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	221c      	movs	r2, #28
 8002590:	401a      	ands	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	2104      	movs	r1, #4
 8002598:	4091      	lsls	r1, r2
 800259a:	000a      	movs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d100      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x6e>
 80025a6:	e071      	b.n	800268c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	0010      	movs	r0, r2
 80025b0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80025b2:	e06b      	b.n	800268c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	221c      	movs	r2, #28
 80025ba:	4013      	ands	r3, r2
 80025bc:	2202      	movs	r2, #2
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4013      	ands	r3, r2
 80025c6:	d02d      	beq.n	8002624 <HAL_DMA_IRQHandler+0xea>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2202      	movs	r2, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d029      	beq.n	8002624 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2220      	movs	r2, #32
 80025d8:	4013      	ands	r3, r2
 80025da:	d10b      	bne.n	80025f4 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	210a      	movs	r1, #10
 80025e8:	438a      	bics	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2225      	movs	r2, #37	; 0x25
 80025f0:	2101      	movs	r1, #1
 80025f2:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	221c      	movs	r2, #28
 80025fa:	401a      	ands	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	2102      	movs	r1, #2
 8002602:	4091      	lsls	r1, r2
 8002604:	000a      	movs	r2, r1
 8002606:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2224      	movs	r2, #36	; 0x24
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d039      	beq.n	800268c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	0010      	movs	r0, r2
 8002620:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002622:	e033      	b.n	800268c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	221c      	movs	r2, #28
 800262a:	4013      	ands	r3, r2
 800262c:	2208      	movs	r2, #8
 800262e:	409a      	lsls	r2, r3
 8002630:	0013      	movs	r3, r2
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4013      	ands	r3, r2
 8002636:	d02a      	beq.n	800268e <HAL_DMA_IRQHandler+0x154>
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2208      	movs	r2, #8
 800263c:	4013      	ands	r3, r2
 800263e:	d026      	beq.n	800268e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	210e      	movs	r1, #14
 800264c:	438a      	bics	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	221c      	movs	r2, #28
 8002656:	401a      	ands	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	2101      	movs	r1, #1
 800265e:	4091      	lsls	r1, r2
 8002660:	000a      	movs	r2, r1
 8002662:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2225      	movs	r2, #37	; 0x25
 800266e:	2101      	movs	r1, #1
 8002670:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2224      	movs	r2, #36	; 0x24
 8002676:	2100      	movs	r1, #0
 8002678:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	0010      	movs	r0, r2
 800268a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46c0      	nop			; (mov r8, r8)
}
 8002690:	46bd      	mov	sp, r7
 8002692:	b004      	add	sp, #16
 8002694:	bd80      	pop	{r7, pc}

08002696 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	221c      	movs	r2, #28
 80026aa:	401a      	ands	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	2101      	movs	r1, #1
 80026b2:	4091      	lsls	r1, r2
 80026b4:	000a      	movs	r2, r1
 80026b6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d108      	bne.n	80026da <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026d8:	e007      	b.n	80026ea <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	60da      	str	r2, [r3, #12]
}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b004      	add	sp, #16
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800270a:	e149      	b.n	80029a0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2101      	movs	r1, #1
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4091      	lsls	r1, r2
 8002716:	000a      	movs	r2, r1
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d100      	bne.n	8002724 <HAL_GPIO_Init+0x30>
 8002722:	e13a      	b.n	800299a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2203      	movs	r2, #3
 800272a:	4013      	ands	r3, r2
 800272c:	2b01      	cmp	r3, #1
 800272e:	d005      	beq.n	800273c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2203      	movs	r2, #3
 8002736:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002738:	2b02      	cmp	r3, #2
 800273a:	d130      	bne.n	800279e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	409a      	lsls	r2, r3
 800274a:	0013      	movs	r3, r2
 800274c:	43da      	mvns	r2, r3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	409a      	lsls	r2, r3
 800275e:	0013      	movs	r3, r2
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002772:	2201      	movs	r2, #1
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
 8002778:	0013      	movs	r3, r2
 800277a:	43da      	mvns	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	2201      	movs	r2, #1
 800278a:	401a      	ands	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	409a      	lsls	r2, r3
 8002790:	0013      	movs	r3, r2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2203      	movs	r2, #3
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d017      	beq.n	80027da <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	409a      	lsls	r2, r3
 80027b8:	0013      	movs	r3, r2
 80027ba:	43da      	mvns	r2, r3
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	409a      	lsls	r2, r3
 80027cc:	0013      	movs	r3, r2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2203      	movs	r2, #3
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d123      	bne.n	800282e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	08da      	lsrs	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3208      	adds	r2, #8
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	58d3      	ldr	r3, [r2, r3]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2207      	movs	r2, #7
 80027f8:	4013      	ands	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	220f      	movs	r2, #15
 80027fe:	409a      	lsls	r2, r3
 8002800:	0013      	movs	r3, r2
 8002802:	43da      	mvns	r2, r3
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2107      	movs	r1, #7
 8002812:	400b      	ands	r3, r1
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	409a      	lsls	r2, r3
 8002818:	0013      	movs	r3, r2
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	08da      	lsrs	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3208      	adds	r2, #8
 8002828:	0092      	lsls	r2, r2, #2
 800282a:	6939      	ldr	r1, [r7, #16]
 800282c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	2203      	movs	r2, #3
 800283a:	409a      	lsls	r2, r3
 800283c:	0013      	movs	r3, r2
 800283e:	43da      	mvns	r2, r3
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2203      	movs	r2, #3
 800284c:	401a      	ands	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	409a      	lsls	r2, r3
 8002854:	0013      	movs	r3, r2
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	23c0      	movs	r3, #192	; 0xc0
 8002868:	029b      	lsls	r3, r3, #10
 800286a:	4013      	ands	r3, r2
 800286c:	d100      	bne.n	8002870 <HAL_GPIO_Init+0x17c>
 800286e:	e094      	b.n	800299a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002870:	4b51      	ldr	r3, [pc, #324]	; (80029b8 <HAL_GPIO_Init+0x2c4>)
 8002872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002874:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <HAL_GPIO_Init+0x2c4>)
 8002876:	2101      	movs	r1, #1
 8002878:	430a      	orrs	r2, r1
 800287a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800287c:	4a4f      	ldr	r2, [pc, #316]	; (80029bc <HAL_GPIO_Init+0x2c8>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3302      	adds	r3, #2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	589b      	ldr	r3, [r3, r2]
 8002888:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2203      	movs	r2, #3
 800288e:	4013      	ands	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	220f      	movs	r2, #15
 8002894:	409a      	lsls	r2, r3
 8002896:	0013      	movs	r3, r2
 8002898:	43da      	mvns	r2, r3
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	23a0      	movs	r3, #160	; 0xa0
 80028a4:	05db      	lsls	r3, r3, #23
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d013      	beq.n	80028d2 <HAL_GPIO_Init+0x1de>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a44      	ldr	r2, [pc, #272]	; (80029c0 <HAL_GPIO_Init+0x2cc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00d      	beq.n	80028ce <HAL_GPIO_Init+0x1da>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a43      	ldr	r2, [pc, #268]	; (80029c4 <HAL_GPIO_Init+0x2d0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d007      	beq.n	80028ca <HAL_GPIO_Init+0x1d6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a42      	ldr	r2, [pc, #264]	; (80029c8 <HAL_GPIO_Init+0x2d4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_GPIO_Init+0x1d2>
 80028c2:	2305      	movs	r3, #5
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x1e0>
 80028c6:	2306      	movs	r3, #6
 80028c8:	e004      	b.n	80028d4 <HAL_GPIO_Init+0x1e0>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_Init+0x1e0>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_GPIO_Init+0x1e0>
 80028d2:	2300      	movs	r3, #0
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	2103      	movs	r1, #3
 80028d8:	400a      	ands	r2, r1
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	4093      	lsls	r3, r2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e4:	4935      	ldr	r1, [pc, #212]	; (80029bc <HAL_GPIO_Init+0x2c8>)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f2:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_GPIO_Init+0x2d8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	43da      	mvns	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	025b      	lsls	r3, r3, #9
 800290a:	4013      	ands	r3, r2
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002916:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_GPIO_Init+0x2d8>)
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800291c:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <HAL_GPIO_Init+0x2d8>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	43da      	mvns	r2, r3
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	029b      	lsls	r3, r3, #10
 8002934:	4013      	ands	r3, r2
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002940:	4b22      	ldr	r3, [pc, #136]	; (80029cc <HAL_GPIO_Init+0x2d8>)
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002946:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_GPIO_Init+0x2d8>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	43da      	mvns	r2, r3
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	035b      	lsls	r3, r3, #13
 800295e:	4013      	ands	r3, r2
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800296a:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_GPIO_Init+0x2d8>)
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002970:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_GPIO_Init+0x2d8>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43da      	mvns	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	039b      	lsls	r3, r3, #14
 8002988:	4013      	ands	r3, r2
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002994:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_GPIO_Init+0x2d8>)
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	3301      	adds	r3, #1
 800299e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	40da      	lsrs	r2, r3
 80029a8:	1e13      	subs	r3, r2, #0
 80029aa:	d000      	beq.n	80029ae <HAL_GPIO_Init+0x2ba>
 80029ac:	e6ae      	b.n	800270c <HAL_GPIO_Init+0x18>
  }
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	46c0      	nop			; (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b006      	add	sp, #24
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40010000 	.word	0x40010000
 80029c0:	50000400 	.word	0x50000400
 80029c4:	50000800 	.word	0x50000800
 80029c8:	50001c00 	.word	0x50001c00
 80029cc:	40010400 	.word	0x40010400

080029d0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	000a      	movs	r2, r1
 80029da:	1cbb      	adds	r3, r7, #2
 80029dc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	1cba      	adds	r2, r7, #2
 80029e4:	8812      	ldrh	r2, [r2, #0]
 80029e6:	4013      	ands	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80029ea:	230f      	movs	r3, #15
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	2201      	movs	r2, #1
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e003      	b.n	80029fc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029f4:	230f      	movs	r3, #15
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80029fc:	230f      	movs	r3, #15
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	781b      	ldrb	r3, [r3, #0]
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b004      	add	sp, #16
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	0008      	movs	r0, r1
 8002a14:	0011      	movs	r1, r2
 8002a16:	1cbb      	adds	r3, r7, #2
 8002a18:	1c02      	adds	r2, r0, #0
 8002a1a:	801a      	strh	r2, [r3, #0]
 8002a1c:	1c7b      	adds	r3, r7, #1
 8002a1e:	1c0a      	adds	r2, r1, #0
 8002a20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a22:	1c7b      	adds	r3, r7, #1
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d004      	beq.n	8002a34 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a2a:	1cbb      	adds	r3, r7, #2
 8002a2c:	881a      	ldrh	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002a32:	e003      	b.n	8002a3c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002a34:	1cbb      	adds	r3, r7, #2
 8002a36:	881a      	ldrh	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	000a      	movs	r2, r1
 8002a4e:	1cbb      	adds	r3, r7, #2
 8002a50:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a58:	1cbb      	adds	r3, r7, #2
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	041a      	lsls	r2, r3, #16
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	1cb9      	adds	r1, r7, #2
 8002a68:	8809      	ldrh	r1, [r1, #0]
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	619a      	str	r2, [r3, #24]
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e082      	b.n	8002b94 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2241      	movs	r2, #65	; 0x41
 8002a92:	5c9b      	ldrb	r3, [r3, r2]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d107      	bne.n	8002aaa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2240      	movs	r2, #64	; 0x40
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7fe fed7 	bl	8001858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2241      	movs	r2, #65	; 0x41
 8002aae:	2124      	movs	r1, #36	; 0x24
 8002ab0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2101      	movs	r1, #1
 8002abe:	438a      	bics	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4934      	ldr	r1, [pc, #208]	; (8002b9c <HAL_I2C_Init+0x120>)
 8002acc:	400a      	ands	r2, r1
 8002ace:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4931      	ldr	r1, [pc, #196]	; (8002ba0 <HAL_I2C_Init+0x124>)
 8002adc:	400a      	ands	r2, r1
 8002ade:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d108      	bne.n	8002afa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2180      	movs	r1, #128	; 0x80
 8002af2:	0209      	lsls	r1, r1, #8
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	e007      	b.n	8002b0a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2184      	movs	r1, #132	; 0x84
 8002b04:	0209      	lsls	r1, r1, #8
 8002b06:	430a      	orrs	r2, r1
 8002b08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d104      	bne.n	8002b1c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	491f      	ldr	r1, [pc, #124]	; (8002ba4 <HAL_I2C_Init+0x128>)
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	491a      	ldr	r1, [pc, #104]	; (8002ba0 <HAL_I2C_Init+0x124>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69d9      	ldr	r1, [r3, #28]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1a      	ldr	r2, [r3, #32]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2101      	movs	r1, #1
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2241      	movs	r2, #65	; 0x41
 8002b80:	2120      	movs	r1, #32
 8002b82:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2242      	movs	r2, #66	; 0x42
 8002b8e:	2100      	movs	r1, #0
 8002b90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	f0ffffff 	.word	0xf0ffffff
 8002ba0:	ffff7fff 	.word	0xffff7fff
 8002ba4:	02008000 	.word	0x02008000

08002ba8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	000c      	movs	r4, r1
 8002bb2:	0010      	movs	r0, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	230a      	movs	r3, #10
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	1c22      	adds	r2, r4, #0
 8002bbc:	801a      	strh	r2, [r3, #0]
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	1c02      	adds	r2, r0, #0
 8002bc4:	801a      	strh	r2, [r3, #0]
 8002bc6:	1dbb      	adds	r3, r7, #6
 8002bc8:	1c0a      	adds	r2, r1, #0
 8002bca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2241      	movs	r2, #65	; 0x41
 8002bd0:	5c9b      	ldrb	r3, [r3, r2]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d000      	beq.n	8002bda <HAL_I2C_Mem_Write+0x32>
 8002bd8:	e10c      	b.n	8002df4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d004      	beq.n	8002bea <HAL_I2C_Mem_Write+0x42>
 8002be0:	232c      	movs	r3, #44	; 0x2c
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2280      	movs	r2, #128	; 0x80
 8002bee:	0092      	lsls	r2, r2, #2
 8002bf0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0ff      	b.n	8002df6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2240      	movs	r2, #64	; 0x40
 8002bfa:	5c9b      	ldrb	r3, [r3, r2]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_I2C_Mem_Write+0x5c>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e0f8      	b.n	8002df6 <HAL_I2C_Mem_Write+0x24e>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	2101      	movs	r1, #1
 8002c0a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c0c:	f7ff fa24 	bl	8002058 <HAL_GetTick>
 8002c10:	0003      	movs	r3, r0
 8002c12:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	0219      	lsls	r1, r3, #8
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	2319      	movs	r3, #25
 8002c20:	2201      	movs	r2, #1
 8002c22:	f000 fb0b 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002c26:	1e03      	subs	r3, r0, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0e3      	b.n	8002df6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2241      	movs	r2, #65	; 0x41
 8002c32:	2121      	movs	r1, #33	; 0x21
 8002c34:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2242      	movs	r2, #66	; 0x42
 8002c3a:	2140      	movs	r1, #64	; 0x40
 8002c3c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	222c      	movs	r2, #44	; 0x2c
 8002c4e:	18ba      	adds	r2, r7, r2
 8002c50:	8812      	ldrh	r2, [r2, #0]
 8002c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c5a:	1dbb      	adds	r3, r7, #6
 8002c5c:	881c      	ldrh	r4, [r3, #0]
 8002c5e:	2308      	movs	r3, #8
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	881a      	ldrh	r2, [r3, #0]
 8002c64:	230a      	movs	r3, #10
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	8819      	ldrh	r1, [r3, #0]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	0023      	movs	r3, r4
 8002c76:	f000 f9f9 	bl	800306c <I2C_RequestMemoryWrite>
 8002c7a:	1e03      	subs	r3, r0, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2240      	movs	r2, #64	; 0x40
 8002c82:	2100      	movs	r1, #0
 8002c84:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0b5      	b.n	8002df6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2bff      	cmp	r3, #255	; 0xff
 8002c92:	d911      	bls.n	8002cb8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	22ff      	movs	r2, #255	; 0xff
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	045c      	lsls	r4, r3, #17
 8002ca4:	230a      	movs	r3, #10
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	8819      	ldrh	r1, [r3, #0]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	2300      	movs	r3, #0
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	0023      	movs	r3, r4
 8002cb2:	f000 fbf7 	bl	80034a4 <I2C_TransferConfig>
 8002cb6:	e012      	b.n	8002cde <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	049c      	lsls	r4, r3, #18
 8002ccc:	230a      	movs	r3, #10
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	8819      	ldrh	r1, [r3, #0]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	0023      	movs	r3, r4
 8002cda:	f000 fbe3 	bl	80034a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 fae8 	bl	80032ba <I2C_WaitOnTXISFlagUntilTimeout>
 8002cea:	1e03      	subs	r3, r0, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e081      	b.n	8002df6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d03a      	beq.n	8002da2 <HAL_I2C_Mem_Write+0x1fa>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d136      	bne.n	8002da2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	0013      	movs	r3, r2
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2180      	movs	r1, #128	; 0x80
 8002d42:	f000 fa7b 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002d46:	1e03      	subs	r3, r0, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e053      	b.n	8002df6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2bff      	cmp	r3, #255	; 0xff
 8002d56:	d911      	bls.n	8002d7c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	22ff      	movs	r2, #255	; 0xff
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	045c      	lsls	r4, r3, #17
 8002d68:	230a      	movs	r3, #10
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	8819      	ldrh	r1, [r3, #0]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	2300      	movs	r3, #0
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	0023      	movs	r3, r4
 8002d76:	f000 fb95 	bl	80034a4 <I2C_TransferConfig>
 8002d7a:	e012      	b.n	8002da2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	049c      	lsls	r4, r3, #18
 8002d90:	230a      	movs	r3, #10
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	8819      	ldrh	r1, [r3, #0]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	0023      	movs	r3, r4
 8002d9e:	f000 fb81 	bl	80034a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d198      	bne.n	8002cde <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 fac0 	bl	8003338 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002db8:	1e03      	subs	r3, r0, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e01a      	b.n	8002df6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	490b      	ldr	r1, [pc, #44]	; (8002e00 <HAL_I2C_Mem_Write+0x258>)
 8002dd4:	400a      	ands	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2241      	movs	r2, #65	; 0x41
 8002ddc:	2120      	movs	r1, #32
 8002dde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2242      	movs	r2, #66	; 0x42
 8002de4:	2100      	movs	r1, #0
 8002de6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2240      	movs	r2, #64	; 0x40
 8002dec:	2100      	movs	r1, #0
 8002dee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b007      	add	sp, #28
 8002dfc:	bd90      	pop	{r4, r7, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	fe00e800 	.word	0xfe00e800

08002e04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b089      	sub	sp, #36	; 0x24
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	000c      	movs	r4, r1
 8002e0e:	0010      	movs	r0, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	230a      	movs	r3, #10
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	1c22      	adds	r2, r4, #0
 8002e18:	801a      	strh	r2, [r3, #0]
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	1c02      	adds	r2, r0, #0
 8002e20:	801a      	strh	r2, [r3, #0]
 8002e22:	1dbb      	adds	r3, r7, #6
 8002e24:	1c0a      	adds	r2, r1, #0
 8002e26:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2241      	movs	r2, #65	; 0x41
 8002e2c:	5c9b      	ldrb	r3, [r3, r2]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d000      	beq.n	8002e36 <HAL_I2C_Mem_Read+0x32>
 8002e34:	e110      	b.n	8003058 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d004      	beq.n	8002e46 <HAL_I2C_Mem_Read+0x42>
 8002e3c:	232c      	movs	r3, #44	; 0x2c
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	0092      	lsls	r2, r2, #2
 8002e4c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e103      	b.n	800305a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2240      	movs	r2, #64	; 0x40
 8002e56:	5c9b      	ldrb	r3, [r3, r2]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2C_Mem_Read+0x5c>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e0fc      	b.n	800305a <HAL_I2C_Mem_Read+0x256>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2240      	movs	r2, #64	; 0x40
 8002e64:	2101      	movs	r1, #1
 8002e66:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e68:	f7ff f8f6 	bl	8002058 <HAL_GetTick>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	0219      	lsls	r1, r3, #8
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	2319      	movs	r3, #25
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f000 f9dd 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002e82:	1e03      	subs	r3, r0, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0e7      	b.n	800305a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2241      	movs	r2, #65	; 0x41
 8002e8e:	2122      	movs	r1, #34	; 0x22
 8002e90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2242      	movs	r2, #66	; 0x42
 8002e96:	2140      	movs	r1, #64	; 0x40
 8002e98:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	222c      	movs	r2, #44	; 0x2c
 8002eaa:	18ba      	adds	r2, r7, r2
 8002eac:	8812      	ldrh	r2, [r2, #0]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eb6:	1dbb      	adds	r3, r7, #6
 8002eb8:	881c      	ldrh	r4, [r3, #0]
 8002eba:	2308      	movs	r3, #8
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	881a      	ldrh	r2, [r3, #0]
 8002ec0:	230a      	movs	r3, #10
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	8819      	ldrh	r1, [r3, #0]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	0023      	movs	r3, r4
 8002ed2:	f000 f92f 	bl	8003134 <I2C_RequestMemoryRead>
 8002ed6:	1e03      	subs	r3, r0, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2240      	movs	r2, #64	; 0x40
 8002ede:	2100      	movs	r1, #0
 8002ee0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0b9      	b.n	800305a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2bff      	cmp	r3, #255	; 0xff
 8002eee:	d911      	bls.n	8002f14 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	22ff      	movs	r2, #255	; 0xff
 8002ef4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	045c      	lsls	r4, r3, #17
 8002f00:	230a      	movs	r3, #10
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	8819      	ldrh	r1, [r3, #0]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	4b56      	ldr	r3, [pc, #344]	; (8003064 <HAL_I2C_Mem_Read+0x260>)
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	0023      	movs	r3, r4
 8002f0e:	f000 fac9 	bl	80034a4 <I2C_TransferConfig>
 8002f12:	e012      	b.n	8002f3a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	049c      	lsls	r4, r3, #18
 8002f28:	230a      	movs	r3, #10
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	8819      	ldrh	r1, [r3, #0]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	4b4c      	ldr	r3, [pc, #304]	; (8003064 <HAL_I2C_Mem_Read+0x260>)
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	0023      	movs	r3, r4
 8002f36:	f000 fab5 	bl	80034a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	0013      	movs	r3, r2
 8002f44:	2200      	movs	r2, #0
 8002f46:	2104      	movs	r1, #4
 8002f48:	f000 f978 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002f4c:	1e03      	subs	r3, r0, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e082      	b.n	800305a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d03a      	beq.n	8003006 <HAL_I2C_Mem_Read+0x202>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d136      	bne.n	8003006 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	0013      	movs	r3, r2
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2180      	movs	r1, #128	; 0x80
 8002fa6:	f000 f949 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 8002faa:	1e03      	subs	r3, r0, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e053      	b.n	800305a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2bff      	cmp	r3, #255	; 0xff
 8002fba:	d911      	bls.n	8002fe0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	22ff      	movs	r2, #255	; 0xff
 8002fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	045c      	lsls	r4, r3, #17
 8002fcc:	230a      	movs	r3, #10
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	8819      	ldrh	r1, [r3, #0]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	0023      	movs	r3, r4
 8002fda:	f000 fa63 	bl	80034a4 <I2C_TransferConfig>
 8002fde:	e012      	b.n	8003006 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	049c      	lsls	r4, r3, #18
 8002ff4:	230a      	movs	r3, #10
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	8819      	ldrh	r1, [r3, #0]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	0023      	movs	r3, r4
 8003002:	f000 fa4f 	bl	80034a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d194      	bne.n	8002f3a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f98e 	bl	8003338 <I2C_WaitOnSTOPFlagUntilTimeout>
 800301c:	1e03      	subs	r3, r0, #0
 800301e:	d001      	beq.n	8003024 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e01a      	b.n	800305a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2220      	movs	r2, #32
 800302a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	490c      	ldr	r1, [pc, #48]	; (8003068 <HAL_I2C_Mem_Read+0x264>)
 8003038:	400a      	ands	r2, r1
 800303a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2241      	movs	r2, #65	; 0x41
 8003040:	2120      	movs	r1, #32
 8003042:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2242      	movs	r2, #66	; 0x42
 8003048:	2100      	movs	r1, #0
 800304a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2240      	movs	r2, #64	; 0x40
 8003050:	2100      	movs	r1, #0
 8003052:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e000      	b.n	800305a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003058:	2302      	movs	r3, #2
  }
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b007      	add	sp, #28
 8003060:	bd90      	pop	{r4, r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	80002400 	.word	0x80002400
 8003068:	fe00e800 	.word	0xfe00e800

0800306c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800306c:	b5b0      	push	{r4, r5, r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	000c      	movs	r4, r1
 8003076:	0010      	movs	r0, r2
 8003078:	0019      	movs	r1, r3
 800307a:	250a      	movs	r5, #10
 800307c:	197b      	adds	r3, r7, r5
 800307e:	1c22      	adds	r2, r4, #0
 8003080:	801a      	strh	r2, [r3, #0]
 8003082:	2308      	movs	r3, #8
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	1c02      	adds	r2, r0, #0
 8003088:	801a      	strh	r2, [r3, #0]
 800308a:	1dbb      	adds	r3, r7, #6
 800308c:	1c0a      	adds	r2, r1, #0
 800308e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003090:	1dbb      	adds	r3, r7, #6
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	045c      	lsls	r4, r3, #17
 800309a:	197b      	adds	r3, r7, r5
 800309c:	8819      	ldrh	r1, [r3, #0]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	4b23      	ldr	r3, [pc, #140]	; (8003130 <I2C_RequestMemoryWrite+0xc4>)
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	0023      	movs	r3, r4
 80030a6:	f000 f9fd 	bl	80034a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	6a39      	ldr	r1, [r7, #32]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f000 f902 	bl	80032ba <I2C_WaitOnTXISFlagUntilTimeout>
 80030b6:	1e03      	subs	r3, r0, #0
 80030b8:	d001      	beq.n	80030be <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e033      	b.n	8003126 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030be:	1dbb      	adds	r3, r7, #6
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d107      	bne.n	80030d6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030c6:	2308      	movs	r3, #8
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28
 80030d4:	e019      	b.n	800310a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030d6:	2308      	movs	r3, #8
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	b29b      	uxth	r3, r3
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ea:	6a39      	ldr	r1, [r7, #32]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	0018      	movs	r0, r3
 80030f0:	f000 f8e3 	bl	80032ba <I2C_WaitOnTXISFlagUntilTimeout>
 80030f4:	1e03      	subs	r3, r0, #0
 80030f6:	d001      	beq.n	80030fc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e014      	b.n	8003126 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030fc:	2308      	movs	r3, #8
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800310a:	6a3a      	ldr	r2, [r7, #32]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	0013      	movs	r3, r2
 8003114:	2200      	movs	r2, #0
 8003116:	2180      	movs	r1, #128	; 0x80
 8003118:	f000 f890 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 800311c:	1e03      	subs	r3, r0, #0
 800311e:	d001      	beq.n	8003124 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	0018      	movs	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	b004      	add	sp, #16
 800312c:	bdb0      	pop	{r4, r5, r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	80002000 	.word	0x80002000

08003134 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003134:	b5b0      	push	{r4, r5, r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	000c      	movs	r4, r1
 800313e:	0010      	movs	r0, r2
 8003140:	0019      	movs	r1, r3
 8003142:	250a      	movs	r5, #10
 8003144:	197b      	adds	r3, r7, r5
 8003146:	1c22      	adds	r2, r4, #0
 8003148:	801a      	strh	r2, [r3, #0]
 800314a:	2308      	movs	r3, #8
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	1c02      	adds	r2, r0, #0
 8003150:	801a      	strh	r2, [r3, #0]
 8003152:	1dbb      	adds	r3, r7, #6
 8003154:	1c0a      	adds	r2, r1, #0
 8003156:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003158:	1dbb      	adds	r3, r7, #6
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	197b      	adds	r3, r7, r5
 8003160:	8819      	ldrh	r1, [r3, #0]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <I2C_RequestMemoryRead+0xc0>)
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2300      	movs	r3, #0
 800316a:	f000 f99b 	bl	80034a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800316e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003170:	6a39      	ldr	r1, [r7, #32]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	0018      	movs	r0, r3
 8003176:	f000 f8a0 	bl	80032ba <I2C_WaitOnTXISFlagUntilTimeout>
 800317a:	1e03      	subs	r3, r0, #0
 800317c:	d001      	beq.n	8003182 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e033      	b.n	80031ea <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003182:	1dbb      	adds	r3, r7, #6
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d107      	bne.n	800319a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800318a:	2308      	movs	r3, #8
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
 8003198:	e019      	b.n	80031ce <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800319a:	2308      	movs	r3, #8
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ae:	6a39      	ldr	r1, [r7, #32]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	0018      	movs	r0, r3
 80031b4:	f000 f881 	bl	80032ba <I2C_WaitOnTXISFlagUntilTimeout>
 80031b8:	1e03      	subs	r3, r0, #0
 80031ba:	d001      	beq.n	80031c0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e014      	b.n	80031ea <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031c0:	2308      	movs	r3, #8
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031ce:	6a3a      	ldr	r2, [r7, #32]
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	0013      	movs	r3, r2
 80031d8:	2200      	movs	r2, #0
 80031da:	2140      	movs	r1, #64	; 0x40
 80031dc:	f000 f82e 	bl	800323c <I2C_WaitOnFlagUntilTimeout>
 80031e0:	1e03      	subs	r3, r0, #0
 80031e2:	d001      	beq.n	80031e8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b004      	add	sp, #16
 80031f0:	bdb0      	pop	{r4, r5, r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	80002000 	.word	0x80002000

080031f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2202      	movs	r2, #2
 8003208:	4013      	ands	r3, r2
 800320a:	2b02      	cmp	r3, #2
 800320c:	d103      	bne.n	8003216 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2200      	movs	r2, #0
 8003214:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2201      	movs	r2, #1
 800321e:	4013      	ands	r3, r2
 8003220:	2b01      	cmp	r3, #1
 8003222:	d007      	beq.n	8003234 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2101      	movs	r1, #1
 8003230:	430a      	orrs	r2, r1
 8003232:	619a      	str	r2, [r3, #24]
  }
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	1dfb      	adds	r3, r7, #7
 800324a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800324c:	e021      	b.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	3301      	adds	r3, #1
 8003252:	d01e      	beq.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003254:	f7fe ff00 	bl	8002058 <HAL_GetTick>
 8003258:	0002      	movs	r2, r0
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d302      	bcc.n	800326a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d113      	bne.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	2220      	movs	r2, #32
 8003270:	431a      	orrs	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2241      	movs	r2, #65	; 0x41
 800327a:	2120      	movs	r1, #32
 800327c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2242      	movs	r2, #66	; 0x42
 8003282:	2100      	movs	r1, #0
 8003284:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2240      	movs	r2, #64	; 0x40
 800328a:	2100      	movs	r1, #0
 800328c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e00f      	b.n	80032b2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	425a      	negs	r2, r3
 80032a2:	4153      	adcs	r3, r2
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	001a      	movs	r2, r3
 80032a8:	1dfb      	adds	r3, r7, #7
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d0ce      	beq.n	800324e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	0018      	movs	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b004      	add	sp, #16
 80032b8:	bd80      	pop	{r7, pc}

080032ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032c6:	e02b      	b.n	8003320 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 f86e 	bl	80033b0 <I2C_IsAcknowledgeFailed>
 80032d4:	1e03      	subs	r3, r0, #0
 80032d6:	d001      	beq.n	80032dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e029      	b.n	8003330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	3301      	adds	r3, #1
 80032e0:	d01e      	beq.n	8003320 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e2:	f7fe feb9 	bl	8002058 <HAL_GetTick>
 80032e6:	0002      	movs	r2, r0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d302      	bcc.n	80032f8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d113      	bne.n	8003320 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	2220      	movs	r2, #32
 80032fe:	431a      	orrs	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2241      	movs	r2, #65	; 0x41
 8003308:	2120      	movs	r1, #32
 800330a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2242      	movs	r2, #66	; 0x42
 8003310:	2100      	movs	r1, #0
 8003312:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2240      	movs	r2, #64	; 0x40
 8003318:	2100      	movs	r1, #0
 800331a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e007      	b.n	8003330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2202      	movs	r2, #2
 8003328:	4013      	ands	r3, r2
 800332a:	2b02      	cmp	r3, #2
 800332c:	d1cc      	bne.n	80032c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b004      	add	sp, #16
 8003336:	bd80      	pop	{r7, pc}

08003338 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003344:	e028      	b.n	8003398 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	0018      	movs	r0, r3
 800334e:	f000 f82f 	bl	80033b0 <I2C_IsAcknowledgeFailed>
 8003352:	1e03      	subs	r3, r0, #0
 8003354:	d001      	beq.n	800335a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e026      	b.n	80033a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335a:	f7fe fe7d 	bl	8002058 <HAL_GetTick>
 800335e:	0002      	movs	r2, r0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	429a      	cmp	r2, r3
 8003368:	d302      	bcc.n	8003370 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d113      	bne.n	8003398 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	2220      	movs	r2, #32
 8003376:	431a      	orrs	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2241      	movs	r2, #65	; 0x41
 8003380:	2120      	movs	r1, #32
 8003382:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2242      	movs	r2, #66	; 0x42
 8003388:	2100      	movs	r1, #0
 800338a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2240      	movs	r2, #64	; 0x40
 8003390:	2100      	movs	r1, #0
 8003392:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e007      	b.n	80033a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2220      	movs	r2, #32
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d1cf      	bne.n	8003346 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b004      	add	sp, #16
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2210      	movs	r2, #16
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d164      	bne.n	8003494 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	049b      	lsls	r3, r3, #18
 80033d4:	401a      	ands	r2, r3
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	049b      	lsls	r3, r3, #18
 80033da:	429a      	cmp	r2, r3
 80033dc:	d02b      	beq.n	8003436 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	01c9      	lsls	r1, r1, #7
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033f0:	e021      	b.n	8003436 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3301      	adds	r3, #1
 80033f6:	d01e      	beq.n	8003436 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f8:	f7fe fe2e 	bl	8002058 <HAL_GetTick>
 80033fc:	0002      	movs	r2, r0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	429a      	cmp	r2, r3
 8003406:	d302      	bcc.n	800340e <I2C_IsAcknowledgeFailed+0x5e>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d113      	bne.n	8003436 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	2220      	movs	r2, #32
 8003414:	431a      	orrs	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2241      	movs	r2, #65	; 0x41
 800341e:	2120      	movs	r1, #32
 8003420:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2242      	movs	r2, #66	; 0x42
 8003426:	2100      	movs	r1, #0
 8003428:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2240      	movs	r2, #64	; 0x40
 800342e:	2100      	movs	r1, #0
 8003430:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e02f      	b.n	8003496 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2220      	movs	r2, #32
 800343e:	4013      	ands	r3, r2
 8003440:	2b20      	cmp	r3, #32
 8003442:	d1d6      	bne.n	80033f2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2210      	movs	r2, #16
 800344a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2220      	movs	r2, #32
 8003452:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff fece 	bl	80031f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	490e      	ldr	r1, [pc, #56]	; (80034a0 <I2C_IsAcknowledgeFailed+0xf0>)
 8003468:	400a      	ands	r2, r1
 800346a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	2204      	movs	r2, #4
 8003472:	431a      	orrs	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2241      	movs	r2, #65	; 0x41
 800347c:	2120      	movs	r1, #32
 800347e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2242      	movs	r2, #66	; 0x42
 8003484:	2100      	movs	r1, #0
 8003486:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2240      	movs	r2, #64	; 0x40
 800348c:	2100      	movs	r1, #0
 800348e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	0018      	movs	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	b004      	add	sp, #16
 800349c:	bd80      	pop	{r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	fe00e800 	.word	0xfe00e800

080034a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	0008      	movs	r0, r1
 80034ae:	0011      	movs	r1, r2
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	240a      	movs	r4, #10
 80034b4:	193b      	adds	r3, r7, r4
 80034b6:	1c02      	adds	r2, r0, #0
 80034b8:	801a      	strh	r2, [r3, #0]
 80034ba:	2009      	movs	r0, #9
 80034bc:	183b      	adds	r3, r7, r0
 80034be:	1c0a      	adds	r2, r1, #0
 80034c0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	0d51      	lsrs	r1, r2, #21
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	00d2      	lsls	r2, r2, #3
 80034d0:	400a      	ands	r2, r1
 80034d2:	490e      	ldr	r1, [pc, #56]	; (800350c <I2C_TransferConfig+0x68>)
 80034d4:	430a      	orrs	r2, r1
 80034d6:	43d2      	mvns	r2, r2
 80034d8:	401a      	ands	r2, r3
 80034da:	0011      	movs	r1, r2
 80034dc:	193b      	adds	r3, r7, r4
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	059b      	lsls	r3, r3, #22
 80034e2:	0d9a      	lsrs	r2, r3, #22
 80034e4:	183b      	adds	r3, r7, r0
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	0418      	lsls	r0, r3, #16
 80034ea:	23ff      	movs	r3, #255	; 0xff
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	4003      	ands	r3, r0
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	431a      	orrs	r2, r3
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	431a      	orrs	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	46bd      	mov	sp, r7
 8003506:	b005      	add	sp, #20
 8003508:	bd90      	pop	{r4, r7, pc}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	03ff63ff 	.word	0x03ff63ff

08003510 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2241      	movs	r2, #65	; 0x41
 800351e:	5c9b      	ldrb	r3, [r3, r2]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b20      	cmp	r3, #32
 8003524:	d138      	bne.n	8003598 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2240      	movs	r2, #64	; 0x40
 800352a:	5c9b      	ldrb	r3, [r3, r2]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003530:	2302      	movs	r3, #2
 8003532:	e032      	b.n	800359a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2240      	movs	r2, #64	; 0x40
 8003538:	2101      	movs	r1, #1
 800353a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2241      	movs	r2, #65	; 0x41
 8003540:	2124      	movs	r1, #36	; 0x24
 8003542:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2101      	movs	r1, #1
 8003550:	438a      	bics	r2, r1
 8003552:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4911      	ldr	r1, [pc, #68]	; (80035a4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003560:	400a      	ands	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6819      	ldr	r1, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2101      	movs	r1, #1
 8003580:	430a      	orrs	r2, r1
 8003582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2241      	movs	r2, #65	; 0x41
 8003588:	2120      	movs	r1, #32
 800358a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2240      	movs	r2, #64	; 0x40
 8003590:	2100      	movs	r1, #0
 8003592:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	0018      	movs	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	b002      	add	sp, #8
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	ffffefff 	.word	0xffffefff

080035a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2241      	movs	r2, #65	; 0x41
 80035b6:	5c9b      	ldrb	r3, [r3, r2]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d139      	bne.n	8003632 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2240      	movs	r2, #64	; 0x40
 80035c2:	5c9b      	ldrb	r3, [r3, r2]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e033      	b.n	8003634 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2240      	movs	r2, #64	; 0x40
 80035d0:	2101      	movs	r1, #1
 80035d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2241      	movs	r2, #65	; 0x41
 80035d8:	2124      	movs	r1, #36	; 0x24
 80035da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2101      	movs	r1, #1
 80035e8:	438a      	bics	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4a11      	ldr	r2, [pc, #68]	; (800363c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2101      	movs	r1, #1
 800361a:	430a      	orrs	r2, r1
 800361c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2241      	movs	r2, #65	; 0x41
 8003622:	2120      	movs	r1, #32
 8003624:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2240      	movs	r2, #64	; 0x40
 800362a:	2100      	movs	r1, #0
 800362c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	e000      	b.n	8003634 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003632:	2302      	movs	r3, #2
  }
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b004      	add	sp, #16
 800363a:	bd80      	pop	{r7, pc}
 800363c:	fffff0ff 	.word	0xfffff0ff

08003640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003640:	b5b0      	push	{r4, r5, r7, lr}
 8003642:	b08a      	sub	sp, #40	; 0x28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f000 fb6c 	bl	8003d2c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003654:	4bc8      	ldr	r3, [pc, #800]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	220c      	movs	r2, #12
 800365a:	4013      	ands	r3, r2
 800365c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800365e:	4bc6      	ldr	r3, [pc, #792]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	025b      	lsls	r3, r3, #9
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2201      	movs	r2, #1
 8003670:	4013      	ands	r3, r2
 8003672:	d100      	bne.n	8003676 <HAL_RCC_OscConfig+0x36>
 8003674:	e07d      	b.n	8003772 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d007      	beq.n	800368c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b0c      	cmp	r3, #12
 8003680:	d112      	bne.n	80036a8 <HAL_RCC_OscConfig+0x68>
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	025b      	lsls	r3, r3, #9
 8003688:	429a      	cmp	r2, r3
 800368a:	d10d      	bne.n	80036a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	4bba      	ldr	r3, [pc, #744]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	029b      	lsls	r3, r3, #10
 8003694:	4013      	ands	r3, r2
 8003696:	d100      	bne.n	800369a <HAL_RCC_OscConfig+0x5a>
 8003698:	e06a      	b.n	8003770 <HAL_RCC_OscConfig+0x130>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d166      	bne.n	8003770 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f000 fb42 	bl	8003d2c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	025b      	lsls	r3, r3, #9
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_OscConfig+0x84>
 80036b4:	4bb0      	ldr	r3, [pc, #704]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4baf      	ldr	r3, [pc, #700]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80036ba:	2180      	movs	r1, #128	; 0x80
 80036bc:	0249      	lsls	r1, r1, #9
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e027      	b.n	8003714 <HAL_RCC_OscConfig+0xd4>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	23a0      	movs	r3, #160	; 0xa0
 80036ca:	02db      	lsls	r3, r3, #11
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d10e      	bne.n	80036ee <HAL_RCC_OscConfig+0xae>
 80036d0:	4ba9      	ldr	r3, [pc, #676]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4ba8      	ldr	r3, [pc, #672]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	02c9      	lsls	r1, r1, #11
 80036da:	430a      	orrs	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	4ba6      	ldr	r3, [pc, #664]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4ba5      	ldr	r3, [pc, #660]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80036e4:	2180      	movs	r1, #128	; 0x80
 80036e6:	0249      	lsls	r1, r1, #9
 80036e8:	430a      	orrs	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	e012      	b.n	8003714 <HAL_RCC_OscConfig+0xd4>
 80036ee:	4ba2      	ldr	r3, [pc, #648]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4ba1      	ldr	r3, [pc, #644]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80036f4:	49a1      	ldr	r1, [pc, #644]	; (800397c <HAL_RCC_OscConfig+0x33c>)
 80036f6:	400a      	ands	r2, r1
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	4b9f      	ldr	r3, [pc, #636]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	025b      	lsls	r3, r3, #9
 8003702:	4013      	ands	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4b9b      	ldr	r3, [pc, #620]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b9a      	ldr	r3, [pc, #616]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 800370e:	499c      	ldr	r1, [pc, #624]	; (8003980 <HAL_RCC_OscConfig+0x340>)
 8003710:	400a      	ands	r2, r1
 8003712:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d014      	beq.n	8003746 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe fc9c 	bl	8002058 <HAL_GetTick>
 8003720:	0003      	movs	r3, r0
 8003722:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003726:	f7fe fc97 	bl	8002058 <HAL_GetTick>
 800372a:	0002      	movs	r2, r0
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b64      	cmp	r3, #100	; 0x64
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e2f9      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003738:	4b8f      	ldr	r3, [pc, #572]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	029b      	lsls	r3, r3, #10
 8003740:	4013      	ands	r3, r2
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0xe6>
 8003744:	e015      	b.n	8003772 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fe fc87 	bl	8002058 <HAL_GetTick>
 800374a:	0003      	movs	r3, r0
 800374c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003750:	f7fe fc82 	bl	8002058 <HAL_GetTick>
 8003754:	0002      	movs	r2, r0
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	; 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e2e4      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003762:	4b85      	ldr	r3, [pc, #532]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	029b      	lsls	r3, r3, #10
 800376a:	4013      	ands	r3, r2
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x110>
 800376e:	e000      	b.n	8003772 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2202      	movs	r2, #2
 8003778:	4013      	ands	r3, r2
 800377a:	d100      	bne.n	800377e <HAL_RCC_OscConfig+0x13e>
 800377c:	e099      	b.n	80038b2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	2220      	movs	r2, #32
 8003788:	4013      	ands	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800378c:	4b7a      	ldr	r3, [pc, #488]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4b79      	ldr	r3, [pc, #484]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 8003792:	2120      	movs	r1, #32
 8003794:	430a      	orrs	r2, r1
 8003796:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	2220      	movs	r2, #32
 800379c:	4393      	bics	r3, r2
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d005      	beq.n	80037b2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	2b0c      	cmp	r3, #12
 80037aa:	d13e      	bne.n	800382a <HAL_RCC_OscConfig+0x1ea>
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d13b      	bne.n	800382a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80037b2:	4b71      	ldr	r3, [pc, #452]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2204      	movs	r2, #4
 80037b8:	4013      	ands	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_RCC_OscConfig+0x186>
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e2b2      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c6:	4b6c      	ldr	r3, [pc, #432]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4a6e      	ldr	r2, [pc, #440]	; (8003984 <HAL_RCC_OscConfig+0x344>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	0019      	movs	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	021a      	lsls	r2, r3, #8
 80037d6:	4b68      	ldr	r3, [pc, #416]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80037d8:	430a      	orrs	r2, r1
 80037da:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80037dc:	4b66      	ldr	r3, [pc, #408]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2209      	movs	r2, #9
 80037e2:	4393      	bics	r3, r2
 80037e4:	0019      	movs	r1, r3
 80037e6:	4b64      	ldr	r3, [pc, #400]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80037e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ea:	430a      	orrs	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ee:	f000 fbeb 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 80037f2:	0001      	movs	r1, r0
 80037f4:	4b60      	ldr	r3, [pc, #384]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	220f      	movs	r2, #15
 80037fc:	4013      	ands	r3, r2
 80037fe:	4a62      	ldr	r2, [pc, #392]	; (8003988 <HAL_RCC_OscConfig+0x348>)
 8003800:	5cd3      	ldrb	r3, [r2, r3]
 8003802:	000a      	movs	r2, r1
 8003804:	40da      	lsrs	r2, r3
 8003806:	4b61      	ldr	r3, [pc, #388]	; (800398c <HAL_RCC_OscConfig+0x34c>)
 8003808:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800380a:	4b61      	ldr	r3, [pc, #388]	; (8003990 <HAL_RCC_OscConfig+0x350>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2513      	movs	r5, #19
 8003810:	197c      	adds	r4, r7, r5
 8003812:	0018      	movs	r0, r3
 8003814:	f7fe fbda 	bl	8001fcc <HAL_InitTick>
 8003818:	0003      	movs	r3, r0
 800381a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800381c:	197b      	adds	r3, r7, r5
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d046      	beq.n	80038b2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003824:	197b      	adds	r3, r7, r5
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	e280      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	2b00      	cmp	r3, #0
 800382e:	d027      	beq.n	8003880 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003830:	4b51      	ldr	r3, [pc, #324]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2209      	movs	r2, #9
 8003836:	4393      	bics	r3, r2
 8003838:	0019      	movs	r1, r3
 800383a:	4b4f      	ldr	r3, [pc, #316]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 800383c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383e:	430a      	orrs	r2, r1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7fe fc09 	bl	8002058 <HAL_GetTick>
 8003846:	0003      	movs	r3, r0
 8003848:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800384c:	f7fe fc04 	bl	8002058 <HAL_GetTick>
 8003850:	0002      	movs	r2, r0
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e266      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800385e:	4b46      	ldr	r3, [pc, #280]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2204      	movs	r2, #4
 8003864:	4013      	ands	r3, r2
 8003866:	d0f1      	beq.n	800384c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003868:	4b43      	ldr	r3, [pc, #268]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4a45      	ldr	r2, [pc, #276]	; (8003984 <HAL_RCC_OscConfig+0x344>)
 800386e:	4013      	ands	r3, r2
 8003870:	0019      	movs	r1, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	021a      	lsls	r2, r3, #8
 8003878:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	e018      	b.n	80038b2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003880:	4b3d      	ldr	r3, [pc, #244]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b3c      	ldr	r3, [pc, #240]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 8003886:	2101      	movs	r1, #1
 8003888:	438a      	bics	r2, r1
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7fe fbe4 	bl	8002058 <HAL_GetTick>
 8003890:	0003      	movs	r3, r0
 8003892:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003896:	f7fe fbdf 	bl	8002058 <HAL_GetTick>
 800389a:	0002      	movs	r2, r0
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e241      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038a8:	4b33      	ldr	r3, [pc, #204]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2204      	movs	r2, #4
 80038ae:	4013      	ands	r3, r2
 80038b0:	d1f1      	bne.n	8003896 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2210      	movs	r2, #16
 80038b8:	4013      	ands	r3, r2
 80038ba:	d100      	bne.n	80038be <HAL_RCC_OscConfig+0x27e>
 80038bc:	e0a1      	b.n	8003a02 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d140      	bne.n	8003946 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038c4:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4013      	ands	r3, r2
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_OscConfig+0x29c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e227      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038dc:	4b26      	ldr	r3, [pc, #152]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a2c      	ldr	r2, [pc, #176]	; (8003994 <HAL_RCC_OscConfig+0x354>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	0019      	movs	r1, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1a      	ldr	r2, [r3, #32]
 80038ea:	4b23      	ldr	r3, [pc, #140]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038f0:	4b21      	ldr	r3, [pc, #132]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	0a19      	lsrs	r1, r3, #8
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	061a      	lsls	r2, r3, #24
 80038fe:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	0b5b      	lsrs	r3, r3, #13
 800390a:	3301      	adds	r3, #1
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	0212      	lsls	r2, r2, #8
 8003910:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003912:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	210f      	movs	r1, #15
 800391a:	400b      	ands	r3, r1
 800391c:	491a      	ldr	r1, [pc, #104]	; (8003988 <HAL_RCC_OscConfig+0x348>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003922:	4b1a      	ldr	r3, [pc, #104]	; (800398c <HAL_RCC_OscConfig+0x34c>)
 8003924:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003926:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <HAL_RCC_OscConfig+0x350>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2513      	movs	r5, #19
 800392c:	197c      	adds	r4, r7, r5
 800392e:	0018      	movs	r0, r3
 8003930:	f7fe fb4c 	bl	8001fcc <HAL_InitTick>
 8003934:	0003      	movs	r3, r0
 8003936:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003938:	197b      	adds	r3, r7, r5
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d060      	beq.n	8003a02 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8003940:	197b      	adds	r3, r7, r5
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	e1f2      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d03f      	beq.n	80039ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <HAL_RCC_OscConfig+0x338>)
 8003954:	2180      	movs	r1, #128	; 0x80
 8003956:	0049      	lsls	r1, r1, #1
 8003958:	430a      	orrs	r2, r1
 800395a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7fe fb7c 	bl	8002058 <HAL_GetTick>
 8003960:	0003      	movs	r3, r0
 8003962:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003964:	e018      	b.n	8003998 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003966:	f7fe fb77 	bl	8002058 <HAL_GetTick>
 800396a:	0002      	movs	r2, r0
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d911      	bls.n	8003998 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e1d9      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
 8003978:	40021000 	.word	0x40021000
 800397c:	fffeffff 	.word	0xfffeffff
 8003980:	fffbffff 	.word	0xfffbffff
 8003984:	ffffe0ff 	.word	0xffffe0ff
 8003988:	08006910 	.word	0x08006910
 800398c:	20000000 	.word	0x20000000
 8003990:	20000004 	.word	0x20000004
 8003994:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003998:	4bc9      	ldr	r3, [pc, #804]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4013      	ands	r3, r2
 80039a2:	d0e0      	beq.n	8003966 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039a4:	4bc6      	ldr	r3, [pc, #792]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4ac6      	ldr	r2, [pc, #792]	; (8003cc4 <HAL_RCC_OscConfig+0x684>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	0019      	movs	r1, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1a      	ldr	r2, [r3, #32]
 80039b2:	4bc3      	ldr	r3, [pc, #780]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 80039b4:	430a      	orrs	r2, r1
 80039b6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039b8:	4bc1      	ldr	r3, [pc, #772]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	0a19      	lsrs	r1, r3, #8
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	061a      	lsls	r2, r3, #24
 80039c6:	4bbe      	ldr	r3, [pc, #760]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	e019      	b.n	8003a02 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039ce:	4bbc      	ldr	r3, [pc, #752]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4bbb      	ldr	r3, [pc, #748]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 80039d4:	49bc      	ldr	r1, [pc, #752]	; (8003cc8 <HAL_RCC_OscConfig+0x688>)
 80039d6:	400a      	ands	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039da:	f7fe fb3d 	bl	8002058 <HAL_GetTick>
 80039de:	0003      	movs	r3, r0
 80039e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039e4:	f7fe fb38 	bl	8002058 <HAL_GetTick>
 80039e8:	0002      	movs	r2, r0
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e19a      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80039f6:	4bb2      	ldr	r3, [pc, #712]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4013      	ands	r3, r2
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2208      	movs	r2, #8
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d036      	beq.n	8003a7a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d019      	beq.n	8003a48 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a14:	4baa      	ldr	r3, [pc, #680]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003a16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a18:	4ba9      	ldr	r3, [pc, #676]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a20:	f7fe fb1a 	bl	8002058 <HAL_GetTick>
 8003a24:	0003      	movs	r3, r0
 8003a26:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a2a:	f7fe fb15 	bl	8002058 <HAL_GetTick>
 8003a2e:	0002      	movs	r2, r0
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e177      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a3c:	4ba0      	ldr	r3, [pc, #640]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a40:	2202      	movs	r2, #2
 8003a42:	4013      	ands	r3, r2
 8003a44:	d0f1      	beq.n	8003a2a <HAL_RCC_OscConfig+0x3ea>
 8003a46:	e018      	b.n	8003a7a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a48:	4b9d      	ldr	r3, [pc, #628]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003a4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a4c:	4b9c      	ldr	r3, [pc, #624]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003a4e:	2101      	movs	r1, #1
 8003a50:	438a      	bics	r2, r1
 8003a52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a54:	f7fe fb00 	bl	8002058 <HAL_GetTick>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a5e:	f7fe fafb 	bl	8002058 <HAL_GetTick>
 8003a62:	0002      	movs	r2, r0
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e15d      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a70:	4b93      	ldr	r3, [pc, #588]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a74:	2202      	movs	r2, #2
 8003a76:	4013      	ands	r3, r2
 8003a78:	d1f1      	bne.n	8003a5e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	4013      	ands	r3, r2
 8003a82:	d100      	bne.n	8003a86 <HAL_RCC_OscConfig+0x446>
 8003a84:	e0ae      	b.n	8003be4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a86:	2023      	movs	r0, #35	; 0x23
 8003a88:	183b      	adds	r3, r7, r0
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8e:	4b8c      	ldr	r3, [pc, #560]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	055b      	lsls	r3, r3, #21
 8003a96:	4013      	ands	r3, r2
 8003a98:	d109      	bne.n	8003aae <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	4b89      	ldr	r3, [pc, #548]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9e:	4b88      	ldr	r3, [pc, #544]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003aa0:	2180      	movs	r1, #128	; 0x80
 8003aa2:	0549      	lsls	r1, r1, #21
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003aa8:	183b      	adds	r3, r7, r0
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aae:	4b87      	ldr	r3, [pc, #540]	; (8003ccc <HAL_RCC_OscConfig+0x68c>)
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d11a      	bne.n	8003af0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aba:	4b84      	ldr	r3, [pc, #528]	; (8003ccc <HAL_RCC_OscConfig+0x68c>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b83      	ldr	r3, [pc, #524]	; (8003ccc <HAL_RCC_OscConfig+0x68c>)
 8003ac0:	2180      	movs	r1, #128	; 0x80
 8003ac2:	0049      	lsls	r1, r1, #1
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac8:	f7fe fac6 	bl	8002058 <HAL_GetTick>
 8003acc:	0003      	movs	r3, r0
 8003ace:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad2:	f7fe fac1 	bl	8002058 <HAL_GetTick>
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b64      	cmp	r3, #100	; 0x64
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e123      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	4b79      	ldr	r3, [pc, #484]	; (8003ccc <HAL_RCC_OscConfig+0x68c>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	4013      	ands	r3, r2
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4cc>
 8003afc:	4b70      	ldr	r3, [pc, #448]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b00:	4b6f      	ldr	r3, [pc, #444]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003b02:	2180      	movs	r1, #128	; 0x80
 8003b04:	0049      	lsls	r1, r1, #1
 8003b06:	430a      	orrs	r2, r1
 8003b08:	651a      	str	r2, [r3, #80]	; 0x50
 8003b0a:	e031      	b.n	8003b70 <HAL_RCC_OscConfig+0x530>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10c      	bne.n	8003b2e <HAL_RCC_OscConfig+0x4ee>
 8003b14:	4b6a      	ldr	r3, [pc, #424]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003b16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b18:	4b69      	ldr	r3, [pc, #420]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003b1a:	496b      	ldr	r1, [pc, #428]	; (8003cc8 <HAL_RCC_OscConfig+0x688>)
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	651a      	str	r2, [r3, #80]	; 0x50
 8003b20:	4b67      	ldr	r3, [pc, #412]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b24:	4b66      	ldr	r3, [pc, #408]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003b26:	496a      	ldr	r1, [pc, #424]	; (8003cd0 <HAL_RCC_OscConfig+0x690>)
 8003b28:	400a      	ands	r2, r1
 8003b2a:	651a      	str	r2, [r3, #80]	; 0x50
 8003b2c:	e020      	b.n	8003b70 <HAL_RCC_OscConfig+0x530>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	23a0      	movs	r3, #160	; 0xa0
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d10e      	bne.n	8003b58 <HAL_RCC_OscConfig+0x518>
 8003b3a:	4b61      	ldr	r3, [pc, #388]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b3e:	4b60      	ldr	r3, [pc, #384]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003b40:	2180      	movs	r1, #128	; 0x80
 8003b42:	00c9      	lsls	r1, r1, #3
 8003b44:	430a      	orrs	r2, r1
 8003b46:	651a      	str	r2, [r3, #80]	; 0x50
 8003b48:	4b5d      	ldr	r3, [pc, #372]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003b4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b4c:	4b5c      	ldr	r3, [pc, #368]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	0049      	lsls	r1, r1, #1
 8003b52:	430a      	orrs	r2, r1
 8003b54:	651a      	str	r2, [r3, #80]	; 0x50
 8003b56:	e00b      	b.n	8003b70 <HAL_RCC_OscConfig+0x530>
 8003b58:	4b59      	ldr	r3, [pc, #356]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003b5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b5c:	4b58      	ldr	r3, [pc, #352]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003b5e:	495a      	ldr	r1, [pc, #360]	; (8003cc8 <HAL_RCC_OscConfig+0x688>)
 8003b60:	400a      	ands	r2, r1
 8003b62:	651a      	str	r2, [r3, #80]	; 0x50
 8003b64:	4b56      	ldr	r3, [pc, #344]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003b66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b68:	4b55      	ldr	r3, [pc, #340]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003b6a:	4959      	ldr	r1, [pc, #356]	; (8003cd0 <HAL_RCC_OscConfig+0x690>)
 8003b6c:	400a      	ands	r2, r1
 8003b6e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d015      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b78:	f7fe fa6e 	bl	8002058 <HAL_GetTick>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b80:	e009      	b.n	8003b96 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b82:	f7fe fa69 	bl	8002058 <HAL_GetTick>
 8003b86:	0002      	movs	r2, r0
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	4a51      	ldr	r2, [pc, #324]	; (8003cd4 <HAL_RCC_OscConfig+0x694>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e0ca      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b96:	4b4a      	ldr	r3, [pc, #296]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003b98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d0ef      	beq.n	8003b82 <HAL_RCC_OscConfig+0x542>
 8003ba2:	e014      	b.n	8003bce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba4:	f7fe fa58 	bl	8002058 <HAL_GetTick>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bac:	e009      	b.n	8003bc2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fe fa53 	bl	8002058 <HAL_GetTick>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	4a46      	ldr	r2, [pc, #280]	; (8003cd4 <HAL_RCC_OscConfig+0x694>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0b4      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bc2:	4b3f      	ldr	r3, [pc, #252]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003bc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d1ef      	bne.n	8003bae <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bce:	2323      	movs	r3, #35	; 0x23
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d105      	bne.n	8003be4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd8:	4b39      	ldr	r3, [pc, #228]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bdc:	4b38      	ldr	r3, [pc, #224]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003bde:	493e      	ldr	r1, [pc, #248]	; (8003cd8 <HAL_RCC_OscConfig+0x698>)
 8003be0:	400a      	ands	r2, r1
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d100      	bne.n	8003bee <HAL_RCC_OscConfig+0x5ae>
 8003bec:	e09d      	b.n	8003d2a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	2b0c      	cmp	r3, #12
 8003bf2:	d100      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x5b6>
 8003bf4:	e076      	b.n	8003ce4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d145      	bne.n	8003c8a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfe:	4b30      	ldr	r3, [pc, #192]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003c04:	4935      	ldr	r1, [pc, #212]	; (8003cdc <HAL_RCC_OscConfig+0x69c>)
 8003c06:	400a      	ands	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0a:	f7fe fa25 	bl	8002058 <HAL_GetTick>
 8003c0e:	0003      	movs	r3, r0
 8003c10:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fe fa20 	bl	8002058 <HAL_GetTick>
 8003c18:	0002      	movs	r2, r0
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e082      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c26:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	049b      	lsls	r3, r3, #18
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c32:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	4a2a      	ldr	r2, [pc, #168]	; (8003ce0 <HAL_RCC_OscConfig+0x6a0>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c52:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003c58:	2180      	movs	r1, #128	; 0x80
 8003c5a:	0449      	lsls	r1, r1, #17
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c60:	f7fe f9fa 	bl	8002058 <HAL_GetTick>
 8003c64:	0003      	movs	r3, r0
 8003c66:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c6a:	f7fe f9f5 	bl	8002058 <HAL_GetTick>
 8003c6e:	0002      	movs	r2, r0
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e057      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c7c:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	049b      	lsls	r3, r3, #18
 8003c84:	4013      	ands	r3, r2
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x62a>
 8003c88:	e04f      	b.n	8003d2a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003c90:	4912      	ldr	r1, [pc, #72]	; (8003cdc <HAL_RCC_OscConfig+0x69c>)
 8003c92:	400a      	ands	r2, r1
 8003c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c96:	f7fe f9df 	bl	8002058 <HAL_GetTick>
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca0:	f7fe f9da 	bl	8002058 <HAL_GetTick>
 8003ca4:	0002      	movs	r2, r0
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e03c      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003cb2:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <HAL_RCC_OscConfig+0x680>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	049b      	lsls	r3, r3, #18
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x660>
 8003cbe:	e034      	b.n	8003d2a <HAL_RCC_OscConfig+0x6ea>
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	ffff1fff 	.word	0xffff1fff
 8003cc8:	fffffeff 	.word	0xfffffeff
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	fffffbff 	.word	0xfffffbff
 8003cd4:	00001388 	.word	0x00001388
 8003cd8:	efffffff 	.word	0xefffffff
 8003cdc:	feffffff 	.word	0xfeffffff
 8003ce0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e01d      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cf0:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <HAL_RCC_OscConfig+0x6f4>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	025b      	lsls	r3, r3, #9
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d10f      	bne.n	8003d26 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	23f0      	movs	r3, #240	; 0xf0
 8003d0a:	039b      	lsls	r3, r3, #14
 8003d0c:	401a      	ands	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	23c0      	movs	r3, #192	; 0xc0
 8003d1a:	041b      	lsls	r3, r3, #16
 8003d1c:	401a      	ands	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b00a      	add	sp, #40	; 0x28
 8003d32:	bdb0      	pop	{r4, r5, r7, pc}
 8003d34:	40021000 	.word	0x40021000

08003d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d38:	b5b0      	push	{r4, r5, r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e128      	b.n	8003f9e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b96      	ldr	r3, [pc, #600]	; (8003fa8 <HAL_RCC_ClockConfig+0x270>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2201      	movs	r2, #1
 8003d52:	4013      	ands	r3, r2
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d91e      	bls.n	8003d98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b93      	ldr	r3, [pc, #588]	; (8003fa8 <HAL_RCC_ClockConfig+0x270>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	4393      	bics	r3, r2
 8003d62:	0019      	movs	r1, r3
 8003d64:	4b90      	ldr	r3, [pc, #576]	; (8003fa8 <HAL_RCC_ClockConfig+0x270>)
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d6c:	f7fe f974 	bl	8002058 <HAL_GetTick>
 8003d70:	0003      	movs	r3, r0
 8003d72:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d74:	e009      	b.n	8003d8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d76:	f7fe f96f 	bl	8002058 <HAL_GetTick>
 8003d7a:	0002      	movs	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	4a8a      	ldr	r2, [pc, #552]	; (8003fac <HAL_RCC_ClockConfig+0x274>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e109      	b.n	8003f9e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b87      	ldr	r3, [pc, #540]	; (8003fa8 <HAL_RCC_ClockConfig+0x270>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	4013      	ands	r3, r2
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d1ee      	bne.n	8003d76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d009      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da2:	4b83      	ldr	r3, [pc, #524]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	22f0      	movs	r2, #240	; 0xf0
 8003da8:	4393      	bics	r3, r2
 8003daa:	0019      	movs	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	4b7f      	ldr	r3, [pc, #508]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003db2:	430a      	orrs	r2, r1
 8003db4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d100      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0x8a>
 8003dc0:	e089      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003dca:	4b79      	ldr	r3, [pc, #484]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	029b      	lsls	r3, r3, #10
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d120      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0e1      	b.n	8003f9e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003de2:	4b73      	ldr	r3, [pc, #460]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	049b      	lsls	r3, r3, #18
 8003dea:	4013      	ands	r3, r2
 8003dec:	d114      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e0d5      	b.n	8003f9e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d106      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dfa:	4b6d      	ldr	r3, [pc, #436]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2204      	movs	r2, #4
 8003e00:	4013      	ands	r3, r2
 8003e02:	d109      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0ca      	b.n	8003f9e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003e08:	4b69      	ldr	r3, [pc, #420]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4013      	ands	r3, r2
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0c2      	b.n	8003f9e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e18:	4b65      	ldr	r3, [pc, #404]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	4393      	bics	r3, r2
 8003e20:	0019      	movs	r1, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	4b62      	ldr	r3, [pc, #392]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e2c:	f7fe f914 	bl	8002058 <HAL_GetTick>
 8003e30:	0003      	movs	r3, r0
 8003e32:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d111      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e3c:	e009      	b.n	8003e52 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3e:	f7fe f90b 	bl	8002058 <HAL_GetTick>
 8003e42:	0002      	movs	r2, r0
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	4a58      	ldr	r2, [pc, #352]	; (8003fac <HAL_RCC_ClockConfig+0x274>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e0a5      	b.n	8003f9e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e52:	4b57      	ldr	r3, [pc, #348]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	220c      	movs	r2, #12
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d1ef      	bne.n	8003e3e <HAL_RCC_ClockConfig+0x106>
 8003e5e:	e03a      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d111      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e68:	e009      	b.n	8003e7e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e6a:	f7fe f8f5 	bl	8002058 <HAL_GetTick>
 8003e6e:	0002      	movs	r2, r0
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	4a4d      	ldr	r2, [pc, #308]	; (8003fac <HAL_RCC_ClockConfig+0x274>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e08f      	b.n	8003f9e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e7e:	4b4c      	ldr	r3, [pc, #304]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	220c      	movs	r2, #12
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b0c      	cmp	r3, #12
 8003e88:	d1ef      	bne.n	8003e6a <HAL_RCC_ClockConfig+0x132>
 8003e8a:	e024      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d11b      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e94:	e009      	b.n	8003eaa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e96:	f7fe f8df 	bl	8002058 <HAL_GetTick>
 8003e9a:	0002      	movs	r2, r0
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	4a42      	ldr	r2, [pc, #264]	; (8003fac <HAL_RCC_ClockConfig+0x274>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e079      	b.n	8003f9e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eaa:	4b41      	ldr	r3, [pc, #260]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	220c      	movs	r2, #12
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d1ef      	bne.n	8003e96 <HAL_RCC_ClockConfig+0x15e>
 8003eb6:	e00e      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb8:	f7fe f8ce 	bl	8002058 <HAL_GetTick>
 8003ebc:	0002      	movs	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	4a3a      	ldr	r2, [pc, #232]	; (8003fac <HAL_RCC_ClockConfig+0x274>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e068      	b.n	8003f9e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ecc:	4b38      	ldr	r3, [pc, #224]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	220c      	movs	r2, #12
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed6:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCC_ClockConfig+0x270>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2201      	movs	r2, #1
 8003edc:	4013      	ands	r3, r2
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d21e      	bcs.n	8003f22 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee4:	4b30      	ldr	r3, [pc, #192]	; (8003fa8 <HAL_RCC_ClockConfig+0x270>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	4393      	bics	r3, r2
 8003eec:	0019      	movs	r1, r3
 8003eee:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <HAL_RCC_ClockConfig+0x270>)
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ef6:	f7fe f8af 	bl	8002058 <HAL_GetTick>
 8003efa:	0003      	movs	r3, r0
 8003efc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	e009      	b.n	8003f14 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f00:	f7fe f8aa 	bl	8002058 <HAL_GetTick>
 8003f04:	0002      	movs	r2, r0
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	4a28      	ldr	r2, [pc, #160]	; (8003fac <HAL_RCC_ClockConfig+0x274>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e044      	b.n	8003f9e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f14:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCC_ClockConfig+0x270>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d1ee      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2204      	movs	r2, #4
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d009      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f2c:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4a20      	ldr	r2, [pc, #128]	; (8003fb4 <HAL_RCC_ClockConfig+0x27c>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	0019      	movs	r1, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2208      	movs	r2, #8
 8003f46:	4013      	ands	r3, r2
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f4a:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	4a1a      	ldr	r2, [pc, #104]	; (8003fb8 <HAL_RCC_ClockConfig+0x280>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	0019      	movs	r1, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	00da      	lsls	r2, r3, #3
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f60:	f000 f832 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 8003f64:	0001      	movs	r1, r0
 8003f66:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <HAL_RCC_ClockConfig+0x278>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	220f      	movs	r2, #15
 8003f6e:	4013      	ands	r3, r2
 8003f70:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <HAL_RCC_ClockConfig+0x284>)
 8003f72:	5cd3      	ldrb	r3, [r2, r3]
 8003f74:	000a      	movs	r2, r1
 8003f76:	40da      	lsrs	r2, r3
 8003f78:	4b11      	ldr	r3, [pc, #68]	; (8003fc0 <HAL_RCC_ClockConfig+0x288>)
 8003f7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <HAL_RCC_ClockConfig+0x28c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	250b      	movs	r5, #11
 8003f82:	197c      	adds	r4, r7, r5
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7fe f821 	bl	8001fcc <HAL_InitTick>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003f8e:	197b      	adds	r3, r7, r5
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003f96:	197b      	adds	r3, r7, r5
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b004      	add	sp, #16
 8003fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	40022000 	.word	0x40022000
 8003fac:	00001388 	.word	0x00001388
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	fffff8ff 	.word	0xfffff8ff
 8003fb8:	ffffc7ff 	.word	0xffffc7ff
 8003fbc:	08006910 	.word	0x08006910
 8003fc0:	20000000 	.word	0x20000000
 8003fc4:	20000004 	.word	0x20000004

08003fc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc8:	b5b0      	push	{r4, r5, r7, lr}
 8003fca:	b08e      	sub	sp, #56	; 0x38
 8003fcc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003fce:	4b4c      	ldr	r3, [pc, #304]	; (8004100 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd6:	230c      	movs	r3, #12
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2b0c      	cmp	r3, #12
 8003fdc:	d014      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x40>
 8003fde:	d900      	bls.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x1a>
 8003fe0:	e07b      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x112>
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d002      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x24>
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d00b      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fea:	e076      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003fec:	4b44      	ldr	r3, [pc, #272]	; (8004100 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d002      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003ff6:	4b43      	ldr	r3, [pc, #268]	; (8004104 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003ff8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003ffa:	e07c      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003ffc:	4b42      	ldr	r3, [pc, #264]	; (8004108 <HAL_RCC_GetSysClockFreq+0x140>)
 8003ffe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004000:	e079      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004002:	4b42      	ldr	r3, [pc, #264]	; (800410c <HAL_RCC_GetSysClockFreq+0x144>)
 8004004:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004006:	e076      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400a:	0c9a      	lsrs	r2, r3, #18
 800400c:	230f      	movs	r3, #15
 800400e:	401a      	ands	r2, r3
 8004010:	4b3f      	ldr	r3, [pc, #252]	; (8004110 <HAL_RCC_GetSysClockFreq+0x148>)
 8004012:	5c9b      	ldrb	r3, [r3, r2]
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	0d9a      	lsrs	r2, r3, #22
 800401a:	2303      	movs	r3, #3
 800401c:	4013      	ands	r3, r2
 800401e:	3301      	adds	r3, #1
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004022:	4b37      	ldr	r3, [pc, #220]	; (8004100 <HAL_RCC_GetSysClockFreq+0x138>)
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	025b      	lsls	r3, r3, #9
 800402a:	4013      	ands	r3, r2
 800402c:	d01a      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	4a35      	ldr	r2, [pc, #212]	; (800410c <HAL_RCC_GetSysClockFreq+0x144>)
 8004038:	2300      	movs	r3, #0
 800403a:	69b8      	ldr	r0, [r7, #24]
 800403c:	69f9      	ldr	r1, [r7, #28]
 800403e:	f7fc fa0b 	bl	8000458 <__aeabi_lmul>
 8004042:	0002      	movs	r2, r0
 8004044:	000b      	movs	r3, r1
 8004046:	0010      	movs	r0, r2
 8004048:	0019      	movs	r1, r3
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f7fc f9df 	bl	8000418 <__aeabi_uldivmod>
 800405a:	0002      	movs	r2, r0
 800405c:	000b      	movs	r3, r1
 800405e:	0013      	movs	r3, r2
 8004060:	637b      	str	r3, [r7, #52]	; 0x34
 8004062:	e037      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004064:	4b26      	ldr	r3, [pc, #152]	; (8004100 <HAL_RCC_GetSysClockFreq+0x138>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2210      	movs	r2, #16
 800406a:	4013      	ands	r3, r2
 800406c:	d01a      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800406e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	4a23      	ldr	r2, [pc, #140]	; (8004104 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004078:	2300      	movs	r3, #0
 800407a:	68b8      	ldr	r0, [r7, #8]
 800407c:	68f9      	ldr	r1, [r7, #12]
 800407e:	f7fc f9eb 	bl	8000458 <__aeabi_lmul>
 8004082:	0002      	movs	r2, r0
 8004084:	000b      	movs	r3, r1
 8004086:	0010      	movs	r0, r2
 8004088:	0019      	movs	r1, r3
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f7fc f9bf 	bl	8000418 <__aeabi_uldivmod>
 800409a:	0002      	movs	r2, r0
 800409c:	000b      	movs	r3, r1
 800409e:	0013      	movs	r3, r2
 80040a0:	637b      	str	r3, [r7, #52]	; 0x34
 80040a2:	e017      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80040a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a6:	0018      	movs	r0, r3
 80040a8:	2300      	movs	r3, #0
 80040aa:	0019      	movs	r1, r3
 80040ac:	4a16      	ldr	r2, [pc, #88]	; (8004108 <HAL_RCC_GetSysClockFreq+0x140>)
 80040ae:	2300      	movs	r3, #0
 80040b0:	f7fc f9d2 	bl	8000458 <__aeabi_lmul>
 80040b4:	0002      	movs	r2, r0
 80040b6:	000b      	movs	r3, r1
 80040b8:	0010      	movs	r0, r2
 80040ba:	0019      	movs	r1, r3
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	001c      	movs	r4, r3
 80040c0:	2300      	movs	r3, #0
 80040c2:	001d      	movs	r5, r3
 80040c4:	0022      	movs	r2, r4
 80040c6:	002b      	movs	r3, r5
 80040c8:	f7fc f9a6 	bl	8000418 <__aeabi_uldivmod>
 80040cc:	0002      	movs	r2, r0
 80040ce:	000b      	movs	r3, r1
 80040d0:	0013      	movs	r3, r2
 80040d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80040d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040d8:	e00d      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80040da:	4b09      	ldr	r3, [pc, #36]	; (8004100 <HAL_RCC_GetSysClockFreq+0x138>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	0b5b      	lsrs	r3, r3, #13
 80040e0:	2207      	movs	r2, #7
 80040e2:	4013      	ands	r3, r2
 80040e4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	3301      	adds	r3, #1
 80040ea:	2280      	movs	r2, #128	; 0x80
 80040ec:	0212      	lsls	r2, r2, #8
 80040ee:	409a      	lsls	r2, r3
 80040f0:	0013      	movs	r3, r2
 80040f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040f4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80040f8:	0018      	movs	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b00e      	add	sp, #56	; 0x38
 80040fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	003d0900 	.word	0x003d0900
 8004108:	00f42400 	.word	0x00f42400
 800410c:	007a1200 	.word	0x007a1200
 8004110:	08006928 	.word	0x08006928

08004114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004118:	4b02      	ldr	r3, [pc, #8]	; (8004124 <HAL_RCC_GetHCLKFreq+0x10>)
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	20000000 	.word	0x20000000

08004128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800412c:	f7ff fff2 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004130:	0001      	movs	r1, r0
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	0a1b      	lsrs	r3, r3, #8
 8004138:	2207      	movs	r2, #7
 800413a:	4013      	ands	r3, r2
 800413c:	4a04      	ldr	r2, [pc, #16]	; (8004150 <HAL_RCC_GetPCLK1Freq+0x28>)
 800413e:	5cd3      	ldrb	r3, [r2, r3]
 8004140:	40d9      	lsrs	r1, r3
 8004142:	000b      	movs	r3, r1
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	40021000 	.word	0x40021000
 8004150:	08006920 	.word	0x08006920

08004154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004158:	f7ff ffdc 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 800415c:	0001      	movs	r1, r0
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	0adb      	lsrs	r3, r3, #11
 8004164:	2207      	movs	r2, #7
 8004166:	4013      	ands	r3, r2
 8004168:	4a04      	ldr	r2, [pc, #16]	; (800417c <HAL_RCC_GetPCLK2Freq+0x28>)
 800416a:	5cd3      	ldrb	r3, [r2, r3]
 800416c:	40d9      	lsrs	r1, r3
 800416e:	000b      	movs	r3, r1
}
 8004170:	0018      	movs	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	40021000 	.word	0x40021000
 800417c:	08006920 	.word	0x08006920

08004180 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004188:	2017      	movs	r0, #23
 800418a:	183b      	adds	r3, r7, r0
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2220      	movs	r2, #32
 8004196:	4013      	ands	r3, r2
 8004198:	d100      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800419a:	e0c2      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419c:	4b81      	ldr	r3, [pc, #516]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800419e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	055b      	lsls	r3, r3, #21
 80041a4:	4013      	ands	r3, r2
 80041a6:	d109      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a8:	4b7e      	ldr	r3, [pc, #504]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80041aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ac:	4b7d      	ldr	r3, [pc, #500]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80041ae:	2180      	movs	r1, #128	; 0x80
 80041b0:	0549      	lsls	r1, r1, #21
 80041b2:	430a      	orrs	r2, r1
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80041b6:	183b      	adds	r3, r7, r0
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	4b7a      	ldr	r3, [pc, #488]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	4013      	ands	r3, r2
 80041c6:	d11a      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c8:	4b77      	ldr	r3, [pc, #476]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b76      	ldr	r3, [pc, #472]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80041ce:	2180      	movs	r1, #128	; 0x80
 80041d0:	0049      	lsls	r1, r1, #1
 80041d2:	430a      	orrs	r2, r1
 80041d4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d6:	f7fd ff3f 	bl	8002058 <HAL_GetTick>
 80041da:	0003      	movs	r3, r0
 80041dc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041de:	e008      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e0:	f7fd ff3a 	bl	8002058 <HAL_GetTick>
 80041e4:	0002      	movs	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	; 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e0d4      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f2:	4b6d      	ldr	r3, [pc, #436]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4013      	ands	r3, r2
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80041fe:	4b69      	ldr	r3, [pc, #420]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	23c0      	movs	r3, #192	; 0xc0
 8004204:	039b      	lsls	r3, r3, #14
 8004206:	4013      	ands	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	23c0      	movs	r3, #192	; 0xc0
 8004210:	039b      	lsls	r3, r3, #14
 8004212:	4013      	ands	r3, r2
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	429a      	cmp	r2, r3
 8004218:	d013      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	23c0      	movs	r3, #192	; 0xc0
 8004220:	029b      	lsls	r3, r3, #10
 8004222:	401a      	ands	r2, r3
 8004224:	23c0      	movs	r3, #192	; 0xc0
 8004226:	029b      	lsls	r3, r3, #10
 8004228:	429a      	cmp	r2, r3
 800422a:	d10a      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800422c:	4b5d      	ldr	r3, [pc, #372]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	029b      	lsls	r3, r3, #10
 8004234:	401a      	ands	r2, r3
 8004236:	2380      	movs	r3, #128	; 0x80
 8004238:	029b      	lsls	r3, r3, #10
 800423a:	429a      	cmp	r2, r3
 800423c:	d101      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e0ac      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004242:	4b58      	ldr	r3, [pc, #352]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004246:	23c0      	movs	r3, #192	; 0xc0
 8004248:	029b      	lsls	r3, r3, #10
 800424a:	4013      	ands	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d03b      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	23c0      	movs	r3, #192	; 0xc0
 800425a:	029b      	lsls	r3, r3, #10
 800425c:	4013      	ands	r3, r2
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	429a      	cmp	r2, r3
 8004262:	d033      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2220      	movs	r2, #32
 800426a:	4013      	ands	r3, r2
 800426c:	d02e      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800426e:	4b4d      	ldr	r3, [pc, #308]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004272:	4a4e      	ldr	r2, [pc, #312]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004274:	4013      	ands	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004278:	4b4a      	ldr	r3, [pc, #296]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800427a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800427c:	4b49      	ldr	r3, [pc, #292]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800427e:	2180      	movs	r1, #128	; 0x80
 8004280:	0309      	lsls	r1, r1, #12
 8004282:	430a      	orrs	r2, r1
 8004284:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004286:	4b47      	ldr	r3, [pc, #284]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800428a:	4b46      	ldr	r3, [pc, #280]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800428c:	4948      	ldr	r1, [pc, #288]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800428e:	400a      	ands	r2, r1
 8004290:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004292:	4b44      	ldr	r3, [pc, #272]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	4013      	ands	r3, r2
 80042a0:	d014      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a2:	f7fd fed9 	bl	8002058 <HAL_GetTick>
 80042a6:	0003      	movs	r3, r0
 80042a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042aa:	e009      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fd fed4 	bl	8002058 <HAL_GetTick>
 80042b0:	0002      	movs	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	4a3f      	ldr	r2, [pc, #252]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e06d      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c0:	4b38      	ldr	r3, [pc, #224]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80042c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4013      	ands	r3, r2
 80042ca:	d0ef      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	23c0      	movs	r3, #192	; 0xc0
 80042d2:	029b      	lsls	r3, r3, #10
 80042d4:	401a      	ands	r2, r3
 80042d6:	23c0      	movs	r3, #192	; 0xc0
 80042d8:	029b      	lsls	r3, r3, #10
 80042da:	429a      	cmp	r2, r3
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80042de:	4b31      	ldr	r3, [pc, #196]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a35      	ldr	r2, [pc, #212]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	0019      	movs	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	23c0      	movs	r3, #192	; 0xc0
 80042ee:	039b      	lsls	r3, r3, #14
 80042f0:	401a      	ands	r2, r3
 80042f2:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80042f4:	430a      	orrs	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	4b2a      	ldr	r3, [pc, #168]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80042fa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	23c0      	movs	r3, #192	; 0xc0
 8004302:	029b      	lsls	r3, r3, #10
 8004304:	401a      	ands	r2, r3
 8004306:	4b27      	ldr	r3, [pc, #156]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004308:	430a      	orrs	r2, r1
 800430a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800430c:	2317      	movs	r3, #23
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d105      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004316:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431a:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800431c:	4927      	ldr	r1, [pc, #156]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800431e:	400a      	ands	r2, r1
 8004320:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2202      	movs	r2, #2
 8004328:	4013      	ands	r3, r2
 800432a:	d009      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800432c:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800432e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004330:	220c      	movs	r2, #12
 8004332:	4393      	bics	r3, r2
 8004334:	0019      	movs	r1, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800433c:	430a      	orrs	r2, r1
 800433e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2204      	movs	r2, #4
 8004346:	4013      	ands	r3, r2
 8004348:	d009      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800434a:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800434c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434e:	4a1c      	ldr	r2, [pc, #112]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004350:	4013      	ands	r3, r2
 8004352:	0019      	movs	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800435a:	430a      	orrs	r2, r1
 800435c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2208      	movs	r2, #8
 8004364:	4013      	ands	r3, r2
 8004366:	d009      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004368:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800436a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436c:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800436e:	4013      	ands	r3, r2
 8004370:	0019      	movs	r1, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004378:	430a      	orrs	r2, r1
 800437a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2280      	movs	r2, #128	; 0x80
 8004382:	4013      	ands	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004386:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438a:	4a0f      	ldr	r2, [pc, #60]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800438c:	4013      	ands	r3, r2
 800438e:	0019      	movs	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004396:	430a      	orrs	r2, r1
 8004398:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b006      	add	sp, #24
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40007000 	.word	0x40007000
 80043ac:	fffcffff 	.word	0xfffcffff
 80043b0:	fff7ffff 	.word	0xfff7ffff
 80043b4:	00001388 	.word	0x00001388
 80043b8:	ffcfffff 	.word	0xffcfffff
 80043bc:	efffffff 	.word	0xefffffff
 80043c0:	fffff3ff 	.word	0xfffff3ff
 80043c4:	ffffcfff 	.word	0xffffcfff
 80043c8:	fff3ffff 	.word	0xfff3ffff

080043cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e032      	b.n	8004444 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2239      	movs	r2, #57	; 0x39
 80043e2:	5c9b      	ldrb	r3, [r3, r2]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d107      	bne.n	80043fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2238      	movs	r2, #56	; 0x38
 80043ee:	2100      	movs	r1, #0
 80043f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	0018      	movs	r0, r3
 80043f6:	f7fd fce9 	bl	8001dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2239      	movs	r2, #57	; 0x39
 80043fe:	2102      	movs	r1, #2
 8004400:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3304      	adds	r3, #4
 800440a:	0019      	movs	r1, r3
 800440c:	0010      	movs	r0, r2
 800440e:	f000 f935 	bl	800467c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	223e      	movs	r2, #62	; 0x3e
 8004416:	2101      	movs	r1, #1
 8004418:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	223a      	movs	r2, #58	; 0x3a
 800441e:	2101      	movs	r1, #1
 8004420:	5499      	strb	r1, [r3, r2]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	223b      	movs	r2, #59	; 0x3b
 8004426:	2101      	movs	r1, #1
 8004428:	5499      	strb	r1, [r3, r2]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	223c      	movs	r2, #60	; 0x3c
 800442e:	2101      	movs	r1, #1
 8004430:	5499      	strb	r1, [r3, r2]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	223d      	movs	r2, #61	; 0x3d
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2239      	movs	r2, #57	; 0x39
 800443e:	2101      	movs	r1, #1
 8004440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	b002      	add	sp, #8
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2239      	movs	r2, #57	; 0x39
 8004458:	5c9b      	ldrb	r3, [r3, r2]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	d001      	beq.n	8004464 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e02e      	b.n	80044c2 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2239      	movs	r2, #57	; 0x39
 8004468:	2102      	movs	r1, #2
 800446a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	05db      	lsls	r3, r3, #23
 8004474:	429a      	cmp	r2, r3
 8004476:	d009      	beq.n	800448c <HAL_TIM_Base_Start+0x40>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a13      	ldr	r2, [pc, #76]	; (80044cc <HAL_TIM_Base_Start+0x80>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d004      	beq.n	800448c <HAL_TIM_Base_Start+0x40>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a12      	ldr	r2, [pc, #72]	; (80044d0 <HAL_TIM_Base_Start+0x84>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d111      	bne.n	80044b0 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	2207      	movs	r2, #7
 8004494:	4013      	ands	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b06      	cmp	r3, #6
 800449c:	d010      	beq.n	80044c0 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2101      	movs	r1, #1
 80044aa:	430a      	orrs	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ae:	e007      	b.n	80044c0 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2101      	movs	r1, #1
 80044bc:	430a      	orrs	r2, r1
 80044be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	0018      	movs	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b004      	add	sp, #16
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	40010800 	.word	0x40010800
 80044d0:	40011400 	.word	0x40011400

080044d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044de:	230f      	movs	r3, #15
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2238      	movs	r2, #56	; 0x38
 80044ea:	5c9b      	ldrb	r3, [r3, r2]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_TIM_ConfigClockSource+0x20>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e0bc      	b.n	800466e <HAL_TIM_ConfigClockSource+0x19a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2238      	movs	r2, #56	; 0x38
 80044f8:	2101      	movs	r1, #1
 80044fa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2239      	movs	r2, #57	; 0x39
 8004500:	2102      	movs	r1, #2
 8004502:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2277      	movs	r2, #119	; 0x77
 8004510:	4393      	bics	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4a58      	ldr	r2, [pc, #352]	; (8004678 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004518:	4013      	ands	r3, r2
 800451a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2280      	movs	r2, #128	; 0x80
 800452a:	0192      	lsls	r2, r2, #6
 800452c:	4293      	cmp	r3, r2
 800452e:	d040      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0xde>
 8004530:	2280      	movs	r2, #128	; 0x80
 8004532:	0192      	lsls	r2, r2, #6
 8004534:	4293      	cmp	r3, r2
 8004536:	d900      	bls.n	800453a <HAL_TIM_ConfigClockSource+0x66>
 8004538:	e088      	b.n	800464c <HAL_TIM_ConfigClockSource+0x178>
 800453a:	2280      	movs	r2, #128	; 0x80
 800453c:	0152      	lsls	r2, r2, #5
 800453e:	4293      	cmp	r3, r2
 8004540:	d100      	bne.n	8004544 <HAL_TIM_ConfigClockSource+0x70>
 8004542:	e088      	b.n	8004656 <HAL_TIM_ConfigClockSource+0x182>
 8004544:	2280      	movs	r2, #128	; 0x80
 8004546:	0152      	lsls	r2, r2, #5
 8004548:	4293      	cmp	r3, r2
 800454a:	d900      	bls.n	800454e <HAL_TIM_ConfigClockSource+0x7a>
 800454c:	e07e      	b.n	800464c <HAL_TIM_ConfigClockSource+0x178>
 800454e:	2b70      	cmp	r3, #112	; 0x70
 8004550:	d018      	beq.n	8004584 <HAL_TIM_ConfigClockSource+0xb0>
 8004552:	d900      	bls.n	8004556 <HAL_TIM_ConfigClockSource+0x82>
 8004554:	e07a      	b.n	800464c <HAL_TIM_ConfigClockSource+0x178>
 8004556:	2b60      	cmp	r3, #96	; 0x60
 8004558:	d04f      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x126>
 800455a:	d900      	bls.n	800455e <HAL_TIM_ConfigClockSource+0x8a>
 800455c:	e076      	b.n	800464c <HAL_TIM_ConfigClockSource+0x178>
 800455e:	2b50      	cmp	r3, #80	; 0x50
 8004560:	d03b      	beq.n	80045da <HAL_TIM_ConfigClockSource+0x106>
 8004562:	d900      	bls.n	8004566 <HAL_TIM_ConfigClockSource+0x92>
 8004564:	e072      	b.n	800464c <HAL_TIM_ConfigClockSource+0x178>
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d057      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x146>
 800456a:	d900      	bls.n	800456e <HAL_TIM_ConfigClockSource+0x9a>
 800456c:	e06e      	b.n	800464c <HAL_TIM_ConfigClockSource+0x178>
 800456e:	2b30      	cmp	r3, #48	; 0x30
 8004570:	d063      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x166>
 8004572:	d86b      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x178>
 8004574:	2b20      	cmp	r3, #32
 8004576:	d060      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x166>
 8004578:	d868      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x178>
 800457a:	2b00      	cmp	r3, #0
 800457c:	d05d      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x166>
 800457e:	2b10      	cmp	r3, #16
 8004580:	d05b      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x166>
 8004582:	e063      	b.n	800464c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6899      	ldr	r1, [r3, #8]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f000 f940 	bl	8004818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2277      	movs	r2, #119	; 0x77
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	609a      	str	r2, [r3, #8]
      break;
 80045b0:	e052      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6899      	ldr	r1, [r3, #8]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f000 f929 	bl	8004818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2180      	movs	r1, #128	; 0x80
 80045d2:	01c9      	lsls	r1, r1, #7
 80045d4:	430a      	orrs	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]
      break;
 80045d8:	e03e      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6859      	ldr	r1, [r3, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	001a      	movs	r2, r3
 80045e8:	f000 f89c 	bl	8004724 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2150      	movs	r1, #80	; 0x50
 80045f2:	0018      	movs	r0, r3
 80045f4:	f000 f8f6 	bl	80047e4 <TIM_ITRx_SetConfig>
      break;
 80045f8:	e02e      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	001a      	movs	r2, r3
 8004608:	f000 f8ba 	bl	8004780 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2160      	movs	r1, #96	; 0x60
 8004612:	0018      	movs	r0, r3
 8004614:	f000 f8e6 	bl	80047e4 <TIM_ITRx_SetConfig>
      break;
 8004618:	e01e      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	001a      	movs	r2, r3
 8004628:	f000 f87c 	bl	8004724 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2140      	movs	r1, #64	; 0x40
 8004632:	0018      	movs	r0, r3
 8004634:	f000 f8d6 	bl	80047e4 <TIM_ITRx_SetConfig>
      break;
 8004638:	e00e      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	0019      	movs	r1, r3
 8004644:	0010      	movs	r0, r2
 8004646:	f000 f8cd 	bl	80047e4 <TIM_ITRx_SetConfig>
      break;
 800464a:	e005      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800464c:	230f      	movs	r3, #15
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	2201      	movs	r2, #1
 8004652:	701a      	strb	r2, [r3, #0]
      break;
 8004654:	e000      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004656:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2239      	movs	r2, #57	; 0x39
 800465c:	2101      	movs	r1, #1
 800465e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2238      	movs	r2, #56	; 0x38
 8004664:	2100      	movs	r1, #0
 8004666:	5499      	strb	r1, [r3, r2]

  return status;
 8004668:	230f      	movs	r3, #15
 800466a:	18fb      	adds	r3, r7, r3
 800466c:	781b      	ldrb	r3, [r3, #0]
}
 800466e:	0018      	movs	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	b004      	add	sp, #16
 8004674:	bd80      	pop	{r7, pc}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	ffff00ff 	.word	0xffff00ff

0800467c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	05db      	lsls	r3, r3, #23
 8004692:	429a      	cmp	r2, r3
 8004694:	d007      	beq.n	80046a6 <TIM_Base_SetConfig+0x2a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1f      	ldr	r2, [pc, #124]	; (8004718 <TIM_Base_SetConfig+0x9c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_Base_SetConfig+0x2a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1e      	ldr	r2, [pc, #120]	; (800471c <TIM_Base_SetConfig+0xa0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2270      	movs	r2, #112	; 0x70
 80046aa:	4393      	bics	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	2380      	movs	r3, #128	; 0x80
 80046bc:	05db      	lsls	r3, r3, #23
 80046be:	429a      	cmp	r2, r3
 80046c0:	d007      	beq.n	80046d2 <TIM_Base_SetConfig+0x56>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a14      	ldr	r2, [pc, #80]	; (8004718 <TIM_Base_SetConfig+0x9c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d003      	beq.n	80046d2 <TIM_Base_SetConfig+0x56>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a13      	ldr	r2, [pc, #76]	; (800471c <TIM_Base_SetConfig+0xa0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d108      	bne.n	80046e4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a12      	ldr	r2, [pc, #72]	; (8004720 <TIM_Base_SetConfig+0xa4>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2280      	movs	r2, #128	; 0x80
 80046e8:	4393      	bics	r3, r2
 80046ea:	001a      	movs	r2, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	615a      	str	r2, [r3, #20]
}
 8004710:	46c0      	nop			; (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	b004      	add	sp, #16
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40010800 	.word	0x40010800
 800471c:	40011400 	.word	0x40011400
 8004720:	fffffcff 	.word	0xfffffcff

08004724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	2201      	movs	r2, #1
 800473c:	4393      	bics	r3, r2
 800473e:	001a      	movs	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	22f0      	movs	r2, #240	; 0xf0
 800474e:	4393      	bics	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	220a      	movs	r2, #10
 8004760:	4393      	bics	r3, r2
 8004762:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	621a      	str	r2, [r3, #32]
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	b006      	add	sp, #24
 800477e:	bd80      	pop	{r7, pc}

08004780 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	2210      	movs	r2, #16
 8004792:	4393      	bics	r3, r2
 8004794:	001a      	movs	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	4a0d      	ldr	r2, [pc, #52]	; (80047e0 <TIM_TI2_ConfigInputStage+0x60>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	031b      	lsls	r3, r3, #12
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	22a0      	movs	r2, #160	; 0xa0
 80047bc:	4393      	bics	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	46bd      	mov	sp, r7
 80047da:	b006      	add	sp, #24
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	ffff0fff 	.word	0xffff0fff

080047e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2270      	movs	r2, #112	; 0x70
 80047f8:	4393      	bics	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	2207      	movs	r2, #7
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	609a      	str	r2, [r3, #8]
}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	46bd      	mov	sp, r7
 8004812:	b004      	add	sp, #16
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4a09      	ldr	r2, [pc, #36]	; (8004854 <TIM_ETR_SetConfig+0x3c>)
 8004830:	4013      	ands	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	021a      	lsls	r2, r3, #8
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	431a      	orrs	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4313      	orrs	r3, r2
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	609a      	str	r2, [r3, #8]
}
 800484c:	46c0      	nop			; (mov r8, r8)
 800484e:	46bd      	mov	sp, r7
 8004850:	b006      	add	sp, #24
 8004852:	bd80      	pop	{r7, pc}
 8004854:	ffff00ff 	.word	0xffff00ff

08004858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2238      	movs	r2, #56	; 0x38
 8004866:	5c9b      	ldrb	r3, [r3, r2]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800486c:	2302      	movs	r3, #2
 800486e:	e042      	b.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2238      	movs	r2, #56	; 0x38
 8004874:	2101      	movs	r1, #1
 8004876:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2239      	movs	r2, #57	; 0x39
 800487c:	2102      	movs	r1, #2
 800487e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2270      	movs	r2, #112	; 0x70
 8004894:	4393      	bics	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	05db      	lsls	r3, r3, #23
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d009      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a11      	ldr	r2, [pc, #68]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a0f      	ldr	r2, [pc, #60]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d10c      	bne.n	80048e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2280      	movs	r2, #128	; 0x80
 80048ce:	4393      	bics	r3, r2
 80048d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2239      	movs	r2, #57	; 0x39
 80048e8:	2101      	movs	r1, #1
 80048ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2238      	movs	r2, #56	; 0x38
 80048f0:	2100      	movs	r1, #0
 80048f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	0018      	movs	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b004      	add	sp, #16
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	40010800 	.word	0x40010800
 8004904:	40011400 	.word	0x40011400

08004908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e044      	b.n	80049a4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800491e:	2b00      	cmp	r3, #0
 8004920:	d107      	bne.n	8004932 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2274      	movs	r2, #116	; 0x74
 8004926:	2100      	movs	r1, #0
 8004928:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	0018      	movs	r0, r3
 800492e:	f7fd fa93 	bl	8001e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2224      	movs	r2, #36	; 0x24
 8004936:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2101      	movs	r1, #1
 8004944:	438a      	bics	r2, r1
 8004946:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	0018      	movs	r0, r3
 800494c:	f000 fbd2 	bl	80050f4 <UART_SetConfig>
 8004950:	0003      	movs	r3, r0
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e024      	b.n	80049a4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	0018      	movs	r0, r3
 8004966:	f000 fe27 	bl	80055b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	490d      	ldr	r1, [pc, #52]	; (80049ac <HAL_UART_Init+0xa4>)
 8004976:	400a      	ands	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	212a      	movs	r1, #42	; 0x2a
 8004986:	438a      	bics	r2, r1
 8004988:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2101      	movs	r1, #1
 8004996:	430a      	orrs	r2, r1
 8004998:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	0018      	movs	r0, r3
 800499e:	f000 febf 	bl	8005720 <UART_CheckIdleState>
 80049a2:	0003      	movs	r3, r0
}
 80049a4:	0018      	movs	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b002      	add	sp, #8
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	ffffb7ff 	.word	0xffffb7ff

080049b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	1dbb      	adds	r3, r7, #6
 80049be:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d000      	beq.n	80049ca <HAL_UART_Transmit+0x1a>
 80049c8:	e095      	b.n	8004af6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_UART_Transmit+0x28>
 80049d0:	1dbb      	adds	r3, r7, #6
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e08d      	b.n	8004af8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	015b      	lsls	r3, r3, #5
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d109      	bne.n	80049fc <HAL_UART_Transmit+0x4c>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2201      	movs	r2, #1
 80049f4:	4013      	ands	r3, r2
 80049f6:	d001      	beq.n	80049fc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e07d      	b.n	8004af8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2274      	movs	r2, #116	; 0x74
 8004a00:	5c9b      	ldrb	r3, [r3, r2]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Transmit+0x5a>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e076      	b.n	8004af8 <HAL_UART_Transmit+0x148>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2274      	movs	r2, #116	; 0x74
 8004a0e:	2101      	movs	r1, #1
 8004a10:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2280      	movs	r2, #128	; 0x80
 8004a16:	2100      	movs	r1, #0
 8004a18:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2221      	movs	r2, #33	; 0x21
 8004a1e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a20:	f7fd fb1a 	bl	8002058 <HAL_GetTick>
 8004a24:	0003      	movs	r3, r0
 8004a26:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	1dba      	adds	r2, r7, #6
 8004a2c:	2150      	movs	r1, #80	; 0x50
 8004a2e:	8812      	ldrh	r2, [r2, #0]
 8004a30:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1dba      	adds	r2, r7, #6
 8004a36:	2152      	movs	r1, #82	; 0x52
 8004a38:	8812      	ldrh	r2, [r2, #0]
 8004a3a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	015b      	lsls	r3, r3, #5
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d108      	bne.n	8004a5a <HAL_UART_Transmit+0xaa>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	e003      	b.n	8004a62 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2274      	movs	r2, #116	; 0x74
 8004a66:	2100      	movs	r1, #0
 8004a68:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004a6a:	e02c      	b.n	8004ac6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	0013      	movs	r3, r2
 8004a76:	2200      	movs	r2, #0
 8004a78:	2180      	movs	r1, #128	; 0x80
 8004a7a:	f000 fe99 	bl	80057b0 <UART_WaitOnFlagUntilTimeout>
 8004a7e:	1e03      	subs	r3, r0, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e038      	b.n	8004af8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10b      	bne.n	8004aa4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	001a      	movs	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	05d2      	lsls	r2, r2, #23
 8004a98:	0dd2      	lsrs	r2, r2, #23
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	3302      	adds	r3, #2
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	e007      	b.n	8004ab4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	781a      	ldrb	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2252      	movs	r2, #82	; 0x52
 8004ab8:	5a9b      	ldrh	r3, [r3, r2]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b299      	uxth	r1, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2252      	movs	r2, #82	; 0x52
 8004ac4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2252      	movs	r2, #82	; 0x52
 8004aca:	5a9b      	ldrh	r3, [r3, r2]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1cc      	bne.n	8004a6c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	0013      	movs	r3, r2
 8004adc:	2200      	movs	r2, #0
 8004ade:	2140      	movs	r1, #64	; 0x40
 8004ae0:	f000 fe66 	bl	80057b0 <UART_WaitOnFlagUntilTimeout>
 8004ae4:	1e03      	subs	r3, r0, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e005      	b.n	8004af8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004af6:	2302      	movs	r3, #2
  }
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b008      	add	sp, #32
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b0ab      	sub	sp, #172	; 0xac
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	22a4      	movs	r2, #164	; 0xa4
 8004b10:	18b9      	adds	r1, r7, r2
 8004b12:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	20a0      	movs	r0, #160	; 0xa0
 8004b1c:	1839      	adds	r1, r7, r0
 8004b1e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	219c      	movs	r1, #156	; 0x9c
 8004b28:	1879      	adds	r1, r7, r1
 8004b2a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b2c:	0011      	movs	r1, r2
 8004b2e:	18bb      	adds	r3, r7, r2
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a99      	ldr	r2, [pc, #612]	; (8004d98 <HAL_UART_IRQHandler+0x298>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	2298      	movs	r2, #152	; 0x98
 8004b38:	18bc      	adds	r4, r7, r2
 8004b3a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004b3c:	18bb      	adds	r3, r7, r2
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d114      	bne.n	8004b6e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b44:	187b      	adds	r3, r7, r1
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d00f      	beq.n	8004b6e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b4e:	183b      	adds	r3, r7, r0
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2220      	movs	r2, #32
 8004b54:	4013      	ands	r3, r2
 8004b56:	d00a      	beq.n	8004b6e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d100      	bne.n	8004b62 <HAL_UART_IRQHandler+0x62>
 8004b60:	e298      	b.n	8005094 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	0010      	movs	r0, r2
 8004b6a:	4798      	blx	r3
      }
      return;
 8004b6c:	e292      	b.n	8005094 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b6e:	2398      	movs	r3, #152	; 0x98
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d100      	bne.n	8004b7a <HAL_UART_IRQHandler+0x7a>
 8004b78:	e114      	b.n	8004da4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b7a:	239c      	movs	r3, #156	; 0x9c
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2201      	movs	r2, #1
 8004b82:	4013      	ands	r3, r2
 8004b84:	d106      	bne.n	8004b94 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b86:	23a0      	movs	r3, #160	; 0xa0
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a83      	ldr	r2, [pc, #524]	; (8004d9c <HAL_UART_IRQHandler+0x29c>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d100      	bne.n	8004b94 <HAL_UART_IRQHandler+0x94>
 8004b92:	e107      	b.n	8004da4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b94:	23a4      	movs	r3, #164	; 0xa4
 8004b96:	18fb      	adds	r3, r7, r3
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d012      	beq.n	8004bc6 <HAL_UART_IRQHandler+0xc6>
 8004ba0:	23a0      	movs	r3, #160	; 0xa0
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	2380      	movs	r3, #128	; 0x80
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	4013      	ands	r3, r2
 8004bac:	d00b      	beq.n	8004bc6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2280      	movs	r2, #128	; 0x80
 8004bba:	589b      	ldr	r3, [r3, r2]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2180      	movs	r1, #128	; 0x80
 8004bc4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bc6:	23a4      	movs	r3, #164	; 0xa4
 8004bc8:	18fb      	adds	r3, r7, r3
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d011      	beq.n	8004bf6 <HAL_UART_IRQHandler+0xf6>
 8004bd2:	239c      	movs	r3, #156	; 0x9c
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2202      	movs	r2, #2
 8004be4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2280      	movs	r2, #128	; 0x80
 8004bea:	589b      	ldr	r3, [r3, r2]
 8004bec:	2204      	movs	r2, #4
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2180      	movs	r1, #128	; 0x80
 8004bf4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bf6:	23a4      	movs	r3, #164	; 0xa4
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d011      	beq.n	8004c26 <HAL_UART_IRQHandler+0x126>
 8004c02:	239c      	movs	r3, #156	; 0x9c
 8004c04:	18fb      	adds	r3, r7, r3
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2204      	movs	r2, #4
 8004c14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2280      	movs	r2, #128	; 0x80
 8004c1a:	589b      	ldr	r3, [r3, r2]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2180      	movs	r1, #128	; 0x80
 8004c24:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c26:	23a4      	movs	r3, #164	; 0xa4
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d017      	beq.n	8004c62 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c32:	23a0      	movs	r3, #160	; 0xa0
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d105      	bne.n	8004c4a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c3e:	239c      	movs	r3, #156	; 0x9c
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2201      	movs	r2, #1
 8004c46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c48:	d00b      	beq.n	8004c62 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2208      	movs	r2, #8
 8004c50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2280      	movs	r2, #128	; 0x80
 8004c56:	589b      	ldr	r3, [r3, r2]
 8004c58:	2208      	movs	r2, #8
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2180      	movs	r1, #128	; 0x80
 8004c60:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c62:	23a4      	movs	r3, #164	; 0xa4
 8004c64:	18fb      	adds	r3, r7, r3
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	2380      	movs	r3, #128	; 0x80
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <HAL_UART_IRQHandler+0x198>
 8004c70:	23a0      	movs	r3, #160	; 0xa0
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	04db      	lsls	r3, r3, #19
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d00c      	beq.n	8004c98 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2280      	movs	r2, #128	; 0x80
 8004c84:	0112      	lsls	r2, r2, #4
 8004c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2280      	movs	r2, #128	; 0x80
 8004c8c:	589b      	ldr	r3, [r3, r2]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2180      	movs	r1, #128	; 0x80
 8004c96:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2280      	movs	r2, #128	; 0x80
 8004c9c:	589b      	ldr	r3, [r3, r2]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d100      	bne.n	8004ca4 <HAL_UART_IRQHandler+0x1a4>
 8004ca2:	e1f9      	b.n	8005098 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ca4:	23a4      	movs	r3, #164	; 0xa4
 8004ca6:	18fb      	adds	r3, r7, r3
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2220      	movs	r2, #32
 8004cac:	4013      	ands	r3, r2
 8004cae:	d00e      	beq.n	8004cce <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cb0:	23a0      	movs	r3, #160	; 0xa0
 8004cb2:	18fb      	adds	r3, r7, r3
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d008      	beq.n	8004cce <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d004      	beq.n	8004cce <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	0010      	movs	r0, r2
 8004ccc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2280      	movs	r2, #128	; 0x80
 8004cd2:	589b      	ldr	r3, [r3, r2]
 8004cd4:	2194      	movs	r1, #148	; 0x94
 8004cd6:	187a      	adds	r2, r7, r1
 8004cd8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2240      	movs	r2, #64	; 0x40
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b40      	cmp	r3, #64	; 0x40
 8004ce6:	d004      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ce8:	187b      	adds	r3, r7, r1
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2228      	movs	r2, #40	; 0x28
 8004cee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cf0:	d047      	beq.n	8004d82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f000 fee5 	bl	8005ac4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2240      	movs	r2, #64	; 0x40
 8004d02:	4013      	ands	r3, r2
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d137      	bne.n	8004d78 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d08:	f3ef 8310 	mrs	r3, PRIMASK
 8004d0c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d10:	2090      	movs	r0, #144	; 0x90
 8004d12:	183a      	adds	r2, r7, r0
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	2301      	movs	r3, #1
 8004d18:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d1c:	f383 8810 	msr	PRIMASK, r3
}
 8004d20:	46c0      	nop			; (mov r8, r8)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2140      	movs	r1, #64	; 0x40
 8004d2e:	438a      	bics	r2, r1
 8004d30:	609a      	str	r2, [r3, #8]
 8004d32:	183b      	adds	r3, r7, r0
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d3a:	f383 8810 	msr	PRIMASK, r3
}
 8004d3e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d012      	beq.n	8004d6e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	4a14      	ldr	r2, [pc, #80]	; (8004da0 <HAL_UART_IRQHandler+0x2a0>)
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7fd fba9 	bl	80024ac <HAL_DMA_Abort_IT>
 8004d5a:	1e03      	subs	r3, r0, #0
 8004d5c:	d01a      	beq.n	8004d94 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d68:	0018      	movs	r0, r3
 8004d6a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d6c:	e012      	b.n	8004d94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	0018      	movs	r0, r3
 8004d72:	f000 f9b7 	bl	80050e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d76:	e00d      	b.n	8004d94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f000 f9b2 	bl	80050e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d80:	e008      	b.n	8004d94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	0018      	movs	r0, r3
 8004d86:	f000 f9ad 	bl	80050e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2280      	movs	r2, #128	; 0x80
 8004d8e:	2100      	movs	r1, #0
 8004d90:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004d92:	e181      	b.n	8005098 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d94:	46c0      	nop			; (mov r8, r8)
    return;
 8004d96:	e17f      	b.n	8005098 <HAL_UART_IRQHandler+0x598>
 8004d98:	0000080f 	.word	0x0000080f
 8004d9c:	04000120 	.word	0x04000120
 8004da0:	08005d6f 	.word	0x08005d6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d000      	beq.n	8004dae <HAL_UART_IRQHandler+0x2ae>
 8004dac:	e133      	b.n	8005016 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004dae:	23a4      	movs	r3, #164	; 0xa4
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2210      	movs	r2, #16
 8004db6:	4013      	ands	r3, r2
 8004db8:	d100      	bne.n	8004dbc <HAL_UART_IRQHandler+0x2bc>
 8004dba:	e12c      	b.n	8005016 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004dbc:	23a0      	movs	r3, #160	; 0xa0
 8004dbe:	18fb      	adds	r3, r7, r3
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2210      	movs	r2, #16
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d100      	bne.n	8004dca <HAL_UART_IRQHandler+0x2ca>
 8004dc8:	e125      	b.n	8005016 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2210      	movs	r2, #16
 8004dd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2240      	movs	r2, #64	; 0x40
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b40      	cmp	r3, #64	; 0x40
 8004dde:	d000      	beq.n	8004de2 <HAL_UART_IRQHandler+0x2e2>
 8004de0:	e09d      	b.n	8004f1e <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	217e      	movs	r1, #126	; 0x7e
 8004dec:	187b      	adds	r3, r7, r1
 8004dee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004df0:	187b      	adds	r3, r7, r1
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d100      	bne.n	8004dfa <HAL_UART_IRQHandler+0x2fa>
 8004df8:	e150      	b.n	800509c <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2258      	movs	r2, #88	; 0x58
 8004dfe:	5a9b      	ldrh	r3, [r3, r2]
 8004e00:	187a      	adds	r2, r7, r1
 8004e02:	8812      	ldrh	r2, [r2, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d300      	bcc.n	8004e0a <HAL_UART_IRQHandler+0x30a>
 8004e08:	e148      	b.n	800509c <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	187a      	adds	r2, r7, r1
 8004e0e:	215a      	movs	r1, #90	; 0x5a
 8004e10:	8812      	ldrh	r2, [r2, #0]
 8004e12:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d16e      	bne.n	8004f00 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e22:	f3ef 8310 	mrs	r3, PRIMASK
 8004e26:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e32:	f383 8810 	msr	PRIMASK, r3
}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	499a      	ldr	r1, [pc, #616]	; (80050ac <HAL_UART_IRQHandler+0x5ac>)
 8004e44:	400a      	ands	r2, r1
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	f383 8810 	msr	PRIMASK, r3
}
 8004e52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e54:	f3ef 8310 	mrs	r3, PRIMASK
 8004e58:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5c:	677b      	str	r3, [r7, #116]	; 0x74
 8004e5e:	2301      	movs	r3, #1
 8004e60:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e64:	f383 8810 	msr	PRIMASK, r3
}
 8004e68:	46c0      	nop			; (mov r8, r8)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2101      	movs	r1, #1
 8004e76:	438a      	bics	r2, r1
 8004e78:	609a      	str	r2, [r3, #8]
 8004e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e80:	f383 8810 	msr	PRIMASK, r3
}
 8004e84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e86:	f3ef 8310 	mrs	r3, PRIMASK
 8004e8a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8e:	673b      	str	r3, [r7, #112]	; 0x70
 8004e90:	2301      	movs	r3, #1
 8004e92:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e96:	f383 8810 	msr	PRIMASK, r3
}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2140      	movs	r1, #64	; 0x40
 8004ea8:	438a      	bics	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
 8004eac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eae:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb2:	f383 8810 	msr	PRIMASK, r3
}
 8004eb6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ecc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ece:	2301      	movs	r3, #1
 8004ed0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ed4:	f383 8810 	msr	PRIMASK, r3
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2110      	movs	r1, #16
 8004ee6:	438a      	bics	r2, r1
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eec:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef0:	f383 8810 	msr	PRIMASK, r3
}
 8004ef4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	0018      	movs	r0, r3
 8004efc:	f7fd fa96 	bl	800242c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2258      	movs	r2, #88	; 0x58
 8004f04:	5a9a      	ldrh	r2, [r3, r2]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	215a      	movs	r1, #90	; 0x5a
 8004f0a:	5a5b      	ldrh	r3, [r3, r1]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	0011      	movs	r1, r2
 8004f16:	0018      	movs	r0, r3
 8004f18:	f7fc fde6 	bl	8001ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f1c:	e0be      	b.n	800509c <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2258      	movs	r2, #88	; 0x58
 8004f22:	5a99      	ldrh	r1, [r3, r2]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	225a      	movs	r2, #90	; 0x5a
 8004f28:	5a9b      	ldrh	r3, [r3, r2]
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	208e      	movs	r0, #142	; 0x8e
 8004f2e:	183b      	adds	r3, r7, r0
 8004f30:	1a8a      	subs	r2, r1, r2
 8004f32:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	225a      	movs	r2, #90	; 0x5a
 8004f38:	5a9b      	ldrh	r3, [r3, r2]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d100      	bne.n	8004f42 <HAL_UART_IRQHandler+0x442>
 8004f40:	e0ae      	b.n	80050a0 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8004f42:	183b      	adds	r3, r7, r0
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d100      	bne.n	8004f4c <HAL_UART_IRQHandler+0x44c>
 8004f4a:	e0a9      	b.n	80050a0 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f50:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f52:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f54:	2488      	movs	r4, #136	; 0x88
 8004f56:	193a      	adds	r2, r7, r4
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f383 8810 	msr	PRIMASK, r3
}
 8004f64:	46c0      	nop			; (mov r8, r8)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	494f      	ldr	r1, [pc, #316]	; (80050b0 <HAL_UART_IRQHandler+0x5b0>)
 8004f72:	400a      	ands	r2, r1
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	193b      	adds	r3, r7, r4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f383 8810 	msr	PRIMASK, r3
}
 8004f82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f84:	f3ef 8310 	mrs	r3, PRIMASK
 8004f88:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f8a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	2484      	movs	r4, #132	; 0x84
 8004f8e:	193a      	adds	r2, r7, r4
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	2301      	movs	r3, #1
 8004f94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f383 8810 	msr	PRIMASK, r3
}
 8004f9c:	46c0      	nop			; (mov r8, r8)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2101      	movs	r1, #1
 8004faa:	438a      	bics	r2, r1
 8004fac:	609a      	str	r2, [r3, #8]
 8004fae:	193b      	adds	r3, r7, r4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	f383 8810 	msr	PRIMASK, r3
}
 8004fba:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fce:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd6:	2480      	movs	r4, #128	; 0x80
 8004fd8:	193a      	adds	r2, r7, r4
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	2301      	movs	r3, #1
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	f383 8810 	msr	PRIMASK, r3
}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2110      	movs	r1, #16
 8004ff4:	438a      	bics	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	193b      	adds	r3, r7, r4
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	f383 8810 	msr	PRIMASK, r3
}
 8005004:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005006:	183b      	adds	r3, r7, r0
 8005008:	881a      	ldrh	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	0011      	movs	r1, r2
 800500e:	0018      	movs	r0, r3
 8005010:	f7fc fd6a 	bl	8001ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005014:	e044      	b.n	80050a0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005016:	23a4      	movs	r3, #164	; 0xa4
 8005018:	18fb      	adds	r3, r7, r3
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	035b      	lsls	r3, r3, #13
 8005020:	4013      	ands	r3, r2
 8005022:	d010      	beq.n	8005046 <HAL_UART_IRQHandler+0x546>
 8005024:	239c      	movs	r3, #156	; 0x9c
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	03db      	lsls	r3, r3, #15
 800502e:	4013      	ands	r3, r2
 8005030:	d009      	beq.n	8005046 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2280      	movs	r2, #128	; 0x80
 8005038:	0352      	lsls	r2, r2, #13
 800503a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	0018      	movs	r0, r3
 8005040:	f000 fed7 	bl	8005df2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005044:	e02f      	b.n	80050a6 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005046:	23a4      	movs	r3, #164	; 0xa4
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2280      	movs	r2, #128	; 0x80
 800504e:	4013      	ands	r3, r2
 8005050:	d00f      	beq.n	8005072 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005052:	23a0      	movs	r3, #160	; 0xa0
 8005054:	18fb      	adds	r3, r7, r3
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2280      	movs	r2, #128	; 0x80
 800505a:	4013      	ands	r3, r2
 800505c:	d009      	beq.n	8005072 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01e      	beq.n	80050a4 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	0010      	movs	r0, r2
 800506e:	4798      	blx	r3
    }
    return;
 8005070:	e018      	b.n	80050a4 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005072:	23a4      	movs	r3, #164	; 0xa4
 8005074:	18fb      	adds	r3, r7, r3
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2240      	movs	r2, #64	; 0x40
 800507a:	4013      	ands	r3, r2
 800507c:	d013      	beq.n	80050a6 <HAL_UART_IRQHandler+0x5a6>
 800507e:	23a0      	movs	r3, #160	; 0xa0
 8005080:	18fb      	adds	r3, r7, r3
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2240      	movs	r2, #64	; 0x40
 8005086:	4013      	ands	r3, r2
 8005088:	d00d      	beq.n	80050a6 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	0018      	movs	r0, r3
 800508e:	f000 fe85 	bl	8005d9c <UART_EndTransmit_IT>
    return;
 8005092:	e008      	b.n	80050a6 <HAL_UART_IRQHandler+0x5a6>
      return;
 8005094:	46c0      	nop			; (mov r8, r8)
 8005096:	e006      	b.n	80050a6 <HAL_UART_IRQHandler+0x5a6>
    return;
 8005098:	46c0      	nop			; (mov r8, r8)
 800509a:	e004      	b.n	80050a6 <HAL_UART_IRQHandler+0x5a6>
      return;
 800509c:	46c0      	nop			; (mov r8, r8)
 800509e:	e002      	b.n	80050a6 <HAL_UART_IRQHandler+0x5a6>
      return;
 80050a0:	46c0      	nop			; (mov r8, r8)
 80050a2:	e000      	b.n	80050a6 <HAL_UART_IRQHandler+0x5a6>
    return;
 80050a4:	46c0      	nop			; (mov r8, r8)
  }

}
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b02b      	add	sp, #172	; 0xac
 80050aa:	bd90      	pop	{r4, r7, pc}
 80050ac:	fffffeff 	.word	0xfffffeff
 80050b0:	fffffedf 	.word	0xfffffedf

080050b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050bc:	46c0      	nop			; (mov r8, r8)
 80050be:	46bd      	mov	sp, r7
 80050c0:	b002      	add	sp, #8
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80050cc:	46c0      	nop			; (mov r8, r8)
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b002      	add	sp, #8
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80050dc:	46c0      	nop			; (mov r8, r8)
 80050de:	46bd      	mov	sp, r7
 80050e0:	b002      	add	sp, #8
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b002      	add	sp, #8
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050f4:	b5b0      	push	{r4, r5, r7, lr}
 80050f6:	b08e      	sub	sp, #56	; 0x38
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050fc:	231a      	movs	r3, #26
 80050fe:	2218      	movs	r2, #24
 8005100:	4694      	mov	ip, r2
 8005102:	44bc      	add	ip, r7
 8005104:	4463      	add	r3, ip
 8005106:	2200      	movs	r2, #0
 8005108:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	431a      	orrs	r2, r3
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	431a      	orrs	r2, r3
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	4313      	orrs	r3, r2
 8005120:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4abc      	ldr	r2, [pc, #752]	; (800541c <UART_SetConfig+0x328>)
 800512a:	4013      	ands	r3, r2
 800512c:	0019      	movs	r1, r3
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005134:	430a      	orrs	r2, r1
 8005136:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	4ab8      	ldr	r2, [pc, #736]	; (8005420 <UART_SetConfig+0x32c>)
 8005140:	4013      	ands	r3, r2
 8005142:	0019      	movs	r1, r3
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4ab2      	ldr	r2, [pc, #712]	; (8005424 <UART_SetConfig+0x330>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d004      	beq.n	800516a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005166:	4313      	orrs	r3, r2
 8005168:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	4aad      	ldr	r2, [pc, #692]	; (8005428 <UART_SetConfig+0x334>)
 8005172:	4013      	ands	r3, r2
 8005174:	0019      	movs	r1, r3
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800517c:	430a      	orrs	r2, r1
 800517e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4aa9      	ldr	r2, [pc, #676]	; (800542c <UART_SetConfig+0x338>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d136      	bne.n	80051f8 <UART_SetConfig+0x104>
 800518a:	4ba9      	ldr	r3, [pc, #676]	; (8005430 <UART_SetConfig+0x33c>)
 800518c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518e:	220c      	movs	r2, #12
 8005190:	4013      	ands	r3, r2
 8005192:	2b0c      	cmp	r3, #12
 8005194:	d020      	beq.n	80051d8 <UART_SetConfig+0xe4>
 8005196:	d827      	bhi.n	80051e8 <UART_SetConfig+0xf4>
 8005198:	2b08      	cmp	r3, #8
 800519a:	d00d      	beq.n	80051b8 <UART_SetConfig+0xc4>
 800519c:	d824      	bhi.n	80051e8 <UART_SetConfig+0xf4>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <UART_SetConfig+0xb4>
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d010      	beq.n	80051c8 <UART_SetConfig+0xd4>
 80051a6:	e01f      	b.n	80051e8 <UART_SetConfig+0xf4>
 80051a8:	231b      	movs	r3, #27
 80051aa:	2218      	movs	r2, #24
 80051ac:	4694      	mov	ip, r2
 80051ae:	44bc      	add	ip, r7
 80051b0:	4463      	add	r3, ip
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	e06f      	b.n	8005298 <UART_SetConfig+0x1a4>
 80051b8:	231b      	movs	r3, #27
 80051ba:	2218      	movs	r2, #24
 80051bc:	4694      	mov	ip, r2
 80051be:	44bc      	add	ip, r7
 80051c0:	4463      	add	r3, ip
 80051c2:	2202      	movs	r2, #2
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	e067      	b.n	8005298 <UART_SetConfig+0x1a4>
 80051c8:	231b      	movs	r3, #27
 80051ca:	2218      	movs	r2, #24
 80051cc:	4694      	mov	ip, r2
 80051ce:	44bc      	add	ip, r7
 80051d0:	4463      	add	r3, ip
 80051d2:	2204      	movs	r2, #4
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	e05f      	b.n	8005298 <UART_SetConfig+0x1a4>
 80051d8:	231b      	movs	r3, #27
 80051da:	2218      	movs	r2, #24
 80051dc:	4694      	mov	ip, r2
 80051de:	44bc      	add	ip, r7
 80051e0:	4463      	add	r3, ip
 80051e2:	2208      	movs	r2, #8
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e057      	b.n	8005298 <UART_SetConfig+0x1a4>
 80051e8:	231b      	movs	r3, #27
 80051ea:	2218      	movs	r2, #24
 80051ec:	4694      	mov	ip, r2
 80051ee:	44bc      	add	ip, r7
 80051f0:	4463      	add	r3, ip
 80051f2:	2210      	movs	r2, #16
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	e04f      	b.n	8005298 <UART_SetConfig+0x1a4>
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a89      	ldr	r2, [pc, #548]	; (8005424 <UART_SetConfig+0x330>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d143      	bne.n	800528a <UART_SetConfig+0x196>
 8005202:	4b8b      	ldr	r3, [pc, #556]	; (8005430 <UART_SetConfig+0x33c>)
 8005204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005206:	23c0      	movs	r3, #192	; 0xc0
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	4013      	ands	r3, r2
 800520c:	22c0      	movs	r2, #192	; 0xc0
 800520e:	0112      	lsls	r2, r2, #4
 8005210:	4293      	cmp	r3, r2
 8005212:	d02a      	beq.n	800526a <UART_SetConfig+0x176>
 8005214:	22c0      	movs	r2, #192	; 0xc0
 8005216:	0112      	lsls	r2, r2, #4
 8005218:	4293      	cmp	r3, r2
 800521a:	d82e      	bhi.n	800527a <UART_SetConfig+0x186>
 800521c:	2280      	movs	r2, #128	; 0x80
 800521e:	0112      	lsls	r2, r2, #4
 8005220:	4293      	cmp	r3, r2
 8005222:	d012      	beq.n	800524a <UART_SetConfig+0x156>
 8005224:	2280      	movs	r2, #128	; 0x80
 8005226:	0112      	lsls	r2, r2, #4
 8005228:	4293      	cmp	r3, r2
 800522a:	d826      	bhi.n	800527a <UART_SetConfig+0x186>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d004      	beq.n	800523a <UART_SetConfig+0x146>
 8005230:	2280      	movs	r2, #128	; 0x80
 8005232:	00d2      	lsls	r2, r2, #3
 8005234:	4293      	cmp	r3, r2
 8005236:	d010      	beq.n	800525a <UART_SetConfig+0x166>
 8005238:	e01f      	b.n	800527a <UART_SetConfig+0x186>
 800523a:	231b      	movs	r3, #27
 800523c:	2218      	movs	r2, #24
 800523e:	4694      	mov	ip, r2
 8005240:	44bc      	add	ip, r7
 8005242:	4463      	add	r3, ip
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e026      	b.n	8005298 <UART_SetConfig+0x1a4>
 800524a:	231b      	movs	r3, #27
 800524c:	2218      	movs	r2, #24
 800524e:	4694      	mov	ip, r2
 8005250:	44bc      	add	ip, r7
 8005252:	4463      	add	r3, ip
 8005254:	2202      	movs	r2, #2
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	e01e      	b.n	8005298 <UART_SetConfig+0x1a4>
 800525a:	231b      	movs	r3, #27
 800525c:	2218      	movs	r2, #24
 800525e:	4694      	mov	ip, r2
 8005260:	44bc      	add	ip, r7
 8005262:	4463      	add	r3, ip
 8005264:	2204      	movs	r2, #4
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	e016      	b.n	8005298 <UART_SetConfig+0x1a4>
 800526a:	231b      	movs	r3, #27
 800526c:	2218      	movs	r2, #24
 800526e:	4694      	mov	ip, r2
 8005270:	44bc      	add	ip, r7
 8005272:	4463      	add	r3, ip
 8005274:	2208      	movs	r2, #8
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	e00e      	b.n	8005298 <UART_SetConfig+0x1a4>
 800527a:	231b      	movs	r3, #27
 800527c:	2218      	movs	r2, #24
 800527e:	4694      	mov	ip, r2
 8005280:	44bc      	add	ip, r7
 8005282:	4463      	add	r3, ip
 8005284:	2210      	movs	r2, #16
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	e006      	b.n	8005298 <UART_SetConfig+0x1a4>
 800528a:	231b      	movs	r3, #27
 800528c:	2218      	movs	r2, #24
 800528e:	4694      	mov	ip, r2
 8005290:	44bc      	add	ip, r7
 8005292:	4463      	add	r3, ip
 8005294:	2210      	movs	r2, #16
 8005296:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a61      	ldr	r2, [pc, #388]	; (8005424 <UART_SetConfig+0x330>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d000      	beq.n	80052a4 <UART_SetConfig+0x1b0>
 80052a2:	e088      	b.n	80053b6 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052a4:	231b      	movs	r3, #27
 80052a6:	2218      	movs	r2, #24
 80052a8:	4694      	mov	ip, r2
 80052aa:	44bc      	add	ip, r7
 80052ac:	4463      	add	r3, ip
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d01d      	beq.n	80052f0 <UART_SetConfig+0x1fc>
 80052b4:	dc20      	bgt.n	80052f8 <UART_SetConfig+0x204>
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d015      	beq.n	80052e6 <UART_SetConfig+0x1f2>
 80052ba:	dc1d      	bgt.n	80052f8 <UART_SetConfig+0x204>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <UART_SetConfig+0x1d2>
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d005      	beq.n	80052d0 <UART_SetConfig+0x1dc>
 80052c4:	e018      	b.n	80052f8 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c6:	f7fe ff2f 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 80052ca:	0003      	movs	r3, r0
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052ce:	e01d      	b.n	800530c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052d0:	4b57      	ldr	r3, [pc, #348]	; (8005430 <UART_SetConfig+0x33c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2210      	movs	r2, #16
 80052d6:	4013      	ands	r3, r2
 80052d8:	d002      	beq.n	80052e0 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052da:	4b56      	ldr	r3, [pc, #344]	; (8005434 <UART_SetConfig+0x340>)
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052de:	e015      	b.n	800530c <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 80052e0:	4b55      	ldr	r3, [pc, #340]	; (8005438 <UART_SetConfig+0x344>)
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052e4:	e012      	b.n	800530c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e6:	f7fe fe6f 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 80052ea:	0003      	movs	r3, r0
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052ee:	e00d      	b.n	800530c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f0:	2380      	movs	r3, #128	; 0x80
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052f6:	e009      	b.n	800530c <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80052fc:	231a      	movs	r3, #26
 80052fe:	2218      	movs	r2, #24
 8005300:	4694      	mov	ip, r2
 8005302:	44bc      	add	ip, r7
 8005304:	4463      	add	r3, ip
 8005306:	2201      	movs	r2, #1
 8005308:	701a      	strb	r2, [r3, #0]
        break;
 800530a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d100      	bne.n	8005314 <UART_SetConfig+0x220>
 8005312:	e139      	b.n	8005588 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	0013      	movs	r3, r2
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	189b      	adds	r3, r3, r2
 800531e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005320:	429a      	cmp	r2, r3
 8005322:	d305      	bcc.n	8005330 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800532a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800532c:	429a      	cmp	r2, r3
 800532e:	d907      	bls.n	8005340 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8005330:	231a      	movs	r3, #26
 8005332:	2218      	movs	r2, #24
 8005334:	4694      	mov	ip, r2
 8005336:	44bc      	add	ip, r7
 8005338:	4463      	add	r3, ip
 800533a:	2201      	movs	r2, #1
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e123      	b.n	8005588 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	6939      	ldr	r1, [r7, #16]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	000b      	movs	r3, r1
 800534e:	0e1b      	lsrs	r3, r3, #24
 8005350:	0010      	movs	r0, r2
 8005352:	0205      	lsls	r5, r0, #8
 8005354:	431d      	orrs	r5, r3
 8005356:	000b      	movs	r3, r1
 8005358:	021c      	lsls	r4, r3, #8
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	68b8      	ldr	r0, [r7, #8]
 8005368:	68f9      	ldr	r1, [r7, #12]
 800536a:	1900      	adds	r0, r0, r4
 800536c:	4169      	adcs	r1, r5
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	2300      	movs	r3, #0
 8005376:	607b      	str	r3, [r7, #4]
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f7fb f84c 	bl	8000418 <__aeabi_uldivmod>
 8005380:	0002      	movs	r2, r0
 8005382:	000b      	movs	r3, r1
 8005384:	0013      	movs	r3, r2
 8005386:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800538a:	23c0      	movs	r3, #192	; 0xc0
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	429a      	cmp	r2, r3
 8005390:	d309      	bcc.n	80053a6 <UART_SetConfig+0x2b2>
 8005392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	035b      	lsls	r3, r3, #13
 8005398:	429a      	cmp	r2, r3
 800539a:	d204      	bcs.n	80053a6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a2:	60da      	str	r2, [r3, #12]
 80053a4:	e0f0      	b.n	8005588 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80053a6:	231a      	movs	r3, #26
 80053a8:	2218      	movs	r2, #24
 80053aa:	4694      	mov	ip, r2
 80053ac:	44bc      	add	ip, r7
 80053ae:	4463      	add	r3, ip
 80053b0:	2201      	movs	r2, #1
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	e0e8      	b.n	8005588 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	69da      	ldr	r2, [r3, #28]
 80053ba:	2380      	movs	r3, #128	; 0x80
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	429a      	cmp	r2, r3
 80053c0:	d000      	beq.n	80053c4 <UART_SetConfig+0x2d0>
 80053c2:	e087      	b.n	80054d4 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 80053c4:	231b      	movs	r3, #27
 80053c6:	2218      	movs	r2, #24
 80053c8:	4694      	mov	ip, r2
 80053ca:	44bc      	add	ip, r7
 80053cc:	4463      	add	r3, ip
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d835      	bhi.n	8005440 <UART_SetConfig+0x34c>
 80053d4:	009a      	lsls	r2, r3, #2
 80053d6:	4b19      	ldr	r3, [pc, #100]	; (800543c <UART_SetConfig+0x348>)
 80053d8:	18d3      	adds	r3, r2, r3
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053de:	f7fe fea3 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 80053e2:	0003      	movs	r3, r0
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053e6:	e035      	b.n	8005454 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053e8:	f7fe feb4 	bl	8004154 <HAL_RCC_GetPCLK2Freq>
 80053ec:	0003      	movs	r3, r0
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053f0:	e030      	b.n	8005454 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053f2:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <UART_SetConfig+0x33c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2210      	movs	r2, #16
 80053f8:	4013      	ands	r3, r2
 80053fa:	d002      	beq.n	8005402 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80053fc:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <UART_SetConfig+0x340>)
 80053fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005400:	e028      	b.n	8005454 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8005402:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <UART_SetConfig+0x344>)
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005406:	e025      	b.n	8005454 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005408:	f7fe fdde 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 800540c:	0003      	movs	r3, r0
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005410:	e020      	b.n	8005454 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005412:	2380      	movs	r3, #128	; 0x80
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005418:	e01c      	b.n	8005454 <UART_SetConfig+0x360>
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	efff69f3 	.word	0xefff69f3
 8005420:	ffffcfff 	.word	0xffffcfff
 8005424:	40004800 	.word	0x40004800
 8005428:	fffff4ff 	.word	0xfffff4ff
 800542c:	40004400 	.word	0x40004400
 8005430:	40021000 	.word	0x40021000
 8005434:	003d0900 	.word	0x003d0900
 8005438:	00f42400 	.word	0x00f42400
 800543c:	08006934 	.word	0x08006934
      default:
        pclk = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005444:	231a      	movs	r3, #26
 8005446:	2218      	movs	r2, #24
 8005448:	4694      	mov	ip, r2
 800544a:	44bc      	add	ip, r7
 800544c:	4463      	add	r3, ip
 800544e:	2201      	movs	r2, #1
 8005450:	701a      	strb	r2, [r3, #0]
        break;
 8005452:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	2b00      	cmp	r3, #0
 8005458:	d100      	bne.n	800545c <UART_SetConfig+0x368>
 800545a:	e095      	b.n	8005588 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545e:	005a      	lsls	r2, r3, #1
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	085b      	lsrs	r3, r3, #1
 8005466:	18d2      	adds	r2, r2, r3
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	0019      	movs	r1, r3
 800546e:	0010      	movs	r0, r2
 8005470:	f7fa fe5c 	bl	800012c <__udivsi3>
 8005474:	0003      	movs	r3, r0
 8005476:	b29b      	uxth	r3, r3
 8005478:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	2b0f      	cmp	r3, #15
 800547e:	d921      	bls.n	80054c4 <UART_SetConfig+0x3d0>
 8005480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005482:	2380      	movs	r3, #128	; 0x80
 8005484:	025b      	lsls	r3, r3, #9
 8005486:	429a      	cmp	r2, r3
 8005488:	d21c      	bcs.n	80054c4 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	b29a      	uxth	r2, r3
 800548e:	200e      	movs	r0, #14
 8005490:	2418      	movs	r4, #24
 8005492:	193b      	adds	r3, r7, r4
 8005494:	181b      	adds	r3, r3, r0
 8005496:	210f      	movs	r1, #15
 8005498:	438a      	bics	r2, r1
 800549a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	085b      	lsrs	r3, r3, #1
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2207      	movs	r2, #7
 80054a4:	4013      	ands	r3, r2
 80054a6:	b299      	uxth	r1, r3
 80054a8:	193b      	adds	r3, r7, r4
 80054aa:	181b      	adds	r3, r3, r0
 80054ac:	193a      	adds	r2, r7, r4
 80054ae:	1812      	adds	r2, r2, r0
 80054b0:	8812      	ldrh	r2, [r2, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	193a      	adds	r2, r7, r4
 80054bc:	1812      	adds	r2, r2, r0
 80054be:	8812      	ldrh	r2, [r2, #0]
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	e061      	b.n	8005588 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80054c4:	231a      	movs	r3, #26
 80054c6:	2218      	movs	r2, #24
 80054c8:	4694      	mov	ip, r2
 80054ca:	44bc      	add	ip, r7
 80054cc:	4463      	add	r3, ip
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	e059      	b.n	8005588 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054d4:	231b      	movs	r3, #27
 80054d6:	2218      	movs	r2, #24
 80054d8:	4694      	mov	ip, r2
 80054da:	44bc      	add	ip, r7
 80054dc:	4463      	add	r3, ip
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d822      	bhi.n	800552a <UART_SetConfig+0x436>
 80054e4:	009a      	lsls	r2, r3, #2
 80054e6:	4b30      	ldr	r3, [pc, #192]	; (80055a8 <UART_SetConfig+0x4b4>)
 80054e8:	18d3      	adds	r3, r2, r3
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ee:	f7fe fe1b 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 80054f2:	0003      	movs	r3, r0
 80054f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054f6:	e022      	b.n	800553e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054f8:	f7fe fe2c 	bl	8004154 <HAL_RCC_GetPCLK2Freq>
 80054fc:	0003      	movs	r3, r0
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005500:	e01d      	b.n	800553e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005502:	4b2a      	ldr	r3, [pc, #168]	; (80055ac <UART_SetConfig+0x4b8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2210      	movs	r2, #16
 8005508:	4013      	ands	r3, r2
 800550a:	d002      	beq.n	8005512 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800550c:	4b28      	ldr	r3, [pc, #160]	; (80055b0 <UART_SetConfig+0x4bc>)
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005510:	e015      	b.n	800553e <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8005512:	4b28      	ldr	r3, [pc, #160]	; (80055b4 <UART_SetConfig+0x4c0>)
 8005514:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005516:	e012      	b.n	800553e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005518:	f7fe fd56 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 800551c:	0003      	movs	r3, r0
 800551e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005520:	e00d      	b.n	800553e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005522:	2380      	movs	r3, #128	; 0x80
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005528:	e009      	b.n	800553e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800552e:	231a      	movs	r3, #26
 8005530:	2218      	movs	r2, #24
 8005532:	4694      	mov	ip, r2
 8005534:	44bc      	add	ip, r7
 8005536:	4463      	add	r3, ip
 8005538:	2201      	movs	r2, #1
 800553a:	701a      	strb	r2, [r3, #0]
        break;
 800553c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	2b00      	cmp	r3, #0
 8005542:	d021      	beq.n	8005588 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	085a      	lsrs	r2, r3, #1
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	18d2      	adds	r2, r2, r3
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	0019      	movs	r1, r3
 8005554:	0010      	movs	r0, r2
 8005556:	f7fa fde9 	bl	800012c <__udivsi3>
 800555a:	0003      	movs	r3, r0
 800555c:	b29b      	uxth	r3, r3
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	2b0f      	cmp	r3, #15
 8005564:	d909      	bls.n	800557a <UART_SetConfig+0x486>
 8005566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	025b      	lsls	r3, r3, #9
 800556c:	429a      	cmp	r2, r3
 800556e:	d204      	bcs.n	800557a <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005576:	60da      	str	r2, [r3, #12]
 8005578:	e006      	b.n	8005588 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800557a:	231a      	movs	r3, #26
 800557c:	2218      	movs	r2, #24
 800557e:	4694      	mov	ip, r2
 8005580:	44bc      	add	ip, r7
 8005582:	4463      	add	r3, ip
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	2200      	movs	r2, #0
 800558c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	2200      	movs	r2, #0
 8005592:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005594:	231a      	movs	r3, #26
 8005596:	2218      	movs	r2, #24
 8005598:	4694      	mov	ip, r2
 800559a:	44bc      	add	ip, r7
 800559c:	4463      	add	r3, ip
 800559e:	781b      	ldrb	r3, [r3, #0]
}
 80055a0:	0018      	movs	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b00e      	add	sp, #56	; 0x38
 80055a6:	bdb0      	pop	{r4, r5, r7, pc}
 80055a8:	08006958 	.word	0x08006958
 80055ac:	40021000 	.word	0x40021000
 80055b0:	003d0900 	.word	0x003d0900
 80055b4:	00f42400 	.word	0x00f42400

080055b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2201      	movs	r2, #1
 80055c6:	4013      	ands	r3, r2
 80055c8:	d00b      	beq.n	80055e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	4a4a      	ldr	r2, [pc, #296]	; (80056fc <UART_AdvFeatureConfig+0x144>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	0019      	movs	r1, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2202      	movs	r2, #2
 80055e8:	4013      	ands	r3, r2
 80055ea:	d00b      	beq.n	8005604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	4a43      	ldr	r2, [pc, #268]	; (8005700 <UART_AdvFeatureConfig+0x148>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	0019      	movs	r1, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	2204      	movs	r2, #4
 800560a:	4013      	ands	r3, r2
 800560c:	d00b      	beq.n	8005626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	4a3b      	ldr	r2, [pc, #236]	; (8005704 <UART_AdvFeatureConfig+0x14c>)
 8005616:	4013      	ands	r3, r2
 8005618:	0019      	movs	r1, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	2208      	movs	r2, #8
 800562c:	4013      	ands	r3, r2
 800562e:	d00b      	beq.n	8005648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4a34      	ldr	r2, [pc, #208]	; (8005708 <UART_AdvFeatureConfig+0x150>)
 8005638:	4013      	ands	r3, r2
 800563a:	0019      	movs	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2210      	movs	r2, #16
 800564e:	4013      	ands	r3, r2
 8005650:	d00b      	beq.n	800566a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	4a2c      	ldr	r2, [pc, #176]	; (800570c <UART_AdvFeatureConfig+0x154>)
 800565a:	4013      	ands	r3, r2
 800565c:	0019      	movs	r1, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	2220      	movs	r2, #32
 8005670:	4013      	ands	r3, r2
 8005672:	d00b      	beq.n	800568c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	4a25      	ldr	r2, [pc, #148]	; (8005710 <UART_AdvFeatureConfig+0x158>)
 800567c:	4013      	ands	r3, r2
 800567e:	0019      	movs	r1, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	2240      	movs	r2, #64	; 0x40
 8005692:	4013      	ands	r3, r2
 8005694:	d01d      	beq.n	80056d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	4a1d      	ldr	r2, [pc, #116]	; (8005714 <UART_AdvFeatureConfig+0x15c>)
 800569e:	4013      	ands	r3, r2
 80056a0:	0019      	movs	r1, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056b2:	2380      	movs	r3, #128	; 0x80
 80056b4:	035b      	lsls	r3, r3, #13
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d10b      	bne.n	80056d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	4a15      	ldr	r2, [pc, #84]	; (8005718 <UART_AdvFeatureConfig+0x160>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	0019      	movs	r1, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	2280      	movs	r2, #128	; 0x80
 80056d8:	4013      	ands	r3, r2
 80056da:	d00b      	beq.n	80056f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4a0e      	ldr	r2, [pc, #56]	; (800571c <UART_AdvFeatureConfig+0x164>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	0019      	movs	r1, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	605a      	str	r2, [r3, #4]
  }
}
 80056f4:	46c0      	nop			; (mov r8, r8)
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b002      	add	sp, #8
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	fffdffff 	.word	0xfffdffff
 8005700:	fffeffff 	.word	0xfffeffff
 8005704:	fffbffff 	.word	0xfffbffff
 8005708:	ffff7fff 	.word	0xffff7fff
 800570c:	ffffefff 	.word	0xffffefff
 8005710:	ffffdfff 	.word	0xffffdfff
 8005714:	ffefffff 	.word	0xffefffff
 8005718:	ff9fffff 	.word	0xff9fffff
 800571c:	fff7ffff 	.word	0xfff7ffff

08005720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af02      	add	r7, sp, #8
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2280      	movs	r2, #128	; 0x80
 800572c:	2100      	movs	r1, #0
 800572e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005730:	f7fc fc92 	bl	8002058 <HAL_GetTick>
 8005734:	0003      	movs	r3, r0
 8005736:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2208      	movs	r2, #8
 8005740:	4013      	ands	r3, r2
 8005742:	2b08      	cmp	r3, #8
 8005744:	d10c      	bne.n	8005760 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2280      	movs	r2, #128	; 0x80
 800574a:	0391      	lsls	r1, r2, #14
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	4a17      	ldr	r2, [pc, #92]	; (80057ac <UART_CheckIdleState+0x8c>)
 8005750:	9200      	str	r2, [sp, #0]
 8005752:	2200      	movs	r2, #0
 8005754:	f000 f82c 	bl	80057b0 <UART_WaitOnFlagUntilTimeout>
 8005758:	1e03      	subs	r3, r0, #0
 800575a:	d001      	beq.n	8005760 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e021      	b.n	80057a4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2204      	movs	r2, #4
 8005768:	4013      	ands	r3, r2
 800576a:	2b04      	cmp	r3, #4
 800576c:	d10c      	bne.n	8005788 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2280      	movs	r2, #128	; 0x80
 8005772:	03d1      	lsls	r1, r2, #15
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4a0d      	ldr	r2, [pc, #52]	; (80057ac <UART_CheckIdleState+0x8c>)
 8005778:	9200      	str	r2, [sp, #0]
 800577a:	2200      	movs	r2, #0
 800577c:	f000 f818 	bl	80057b0 <UART_WaitOnFlagUntilTimeout>
 8005780:	1e03      	subs	r3, r0, #0
 8005782:	d001      	beq.n	8005788 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e00d      	b.n	80057a4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2274      	movs	r2, #116	; 0x74
 800579e:	2100      	movs	r1, #0
 80057a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	0018      	movs	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	b004      	add	sp, #16
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	01ffffff 	.word	0x01ffffff

080057b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b094      	sub	sp, #80	; 0x50
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	1dfb      	adds	r3, r7, #7
 80057be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c0:	e0a3      	b.n	800590a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057c4:	3301      	adds	r3, #1
 80057c6:	d100      	bne.n	80057ca <UART_WaitOnFlagUntilTimeout+0x1a>
 80057c8:	e09f      	b.n	800590a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ca:	f7fc fc45 	bl	8002058 <HAL_GetTick>
 80057ce:	0002      	movs	r2, r0
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d302      	bcc.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80057da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d13d      	bne.n	800585c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e0:	f3ef 8310 	mrs	r3, PRIMASK
 80057e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057e8:	647b      	str	r3, [r7, #68]	; 0x44
 80057ea:	2301      	movs	r3, #1
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f0:	f383 8810 	msr	PRIMASK, r3
}
 80057f4:	46c0      	nop			; (mov r8, r8)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	494c      	ldr	r1, [pc, #304]	; (8005934 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005802:	400a      	ands	r2, r1
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005808:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	f383 8810 	msr	PRIMASK, r3
}
 8005810:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005812:	f3ef 8310 	mrs	r3, PRIMASK
 8005816:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581a:	643b      	str	r3, [r7, #64]	; 0x40
 800581c:	2301      	movs	r3, #1
 800581e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	f383 8810 	msr	PRIMASK, r3
}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2101      	movs	r1, #1
 8005834:	438a      	bics	r2, r1
 8005836:	609a      	str	r2, [r3, #8]
 8005838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583e:	f383 8810 	msr	PRIMASK, r3
}
 8005842:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2274      	movs	r2, #116	; 0x74
 8005854:	2100      	movs	r1, #0
 8005856:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e067      	b.n	800592c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2204      	movs	r2, #4
 8005864:	4013      	ands	r3, r2
 8005866:	d050      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	2380      	movs	r3, #128	; 0x80
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	401a      	ands	r2, r3
 8005874:	2380      	movs	r3, #128	; 0x80
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	429a      	cmp	r2, r3
 800587a:	d146      	bne.n	800590a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2280      	movs	r2, #128	; 0x80
 8005882:	0112      	lsls	r2, r2, #4
 8005884:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005886:	f3ef 8310 	mrs	r3, PRIMASK
 800588a:	613b      	str	r3, [r7, #16]
  return(result);
 800588c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800588e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005890:	2301      	movs	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f383 8810 	msr	PRIMASK, r3
}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4923      	ldr	r1, [pc, #140]	; (8005934 <UART_WaitOnFlagUntilTimeout+0x184>)
 80058a8:	400a      	ands	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	f383 8810 	msr	PRIMASK, r3
}
 80058b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b8:	f3ef 8310 	mrs	r3, PRIMASK
 80058bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80058be:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80058c2:	2301      	movs	r3, #1
 80058c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	f383 8810 	msr	PRIMASK, r3
}
 80058cc:	46c0      	nop			; (mov r8, r8)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2101      	movs	r1, #1
 80058da:	438a      	bics	r2, r1
 80058dc:	609a      	str	r2, [r3, #8]
 80058de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	f383 8810 	msr	PRIMASK, r3
}
 80058e8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2280      	movs	r2, #128	; 0x80
 80058fa:	2120      	movs	r1, #32
 80058fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2274      	movs	r2, #116	; 0x74
 8005902:	2100      	movs	r1, #0
 8005904:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e010      	b.n	800592c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	4013      	ands	r3, r2
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	425a      	negs	r2, r3
 800591a:	4153      	adcs	r3, r2
 800591c:	b2db      	uxtb	r3, r3
 800591e:	001a      	movs	r2, r3
 8005920:	1dfb      	adds	r3, r7, #7
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d100      	bne.n	800592a <UART_WaitOnFlagUntilTimeout+0x17a>
 8005928:	e74b      	b.n	80057c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	0018      	movs	r0, r3
 800592e:	46bd      	mov	sp, r7
 8005930:	b014      	add	sp, #80	; 0x50
 8005932:	bd80      	pop	{r7, pc}
 8005934:	fffffe5f 	.word	0xfffffe5f

08005938 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b090      	sub	sp, #64	; 0x40
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	1dbb      	adds	r3, r7, #6
 8005944:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	1dba      	adds	r2, r7, #6
 8005950:	2158      	movs	r1, #88	; 0x58
 8005952:	8812      	ldrh	r2, [r2, #0]
 8005954:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2280      	movs	r2, #128	; 0x80
 800595a:	2100      	movs	r1, #0
 800595c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2222      	movs	r2, #34	; 0x22
 8005962:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005968:	2b00      	cmp	r3, #0
 800596a:	d02b      	beq.n	80059c4 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005970:	4a3f      	ldr	r2, [pc, #252]	; (8005a70 <UART_Start_Receive_DMA+0x138>)
 8005972:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005978:	4a3e      	ldr	r2, [pc, #248]	; (8005a74 <UART_Start_Receive_DMA+0x13c>)
 800597a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005980:	4a3d      	ldr	r2, [pc, #244]	; (8005a78 <UART_Start_Receive_DMA+0x140>)
 8005982:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005988:	2200      	movs	r2, #0
 800598a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3324      	adds	r3, #36	; 0x24
 8005996:	0019      	movs	r1, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599c:	001a      	movs	r2, r3
 800599e:	1dbb      	adds	r3, r7, #6
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	f7fc fcdd 	bl	8002360 <HAL_DMA_Start_IT>
 80059a6:	1e03      	subs	r3, r0, #0
 80059a8:	d00c      	beq.n	80059c4 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2280      	movs	r2, #128	; 0x80
 80059ae:	2110      	movs	r1, #16
 80059b0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2274      	movs	r2, #116	; 0x74
 80059b6:	2100      	movs	r1, #0
 80059b8:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e050      	b.n	8005a66 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2274      	movs	r2, #116	; 0x74
 80059c8:	2100      	movs	r1, #0
 80059ca:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059cc:	f3ef 8310 	mrs	r3, PRIMASK
 80059d0:	613b      	str	r3, [r7, #16]
  return(result);
 80059d2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d6:	2301      	movs	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f383 8810 	msr	PRIMASK, r3
}
 80059e0:	46c0      	nop			; (mov r8, r8)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2180      	movs	r1, #128	; 0x80
 80059ee:	0049      	lsls	r1, r1, #1
 80059f0:	430a      	orrs	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	f383 8810 	msr	PRIMASK, r3
}
 80059fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a00:	f3ef 8310 	mrs	r3, PRIMASK
 8005a04:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a06:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a08:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	f383 8810 	msr	PRIMASK, r3
}
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2101      	movs	r1, #1
 8005a22:	430a      	orrs	r2, r1
 8005a24:	609a      	str	r2, [r3, #8]
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	f383 8810 	msr	PRIMASK, r3
}
 8005a30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a32:	f3ef 8310 	mrs	r3, PRIMASK
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a42:	f383 8810 	msr	PRIMASK, r3
}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2140      	movs	r1, #64	; 0x40
 8005a54:	430a      	orrs	r2, r1
 8005a56:	609a      	str	r2, [r3, #8]
 8005a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	f383 8810 	msr	PRIMASK, r3
}
 8005a62:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	0018      	movs	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	b010      	add	sp, #64	; 0x40
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	08005b89 	.word	0x08005b89
 8005a74:	08005cb1 	.word	0x08005cb1
 8005a78:	08005ced 	.word	0x08005ced

08005a7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a84:	f3ef 8310 	mrs	r3, PRIMASK
 8005a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	2301      	movs	r3, #1
 8005a90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f383 8810 	msr	PRIMASK, r3
}
 8005a98:	46c0      	nop			; (mov r8, r8)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	21c0      	movs	r1, #192	; 0xc0
 8005aa6:	438a      	bics	r2, r1
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f383 8810 	msr	PRIMASK, r3
}
 8005ab4:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005abc:	46c0      	nop			; (mov r8, r8)
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b006      	add	sp, #24
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08e      	sub	sp, #56	; 0x38
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005acc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ad0:	617b      	str	r3, [r7, #20]
  return(result);
 8005ad2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	f383 8810 	msr	PRIMASK, r3
}
 8005ae0:	46c0      	nop			; (mov r8, r8)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4925      	ldr	r1, [pc, #148]	; (8005b84 <UART_EndRxTransfer+0xc0>)
 8005aee:	400a      	ands	r2, r1
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	f383 8810 	msr	PRIMASK, r3
}
 8005afc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005afe:	f3ef 8310 	mrs	r3, PRIMASK
 8005b02:	623b      	str	r3, [r7, #32]
  return(result);
 8005b04:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b06:	633b      	str	r3, [r7, #48]	; 0x30
 8005b08:	2301      	movs	r3, #1
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	f383 8810 	msr	PRIMASK, r3
}
 8005b12:	46c0      	nop			; (mov r8, r8)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2101      	movs	r1, #1
 8005b20:	438a      	bics	r2, r1
 8005b22:	609a      	str	r2, [r3, #8]
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	f383 8810 	msr	PRIMASK, r3
}
 8005b2e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d118      	bne.n	8005b6a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b38:	f3ef 8310 	mrs	r3, PRIMASK
 8005b3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b42:	2301      	movs	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f383 8810 	msr	PRIMASK, r3
}
 8005b4c:	46c0      	nop			; (mov r8, r8)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2110      	movs	r1, #16
 8005b5a:	438a      	bics	r2, r1
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f383 8810 	msr	PRIMASK, r3
}
 8005b68:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005b7c:	46c0      	nop			; (mov r8, r8)
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b00e      	add	sp, #56	; 0x38
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	fffffedf 	.word	0xfffffedf

08005b88 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b094      	sub	sp, #80	; 0x50
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d16e      	bne.n	8005c80 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8005ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba4:	225a      	movs	r2, #90	; 0x5a
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005baa:	f3ef 8310 	mrs	r3, PRIMASK
 8005bae:	61bb      	str	r3, [r7, #24]
  return(result);
 8005bb0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f383 8810 	msr	PRIMASK, r3
}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4938      	ldr	r1, [pc, #224]	; (8005cac <UART_DMAReceiveCplt+0x124>)
 8005bcc:	400a      	ands	r2, r1
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	f383 8810 	msr	PRIMASK, r3
}
 8005bda:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be4:	647b      	str	r3, [r7, #68]	; 0x44
 8005be6:	2301      	movs	r3, #1
 8005be8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	f383 8810 	msr	PRIMASK, r3
}
 8005bf0:	46c0      	nop			; (mov r8, r8)
 8005bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	438a      	bics	r2, r1
 8005c00:	609a      	str	r2, [r3, #8]
 8005c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c08:	f383 8810 	msr	PRIMASK, r3
}
 8005c0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c12:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c16:	643b      	str	r3, [r7, #64]	; 0x40
 8005c18:	2301      	movs	r3, #1
 8005c1a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1e:	f383 8810 	msr	PRIMASK, r3
}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2140      	movs	r1, #64	; 0x40
 8005c30:	438a      	bics	r2, r1
 8005c32:	609a      	str	r2, [r3, #8]
 8005c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3a:	f383 8810 	msr	PRIMASK, r3
}
 8005c3e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c42:	2220      	movs	r2, #32
 8005c44:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d118      	bne.n	8005c80 <UART_DMAReceiveCplt+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c52:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c54:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c58:	2301      	movs	r3, #1
 8005c5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f383 8810 	msr	PRIMASK, r3
}
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2110      	movs	r1, #16
 8005c70:	438a      	bics	r2, r1
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f383 8810 	msr	PRIMASK, r3
}
 8005c7e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d108      	bne.n	8005c9a <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8a:	2258      	movs	r2, #88	; 0x58
 8005c8c:	5a9a      	ldrh	r2, [r3, r2]
 8005c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c90:	0011      	movs	r1, r2
 8005c92:	0018      	movs	r0, r3
 8005c94:	f7fb ff28 	bl	8001ae8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c98:	e003      	b.n	8005ca2 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8005c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	f7ff fa11 	bl	80050c4 <HAL_UART_RxCpltCallback>
}
 8005ca2:	46c0      	nop			; (mov r8, r8)
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	b014      	add	sp, #80	; 0x50
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	fffffeff 	.word	0xfffffeff

08005cb0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d10a      	bne.n	8005cdc <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2258      	movs	r2, #88	; 0x58
 8005cca:	5a9b      	ldrh	r3, [r3, r2]
 8005ccc:	085b      	lsrs	r3, r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	0011      	movs	r1, r2
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f7fb ff07 	bl	8001ae8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cda:	e003      	b.n	8005ce4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f7ff f9f8 	bl	80050d4 <HAL_UART_RxHalfCpltCallback>
}
 8005ce4:	46c0      	nop			; (mov r8, r8)
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	b004      	add	sp, #16
 8005cea:	bd80      	pop	{r7, pc}

08005cec <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cfe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d04:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2280      	movs	r2, #128	; 0x80
 8005d0e:	4013      	ands	r3, r2
 8005d10:	2b80      	cmp	r3, #128	; 0x80
 8005d12:	d10a      	bne.n	8005d2a <UART_DMAError+0x3e>
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b21      	cmp	r3, #33	; 0x21
 8005d18:	d107      	bne.n	8005d2a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2252      	movs	r2, #82	; 0x52
 8005d1e:	2100      	movs	r1, #0
 8005d20:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	0018      	movs	r0, r3
 8005d26:	f7ff fea9 	bl	8005a7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	2240      	movs	r2, #64	; 0x40
 8005d32:	4013      	ands	r3, r2
 8005d34:	2b40      	cmp	r3, #64	; 0x40
 8005d36:	d10a      	bne.n	8005d4e <UART_DMAError+0x62>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b22      	cmp	r3, #34	; 0x22
 8005d3c:	d107      	bne.n	8005d4e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	225a      	movs	r2, #90	; 0x5a
 8005d42:	2100      	movs	r1, #0
 8005d44:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f7ff febb 	bl	8005ac4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2280      	movs	r2, #128	; 0x80
 8005d52:	589b      	ldr	r3, [r3, r2]
 8005d54:	2210      	movs	r2, #16
 8005d56:	431a      	orrs	r2, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2180      	movs	r1, #128	; 0x80
 8005d5c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	0018      	movs	r0, r3
 8005d62:	f7ff f9bf 	bl	80050e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	b006      	add	sp, #24
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	225a      	movs	r2, #90	; 0x5a
 8005d80:	2100      	movs	r1, #0
 8005d82:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2252      	movs	r2, #82	; 0x52
 8005d88:	2100      	movs	r1, #0
 8005d8a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f7ff f9a8 	bl	80050e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d94:	46c0      	nop			; (mov r8, r8)
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b004      	add	sp, #16
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da4:	f3ef 8310 	mrs	r3, PRIMASK
 8005da8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005daa:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	2301      	movs	r3, #1
 8005db0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f383 8810 	msr	PRIMASK, r3
}
 8005db8:	46c0      	nop			; (mov r8, r8)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2140      	movs	r1, #64	; 0x40
 8005dc6:	438a      	bics	r2, r1
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f383 8810 	msr	PRIMASK, r3
}
 8005dd4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	0018      	movs	r0, r3
 8005de6:	f7ff f965 	bl	80050b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dea:	46c0      	nop			; (mov r8, r8)
 8005dec:	46bd      	mov	sp, r7
 8005dee:	b006      	add	sp, #24
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	b002      	add	sp, #8
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e02:	b5b0      	push	{r4, r5, r7, lr}
 8005e04:	b08a      	sub	sp, #40	; 0x28
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	1dbb      	adds	r3, r7, #6
 8005e0e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d15e      	bne.n	8005ed6 <HAL_UARTEx_ReceiveToIdle_DMA+0xd4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8005e1e:	1dbb      	adds	r3, r7, #6
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e056      	b.n	8005ed8 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	2380      	movs	r3, #128	; 0x80
 8005e30:	015b      	lsls	r3, r3, #5
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d109      	bne.n	8005e4a <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d105      	bne.n	8005e4a <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2201      	movs	r2, #1
 8005e42:	4013      	ands	r3, r2
 8005e44:	d001      	beq.n	8005e4a <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
      {
        return  HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e046      	b.n	8005ed8 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
      }
    }

    __HAL_LOCK(huart);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2274      	movs	r2, #116	; 0x74
 8005e4e:	5c9b      	ldrb	r3, [r3, r2]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e03f      	b.n	8005ed8 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2274      	movs	r2, #116	; 0x74
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2201      	movs	r2, #1
 8005e64:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005e66:	2527      	movs	r5, #39	; 0x27
 8005e68:	197c      	adds	r4, r7, r5
 8005e6a:	1dbb      	adds	r3, r7, #6
 8005e6c:	881a      	ldrh	r2, [r3, #0]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	0018      	movs	r0, r3
 8005e74:	f7ff fd60 	bl	8005938 <UART_Start_Receive_DMA>
 8005e78:	0003      	movs	r3, r0
 8005e7a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005e7c:	197b      	adds	r3, r7, r5
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d124      	bne.n	8005ece <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d11c      	bne.n	8005ec6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc4>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2210      	movs	r2, #16
 8005e92:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e94:	f3ef 8310 	mrs	r3, PRIMASK
 8005e98:	617b      	str	r3, [r7, #20]
  return(result);
 8005e9a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e9c:	623b      	str	r3, [r7, #32]
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	f383 8810 	msr	PRIMASK, r3
}
 8005ea8:	46c0      	nop			; (mov r8, r8)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2110      	movs	r1, #16
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	f383 8810 	msr	PRIMASK, r3
}
 8005ec4:	e003      	b.n	8005ece <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005ec6:	2327      	movs	r3, #39	; 0x27
 8005ec8:	18fb      	adds	r3, r7, r3
 8005eca:	2201      	movs	r2, #1
 8005ecc:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8005ece:	2327      	movs	r3, #39	; 0x27
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	e000      	b.n	8005ed8 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
  }
  else
  {
    return HAL_BUSY;
 8005ed6:	2302      	movs	r3, #2
  }
}
 8005ed8:	0018      	movs	r0, r3
 8005eda:	46bd      	mov	sp, r7
 8005edc:	b00a      	add	sp, #40	; 0x28
 8005ede:	bdb0      	pop	{r4, r5, r7, pc}

08005ee0 <__errno>:
 8005ee0:	4b01      	ldr	r3, [pc, #4]	; (8005ee8 <__errno+0x8>)
 8005ee2:	6818      	ldr	r0, [r3, #0]
 8005ee4:	4770      	bx	lr
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	2000000c 	.word	0x2000000c

08005eec <__libc_init_array>:
 8005eec:	b570      	push	{r4, r5, r6, lr}
 8005eee:	2600      	movs	r6, #0
 8005ef0:	4d0c      	ldr	r5, [pc, #48]	; (8005f24 <__libc_init_array+0x38>)
 8005ef2:	4c0d      	ldr	r4, [pc, #52]	; (8005f28 <__libc_init_array+0x3c>)
 8005ef4:	1b64      	subs	r4, r4, r5
 8005ef6:	10a4      	asrs	r4, r4, #2
 8005ef8:	42a6      	cmp	r6, r4
 8005efa:	d109      	bne.n	8005f10 <__libc_init_array+0x24>
 8005efc:	2600      	movs	r6, #0
 8005efe:	f000 fc6b 	bl	80067d8 <_init>
 8005f02:	4d0a      	ldr	r5, [pc, #40]	; (8005f2c <__libc_init_array+0x40>)
 8005f04:	4c0a      	ldr	r4, [pc, #40]	; (8005f30 <__libc_init_array+0x44>)
 8005f06:	1b64      	subs	r4, r4, r5
 8005f08:	10a4      	asrs	r4, r4, #2
 8005f0a:	42a6      	cmp	r6, r4
 8005f0c:	d105      	bne.n	8005f1a <__libc_init_array+0x2e>
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
 8005f10:	00b3      	lsls	r3, r6, #2
 8005f12:	58eb      	ldr	r3, [r5, r3]
 8005f14:	4798      	blx	r3
 8005f16:	3601      	adds	r6, #1
 8005f18:	e7ee      	b.n	8005ef8 <__libc_init_array+0xc>
 8005f1a:	00b3      	lsls	r3, r6, #2
 8005f1c:	58eb      	ldr	r3, [r5, r3]
 8005f1e:	4798      	blx	r3
 8005f20:	3601      	adds	r6, #1
 8005f22:	e7f2      	b.n	8005f0a <__libc_init_array+0x1e>
 8005f24:	080069b8 	.word	0x080069b8
 8005f28:	080069b8 	.word	0x080069b8
 8005f2c:	080069b8 	.word	0x080069b8
 8005f30:	080069bc 	.word	0x080069bc

08005f34 <memcpy>:
 8005f34:	2300      	movs	r3, #0
 8005f36:	b510      	push	{r4, lr}
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d100      	bne.n	8005f3e <memcpy+0xa>
 8005f3c:	bd10      	pop	{r4, pc}
 8005f3e:	5ccc      	ldrb	r4, [r1, r3]
 8005f40:	54c4      	strb	r4, [r0, r3]
 8005f42:	3301      	adds	r3, #1
 8005f44:	e7f8      	b.n	8005f38 <memcpy+0x4>

08005f46 <memset>:
 8005f46:	0003      	movs	r3, r0
 8005f48:	1882      	adds	r2, r0, r2
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d100      	bne.n	8005f50 <memset+0xa>
 8005f4e:	4770      	bx	lr
 8005f50:	7019      	strb	r1, [r3, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	e7f9      	b.n	8005f4a <memset+0x4>
	...

08005f58 <siprintf>:
 8005f58:	b40e      	push	{r1, r2, r3}
 8005f5a:	b500      	push	{lr}
 8005f5c:	490b      	ldr	r1, [pc, #44]	; (8005f8c <siprintf+0x34>)
 8005f5e:	b09c      	sub	sp, #112	; 0x70
 8005f60:	ab1d      	add	r3, sp, #116	; 0x74
 8005f62:	9002      	str	r0, [sp, #8]
 8005f64:	9006      	str	r0, [sp, #24]
 8005f66:	9107      	str	r1, [sp, #28]
 8005f68:	9104      	str	r1, [sp, #16]
 8005f6a:	4809      	ldr	r0, [pc, #36]	; (8005f90 <siprintf+0x38>)
 8005f6c:	4909      	ldr	r1, [pc, #36]	; (8005f94 <siprintf+0x3c>)
 8005f6e:	cb04      	ldmia	r3!, {r2}
 8005f70:	9105      	str	r1, [sp, #20]
 8005f72:	6800      	ldr	r0, [r0, #0]
 8005f74:	a902      	add	r1, sp, #8
 8005f76:	9301      	str	r3, [sp, #4]
 8005f78:	f000 f894 	bl	80060a4 <_svfiprintf_r>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9a02      	ldr	r2, [sp, #8]
 8005f80:	7013      	strb	r3, [r2, #0]
 8005f82:	b01c      	add	sp, #112	; 0x70
 8005f84:	bc08      	pop	{r3}
 8005f86:	b003      	add	sp, #12
 8005f88:	4718      	bx	r3
 8005f8a:	46c0      	nop			; (mov r8, r8)
 8005f8c:	7fffffff 	.word	0x7fffffff
 8005f90:	2000000c 	.word	0x2000000c
 8005f94:	ffff0208 	.word	0xffff0208

08005f98 <strcat>:
 8005f98:	0002      	movs	r2, r0
 8005f9a:	b510      	push	{r4, lr}
 8005f9c:	7813      	ldrb	r3, [r2, #0]
 8005f9e:	0014      	movs	r4, r2
 8005fa0:	3201      	adds	r2, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1fa      	bne.n	8005f9c <strcat+0x4>
 8005fa6:	5cca      	ldrb	r2, [r1, r3]
 8005fa8:	54e2      	strb	r2, [r4, r3]
 8005faa:	3301      	adds	r3, #1
 8005fac:	2a00      	cmp	r2, #0
 8005fae:	d1fa      	bne.n	8005fa6 <strcat+0xe>
 8005fb0:	bd10      	pop	{r4, pc}

08005fb2 <strstr>:
 8005fb2:	780a      	ldrb	r2, [r1, #0]
 8005fb4:	b530      	push	{r4, r5, lr}
 8005fb6:	2a00      	cmp	r2, #0
 8005fb8:	d10c      	bne.n	8005fd4 <strstr+0x22>
 8005fba:	bd30      	pop	{r4, r5, pc}
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d108      	bne.n	8005fd2 <strstr+0x20>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	5ccc      	ldrb	r4, [r1, r3]
 8005fc4:	2c00      	cmp	r4, #0
 8005fc6:	d0f8      	beq.n	8005fba <strstr+0x8>
 8005fc8:	5cc5      	ldrb	r5, [r0, r3]
 8005fca:	42a5      	cmp	r5, r4
 8005fcc:	d101      	bne.n	8005fd2 <strstr+0x20>
 8005fce:	3301      	adds	r3, #1
 8005fd0:	e7f7      	b.n	8005fc2 <strstr+0x10>
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	7803      	ldrb	r3, [r0, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f0      	bne.n	8005fbc <strstr+0xa>
 8005fda:	0018      	movs	r0, r3
 8005fdc:	e7ed      	b.n	8005fba <strstr+0x8>
	...

08005fe0 <__ssputs_r>:
 8005fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe2:	688e      	ldr	r6, [r1, #8]
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	0007      	movs	r7, r0
 8005fe8:	000c      	movs	r4, r1
 8005fea:	9203      	str	r2, [sp, #12]
 8005fec:	9301      	str	r3, [sp, #4]
 8005fee:	429e      	cmp	r6, r3
 8005ff0:	d83c      	bhi.n	800606c <__ssputs_r+0x8c>
 8005ff2:	2390      	movs	r3, #144	; 0x90
 8005ff4:	898a      	ldrh	r2, [r1, #12]
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	421a      	tst	r2, r3
 8005ffa:	d034      	beq.n	8006066 <__ssputs_r+0x86>
 8005ffc:	2503      	movs	r5, #3
 8005ffe:	6909      	ldr	r1, [r1, #16]
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	1a5b      	subs	r3, r3, r1
 8006004:	9302      	str	r3, [sp, #8]
 8006006:	6963      	ldr	r3, [r4, #20]
 8006008:	9802      	ldr	r0, [sp, #8]
 800600a:	435d      	muls	r5, r3
 800600c:	0feb      	lsrs	r3, r5, #31
 800600e:	195d      	adds	r5, r3, r5
 8006010:	9b01      	ldr	r3, [sp, #4]
 8006012:	106d      	asrs	r5, r5, #1
 8006014:	3301      	adds	r3, #1
 8006016:	181b      	adds	r3, r3, r0
 8006018:	42ab      	cmp	r3, r5
 800601a:	d900      	bls.n	800601e <__ssputs_r+0x3e>
 800601c:	001d      	movs	r5, r3
 800601e:	0553      	lsls	r3, r2, #21
 8006020:	d532      	bpl.n	8006088 <__ssputs_r+0xa8>
 8006022:	0029      	movs	r1, r5
 8006024:	0038      	movs	r0, r7
 8006026:	f000 fb27 	bl	8006678 <_malloc_r>
 800602a:	1e06      	subs	r6, r0, #0
 800602c:	d109      	bne.n	8006042 <__ssputs_r+0x62>
 800602e:	230c      	movs	r3, #12
 8006030:	603b      	str	r3, [r7, #0]
 8006032:	2340      	movs	r3, #64	; 0x40
 8006034:	2001      	movs	r0, #1
 8006036:	89a2      	ldrh	r2, [r4, #12]
 8006038:	4240      	negs	r0, r0
 800603a:	4313      	orrs	r3, r2
 800603c:	81a3      	strh	r3, [r4, #12]
 800603e:	b005      	add	sp, #20
 8006040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006042:	9a02      	ldr	r2, [sp, #8]
 8006044:	6921      	ldr	r1, [r4, #16]
 8006046:	f7ff ff75 	bl	8005f34 <memcpy>
 800604a:	89a3      	ldrh	r3, [r4, #12]
 800604c:	4a14      	ldr	r2, [pc, #80]	; (80060a0 <__ssputs_r+0xc0>)
 800604e:	401a      	ands	r2, r3
 8006050:	2380      	movs	r3, #128	; 0x80
 8006052:	4313      	orrs	r3, r2
 8006054:	81a3      	strh	r3, [r4, #12]
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	6126      	str	r6, [r4, #16]
 800605a:	18f6      	adds	r6, r6, r3
 800605c:	6026      	str	r6, [r4, #0]
 800605e:	6165      	str	r5, [r4, #20]
 8006060:	9e01      	ldr	r6, [sp, #4]
 8006062:	1aed      	subs	r5, r5, r3
 8006064:	60a5      	str	r5, [r4, #8]
 8006066:	9b01      	ldr	r3, [sp, #4]
 8006068:	429e      	cmp	r6, r3
 800606a:	d900      	bls.n	800606e <__ssputs_r+0x8e>
 800606c:	9e01      	ldr	r6, [sp, #4]
 800606e:	0032      	movs	r2, r6
 8006070:	9903      	ldr	r1, [sp, #12]
 8006072:	6820      	ldr	r0, [r4, #0]
 8006074:	f000 faa3 	bl	80065be <memmove>
 8006078:	68a3      	ldr	r3, [r4, #8]
 800607a:	2000      	movs	r0, #0
 800607c:	1b9b      	subs	r3, r3, r6
 800607e:	60a3      	str	r3, [r4, #8]
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	199e      	adds	r6, r3, r6
 8006084:	6026      	str	r6, [r4, #0]
 8006086:	e7da      	b.n	800603e <__ssputs_r+0x5e>
 8006088:	002a      	movs	r2, r5
 800608a:	0038      	movs	r0, r7
 800608c:	f000 fb52 	bl	8006734 <_realloc_r>
 8006090:	1e06      	subs	r6, r0, #0
 8006092:	d1e0      	bne.n	8006056 <__ssputs_r+0x76>
 8006094:	0038      	movs	r0, r7
 8006096:	6921      	ldr	r1, [r4, #16]
 8006098:	f000 faa4 	bl	80065e4 <_free_r>
 800609c:	e7c7      	b.n	800602e <__ssputs_r+0x4e>
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	fffffb7f 	.word	0xfffffb7f

080060a4 <_svfiprintf_r>:
 80060a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a6:	b0a1      	sub	sp, #132	; 0x84
 80060a8:	9003      	str	r0, [sp, #12]
 80060aa:	001d      	movs	r5, r3
 80060ac:	898b      	ldrh	r3, [r1, #12]
 80060ae:	000f      	movs	r7, r1
 80060b0:	0016      	movs	r6, r2
 80060b2:	061b      	lsls	r3, r3, #24
 80060b4:	d511      	bpl.n	80060da <_svfiprintf_r+0x36>
 80060b6:	690b      	ldr	r3, [r1, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10e      	bne.n	80060da <_svfiprintf_r+0x36>
 80060bc:	2140      	movs	r1, #64	; 0x40
 80060be:	f000 fadb 	bl	8006678 <_malloc_r>
 80060c2:	6038      	str	r0, [r7, #0]
 80060c4:	6138      	str	r0, [r7, #16]
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d105      	bne.n	80060d6 <_svfiprintf_r+0x32>
 80060ca:	230c      	movs	r3, #12
 80060cc:	9a03      	ldr	r2, [sp, #12]
 80060ce:	3801      	subs	r0, #1
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	b021      	add	sp, #132	; 0x84
 80060d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d6:	2340      	movs	r3, #64	; 0x40
 80060d8:	617b      	str	r3, [r7, #20]
 80060da:	2300      	movs	r3, #0
 80060dc:	ac08      	add	r4, sp, #32
 80060de:	6163      	str	r3, [r4, #20]
 80060e0:	3320      	adds	r3, #32
 80060e2:	7663      	strb	r3, [r4, #25]
 80060e4:	3310      	adds	r3, #16
 80060e6:	76a3      	strb	r3, [r4, #26]
 80060e8:	9507      	str	r5, [sp, #28]
 80060ea:	0035      	movs	r5, r6
 80060ec:	782b      	ldrb	r3, [r5, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <_svfiprintf_r+0x52>
 80060f2:	2b25      	cmp	r3, #37	; 0x25
 80060f4:	d147      	bne.n	8006186 <_svfiprintf_r+0xe2>
 80060f6:	1bab      	subs	r3, r5, r6
 80060f8:	9305      	str	r3, [sp, #20]
 80060fa:	42b5      	cmp	r5, r6
 80060fc:	d00c      	beq.n	8006118 <_svfiprintf_r+0x74>
 80060fe:	0032      	movs	r2, r6
 8006100:	0039      	movs	r1, r7
 8006102:	9803      	ldr	r0, [sp, #12]
 8006104:	f7ff ff6c 	bl	8005fe0 <__ssputs_r>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d100      	bne.n	800610e <_svfiprintf_r+0x6a>
 800610c:	e0ae      	b.n	800626c <_svfiprintf_r+0x1c8>
 800610e:	6962      	ldr	r2, [r4, #20]
 8006110:	9b05      	ldr	r3, [sp, #20]
 8006112:	4694      	mov	ip, r2
 8006114:	4463      	add	r3, ip
 8006116:	6163      	str	r3, [r4, #20]
 8006118:	782b      	ldrb	r3, [r5, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d100      	bne.n	8006120 <_svfiprintf_r+0x7c>
 800611e:	e0a5      	b.n	800626c <_svfiprintf_r+0x1c8>
 8006120:	2201      	movs	r2, #1
 8006122:	2300      	movs	r3, #0
 8006124:	4252      	negs	r2, r2
 8006126:	6062      	str	r2, [r4, #4]
 8006128:	a904      	add	r1, sp, #16
 800612a:	3254      	adds	r2, #84	; 0x54
 800612c:	1852      	adds	r2, r2, r1
 800612e:	1c6e      	adds	r6, r5, #1
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	60e3      	str	r3, [r4, #12]
 8006134:	60a3      	str	r3, [r4, #8]
 8006136:	7013      	strb	r3, [r2, #0]
 8006138:	65a3      	str	r3, [r4, #88]	; 0x58
 800613a:	2205      	movs	r2, #5
 800613c:	7831      	ldrb	r1, [r6, #0]
 800613e:	4854      	ldr	r0, [pc, #336]	; (8006290 <_svfiprintf_r+0x1ec>)
 8006140:	f000 fa32 	bl	80065a8 <memchr>
 8006144:	1c75      	adds	r5, r6, #1
 8006146:	2800      	cmp	r0, #0
 8006148:	d11f      	bne.n	800618a <_svfiprintf_r+0xe6>
 800614a:	6822      	ldr	r2, [r4, #0]
 800614c:	06d3      	lsls	r3, r2, #27
 800614e:	d504      	bpl.n	800615a <_svfiprintf_r+0xb6>
 8006150:	2353      	movs	r3, #83	; 0x53
 8006152:	a904      	add	r1, sp, #16
 8006154:	185b      	adds	r3, r3, r1
 8006156:	2120      	movs	r1, #32
 8006158:	7019      	strb	r1, [r3, #0]
 800615a:	0713      	lsls	r3, r2, #28
 800615c:	d504      	bpl.n	8006168 <_svfiprintf_r+0xc4>
 800615e:	2353      	movs	r3, #83	; 0x53
 8006160:	a904      	add	r1, sp, #16
 8006162:	185b      	adds	r3, r3, r1
 8006164:	212b      	movs	r1, #43	; 0x2b
 8006166:	7019      	strb	r1, [r3, #0]
 8006168:	7833      	ldrb	r3, [r6, #0]
 800616a:	2b2a      	cmp	r3, #42	; 0x2a
 800616c:	d016      	beq.n	800619c <_svfiprintf_r+0xf8>
 800616e:	0035      	movs	r5, r6
 8006170:	2100      	movs	r1, #0
 8006172:	200a      	movs	r0, #10
 8006174:	68e3      	ldr	r3, [r4, #12]
 8006176:	782a      	ldrb	r2, [r5, #0]
 8006178:	1c6e      	adds	r6, r5, #1
 800617a:	3a30      	subs	r2, #48	; 0x30
 800617c:	2a09      	cmp	r2, #9
 800617e:	d94e      	bls.n	800621e <_svfiprintf_r+0x17a>
 8006180:	2900      	cmp	r1, #0
 8006182:	d111      	bne.n	80061a8 <_svfiprintf_r+0x104>
 8006184:	e017      	b.n	80061b6 <_svfiprintf_r+0x112>
 8006186:	3501      	adds	r5, #1
 8006188:	e7b0      	b.n	80060ec <_svfiprintf_r+0x48>
 800618a:	4b41      	ldr	r3, [pc, #260]	; (8006290 <_svfiprintf_r+0x1ec>)
 800618c:	6822      	ldr	r2, [r4, #0]
 800618e:	1ac0      	subs	r0, r0, r3
 8006190:	2301      	movs	r3, #1
 8006192:	4083      	lsls	r3, r0
 8006194:	4313      	orrs	r3, r2
 8006196:	002e      	movs	r6, r5
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	e7ce      	b.n	800613a <_svfiprintf_r+0x96>
 800619c:	9b07      	ldr	r3, [sp, #28]
 800619e:	1d19      	adds	r1, r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	9107      	str	r1, [sp, #28]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	db01      	blt.n	80061ac <_svfiprintf_r+0x108>
 80061a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80061aa:	e004      	b.n	80061b6 <_svfiprintf_r+0x112>
 80061ac:	425b      	negs	r3, r3
 80061ae:	60e3      	str	r3, [r4, #12]
 80061b0:	2302      	movs	r3, #2
 80061b2:	4313      	orrs	r3, r2
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	782b      	ldrb	r3, [r5, #0]
 80061b8:	2b2e      	cmp	r3, #46	; 0x2e
 80061ba:	d10a      	bne.n	80061d2 <_svfiprintf_r+0x12e>
 80061bc:	786b      	ldrb	r3, [r5, #1]
 80061be:	2b2a      	cmp	r3, #42	; 0x2a
 80061c0:	d135      	bne.n	800622e <_svfiprintf_r+0x18a>
 80061c2:	9b07      	ldr	r3, [sp, #28]
 80061c4:	3502      	adds	r5, #2
 80061c6:	1d1a      	adds	r2, r3, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	9207      	str	r2, [sp, #28]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	db2b      	blt.n	8006228 <_svfiprintf_r+0x184>
 80061d0:	9309      	str	r3, [sp, #36]	; 0x24
 80061d2:	4e30      	ldr	r6, [pc, #192]	; (8006294 <_svfiprintf_r+0x1f0>)
 80061d4:	2203      	movs	r2, #3
 80061d6:	0030      	movs	r0, r6
 80061d8:	7829      	ldrb	r1, [r5, #0]
 80061da:	f000 f9e5 	bl	80065a8 <memchr>
 80061de:	2800      	cmp	r0, #0
 80061e0:	d006      	beq.n	80061f0 <_svfiprintf_r+0x14c>
 80061e2:	2340      	movs	r3, #64	; 0x40
 80061e4:	1b80      	subs	r0, r0, r6
 80061e6:	4083      	lsls	r3, r0
 80061e8:	6822      	ldr	r2, [r4, #0]
 80061ea:	3501      	adds	r5, #1
 80061ec:	4313      	orrs	r3, r2
 80061ee:	6023      	str	r3, [r4, #0]
 80061f0:	7829      	ldrb	r1, [r5, #0]
 80061f2:	2206      	movs	r2, #6
 80061f4:	4828      	ldr	r0, [pc, #160]	; (8006298 <_svfiprintf_r+0x1f4>)
 80061f6:	1c6e      	adds	r6, r5, #1
 80061f8:	7621      	strb	r1, [r4, #24]
 80061fa:	f000 f9d5 	bl	80065a8 <memchr>
 80061fe:	2800      	cmp	r0, #0
 8006200:	d03c      	beq.n	800627c <_svfiprintf_r+0x1d8>
 8006202:	4b26      	ldr	r3, [pc, #152]	; (800629c <_svfiprintf_r+0x1f8>)
 8006204:	2b00      	cmp	r3, #0
 8006206:	d125      	bne.n	8006254 <_svfiprintf_r+0x1b0>
 8006208:	2207      	movs	r2, #7
 800620a:	9b07      	ldr	r3, [sp, #28]
 800620c:	3307      	adds	r3, #7
 800620e:	4393      	bics	r3, r2
 8006210:	3308      	adds	r3, #8
 8006212:	9307      	str	r3, [sp, #28]
 8006214:	6963      	ldr	r3, [r4, #20]
 8006216:	9a04      	ldr	r2, [sp, #16]
 8006218:	189b      	adds	r3, r3, r2
 800621a:	6163      	str	r3, [r4, #20]
 800621c:	e765      	b.n	80060ea <_svfiprintf_r+0x46>
 800621e:	4343      	muls	r3, r0
 8006220:	0035      	movs	r5, r6
 8006222:	2101      	movs	r1, #1
 8006224:	189b      	adds	r3, r3, r2
 8006226:	e7a6      	b.n	8006176 <_svfiprintf_r+0xd2>
 8006228:	2301      	movs	r3, #1
 800622a:	425b      	negs	r3, r3
 800622c:	e7d0      	b.n	80061d0 <_svfiprintf_r+0x12c>
 800622e:	2300      	movs	r3, #0
 8006230:	200a      	movs	r0, #10
 8006232:	001a      	movs	r2, r3
 8006234:	3501      	adds	r5, #1
 8006236:	6063      	str	r3, [r4, #4]
 8006238:	7829      	ldrb	r1, [r5, #0]
 800623a:	1c6e      	adds	r6, r5, #1
 800623c:	3930      	subs	r1, #48	; 0x30
 800623e:	2909      	cmp	r1, #9
 8006240:	d903      	bls.n	800624a <_svfiprintf_r+0x1a6>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0c5      	beq.n	80061d2 <_svfiprintf_r+0x12e>
 8006246:	9209      	str	r2, [sp, #36]	; 0x24
 8006248:	e7c3      	b.n	80061d2 <_svfiprintf_r+0x12e>
 800624a:	4342      	muls	r2, r0
 800624c:	0035      	movs	r5, r6
 800624e:	2301      	movs	r3, #1
 8006250:	1852      	adds	r2, r2, r1
 8006252:	e7f1      	b.n	8006238 <_svfiprintf_r+0x194>
 8006254:	ab07      	add	r3, sp, #28
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	003a      	movs	r2, r7
 800625a:	0021      	movs	r1, r4
 800625c:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <_svfiprintf_r+0x1fc>)
 800625e:	9803      	ldr	r0, [sp, #12]
 8006260:	e000      	b.n	8006264 <_svfiprintf_r+0x1c0>
 8006262:	bf00      	nop
 8006264:	9004      	str	r0, [sp, #16]
 8006266:	9b04      	ldr	r3, [sp, #16]
 8006268:	3301      	adds	r3, #1
 800626a:	d1d3      	bne.n	8006214 <_svfiprintf_r+0x170>
 800626c:	89bb      	ldrh	r3, [r7, #12]
 800626e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006270:	065b      	lsls	r3, r3, #25
 8006272:	d400      	bmi.n	8006276 <_svfiprintf_r+0x1d2>
 8006274:	e72d      	b.n	80060d2 <_svfiprintf_r+0x2e>
 8006276:	2001      	movs	r0, #1
 8006278:	4240      	negs	r0, r0
 800627a:	e72a      	b.n	80060d2 <_svfiprintf_r+0x2e>
 800627c:	ab07      	add	r3, sp, #28
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	003a      	movs	r2, r7
 8006282:	0021      	movs	r1, r4
 8006284:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <_svfiprintf_r+0x1fc>)
 8006286:	9803      	ldr	r0, [sp, #12]
 8006288:	f000 f87c 	bl	8006384 <_printf_i>
 800628c:	e7ea      	b.n	8006264 <_svfiprintf_r+0x1c0>
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	0800697c 	.word	0x0800697c
 8006294:	08006982 	.word	0x08006982
 8006298:	08006986 	.word	0x08006986
 800629c:	00000000 	.word	0x00000000
 80062a0:	08005fe1 	.word	0x08005fe1

080062a4 <_printf_common>:
 80062a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062a6:	0015      	movs	r5, r2
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	688a      	ldr	r2, [r1, #8]
 80062ac:	690b      	ldr	r3, [r1, #16]
 80062ae:	000c      	movs	r4, r1
 80062b0:	9000      	str	r0, [sp, #0]
 80062b2:	4293      	cmp	r3, r2
 80062b4:	da00      	bge.n	80062b8 <_printf_common+0x14>
 80062b6:	0013      	movs	r3, r2
 80062b8:	0022      	movs	r2, r4
 80062ba:	602b      	str	r3, [r5, #0]
 80062bc:	3243      	adds	r2, #67	; 0x43
 80062be:	7812      	ldrb	r2, [r2, #0]
 80062c0:	2a00      	cmp	r2, #0
 80062c2:	d001      	beq.n	80062c8 <_printf_common+0x24>
 80062c4:	3301      	adds	r3, #1
 80062c6:	602b      	str	r3, [r5, #0]
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	069b      	lsls	r3, r3, #26
 80062cc:	d502      	bpl.n	80062d4 <_printf_common+0x30>
 80062ce:	682b      	ldr	r3, [r5, #0]
 80062d0:	3302      	adds	r3, #2
 80062d2:	602b      	str	r3, [r5, #0]
 80062d4:	6822      	ldr	r2, [r4, #0]
 80062d6:	2306      	movs	r3, #6
 80062d8:	0017      	movs	r7, r2
 80062da:	401f      	ands	r7, r3
 80062dc:	421a      	tst	r2, r3
 80062de:	d027      	beq.n	8006330 <_printf_common+0x8c>
 80062e0:	0023      	movs	r3, r4
 80062e2:	3343      	adds	r3, #67	; 0x43
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	1e5a      	subs	r2, r3, #1
 80062e8:	4193      	sbcs	r3, r2
 80062ea:	6822      	ldr	r2, [r4, #0]
 80062ec:	0692      	lsls	r2, r2, #26
 80062ee:	d430      	bmi.n	8006352 <_printf_common+0xae>
 80062f0:	0022      	movs	r2, r4
 80062f2:	9901      	ldr	r1, [sp, #4]
 80062f4:	9800      	ldr	r0, [sp, #0]
 80062f6:	9e08      	ldr	r6, [sp, #32]
 80062f8:	3243      	adds	r2, #67	; 0x43
 80062fa:	47b0      	blx	r6
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d025      	beq.n	800634c <_printf_common+0xa8>
 8006300:	2306      	movs	r3, #6
 8006302:	6820      	ldr	r0, [r4, #0]
 8006304:	682a      	ldr	r2, [r5, #0]
 8006306:	68e1      	ldr	r1, [r4, #12]
 8006308:	2500      	movs	r5, #0
 800630a:	4003      	ands	r3, r0
 800630c:	2b04      	cmp	r3, #4
 800630e:	d103      	bne.n	8006318 <_printf_common+0x74>
 8006310:	1a8d      	subs	r5, r1, r2
 8006312:	43eb      	mvns	r3, r5
 8006314:	17db      	asrs	r3, r3, #31
 8006316:	401d      	ands	r5, r3
 8006318:	68a3      	ldr	r3, [r4, #8]
 800631a:	6922      	ldr	r2, [r4, #16]
 800631c:	4293      	cmp	r3, r2
 800631e:	dd01      	ble.n	8006324 <_printf_common+0x80>
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	18ed      	adds	r5, r5, r3
 8006324:	2700      	movs	r7, #0
 8006326:	42bd      	cmp	r5, r7
 8006328:	d120      	bne.n	800636c <_printf_common+0xc8>
 800632a:	2000      	movs	r0, #0
 800632c:	e010      	b.n	8006350 <_printf_common+0xac>
 800632e:	3701      	adds	r7, #1
 8006330:	68e3      	ldr	r3, [r4, #12]
 8006332:	682a      	ldr	r2, [r5, #0]
 8006334:	1a9b      	subs	r3, r3, r2
 8006336:	42bb      	cmp	r3, r7
 8006338:	ddd2      	ble.n	80062e0 <_printf_common+0x3c>
 800633a:	0022      	movs	r2, r4
 800633c:	2301      	movs	r3, #1
 800633e:	9901      	ldr	r1, [sp, #4]
 8006340:	9800      	ldr	r0, [sp, #0]
 8006342:	9e08      	ldr	r6, [sp, #32]
 8006344:	3219      	adds	r2, #25
 8006346:	47b0      	blx	r6
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d1f0      	bne.n	800632e <_printf_common+0x8a>
 800634c:	2001      	movs	r0, #1
 800634e:	4240      	negs	r0, r0
 8006350:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006352:	2030      	movs	r0, #48	; 0x30
 8006354:	18e1      	adds	r1, r4, r3
 8006356:	3143      	adds	r1, #67	; 0x43
 8006358:	7008      	strb	r0, [r1, #0]
 800635a:	0021      	movs	r1, r4
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	3145      	adds	r1, #69	; 0x45
 8006360:	7809      	ldrb	r1, [r1, #0]
 8006362:	18a2      	adds	r2, r4, r2
 8006364:	3243      	adds	r2, #67	; 0x43
 8006366:	3302      	adds	r3, #2
 8006368:	7011      	strb	r1, [r2, #0]
 800636a:	e7c1      	b.n	80062f0 <_printf_common+0x4c>
 800636c:	0022      	movs	r2, r4
 800636e:	2301      	movs	r3, #1
 8006370:	9901      	ldr	r1, [sp, #4]
 8006372:	9800      	ldr	r0, [sp, #0]
 8006374:	9e08      	ldr	r6, [sp, #32]
 8006376:	321a      	adds	r2, #26
 8006378:	47b0      	blx	r6
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	d0e6      	beq.n	800634c <_printf_common+0xa8>
 800637e:	3701      	adds	r7, #1
 8006380:	e7d1      	b.n	8006326 <_printf_common+0x82>
	...

08006384 <_printf_i>:
 8006384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006386:	b08b      	sub	sp, #44	; 0x2c
 8006388:	9206      	str	r2, [sp, #24]
 800638a:	000a      	movs	r2, r1
 800638c:	3243      	adds	r2, #67	; 0x43
 800638e:	9307      	str	r3, [sp, #28]
 8006390:	9005      	str	r0, [sp, #20]
 8006392:	9204      	str	r2, [sp, #16]
 8006394:	7e0a      	ldrb	r2, [r1, #24]
 8006396:	000c      	movs	r4, r1
 8006398:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800639a:	2a78      	cmp	r2, #120	; 0x78
 800639c:	d806      	bhi.n	80063ac <_printf_i+0x28>
 800639e:	2a62      	cmp	r2, #98	; 0x62
 80063a0:	d808      	bhi.n	80063b4 <_printf_i+0x30>
 80063a2:	2a00      	cmp	r2, #0
 80063a4:	d100      	bne.n	80063a8 <_printf_i+0x24>
 80063a6:	e0c0      	b.n	800652a <_printf_i+0x1a6>
 80063a8:	2a58      	cmp	r2, #88	; 0x58
 80063aa:	d052      	beq.n	8006452 <_printf_i+0xce>
 80063ac:	0026      	movs	r6, r4
 80063ae:	3642      	adds	r6, #66	; 0x42
 80063b0:	7032      	strb	r2, [r6, #0]
 80063b2:	e022      	b.n	80063fa <_printf_i+0x76>
 80063b4:	0010      	movs	r0, r2
 80063b6:	3863      	subs	r0, #99	; 0x63
 80063b8:	2815      	cmp	r0, #21
 80063ba:	d8f7      	bhi.n	80063ac <_printf_i+0x28>
 80063bc:	f7f9 feac 	bl	8000118 <__gnu_thumb1_case_shi>
 80063c0:	001f0016 	.word	0x001f0016
 80063c4:	fff6fff6 	.word	0xfff6fff6
 80063c8:	fff6fff6 	.word	0xfff6fff6
 80063cc:	fff6001f 	.word	0xfff6001f
 80063d0:	fff6fff6 	.word	0xfff6fff6
 80063d4:	00a8fff6 	.word	0x00a8fff6
 80063d8:	009a0036 	.word	0x009a0036
 80063dc:	fff6fff6 	.word	0xfff6fff6
 80063e0:	fff600b9 	.word	0xfff600b9
 80063e4:	fff60036 	.word	0xfff60036
 80063e8:	009efff6 	.word	0x009efff6
 80063ec:	0026      	movs	r6, r4
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	3642      	adds	r6, #66	; 0x42
 80063f2:	1d11      	adds	r1, r2, #4
 80063f4:	6019      	str	r1, [r3, #0]
 80063f6:	6813      	ldr	r3, [r2, #0]
 80063f8:	7033      	strb	r3, [r6, #0]
 80063fa:	2301      	movs	r3, #1
 80063fc:	e0a7      	b.n	800654e <_printf_i+0x1ca>
 80063fe:	6808      	ldr	r0, [r1, #0]
 8006400:	6819      	ldr	r1, [r3, #0]
 8006402:	1d0a      	adds	r2, r1, #4
 8006404:	0605      	lsls	r5, r0, #24
 8006406:	d50b      	bpl.n	8006420 <_printf_i+0x9c>
 8006408:	680d      	ldr	r5, [r1, #0]
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	2d00      	cmp	r5, #0
 800640e:	da03      	bge.n	8006418 <_printf_i+0x94>
 8006410:	232d      	movs	r3, #45	; 0x2d
 8006412:	9a04      	ldr	r2, [sp, #16]
 8006414:	426d      	negs	r5, r5
 8006416:	7013      	strb	r3, [r2, #0]
 8006418:	4b61      	ldr	r3, [pc, #388]	; (80065a0 <_printf_i+0x21c>)
 800641a:	270a      	movs	r7, #10
 800641c:	9303      	str	r3, [sp, #12]
 800641e:	e032      	b.n	8006486 <_printf_i+0x102>
 8006420:	680d      	ldr	r5, [r1, #0]
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	0641      	lsls	r1, r0, #25
 8006426:	d5f1      	bpl.n	800640c <_printf_i+0x88>
 8006428:	b22d      	sxth	r5, r5
 800642a:	e7ef      	b.n	800640c <_printf_i+0x88>
 800642c:	680d      	ldr	r5, [r1, #0]
 800642e:	6819      	ldr	r1, [r3, #0]
 8006430:	1d08      	adds	r0, r1, #4
 8006432:	6018      	str	r0, [r3, #0]
 8006434:	062e      	lsls	r6, r5, #24
 8006436:	d501      	bpl.n	800643c <_printf_i+0xb8>
 8006438:	680d      	ldr	r5, [r1, #0]
 800643a:	e003      	b.n	8006444 <_printf_i+0xc0>
 800643c:	066d      	lsls	r5, r5, #25
 800643e:	d5fb      	bpl.n	8006438 <_printf_i+0xb4>
 8006440:	680d      	ldr	r5, [r1, #0]
 8006442:	b2ad      	uxth	r5, r5
 8006444:	4b56      	ldr	r3, [pc, #344]	; (80065a0 <_printf_i+0x21c>)
 8006446:	270a      	movs	r7, #10
 8006448:	9303      	str	r3, [sp, #12]
 800644a:	2a6f      	cmp	r2, #111	; 0x6f
 800644c:	d117      	bne.n	800647e <_printf_i+0xfa>
 800644e:	2708      	movs	r7, #8
 8006450:	e015      	b.n	800647e <_printf_i+0xfa>
 8006452:	3145      	adds	r1, #69	; 0x45
 8006454:	700a      	strb	r2, [r1, #0]
 8006456:	4a52      	ldr	r2, [pc, #328]	; (80065a0 <_printf_i+0x21c>)
 8006458:	9203      	str	r2, [sp, #12]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	6821      	ldr	r1, [r4, #0]
 800645e:	ca20      	ldmia	r2!, {r5}
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	0608      	lsls	r0, r1, #24
 8006464:	d550      	bpl.n	8006508 <_printf_i+0x184>
 8006466:	07cb      	lsls	r3, r1, #31
 8006468:	d502      	bpl.n	8006470 <_printf_i+0xec>
 800646a:	2320      	movs	r3, #32
 800646c:	4319      	orrs	r1, r3
 800646e:	6021      	str	r1, [r4, #0]
 8006470:	2710      	movs	r7, #16
 8006472:	2d00      	cmp	r5, #0
 8006474:	d103      	bne.n	800647e <_printf_i+0xfa>
 8006476:	2320      	movs	r3, #32
 8006478:	6822      	ldr	r2, [r4, #0]
 800647a:	439a      	bics	r2, r3
 800647c:	6022      	str	r2, [r4, #0]
 800647e:	0023      	movs	r3, r4
 8006480:	2200      	movs	r2, #0
 8006482:	3343      	adds	r3, #67	; 0x43
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	6863      	ldr	r3, [r4, #4]
 8006488:	60a3      	str	r3, [r4, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	db03      	blt.n	8006496 <_printf_i+0x112>
 800648e:	2204      	movs	r2, #4
 8006490:	6821      	ldr	r1, [r4, #0]
 8006492:	4391      	bics	r1, r2
 8006494:	6021      	str	r1, [r4, #0]
 8006496:	2d00      	cmp	r5, #0
 8006498:	d102      	bne.n	80064a0 <_printf_i+0x11c>
 800649a:	9e04      	ldr	r6, [sp, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00c      	beq.n	80064ba <_printf_i+0x136>
 80064a0:	9e04      	ldr	r6, [sp, #16]
 80064a2:	0028      	movs	r0, r5
 80064a4:	0039      	movs	r1, r7
 80064a6:	f7f9 fec7 	bl	8000238 <__aeabi_uidivmod>
 80064aa:	9b03      	ldr	r3, [sp, #12]
 80064ac:	3e01      	subs	r6, #1
 80064ae:	5c5b      	ldrb	r3, [r3, r1]
 80064b0:	7033      	strb	r3, [r6, #0]
 80064b2:	002b      	movs	r3, r5
 80064b4:	0005      	movs	r5, r0
 80064b6:	429f      	cmp	r7, r3
 80064b8:	d9f3      	bls.n	80064a2 <_printf_i+0x11e>
 80064ba:	2f08      	cmp	r7, #8
 80064bc:	d109      	bne.n	80064d2 <_printf_i+0x14e>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	07db      	lsls	r3, r3, #31
 80064c2:	d506      	bpl.n	80064d2 <_printf_i+0x14e>
 80064c4:	6863      	ldr	r3, [r4, #4]
 80064c6:	6922      	ldr	r2, [r4, #16]
 80064c8:	4293      	cmp	r3, r2
 80064ca:	dc02      	bgt.n	80064d2 <_printf_i+0x14e>
 80064cc:	2330      	movs	r3, #48	; 0x30
 80064ce:	3e01      	subs	r6, #1
 80064d0:	7033      	strb	r3, [r6, #0]
 80064d2:	9b04      	ldr	r3, [sp, #16]
 80064d4:	1b9b      	subs	r3, r3, r6
 80064d6:	6123      	str	r3, [r4, #16]
 80064d8:	9b07      	ldr	r3, [sp, #28]
 80064da:	0021      	movs	r1, r4
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	9805      	ldr	r0, [sp, #20]
 80064e0:	9b06      	ldr	r3, [sp, #24]
 80064e2:	aa09      	add	r2, sp, #36	; 0x24
 80064e4:	f7ff fede 	bl	80062a4 <_printf_common>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d135      	bne.n	8006558 <_printf_i+0x1d4>
 80064ec:	2001      	movs	r0, #1
 80064ee:	4240      	negs	r0, r0
 80064f0:	b00b      	add	sp, #44	; 0x2c
 80064f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f4:	2220      	movs	r2, #32
 80064f6:	6809      	ldr	r1, [r1, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	6022      	str	r2, [r4, #0]
 80064fc:	0022      	movs	r2, r4
 80064fe:	2178      	movs	r1, #120	; 0x78
 8006500:	3245      	adds	r2, #69	; 0x45
 8006502:	7011      	strb	r1, [r2, #0]
 8006504:	4a27      	ldr	r2, [pc, #156]	; (80065a4 <_printf_i+0x220>)
 8006506:	e7a7      	b.n	8006458 <_printf_i+0xd4>
 8006508:	0648      	lsls	r0, r1, #25
 800650a:	d5ac      	bpl.n	8006466 <_printf_i+0xe2>
 800650c:	b2ad      	uxth	r5, r5
 800650e:	e7aa      	b.n	8006466 <_printf_i+0xe2>
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	680d      	ldr	r5, [r1, #0]
 8006514:	1d10      	adds	r0, r2, #4
 8006516:	6949      	ldr	r1, [r1, #20]
 8006518:	6018      	str	r0, [r3, #0]
 800651a:	6813      	ldr	r3, [r2, #0]
 800651c:	062e      	lsls	r6, r5, #24
 800651e:	d501      	bpl.n	8006524 <_printf_i+0x1a0>
 8006520:	6019      	str	r1, [r3, #0]
 8006522:	e002      	b.n	800652a <_printf_i+0x1a6>
 8006524:	066d      	lsls	r5, r5, #25
 8006526:	d5fb      	bpl.n	8006520 <_printf_i+0x19c>
 8006528:	8019      	strh	r1, [r3, #0]
 800652a:	2300      	movs	r3, #0
 800652c:	9e04      	ldr	r6, [sp, #16]
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	e7d2      	b.n	80064d8 <_printf_i+0x154>
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	1d11      	adds	r1, r2, #4
 8006536:	6019      	str	r1, [r3, #0]
 8006538:	6816      	ldr	r6, [r2, #0]
 800653a:	2100      	movs	r1, #0
 800653c:	0030      	movs	r0, r6
 800653e:	6862      	ldr	r2, [r4, #4]
 8006540:	f000 f832 	bl	80065a8 <memchr>
 8006544:	2800      	cmp	r0, #0
 8006546:	d001      	beq.n	800654c <_printf_i+0x1c8>
 8006548:	1b80      	subs	r0, r0, r6
 800654a:	6060      	str	r0, [r4, #4]
 800654c:	6863      	ldr	r3, [r4, #4]
 800654e:	6123      	str	r3, [r4, #16]
 8006550:	2300      	movs	r3, #0
 8006552:	9a04      	ldr	r2, [sp, #16]
 8006554:	7013      	strb	r3, [r2, #0]
 8006556:	e7bf      	b.n	80064d8 <_printf_i+0x154>
 8006558:	6923      	ldr	r3, [r4, #16]
 800655a:	0032      	movs	r2, r6
 800655c:	9906      	ldr	r1, [sp, #24]
 800655e:	9805      	ldr	r0, [sp, #20]
 8006560:	9d07      	ldr	r5, [sp, #28]
 8006562:	47a8      	blx	r5
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d0c1      	beq.n	80064ec <_printf_i+0x168>
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	079b      	lsls	r3, r3, #30
 800656c:	d415      	bmi.n	800659a <_printf_i+0x216>
 800656e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006570:	68e0      	ldr	r0, [r4, #12]
 8006572:	4298      	cmp	r0, r3
 8006574:	dabc      	bge.n	80064f0 <_printf_i+0x16c>
 8006576:	0018      	movs	r0, r3
 8006578:	e7ba      	b.n	80064f0 <_printf_i+0x16c>
 800657a:	0022      	movs	r2, r4
 800657c:	2301      	movs	r3, #1
 800657e:	9906      	ldr	r1, [sp, #24]
 8006580:	9805      	ldr	r0, [sp, #20]
 8006582:	9e07      	ldr	r6, [sp, #28]
 8006584:	3219      	adds	r2, #25
 8006586:	47b0      	blx	r6
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d0af      	beq.n	80064ec <_printf_i+0x168>
 800658c:	3501      	adds	r5, #1
 800658e:	68e3      	ldr	r3, [r4, #12]
 8006590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	42ab      	cmp	r3, r5
 8006596:	dcf0      	bgt.n	800657a <_printf_i+0x1f6>
 8006598:	e7e9      	b.n	800656e <_printf_i+0x1ea>
 800659a:	2500      	movs	r5, #0
 800659c:	e7f7      	b.n	800658e <_printf_i+0x20a>
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	0800698d 	.word	0x0800698d
 80065a4:	0800699e 	.word	0x0800699e

080065a8 <memchr>:
 80065a8:	b2c9      	uxtb	r1, r1
 80065aa:	1882      	adds	r2, r0, r2
 80065ac:	4290      	cmp	r0, r2
 80065ae:	d101      	bne.n	80065b4 <memchr+0xc>
 80065b0:	2000      	movs	r0, #0
 80065b2:	4770      	bx	lr
 80065b4:	7803      	ldrb	r3, [r0, #0]
 80065b6:	428b      	cmp	r3, r1
 80065b8:	d0fb      	beq.n	80065b2 <memchr+0xa>
 80065ba:	3001      	adds	r0, #1
 80065bc:	e7f6      	b.n	80065ac <memchr+0x4>

080065be <memmove>:
 80065be:	b510      	push	{r4, lr}
 80065c0:	4288      	cmp	r0, r1
 80065c2:	d902      	bls.n	80065ca <memmove+0xc>
 80065c4:	188b      	adds	r3, r1, r2
 80065c6:	4298      	cmp	r0, r3
 80065c8:	d303      	bcc.n	80065d2 <memmove+0x14>
 80065ca:	2300      	movs	r3, #0
 80065cc:	e007      	b.n	80065de <memmove+0x20>
 80065ce:	5c8b      	ldrb	r3, [r1, r2]
 80065d0:	5483      	strb	r3, [r0, r2]
 80065d2:	3a01      	subs	r2, #1
 80065d4:	d2fb      	bcs.n	80065ce <memmove+0x10>
 80065d6:	bd10      	pop	{r4, pc}
 80065d8:	5ccc      	ldrb	r4, [r1, r3]
 80065da:	54c4      	strb	r4, [r0, r3]
 80065dc:	3301      	adds	r3, #1
 80065de:	429a      	cmp	r2, r3
 80065e0:	d1fa      	bne.n	80065d8 <memmove+0x1a>
 80065e2:	e7f8      	b.n	80065d6 <memmove+0x18>

080065e4 <_free_r>:
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	0005      	movs	r5, r0
 80065e8:	2900      	cmp	r1, #0
 80065ea:	d010      	beq.n	800660e <_free_r+0x2a>
 80065ec:	1f0c      	subs	r4, r1, #4
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	da00      	bge.n	80065f6 <_free_r+0x12>
 80065f4:	18e4      	adds	r4, r4, r3
 80065f6:	0028      	movs	r0, r5
 80065f8:	f000 f8d4 	bl	80067a4 <__malloc_lock>
 80065fc:	4a1d      	ldr	r2, [pc, #116]	; (8006674 <_free_r+0x90>)
 80065fe:	6813      	ldr	r3, [r2, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d105      	bne.n	8006610 <_free_r+0x2c>
 8006604:	6063      	str	r3, [r4, #4]
 8006606:	6014      	str	r4, [r2, #0]
 8006608:	0028      	movs	r0, r5
 800660a:	f000 f8d3 	bl	80067b4 <__malloc_unlock>
 800660e:	bd70      	pop	{r4, r5, r6, pc}
 8006610:	42a3      	cmp	r3, r4
 8006612:	d908      	bls.n	8006626 <_free_r+0x42>
 8006614:	6821      	ldr	r1, [r4, #0]
 8006616:	1860      	adds	r0, r4, r1
 8006618:	4283      	cmp	r3, r0
 800661a:	d1f3      	bne.n	8006604 <_free_r+0x20>
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	1841      	adds	r1, r0, r1
 8006622:	6021      	str	r1, [r4, #0]
 8006624:	e7ee      	b.n	8006604 <_free_r+0x20>
 8006626:	001a      	movs	r2, r3
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <_free_r+0x4e>
 800662e:	42a3      	cmp	r3, r4
 8006630:	d9f9      	bls.n	8006626 <_free_r+0x42>
 8006632:	6811      	ldr	r1, [r2, #0]
 8006634:	1850      	adds	r0, r2, r1
 8006636:	42a0      	cmp	r0, r4
 8006638:	d10b      	bne.n	8006652 <_free_r+0x6e>
 800663a:	6820      	ldr	r0, [r4, #0]
 800663c:	1809      	adds	r1, r1, r0
 800663e:	1850      	adds	r0, r2, r1
 8006640:	6011      	str	r1, [r2, #0]
 8006642:	4283      	cmp	r3, r0
 8006644:	d1e0      	bne.n	8006608 <_free_r+0x24>
 8006646:	6818      	ldr	r0, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	1841      	adds	r1, r0, r1
 800664c:	6011      	str	r1, [r2, #0]
 800664e:	6053      	str	r3, [r2, #4]
 8006650:	e7da      	b.n	8006608 <_free_r+0x24>
 8006652:	42a0      	cmp	r0, r4
 8006654:	d902      	bls.n	800665c <_free_r+0x78>
 8006656:	230c      	movs	r3, #12
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	e7d5      	b.n	8006608 <_free_r+0x24>
 800665c:	6821      	ldr	r1, [r4, #0]
 800665e:	1860      	adds	r0, r4, r1
 8006660:	4283      	cmp	r3, r0
 8006662:	d103      	bne.n	800666c <_free_r+0x88>
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	1841      	adds	r1, r0, r1
 800666a:	6021      	str	r1, [r4, #0]
 800666c:	6063      	str	r3, [r4, #4]
 800666e:	6054      	str	r4, [r2, #4]
 8006670:	e7ca      	b.n	8006608 <_free_r+0x24>
 8006672:	46c0      	nop			; (mov r8, r8)
 8006674:	20000090 	.word	0x20000090

08006678 <_malloc_r>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	2303      	movs	r3, #3
 800667c:	1ccd      	adds	r5, r1, #3
 800667e:	439d      	bics	r5, r3
 8006680:	3508      	adds	r5, #8
 8006682:	0006      	movs	r6, r0
 8006684:	2d0c      	cmp	r5, #12
 8006686:	d21f      	bcs.n	80066c8 <_malloc_r+0x50>
 8006688:	250c      	movs	r5, #12
 800668a:	42a9      	cmp	r1, r5
 800668c:	d81e      	bhi.n	80066cc <_malloc_r+0x54>
 800668e:	0030      	movs	r0, r6
 8006690:	f000 f888 	bl	80067a4 <__malloc_lock>
 8006694:	4925      	ldr	r1, [pc, #148]	; (800672c <_malloc_r+0xb4>)
 8006696:	680a      	ldr	r2, [r1, #0]
 8006698:	0014      	movs	r4, r2
 800669a:	2c00      	cmp	r4, #0
 800669c:	d11a      	bne.n	80066d4 <_malloc_r+0x5c>
 800669e:	4f24      	ldr	r7, [pc, #144]	; (8006730 <_malloc_r+0xb8>)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d104      	bne.n	80066b0 <_malloc_r+0x38>
 80066a6:	0021      	movs	r1, r4
 80066a8:	0030      	movs	r0, r6
 80066aa:	f000 f869 	bl	8006780 <_sbrk_r>
 80066ae:	6038      	str	r0, [r7, #0]
 80066b0:	0029      	movs	r1, r5
 80066b2:	0030      	movs	r0, r6
 80066b4:	f000 f864 	bl	8006780 <_sbrk_r>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d12b      	bne.n	8006714 <_malloc_r+0x9c>
 80066bc:	230c      	movs	r3, #12
 80066be:	0030      	movs	r0, r6
 80066c0:	6033      	str	r3, [r6, #0]
 80066c2:	f000 f877 	bl	80067b4 <__malloc_unlock>
 80066c6:	e003      	b.n	80066d0 <_malloc_r+0x58>
 80066c8:	2d00      	cmp	r5, #0
 80066ca:	dade      	bge.n	800668a <_malloc_r+0x12>
 80066cc:	230c      	movs	r3, #12
 80066ce:	6033      	str	r3, [r6, #0]
 80066d0:	2000      	movs	r0, #0
 80066d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	1b5b      	subs	r3, r3, r5
 80066d8:	d419      	bmi.n	800670e <_malloc_r+0x96>
 80066da:	2b0b      	cmp	r3, #11
 80066dc:	d903      	bls.n	80066e6 <_malloc_r+0x6e>
 80066de:	6023      	str	r3, [r4, #0]
 80066e0:	18e4      	adds	r4, r4, r3
 80066e2:	6025      	str	r5, [r4, #0]
 80066e4:	e003      	b.n	80066ee <_malloc_r+0x76>
 80066e6:	6863      	ldr	r3, [r4, #4]
 80066e8:	42a2      	cmp	r2, r4
 80066ea:	d10e      	bne.n	800670a <_malloc_r+0x92>
 80066ec:	600b      	str	r3, [r1, #0]
 80066ee:	0030      	movs	r0, r6
 80066f0:	f000 f860 	bl	80067b4 <__malloc_unlock>
 80066f4:	0020      	movs	r0, r4
 80066f6:	2207      	movs	r2, #7
 80066f8:	300b      	adds	r0, #11
 80066fa:	1d23      	adds	r3, r4, #4
 80066fc:	4390      	bics	r0, r2
 80066fe:	1ac2      	subs	r2, r0, r3
 8006700:	4298      	cmp	r0, r3
 8006702:	d0e6      	beq.n	80066d2 <_malloc_r+0x5a>
 8006704:	1a1b      	subs	r3, r3, r0
 8006706:	50a3      	str	r3, [r4, r2]
 8006708:	e7e3      	b.n	80066d2 <_malloc_r+0x5a>
 800670a:	6053      	str	r3, [r2, #4]
 800670c:	e7ef      	b.n	80066ee <_malloc_r+0x76>
 800670e:	0022      	movs	r2, r4
 8006710:	6864      	ldr	r4, [r4, #4]
 8006712:	e7c2      	b.n	800669a <_malloc_r+0x22>
 8006714:	2303      	movs	r3, #3
 8006716:	1cc4      	adds	r4, r0, #3
 8006718:	439c      	bics	r4, r3
 800671a:	42a0      	cmp	r0, r4
 800671c:	d0e1      	beq.n	80066e2 <_malloc_r+0x6a>
 800671e:	1a21      	subs	r1, r4, r0
 8006720:	0030      	movs	r0, r6
 8006722:	f000 f82d 	bl	8006780 <_sbrk_r>
 8006726:	1c43      	adds	r3, r0, #1
 8006728:	d1db      	bne.n	80066e2 <_malloc_r+0x6a>
 800672a:	e7c7      	b.n	80066bc <_malloc_r+0x44>
 800672c:	20000090 	.word	0x20000090
 8006730:	20000094 	.word	0x20000094

08006734 <_realloc_r>:
 8006734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006736:	0007      	movs	r7, r0
 8006738:	000d      	movs	r5, r1
 800673a:	0016      	movs	r6, r2
 800673c:	2900      	cmp	r1, #0
 800673e:	d105      	bne.n	800674c <_realloc_r+0x18>
 8006740:	0011      	movs	r1, r2
 8006742:	f7ff ff99 	bl	8006678 <_malloc_r>
 8006746:	0004      	movs	r4, r0
 8006748:	0020      	movs	r0, r4
 800674a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800674c:	2a00      	cmp	r2, #0
 800674e:	d103      	bne.n	8006758 <_realloc_r+0x24>
 8006750:	f7ff ff48 	bl	80065e4 <_free_r>
 8006754:	0034      	movs	r4, r6
 8006756:	e7f7      	b.n	8006748 <_realloc_r+0x14>
 8006758:	f000 f834 	bl	80067c4 <_malloc_usable_size_r>
 800675c:	002c      	movs	r4, r5
 800675e:	42b0      	cmp	r0, r6
 8006760:	d2f2      	bcs.n	8006748 <_realloc_r+0x14>
 8006762:	0031      	movs	r1, r6
 8006764:	0038      	movs	r0, r7
 8006766:	f7ff ff87 	bl	8006678 <_malloc_r>
 800676a:	1e04      	subs	r4, r0, #0
 800676c:	d0ec      	beq.n	8006748 <_realloc_r+0x14>
 800676e:	0029      	movs	r1, r5
 8006770:	0032      	movs	r2, r6
 8006772:	f7ff fbdf 	bl	8005f34 <memcpy>
 8006776:	0029      	movs	r1, r5
 8006778:	0038      	movs	r0, r7
 800677a:	f7ff ff33 	bl	80065e4 <_free_r>
 800677e:	e7e3      	b.n	8006748 <_realloc_r+0x14>

08006780 <_sbrk_r>:
 8006780:	2300      	movs	r3, #0
 8006782:	b570      	push	{r4, r5, r6, lr}
 8006784:	4d06      	ldr	r5, [pc, #24]	; (80067a0 <_sbrk_r+0x20>)
 8006786:	0004      	movs	r4, r0
 8006788:	0008      	movs	r0, r1
 800678a:	602b      	str	r3, [r5, #0]
 800678c:	f7fb fa8e 	bl	8001cac <_sbrk>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	d103      	bne.n	800679c <_sbrk_r+0x1c>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d000      	beq.n	800679c <_sbrk_r+0x1c>
 800679a:	6023      	str	r3, [r4, #0]
 800679c:	bd70      	pop	{r4, r5, r6, pc}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	200003d4 	.word	0x200003d4

080067a4 <__malloc_lock>:
 80067a4:	b510      	push	{r4, lr}
 80067a6:	4802      	ldr	r0, [pc, #8]	; (80067b0 <__malloc_lock+0xc>)
 80067a8:	f000 f814 	bl	80067d4 <__retarget_lock_acquire_recursive>
 80067ac:	bd10      	pop	{r4, pc}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	200003dc 	.word	0x200003dc

080067b4 <__malloc_unlock>:
 80067b4:	b510      	push	{r4, lr}
 80067b6:	4802      	ldr	r0, [pc, #8]	; (80067c0 <__malloc_unlock+0xc>)
 80067b8:	f000 f80d 	bl	80067d6 <__retarget_lock_release_recursive>
 80067bc:	bd10      	pop	{r4, pc}
 80067be:	46c0      	nop			; (mov r8, r8)
 80067c0:	200003dc 	.word	0x200003dc

080067c4 <_malloc_usable_size_r>:
 80067c4:	1f0b      	subs	r3, r1, #4
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	1f18      	subs	r0, r3, #4
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	da01      	bge.n	80067d2 <_malloc_usable_size_r+0xe>
 80067ce:	580b      	ldr	r3, [r1, r0]
 80067d0:	18c0      	adds	r0, r0, r3
 80067d2:	4770      	bx	lr

080067d4 <__retarget_lock_acquire_recursive>:
 80067d4:	4770      	bx	lr

080067d6 <__retarget_lock_release_recursive>:
 80067d6:	4770      	bx	lr

080067d8 <_init>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	46c0      	nop			; (mov r8, r8)
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr

080067e4 <_fini>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	46c0      	nop			; (mov r8, r8)
 80067e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ea:	bc08      	pop	{r3}
 80067ec:	469e      	mov	lr, r3
 80067ee:	4770      	bx	lr
