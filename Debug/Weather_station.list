
Weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08006698  08006698  00016698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006874  08006874  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006874  08006874  00016874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800687c  0800687c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800687c  0800687c  0001687c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006880  08006880  00016880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000070  080068f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  080068f4  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184ad  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f1  00000000  00000000  00038545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  0003be38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  0003cf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141c6  00000000  00000000  0003dec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a85  00000000  00000000  00052086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000700c3  00000000  00000000  00069b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9bce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f40  00000000  00000000  000d9c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006680 	.word	0x08006680

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006680 	.word	0x08006680

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f82e 	bl	80004a8 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	0415      	lsls	r5, r2, #16
 800045c:	0c2d      	lsrs	r5, r5, #16
 800045e:	000f      	movs	r7, r1
 8000460:	0001      	movs	r1, r0
 8000462:	002e      	movs	r6, r5
 8000464:	46c6      	mov	lr, r8
 8000466:	4684      	mov	ip, r0
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	0c14      	lsrs	r4, r2, #16
 800046c:	0c00      	lsrs	r0, r0, #16
 800046e:	0c09      	lsrs	r1, r1, #16
 8000470:	4346      	muls	r6, r0
 8000472:	434d      	muls	r5, r1
 8000474:	4360      	muls	r0, r4
 8000476:	4361      	muls	r1, r4
 8000478:	1940      	adds	r0, r0, r5
 800047a:	0c34      	lsrs	r4, r6, #16
 800047c:	1824      	adds	r4, r4, r0
 800047e:	b500      	push	{lr}
 8000480:	42a5      	cmp	r5, r4
 8000482:	d903      	bls.n	800048c <__aeabi_lmul+0x34>
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	0240      	lsls	r0, r0, #9
 8000488:	4680      	mov	r8, r0
 800048a:	4441      	add	r1, r8
 800048c:	0c25      	lsrs	r5, r4, #16
 800048e:	186d      	adds	r5, r5, r1
 8000490:	4661      	mov	r1, ip
 8000492:	4359      	muls	r1, r3
 8000494:	437a      	muls	r2, r7
 8000496:	0430      	lsls	r0, r6, #16
 8000498:	1949      	adds	r1, r1, r5
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c00      	lsrs	r0, r0, #16
 800049e:	1820      	adds	r0, r4, r0
 80004a0:	1889      	adds	r1, r1, r2
 80004a2:	bc80      	pop	{r7}
 80004a4:	46b8      	mov	r8, r7
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000d      	movs	r5, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b083      	sub	sp, #12
 80004be:	428b      	cmp	r3, r1
 80004c0:	d830      	bhi.n	8000524 <__udivmoddi4+0x7c>
 80004c2:	d02d      	beq.n	8000520 <__udivmoddi4+0x78>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f000 f8d8 	bl	800067c <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f000 f8d3 	bl	800067c <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	469b      	mov	fp, r3
 80004de:	d433      	bmi.n	8000548 <__udivmoddi4+0xa0>
 80004e0:	465a      	mov	r2, fp
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d83a      	bhi.n	800056a <__udivmoddi4+0xc2>
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d100      	bne.n	80004fa <__udivmoddi4+0x52>
 80004f8:	e078      	b.n	80005ec <__udivmoddi4+0x144>
 80004fa:	465b      	mov	r3, fp
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	41bd      	sbcs	r5, r7
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <__udivmoddi4+0x5e>
 8000504:	e075      	b.n	80005f2 <__udivmoddi4+0x14a>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	465a      	mov	r2, fp
 8000512:	4093      	lsls	r3, r2
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4642      	mov	r2, r8
 800051a:	4093      	lsls	r3, r2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	e028      	b.n	8000572 <__udivmoddi4+0xca>
 8000520:	4282      	cmp	r2, r0
 8000522:	d9cf      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <__udivmoddi4+0x8e>
 8000532:	601c      	str	r4, [r3, #0]
 8000534:	605d      	str	r5, [r3, #4]
 8000536:	9800      	ldr	r0, [sp, #0]
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bcf0      	pop	{r4, r5, r6, r7}
 800053e:	46bb      	mov	fp, r7
 8000540:	46b2      	mov	sl, r6
 8000542:	46a9      	mov	r9, r5
 8000544:	46a0      	mov	r8, r4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4642      	mov	r2, r8
 800054a:	2320      	movs	r3, #32
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	4652      	mov	r2, sl
 8000550:	40da      	lsrs	r2, r3
 8000552:	4641      	mov	r1, r8
 8000554:	0013      	movs	r3, r2
 8000556:	464a      	mov	r2, r9
 8000558:	408a      	lsls	r2, r1
 800055a:	0017      	movs	r7, r2
 800055c:	4642      	mov	r2, r8
 800055e:	431f      	orrs	r7, r3
 8000560:	4653      	mov	r3, sl
 8000562:	4093      	lsls	r3, r2
 8000564:	001e      	movs	r6, r3
 8000566:	42af      	cmp	r7, r5
 8000568:	d9c4      	bls.n	80004f4 <__udivmoddi4+0x4c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	4643      	mov	r3, r8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0d9      	beq.n	800052c <__udivmoddi4+0x84>
 8000578:	07fb      	lsls	r3, r7, #31
 800057a:	0872      	lsrs	r2, r6, #1
 800057c:	431a      	orrs	r2, r3
 800057e:	4646      	mov	r6, r8
 8000580:	087b      	lsrs	r3, r7, #1
 8000582:	e00e      	b.n	80005a2 <__udivmoddi4+0xfa>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d101      	bne.n	800058c <__udivmoddi4+0xe4>
 8000588:	42a2      	cmp	r2, r4
 800058a:	d80c      	bhi.n	80005a6 <__udivmoddi4+0xfe>
 800058c:	1aa4      	subs	r4, r4, r2
 800058e:	419d      	sbcs	r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2100      	movs	r1, #0
 8000598:	3e01      	subs	r6, #1
 800059a:	1824      	adds	r4, r4, r0
 800059c:	414d      	adcs	r5, r1
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d006      	beq.n	80005b0 <__udivmoddi4+0x108>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d9ee      	bls.n	8000584 <__udivmoddi4+0xdc>
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f8      	bne.n	80005a2 <__udivmoddi4+0xfa>
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	465b      	mov	r3, fp
 80005b6:	1900      	adds	r0, r0, r4
 80005b8:	4169      	adcs	r1, r5
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db24      	blt.n	8000608 <__udivmoddi4+0x160>
 80005be:	002b      	movs	r3, r5
 80005c0:	465a      	mov	r2, fp
 80005c2:	4644      	mov	r4, r8
 80005c4:	40d3      	lsrs	r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	40e2      	lsrs	r2, r4
 80005ca:	001c      	movs	r4, r3
 80005cc:	465b      	mov	r3, fp
 80005ce:	0015      	movs	r5, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db2a      	blt.n	800062a <__udivmoddi4+0x182>
 80005d4:	0026      	movs	r6, r4
 80005d6:	409e      	lsls	r6, r3
 80005d8:	0033      	movs	r3, r6
 80005da:	0026      	movs	r6, r4
 80005dc:	4647      	mov	r7, r8
 80005de:	40be      	lsls	r6, r7
 80005e0:	0032      	movs	r2, r6
 80005e2:	1a80      	subs	r0, r0, r2
 80005e4:	4199      	sbcs	r1, r3
 80005e6:	9000      	str	r0, [sp, #0]
 80005e8:	9101      	str	r1, [sp, #4]
 80005ea:	e79f      	b.n	800052c <__udivmoddi4+0x84>
 80005ec:	42a3      	cmp	r3, r4
 80005ee:	d8bc      	bhi.n	800056a <__udivmoddi4+0xc2>
 80005f0:	e783      	b.n	80004fa <__udivmoddi4+0x52>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	40da      	lsrs	r2, r3
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	e786      	b.n	8000516 <__udivmoddi4+0x6e>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	4646      	mov	r6, r8
 8000612:	409a      	lsls	r2, r3
 8000614:	0023      	movs	r3, r4
 8000616:	40f3      	lsrs	r3, r6
 8000618:	4644      	mov	r4, r8
 800061a:	4313      	orrs	r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	40e2      	lsrs	r2, r4
 8000620:	001c      	movs	r4, r3
 8000622:	465b      	mov	r3, fp
 8000624:	0015      	movs	r5, r2
 8000626:	2b00      	cmp	r3, #0
 8000628:	dad4      	bge.n	80005d4 <__udivmoddi4+0x12c>
 800062a:	4642      	mov	r2, r8
 800062c:	002f      	movs	r7, r5
 800062e:	2320      	movs	r3, #32
 8000630:	0026      	movs	r6, r4
 8000632:	4097      	lsls	r7, r2
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	40de      	lsrs	r6, r3
 8000638:	003b      	movs	r3, r7
 800063a:	4333      	orrs	r3, r6
 800063c:	e7cd      	b.n	80005da <__udivmoddi4+0x132>
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	; (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <__clzdi2>:
 800067c:	b510      	push	{r4, lr}
 800067e:	2900      	cmp	r1, #0
 8000680:	d103      	bne.n	800068a <__clzdi2+0xe>
 8000682:	f7ff ffdd 	bl	8000640 <__clzsi2>
 8000686:	3020      	adds	r0, #32
 8000688:	e002      	b.n	8000690 <__clzdi2+0x14>
 800068a:	1c08      	adds	r0, r1, #0
 800068c:	f7ff ffd8 	bl	8000640 <__clzsi2>
 8000690:	bd10      	pop	{r4, pc}
 8000692:	46c0      	nop			; (mov r8, r8)

08000694 <read8>:

BMP280_t sensor;

// Read / Write functions
static uint8_t read8(uint8_t memory_address)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af04      	add	r7, sp, #16
 800069a:	0002      	movs	r2, r0
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, &tmp, 1, I2C_Timeout);
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <read8+0x3c>)
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <read8+0x3c>)
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	b299      	uxth	r1, r3
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	9302      	str	r3, [sp, #8]
 80006b4:	2301      	movs	r3, #1
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	240f      	movs	r4, #15
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2301      	movs	r3, #1
 80006c0:	f002 faf4 	bl	8002cac <HAL_I2C_Mem_Read>
	return tmp;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	781b      	ldrb	r3, [r3, #0]
}
 80006c8:	0018      	movs	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b005      	add	sp, #20
 80006ce:	bd90      	pop	{r4, r7, pc}
 80006d0:	20000098 	.word	0x20000098

080006d4 <read16>:

static uint16_t read16(uint8_t memory_address)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af04      	add	r7, sp, #16
 80006da:	0002      	movs	r2, r0
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	701a      	strb	r2, [r3, #0]
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, tmp, 2, I2C_Timeout);
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <read16+0x50>)
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <read16+0x50>)
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	b299      	uxth	r1, r3
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	2364      	movs	r3, #100	; 0x64
 80006f2:	9302      	str	r3, [sp, #8]
 80006f4:	2302      	movs	r3, #2
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	240c      	movs	r4, #12
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2301      	movs	r3, #1
 8000700:	f002 fad4 	bl	8002cac <HAL_I2C_Mem_Read>
	return (tmp[1] << 8) | (tmp[0]);
 8000704:	0021      	movs	r1, r4
 8000706:	187b      	adds	r3, r7, r1
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	b21a      	sxth	r2, r3
 800070e:	187b      	adds	r3, r7, r1
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b21b      	sxth	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	b21b      	sxth	r3, r3
 8000718:	b29b      	uxth	r3, r3
}
 800071a:	0018      	movs	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	b005      	add	sp, #20
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	20000098 	.word	0x20000098

08000728 <temp_press_burst_read>:

static void temp_press_burst_read(uint8_t* buff)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af04      	add	r7, sp, #16
 800072e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, press_msb, 1, buff, 6, I2C_Timeout);
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <temp_press_burst_read+0x30>)
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <temp_press_burst_read+0x30>)
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	b299      	uxth	r1, r3
 800073a:	2364      	movs	r3, #100	; 0x64
 800073c:	9302      	str	r3, [sp, #8]
 800073e:	2306      	movs	r3, #6
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2301      	movs	r3, #1
 8000748:	22f7      	movs	r2, #247	; 0xf7
 800074a:	f002 faaf 	bl	8002cac <HAL_I2C_Mem_Read>
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b002      	add	sp, #8
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	20000098 	.word	0x20000098

0800075c <write8>:

static void write8(uint8_t memory_address, uint8_t* data)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af04      	add	r7, sp, #16
 8000762:	0002      	movs	r2, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, data, 1, I2C_Timeout);
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <write8+0x38>)
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <write8+0x38>)
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	b299      	uxth	r1, r3
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b29a      	uxth	r2, r3
 800077a:	2364      	movs	r3, #100	; 0x64
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2301      	movs	r3, #1
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	f002 f962 	bl	8002a50 <HAL_I2C_Mem_Write>
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b002      	add	sp, #8
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000098 	.word	0x20000098

08000798 <BMP280_set_mode>:

// User functions
void BMP280_set_mode(BMP_Mode mode)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = read8(ctrl_meas);
 80007a4:	20f4      	movs	r0, #244	; 0xf4
 80007a6:	f7ff ff75 	bl	8000694 <read8>
 80007aa:	0003      	movs	r3, r0
 80007ac:	001a      	movs	r2, r3
 80007ae:	230f      	movs	r3, #15
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	701a      	strb	r2, [r3, #0]

	switch(mode)
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d028      	beq.n	800080e <BMP280_set_mode+0x76>
 80007bc:	dc3c      	bgt.n	8000838 <BMP280_set_mode+0xa0>
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <BMP280_set_mode+0x30>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d00e      	beq.n	80007e4 <BMP280_set_mode+0x4c>
		tmp &= 0xFC;
		tmp |= 0x03;
		write8(ctrl_meas, &tmp);
		break;
	}
}
 80007c6:	e037      	b.n	8000838 <BMP280_set_mode+0xa0>
		tmp &= 0xFC;
 80007c8:	210f      	movs	r1, #15
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2203      	movs	r2, #3
 80007d0:	4393      	bics	r3, r2
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	701a      	strb	r2, [r3, #0]
		write8(ctrl_meas, &tmp);
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	0019      	movs	r1, r3
 80007dc:	20f4      	movs	r0, #244	; 0xf4
 80007de:	f7ff ffbd 	bl	800075c <write8>
		break;
 80007e2:	e029      	b.n	8000838 <BMP280_set_mode+0xa0>
		tmp &= 0xFC;
 80007e4:	210f      	movs	r1, #15
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2203      	movs	r2, #3
 80007ec:	4393      	bics	r3, r2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	701a      	strb	r2, [r3, #0]
		tmp |= 0x01;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	701a      	strb	r2, [r3, #0]
		write8(ctrl_meas, &tmp);
 8000802:	187b      	adds	r3, r7, r1
 8000804:	0019      	movs	r1, r3
 8000806:	20f4      	movs	r0, #244	; 0xf4
 8000808:	f7ff ffa8 	bl	800075c <write8>
		break;
 800080c:	e014      	b.n	8000838 <BMP280_set_mode+0xa0>
		tmp &= 0xFC;
 800080e:	210f      	movs	r1, #15
 8000810:	187b      	adds	r3, r7, r1
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2203      	movs	r2, #3
 8000816:	4393      	bics	r3, r2
 8000818:	b2da      	uxtb	r2, r3
 800081a:	187b      	adds	r3, r7, r1
 800081c:	701a      	strb	r2, [r3, #0]
		tmp |= 0x03;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2203      	movs	r2, #3
 8000824:	4313      	orrs	r3, r2
 8000826:	b2da      	uxtb	r2, r3
 8000828:	187b      	adds	r3, r7, r1
 800082a:	701a      	strb	r2, [r3, #0]
		write8(ctrl_meas, &tmp);
 800082c:	187b      	adds	r3, r7, r1
 800082e:	0019      	movs	r1, r3
 8000830:	20f4      	movs	r0, #244	; 0xf4
 8000832:	f7ff ff93 	bl	800075c <write8>
		break;
 8000836:	46c0      	nop			; (mov r8, r8)
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b004      	add	sp, #16
 800083e:	bd80      	pop	{r7, pc}

08000840 <BMP280_set_temp_OVS>:

void BMP280_set_temp_OVS(BMP_OVS_rate Rate)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	0002      	movs	r2, r0
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = read8(ctrl_meas);
 800084c:	20f4      	movs	r0, #244	; 0xf4
 800084e:	f7ff ff21 	bl	8000694 <read8>
 8000852:	0003      	movs	r3, r0
 8000854:	001a      	movs	r2, r3
 8000856:	210f      	movs	r1, #15
 8000858:	187b      	adds	r3, r7, r1
 800085a:	701a      	strb	r2, [r3, #0]

	tmp &= 0x1F; // CLEAR bits
 800085c:	187b      	adds	r3, r7, r1
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	221f      	movs	r2, #31
 8000862:	4013      	ands	r3, r2
 8000864:	b2da      	uxtb	r2, r3
 8000866:	187b      	adds	r3, r7, r1
 8000868:	701a      	strb	r2, [r3, #0]
	tmp |= (Rate << 5);
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	015b      	lsls	r3, r3, #5
 8000870:	b25a      	sxtb	r2, r3
 8000872:	187b      	adds	r3, r7, r1
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b25b      	sxtb	r3, r3
 8000878:	4313      	orrs	r3, r2
 800087a:	b25b      	sxtb	r3, r3
 800087c:	b2da      	uxtb	r2, r3
 800087e:	187b      	adds	r3, r7, r1
 8000880:	701a      	strb	r2, [r3, #0]
	write8(ctrl_meas, &tmp);
 8000882:	187b      	adds	r3, r7, r1
 8000884:	0019      	movs	r1, r3
 8000886:	20f4      	movs	r0, #244	; 0xf4
 8000888:	f7ff ff68 	bl	800075c <write8>
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b004      	add	sp, #16
 8000892:	bd80      	pop	{r7, pc}

08000894 <BMP280_set_press_OVS>:


void BMP280_set_press_OVS(BMP_OVS_rate Rate)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	0002      	movs	r2, r0
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = read8(ctrl_meas);
 80008a0:	20f4      	movs	r0, #244	; 0xf4
 80008a2:	f7ff fef7 	bl	8000694 <read8>
 80008a6:	0003      	movs	r3, r0
 80008a8:	001a      	movs	r2, r3
 80008aa:	210f      	movs	r1, #15
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	701a      	strb	r2, [r3, #0]

	tmp &= 0xE3; // CLEAR bits
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	221c      	movs	r2, #28
 80008b6:	4393      	bics	r3, r2
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	701a      	strb	r2, [r3, #0]
	tmp |= (Rate << 2);
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	b25a      	sxtb	r2, r3
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b25b      	sxtb	r3, r3
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	701a      	strb	r2, [r3, #0]

	write8(ctrl_meas, &tmp);
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	0019      	movs	r1, r3
 80008da:	20f4      	movs	r0, #244	; 0xf4
 80008dc:	f7ff ff3e 	bl	800075c <write8>
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b004      	add	sp, #16
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <BMP280_set_filter>:

void BMP280_set_filter(BMP_filter_rate Rate)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	0002      	movs	r2, r0
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = read8(config);
 80008f4:	20f5      	movs	r0, #245	; 0xf5
 80008f6:	f7ff fecd 	bl	8000694 <read8>
 80008fa:	0003      	movs	r3, r0
 80008fc:	001a      	movs	r2, r3
 80008fe:	210f      	movs	r1, #15
 8000900:	187b      	adds	r3, r7, r1
 8000902:	701a      	strb	r2, [r3, #0]
	tmp &= 0xE3; // CLEAR bits
 8000904:	187b      	adds	r3, r7, r1
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	221c      	movs	r2, #28
 800090a:	4393      	bics	r3, r2
 800090c:	b2da      	uxtb	r2, r3
 800090e:	187b      	adds	r3, r7, r1
 8000910:	701a      	strb	r2, [r3, #0]
	tmp |= (Rate << 2);
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	b25a      	sxtb	r2, r3
 800091a:	187b      	adds	r3, r7, r1
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b25b      	sxtb	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b25b      	sxtb	r3, r3
 8000924:	b2da      	uxtb	r2, r3
 8000926:	187b      	adds	r3, r7, r1
 8000928:	701a      	strb	r2, [r3, #0]

	write8(ctrl_meas, &tmp);
 800092a:	187b      	adds	r3, r7, r1
 800092c:	0019      	movs	r1, r3
 800092e:	20f4      	movs	r0, #244	; 0xf4
 8000930:	f7ff ff14 	bl	800075c <write8>
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b004      	add	sp, #16
 800093a:	bd80      	pop	{r7, pc}

0800093c <BMP280_temp_compensate>:


static int32_t BMP280_temp_compensate(int32_t temp_raw)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, t_fine;

	var1 = ((((temp_raw>>3)-((int32_t)sensor.dig_t1<<1))) * ((int32_t)sensor.dig_t2)) >> 11;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	10da      	asrs	r2, r3, #3
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <BMP280_temp_compensate+0x58>)
 800094a:	88db      	ldrh	r3, [r3, #6]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	4a10      	ldr	r2, [pc, #64]	; (8000994 <BMP280_temp_compensate+0x58>)
 8000952:	2108      	movs	r1, #8
 8000954:	5e52      	ldrsh	r2, [r2, r1]
 8000956:	4353      	muls	r3, r2
 8000958:	12db      	asrs	r3, r3, #11
 800095a:	617b      	str	r3, [r7, #20]
	var2 = (((((temp_raw>>4)-((int32_t)sensor.dig_t1)) * ((temp_raw>>4)-((int32_t)sensor.dig_t1))) >> 12) *  ((int32_t)sensor.dig_t3)) >> 14;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	111b      	asrs	r3, r3, #4
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <BMP280_temp_compensate+0x58>)
 8000962:	88d2      	ldrh	r2, [r2, #6]
 8000964:	1a9b      	subs	r3, r3, r2
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	1112      	asrs	r2, r2, #4
 800096a:	490a      	ldr	r1, [pc, #40]	; (8000994 <BMP280_temp_compensate+0x58>)
 800096c:	88c9      	ldrh	r1, [r1, #6]
 800096e:	1a52      	subs	r2, r2, r1
 8000970:	4353      	muls	r3, r2
 8000972:	131b      	asrs	r3, r3, #12
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <BMP280_temp_compensate+0x58>)
 8000976:	210a      	movs	r1, #10
 8000978:	5e52      	ldrsh	r2, [r2, r1]
 800097a:	4353      	muls	r3, r2
 800097c:	139b      	asrs	r3, r3, #14
 800097e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	18d3      	adds	r3, r2, r3
 8000986:	60fb      	str	r3, [r7, #12]

	return t_fine;
 8000988:	68fb      	ldr	r3, [r7, #12]
}
 800098a:	0018      	movs	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	b006      	add	sp, #24
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	20000098 	.word	0x20000098

08000998 <BMP280_press_compensate>:

static uint32_t BMP280_press_compensate(int32_t press_raw, int32_t t_fine)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
	int32_t var1, var2;
	uint32_t p;
	var1 = (((int32_t)t_fine)>>1)-(int32_t)64000;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	105b      	asrs	r3, r3, #1
 80009a6:	4a4a      	ldr	r2, [pc, #296]	; (8000ad0 <BMP280_press_compensate+0x138>)
 80009a8:	4694      	mov	ip, r2
 80009aa:	4463      	add	r3, ip
 80009ac:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)sensor.dig_p6);
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	109b      	asrs	r3, r3, #2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	1092      	asrs	r2, r2, #2
 80009b6:	4353      	muls	r3, r2
 80009b8:	12db      	asrs	r3, r3, #11
 80009ba:	4a46      	ldr	r2, [pc, #280]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 80009bc:	2116      	movs	r1, #22
 80009be:	5e52      	ldrsh	r2, [r2, r1]
 80009c0:	4353      	muls	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((int32_t)sensor.dig_p5))<<1);
 80009c4:	4b43      	ldr	r3, [pc, #268]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 80009c6:	2214      	movs	r2, #20
 80009c8:	5e9b      	ldrsh	r3, [r3, r2]
 80009ca:	001a      	movs	r2, r3
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	4353      	muls	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	18d3      	adds	r3, r2, r3
 80009d6:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((int32_t)sensor.dig_p4)<<16);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	109a      	asrs	r2, r3, #2
 80009dc:	4b3d      	ldr	r3, [pc, #244]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 80009de:	2112      	movs	r1, #18
 80009e0:	5e5b      	ldrsh	r3, [r3, r1]
 80009e2:	041b      	lsls	r3, r3, #16
 80009e4:	18d3      	adds	r3, r2, r3
 80009e6:	60fb      	str	r3, [r7, #12]
	var1 = (((sensor.dig_p3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)sensor.dig_p2) * var1)>>1))>>18;
 80009e8:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 80009ea:	2210      	movs	r2, #16
 80009ec:	5e9b      	ldrsh	r3, [r3, r2]
 80009ee:	0019      	movs	r1, r3
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	109b      	asrs	r3, r3, #2
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	1092      	asrs	r2, r2, #2
 80009f8:	4353      	muls	r3, r2
 80009fa:	135b      	asrs	r3, r3, #13
 80009fc:	434b      	muls	r3, r1
 80009fe:	10da      	asrs	r2, r3, #3
 8000a00:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 8000a02:	210e      	movs	r1, #14
 8000a04:	5e5b      	ldrsh	r3, [r3, r1]
 8000a06:	0019      	movs	r1, r3
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	434b      	muls	r3, r1
 8000a0c:	105b      	asrs	r3, r3, #1
 8000a0e:	18d3      	adds	r3, r2, r3
 8000a10:	149b      	asrs	r3, r3, #18
 8000a12:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((int32_t)sensor.dig_p1))>>15);
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	0212      	lsls	r2, r2, #8
 8000a1a:	4694      	mov	ip, r2
 8000a1c:	4463      	add	r3, ip
 8000a1e:	4a2d      	ldr	r2, [pc, #180]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 8000a20:	8992      	ldrh	r2, [r2, #12]
 8000a22:	4353      	muls	r3, r2
 8000a24:	13db      	asrs	r3, r3, #15
 8000a26:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d101      	bne.n	8000a32 <BMP280_press_compensate+0x9a>
	{
	return 0; // avoid exception caused by division by zero
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e049      	b.n	8000ac6 <BMP280_press_compensate+0x12e>
	}
	p = (((uint32_t)(((int32_t)1048576)-press_raw)-(var2>>12)))*3125;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	131b      	asrs	r3, r3, #12
 8000a36:	001a      	movs	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	18d2      	adds	r2, r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	015b      	lsls	r3, r3, #5
 8000a40:	1a9b      	subs	r3, r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	189b      	adds	r3, r3, r2
 8000a46:	009a      	lsls	r2, r3, #2
 8000a48:	189b      	adds	r3, r3, r2
 8000a4a:	009a      	lsls	r2, r3, #2
 8000a4c:	189b      	adds	r3, r3, r2
 8000a4e:	425b      	negs	r3, r3
 8000a50:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <BMP280_press_compensate+0x140>)
 8000a52:	4694      	mov	ip, r2
 8000a54:	4463      	add	r3, ip
 8000a56:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db09      	blt.n	8000a72 <BMP280_press_compensate+0xda>
	{
	p = (p << 1) / ((uint32_t)var1);
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f7ff fb60 	bl	800012c <__udivsi3>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e007      	b.n	8000a82 <BMP280_press_compensate+0xea>
	}
	else
	{
	p = (p / (uint32_t)var1) * 2;
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	0019      	movs	r1, r3
 8000a76:	6978      	ldr	r0, [r7, #20]
 8000a78:	f7ff fb58 	bl	800012c <__udivsi3>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t)sensor.dig_p9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 8000a84:	221c      	movs	r2, #28
 8000a86:	5e9b      	ldrsh	r3, [r3, r2]
 8000a88:	0019      	movs	r1, r3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	08d2      	lsrs	r2, r2, #3
 8000a92:	4353      	muls	r3, r2
 8000a94:	0b5b      	lsrs	r3, r3, #13
 8000a96:	434b      	muls	r3, r1
 8000a98:	131b      	asrs	r3, r3, #12
 8000a9a:	613b      	str	r3, [r7, #16]
	var2 = (((int32_t)(p>>2)) * ((int32_t)sensor.dig_p8))>>13;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 8000aa4:	211a      	movs	r1, #26
 8000aa6:	5e5b      	ldrsh	r3, [r3, r1]
 8000aa8:	4353      	muls	r3, r2
 8000aaa:	135b      	asrs	r3, r3, #13
 8000aac:	60fb      	str	r3, [r7, #12]
	p = (uint32_t)((int32_t)p + ((var1 + var2 + sensor.dig_p7) >> 4));
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	18d3      	adds	r3, r2, r3
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <BMP280_press_compensate+0x13c>)
 8000ab6:	2118      	movs	r1, #24
 8000ab8:	5e52      	ldrsh	r2, [r2, r1]
 8000aba:	189b      	adds	r3, r3, r2
 8000abc:	111a      	asrs	r2, r3, #4
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	18d3      	adds	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
	return p;
 8000ac4:	697b      	ldr	r3, [r7, #20]

}
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b006      	add	sp, #24
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	ffff0600 	.word	0xffff0600
 8000ad4:	20000098 	.word	0x20000098
 8000ad8:	c3500000 	.word	0xc3500000

08000adc <BMP280_get_data_FORCED>:


void BMP280_get_data_FORCED(int32_t* temperature, uint32_t* pressure)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
	BMP280_set_mode(FORCED); // start conversion
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff fe56 	bl	8000798 <BMP280_set_mode>
	int32_t press_raw;
	uint8_t tmp_buff[6];
	int32_t t_fine;


	temp_press_burst_read(tmp_buff);
 8000aec:	240c      	movs	r4, #12
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff fe19 	bl	8000728 <temp_press_burst_read>
	press_raw = tmp_buff[0] << 12 | (tmp_buff[1] << 4) | (tmp_buff[2] >> 4);
 8000af6:	0021      	movs	r1, r4
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	031a      	lsls	r2, r3, #12
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	785b      	ldrb	r3, [r3, #1]
 8000b02:	011b      	lsls	r3, r3, #4
 8000b04:	4313      	orrs	r3, r2
 8000b06:	187a      	adds	r2, r7, r1
 8000b08:	7892      	ldrb	r2, [r2, #2]
 8000b0a:	0912      	lsrs	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	61fb      	str	r3, [r7, #28]
	temp_raw = tmp_buff[3] << 12 | (tmp_buff[4] << 4) | (tmp_buff[5] >> 4);
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	78db      	ldrb	r3, [r3, #3]
 8000b16:	031a      	lsls	r2, r3, #12
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	791b      	ldrb	r3, [r3, #4]
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	187a      	adds	r2, r7, r1
 8000b22:	7952      	ldrb	r2, [r2, #5]
 8000b24:	0912      	lsrs	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]

	// compensate temperature
	t_fine = BMP280_temp_compensate(temp_raw);
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff ff04 	bl	800093c <BMP280_temp_compensate>
 8000b34:	0003      	movs	r3, r0
 8000b36:	617b      	str	r3, [r7, #20]
	*temperature = ((t_fine * 5 + 128) >> 8) / 100; // return temperature in [C]
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	0013      	movs	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	189b      	adds	r3, r3, r2
 8000b40:	3380      	adds	r3, #128	; 0x80
 8000b42:	121b      	asrs	r3, r3, #8
 8000b44:	2164      	movs	r1, #100	; 0x64
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fb7a 	bl	8000240 <__divsi3>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	001a      	movs	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	601a      	str	r2, [r3, #0]

	// compensate pressure
	*pressure = (BMP280_press_compensate(press_raw, t_fine)) / 100; // return pressure in [Pa]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	0011      	movs	r1, r2
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f7ff ff1c 	bl	8000998 <BMP280_press_compensate>
 8000b60:	0003      	movs	r3, r0
 8000b62:	2164      	movs	r1, #100	; 0x64
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff fae1 	bl	800012c <__udivsi3>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	601a      	str	r2, [r3, #0]
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b009      	add	sp, #36	; 0x24
 8000b78:	bd90      	pop	{r4, r7, pc}
	...

08000b7c <BMP280_Init>:




BMP_Status BMP280_Init(I2C_HandleTypeDef* hi2c, uint8_t I2C_Address)
{
 8000b7c:	b5b0      	push	{r4, r5, r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	000a      	movs	r2, r1
 8000b86:	1cfb      	adds	r3, r7, #3
 8000b88:	701a      	strb	r2, [r3, #0]
	sensor.hi2c = hi2c;
 8000b8a:	4b3c      	ldr	r3, [pc, #240]	; (8000c7c <BMP280_Init+0x100>)
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	601a      	str	r2, [r3, #0]
	sensor.I2C_Addr = (I2C_Address << 1);
 8000b90:	1cfb      	adds	r3, r7, #3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	18db      	adds	r3, r3, r3
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b38      	ldr	r3, [pc, #224]	; (8000c7c <BMP280_Init+0x100>)
 8000b9a:	711a      	strb	r2, [r3, #4]

	// check sensor ID
	uint8_t sensor_id = read8(ID);
 8000b9c:	250f      	movs	r5, #15
 8000b9e:	197c      	adds	r4, r7, r5
 8000ba0:	20d0      	movs	r0, #208	; 0xd0
 8000ba2:	f7ff fd77 	bl	8000694 <read8>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	7023      	strb	r3, [r4, #0]
	if(sensor_id != CHIP_ID)
 8000baa:	197b      	adds	r3, r7, r5
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b58      	cmp	r3, #88	; 0x58
 8000bb0:	d001      	beq.n	8000bb6 <BMP280_Init+0x3a>
	{
		return BMP280_NOK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e05d      	b.n	8000c72 <BMP280_Init+0xf6>
	}

	// load calibration coefficients
	sensor.dig_t1 = read16(dig_T1);
 8000bb6:	2088      	movs	r0, #136	; 0x88
 8000bb8:	f7ff fd8c 	bl	80006d4 <read16>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <BMP280_Init+0x100>)
 8000bc2:	80da      	strh	r2, [r3, #6]
	sensor.dig_t2 = read16(dig_T2);
 8000bc4:	208a      	movs	r0, #138	; 0x8a
 8000bc6:	f7ff fd85 	bl	80006d4 <read16>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	b21a      	sxth	r2, r3
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <BMP280_Init+0x100>)
 8000bd0:	811a      	strh	r2, [r3, #8]
	sensor.dig_t3 = read16(dig_T3);
 8000bd2:	208c      	movs	r0, #140	; 0x8c
 8000bd4:	f7ff fd7e 	bl	80006d4 <read16>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <BMP280_Init+0x100>)
 8000bde:	815a      	strh	r2, [r3, #10]
	sensor.dig_p1 = read16(dig_P1);
 8000be0:	208e      	movs	r0, #142	; 0x8e
 8000be2:	f7ff fd77 	bl	80006d4 <read16>
 8000be6:	0003      	movs	r3, r0
 8000be8:	001a      	movs	r2, r3
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <BMP280_Init+0x100>)
 8000bec:	819a      	strh	r2, [r3, #12]
	sensor.dig_p2 = read16(dig_P2);
 8000bee:	2090      	movs	r0, #144	; 0x90
 8000bf0:	f7ff fd70 	bl	80006d4 <read16>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <BMP280_Init+0x100>)
 8000bfa:	81da      	strh	r2, [r3, #14]
	sensor.dig_p3 = read16(dig_P3);
 8000bfc:	2092      	movs	r0, #146	; 0x92
 8000bfe:	f7ff fd69 	bl	80006d4 <read16>
 8000c02:	0003      	movs	r3, r0
 8000c04:	b21a      	sxth	r2, r3
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <BMP280_Init+0x100>)
 8000c08:	821a      	strh	r2, [r3, #16]
	sensor.dig_p4 = read16(dig_P4);
 8000c0a:	2094      	movs	r0, #148	; 0x94
 8000c0c:	f7ff fd62 	bl	80006d4 <read16>
 8000c10:	0003      	movs	r3, r0
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <BMP280_Init+0x100>)
 8000c16:	825a      	strh	r2, [r3, #18]
	sensor.dig_p5 = read16(dig_P5);
 8000c18:	2096      	movs	r0, #150	; 0x96
 8000c1a:	f7ff fd5b 	bl	80006d4 <read16>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <BMP280_Init+0x100>)
 8000c24:	829a      	strh	r2, [r3, #20]
	sensor.dig_p6 = read16(dig_P6);
 8000c26:	2098      	movs	r0, #152	; 0x98
 8000c28:	f7ff fd54 	bl	80006d4 <read16>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <BMP280_Init+0x100>)
 8000c32:	82da      	strh	r2, [r3, #22]
	sensor.dig_p7 = read16(dig_P7);
 8000c34:	209a      	movs	r0, #154	; 0x9a
 8000c36:	f7ff fd4d 	bl	80006d4 <read16>
 8000c3a:	0003      	movs	r3, r0
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <BMP280_Init+0x100>)
 8000c40:	831a      	strh	r2, [r3, #24]
	sensor.dig_p8 = read16(dig_P8);
 8000c42:	209c      	movs	r0, #156	; 0x9c
 8000c44:	f7ff fd46 	bl	80006d4 <read16>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <BMP280_Init+0x100>)
 8000c4e:	835a      	strh	r2, [r3, #26]
	sensor.dig_p9 = read16(dig_P9);
 8000c50:	209e      	movs	r0, #158	; 0x9e
 8000c52:	f7ff fd3f 	bl	80006d4 <read16>
 8000c56:	0003      	movs	r3, r0
 8000c58:	b21a      	sxth	r2, r3
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <BMP280_Init+0x100>)
 8000c5c:	839a      	strh	r2, [r3, #28]

	// initial sensor setup
	// Mode - Forced, Oversampling - UltraLowPower, osrs_p - x1, osrs_t - x1, IIR - off
	// Timing - 1/min, ODR - 1/60Hz, BW - Full

	 BMP280_set_filter(OFF);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fe42 	bl	80008e8 <BMP280_set_filter>
	 BMP280_set_temp_OVS(x1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff fdeb 	bl	8000840 <BMP280_set_temp_OVS>
	 BMP280_set_press_OVS(x1);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff fe12 	bl	8000894 <BMP280_set_press_OVS>

	return BMP280_OK;
 8000c70:	2301      	movs	r3, #1
}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b004      	add	sp, #16
 8000c78:	bdb0      	pop	{r4, r5, r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	20000098 	.word	0x20000098

08000c80 <ESP8266_is_TCP_disconnected>:
	return ESP_OK;
}


static ESP_status ESP8266_is_TCP_disconnected(ESP8266_t* ESP)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	if(ESP->ESP_RX_Buff.BUFFER_EMPTY_FLAG)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	228b      	movs	r2, #139	; 0x8b
 8000c8c:	5c9b      	ldrb	r3, [r3, r2]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <ESP8266_is_TCP_disconnected+0x16>
	{
		return ESP_NOK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e015      	b.n	8000cc2 <ESP8266_is_TCP_disconnected+0x42>
	}

	Parser_clean_string(&ESP->ESP_RX_Buff, ESP->MessageReceive);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3308      	adds	r3, #8
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	338d      	adds	r3, #141	; 0x8d
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	f000 feb1 	bl	8001a0a <Parser_clean_string>

	if(!(Parser_simple_parse("CLOSED", ESP->MessageReceive)))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	338d      	adds	r3, #141	; 0x8d
 8000cac:	001a      	movs	r2, r3
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <ESP8266_is_TCP_disconnected+0x4c>)
 8000cb0:	0011      	movs	r1, r2
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f000 fef2 	bl	8001a9c <Parser_simple_parse>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d101      	bne.n	8000cc0 <ESP8266_is_TCP_disconnected+0x40>
	{
		return ESP_NOK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e000      	b.n	8000cc2 <ESP8266_is_TCP_disconnected+0x42>
	}

	return ESP_OK;
 8000cc0:	2301      	movs	r3, #1

}
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	0800669c 	.word	0x0800669c

08000cd0 <ESP8266_Disconnect>:


static ESP_status ESP8266_Disconnect(ESP8266_t* ESP)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b08d      	sub	sp, #52	; 0x34
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	uint8_t message[36];
	uint8_t length;
	length = sprintf((char*)message, "AT+CWQAP\r\n");
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <ESP8266_Disconnect+0x38>)
 8000cda:	2408      	movs	r4, #8
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f005 f88d 	bl	8005e00 <siprintf>
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	212f      	movs	r1, #47	; 0x2f
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	701a      	strb	r2, [r3, #0]
	UART_send_message((char*)message, length);
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	0011      	movs	r1, r2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fa92 	bl	8001220 <UART_send_message>
	return ESP_OK;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b00d      	add	sp, #52	; 0x34
 8000d04:	bd90      	pop	{r4, r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	080066a4 	.word	0x080066a4

08000d0c <ESP8266_Connect_To_Router>:
	return ESP_OK;
}


static ESP_status ESP8266_Connect_To_Router(ESP8266_t* ESP)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b08d      	sub	sp, #52	; 0x34
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	uint8_t message[36];
	uint8_t length;
	length = sprintf((char*)message, "AT+CWJAP=\"%s\",\"%s\"\r\n", ESP->SSID, ESP->PSWD);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	490e      	ldr	r1, [pc, #56]	; (8000d58 <ESP8266_Connect_To_Router+0x4c>)
 8000d1e:	2408      	movs	r4, #8
 8000d20:	1938      	adds	r0, r7, r4
 8000d22:	f005 f86d 	bl	8005e00 <siprintf>
 8000d26:	0002      	movs	r2, r0
 8000d28:	212f      	movs	r1, #47	; 0x2f
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
	UART_send_message((char*)message, length);
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	0011      	movs	r1, r2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 fa72 	bl	8001220 <UART_send_message>

	HAL_Delay(20000);
 8000d3c:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <ESP8266_Connect_To_Router+0x50>)
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f001 f8e8 	bl	8001f14 <HAL_Delay>
	//while(!ESP8266_Check_OK_Respond(ESP));

	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3308      	adds	r3, #8
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f000 fa38 	bl	80011be <RB_Flush>
	return ESP_OK;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b00d      	add	sp, #52	; 0x34
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	080066c8 	.word	0x080066c8
 8000d5c:	00004e20 	.word	0x00004e20

08000d60 <ESP8266_SetMode>:

ESP_status ESP8266_SetMode(ESP8266_t* ESP, ESP_mode mode)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	000a      	movs	r2, r1
 8000d6a:	1cfb      	adds	r3, r7, #3
 8000d6c:	701a      	strb	r2, [r3, #0]
	RX_RESPOND_FLAG = 1;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <ESP8266_SetMode+0x64>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10000);
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <ESP8266_SetMode+0x68>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f001 f8cc 	bl	8001f14 <HAL_Delay>

	switch(mode)
 8000d7c:	1cfb      	adds	r3, r7, #3
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d00f      	beq.n	8000da4 <ESP8266_SetMode+0x44>
 8000d84:	dc13      	bgt.n	8000dae <ESP8266_SetMode+0x4e>
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <ESP8266_SetMode+0x30>
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d005      	beq.n	8000d9a <ESP8266_SetMode+0x3a>
 8000d8e:	e00e      	b.n	8000dae <ESP8266_SetMode+0x4e>
	{
	case STATION:
		UART_send_string("AT+CWMODE=1\r\n"); // Set WiFi mode to station mode
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <ESP8266_SetMode+0x6c>)
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 fa26 	bl	80011e4 <UART_send_string>
		break;
 8000d98:	e009      	b.n	8000dae <ESP8266_SetMode+0x4e>

	case ACCESS_POINT:
		UART_send_string("AT+CWMODE=2\r\n"); // Set WiFi mode to access point
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <ESP8266_SetMode+0x70>)
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 fa21 	bl	80011e4 <UART_send_string>
		break;
 8000da2:	e004      	b.n	8000dae <ESP8266_SetMode+0x4e>

	case AP_STATION:
		UART_send_string("AT+CWMODE=3\r\n"); // Set WiFi mode to station mode + AP mode
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <ESP8266_SetMode+0x74>)
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 fa1c 	bl	80011e4 <UART_send_string>
		break;
 8000dac:	46c0      	nop			; (mov r8, r8)
	}
	//while(!ESP8266_Check_OK_Respond(ESP)); // wait for receiving  OK message


	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3308      	adds	r3, #8
 8000db2:	0018      	movs	r0, r3
 8000db4:	f000 fa03 	bl	80011be <RB_Flush>
	return ESP_OK;
 8000db8:	2301      	movs	r3, #1
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	200000b8 	.word	0x200000b8
 8000dc8:	00002710 	.word	0x00002710
 8000dcc:	080066e0 	.word	0x080066e0
 8000dd0:	080066f0 	.word	0x080066f0
 8000dd4:	08006700 	.word	0x08006700

08000dd8 <ESP8266_Init>:


ESP_status ESP8266_Init(ESP8266_t* ESP, char* SSID, char* PSWD, ESP_mode Mode)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	001a      	movs	r2, r3
 8000de6:	1cfb      	adds	r3, r7, #3
 8000de8:	701a      	strb	r2, [r3, #0]
	ESP->SSID = SSID;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	68ba      	ldr	r2, [r7, #8]
 8000dee:	601a      	str	r2, [r3, #0]
	ESP->PSWD = PSWD;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	605a      	str	r2, [r3, #4]
	HAL_Delay(15000); // wait sec
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <ESP8266_Init+0x58>)
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f001 f88b 	bl	8001f14 <HAL_Delay>
	ESP8266_Disconnect(ESP);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff ff65 	bl	8000cd0 <ESP8266_Disconnect>

	RingBuffer_Init(&ESP->ESP_RX_Buff);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3308      	adds	r3, #8
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f000 f944 	bl	8001098 <RingBuffer_Init>
//	if(ESP8266_CheckAT(ESP) != ESP_OK)
//	{
//		return ESP_NOK;
//	}
	// 1. Set WiFi mode
	ESP8266_SetMode(ESP, Mode);
 8000e10:	1cfb      	adds	r3, r7, #3
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff ffa1 	bl	8000d60 <ESP8266_SetMode>
	// 2. Connect to a router
	ESP8266_Connect_To_Router(ESP);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff ff73 	bl	8000d0c <ESP8266_Connect_To_Router>

	return ESP_OK;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b004      	add	sp, #16
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	00003a98 	.word	0x00003a98

08000e34 <ESP8266_SetConnectionMode>:

ESP_status ESP8266_SetConnectionMode(ESP8266_t* ESP, ESP_ConnectionMode mode)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	000a      	movs	r2, r1
 8000e3e:	1cfb      	adds	r3, r7, #3
 8000e40:	701a      	strb	r2, [r3, #0]
	switch(mode)
 8000e42:	1cfb      	adds	r3, r7, #3
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <ESP8266_SetConnectionMode+0x1c>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d005      	beq.n	8000e5a <ESP8266_SetConnectionMode+0x26>
 8000e4e:	e009      	b.n	8000e64 <ESP8266_SetConnectionMode+0x30>
	{
	case SINGLE_CONNECTION:
		UART_send_string("AT+CIPMUX=0\r\n");
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <ESP8266_SetConnectionMode+0x4c>)
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 f9c6 	bl	80011e4 <UART_send_string>
		break;
 8000e58:	e004      	b.n	8000e64 <ESP8266_SetConnectionMode+0x30>
	case MULTIPLE_CONNECTION:
		UART_send_string("AT+CIPMUX=1\r\n");
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <ESP8266_SetConnectionMode+0x50>)
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f000 f9c1 	bl	80011e4 <UART_send_string>
		break;
 8000e62:	46c0      	nop			; (mov r8, r8)
	}
	HAL_Delay(5000);
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <ESP8266_SetConnectionMode+0x54>)
 8000e66:	0018      	movs	r0, r3
 8000e68:	f001 f854 	bl	8001f14 <HAL_Delay>

	//while(!ESP8266_Check_OK_Respond(ESP));

	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3308      	adds	r3, #8
 8000e70:	0018      	movs	r0, r3
 8000e72:	f000 f9a4 	bl	80011be <RB_Flush>
	return ESP_OK;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	08006710 	.word	0x08006710
 8000e84:	08006720 	.word	0x08006720
 8000e88:	00001388 	.word	0x00001388

08000e8c <ESP8266_Connect_TCP>:


ESP_status ESP8266_Connect_TCP(ESP8266_t* ESP, char* Target_IP, char* PORT, ESP_ConnectionMode mode)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b0a7      	sub	sp, #156	; 0x9c
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	001a      	movs	r2, r3
 8000e9a:	1cfb      	adds	r3, r7, #3
 8000e9c:	701a      	strb	r2, [r3, #0]
	ESP8266_SetConnectionMode(ESP, mode);
 8000e9e:	1cfb      	adds	r3, r7, #3
 8000ea0:	781a      	ldrb	r2, [r3, #0]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	0011      	movs	r1, r2
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff ffc4 	bl	8000e34 <ESP8266_SetConnectionMode>

	uint8_t message[128];
	uint8_t length;
	length = sprintf((char*)message, "AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", Target_IP, PORT);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	4911      	ldr	r1, [pc, #68]	; (8000ef8 <ESP8266_Connect_TCP+0x6c>)
 8000eb2:	2414      	movs	r4, #20
 8000eb4:	1938      	adds	r0, r7, r4
 8000eb6:	f004 ffa3 	bl	8005e00 <siprintf>
 8000eba:	0002      	movs	r2, r0
 8000ebc:	2197      	movs	r1, #151	; 0x97
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	701a      	strb	r2, [r3, #0]
	UART_send_message((char*)message, length);
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	781a      	ldrb	r2, [r3, #0]
 8000ec6:	193b      	adds	r3, r7, r4
 8000ec8:	0011      	movs	r1, r2
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f000 f9a8 	bl	8001220 <UART_send_message>
	HAL_Delay(1000);
 8000ed0:	23fa      	movs	r3, #250	; 0xfa
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f001 f81d 	bl	8001f14 <HAL_Delay>

	//while(!ESP8266_Check_OK_Respond(ESP));

	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	3308      	adds	r3, #8
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 f96d 	bl	80011be <RB_Flush>
	ESP->ESP8266_status = ESP_OK;
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	230e      	movs	r3, #14
 8000ee8:	33ff      	adds	r3, #255	; 0xff
 8000eea:	2101      	movs	r1, #1
 8000eec:	54d1      	strb	r1, [r2, r3]

	return ESP_OK;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b027      	add	sp, #156	; 0x9c
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	08006730 	.word	0x08006730

08000efc <ESP8266_Disconnect_TCP>:

ESP_status ESP8266_Disconnect_TCP(ESP8266_t* ESP)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	UART_send_string("AT+CIPCLOSE\r\n");
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <ESP8266_Disconnect_TCP+0x24>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 f96c 	bl	80011e4 <UART_send_string>

	//while(!ESP8266_Check_OK_Respond(ESP));

	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3308      	adds	r3, #8
 8000f10:	0018      	movs	r0, r3
 8000f12:	f000 f954 	bl	80011be <RB_Flush>
	return ESP_OK;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	0800674c 	.word	0x0800674c

08000f24 <ESP8266_TS_Send_Data_MultiField>:




ESP_status ESP8266_TS_Send_Data_MultiField(ESP8266_t* ESP, uint8_t number_of_fields, uint16_t data_buffer[])
{
 8000f24:	b5b0      	push	{r4, r5, r7, lr}
 8000f26:	b0b6      	sub	sp, #216	; 0xd8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	230b      	movs	r3, #11
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	1c0a      	adds	r2, r1, #0
 8000f34:	701a      	strb	r2, [r3, #0]
	ESP8266_Connect_TCP(ESP, "184.106.153.149", "80", SINGLE_CONNECTION);
 8000f36:	4a50      	ldr	r2, [pc, #320]	; (8001078 <ESP8266_TS_Send_Data_MultiField+0x154>)
 8000f38:	4950      	ldr	r1, [pc, #320]	; (800107c <ESP8266_TS_Send_Data_MultiField+0x158>)
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f7ff ffa5 	bl	8000e8c <ESP8266_Connect_TCP>

	char cipsend_buff[25] = {0};
 8000f42:	23b8      	movs	r3, #184	; 0xb8
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	2215      	movs	r2, #21
 8000f4e:	2100      	movs	r1, #0
 8000f50:	0018      	movs	r0, r3
 8000f52:	f004 ff4c 	bl	8005dee <memset>
	char field_buff[35] = {0};
 8000f56:	2394      	movs	r3, #148	; 0x94
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	221f      	movs	r2, #31
 8000f62:	2100      	movs	r1, #0
 8000f64:	0018      	movs	r0, r3
 8000f66:	f004 ff42 	bl	8005dee <memset>
	char message[128] = {0};
 8000f6a:	2414      	movs	r4, #20
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	3304      	adds	r3, #4
 8000f74:	227c      	movs	r2, #124	; 0x7c
 8000f76:	2100      	movs	r1, #0
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f004 ff38 	bl	8005dee <memset>

	// prepare message
	sprintf(message, "GET /update?api_key=%s", API_Key);
 8000f7e:	4a40      	ldr	r2, [pc, #256]	; (8001080 <ESP8266_TS_Send_Data_MultiField+0x15c>)
 8000f80:	4940      	ldr	r1, [pc, #256]	; (8001084 <ESP8266_TS_Send_Data_MultiField+0x160>)
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	0018      	movs	r0, r3
 8000f86:	f004 ff3b 	bl	8005e00 <siprintf>
	for(int i = 1; i < number_of_fields + 1; i++)
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	22d4      	movs	r2, #212	; 0xd4
 8000f8e:	18ba      	adds	r2, r7, r2
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e01d      	b.n	8000fd0 <ESP8266_TS_Send_Data_MultiField+0xac>
	{
		sprintf(field_buff, "&field%d=%u", i, data_buffer[i - 1]);
 8000f94:	21d4      	movs	r1, #212	; 0xd4
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a3b      	ldr	r2, [pc, #236]	; (8001088 <ESP8266_TS_Send_Data_MultiField+0x164>)
 8000f9c:	4694      	mov	ip, r2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	18d3      	adds	r3, r2, r3
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	000c      	movs	r4, r1
 8000faa:	187a      	adds	r2, r7, r1
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	4937      	ldr	r1, [pc, #220]	; (800108c <ESP8266_TS_Send_Data_MultiField+0x168>)
 8000fb0:	2594      	movs	r5, #148	; 0x94
 8000fb2:	1978      	adds	r0, r7, r5
 8000fb4:	f004 ff24 	bl	8005e00 <siprintf>
		strcat(message, field_buff);
 8000fb8:	197a      	adds	r2, r7, r5
 8000fba:	2314      	movs	r3, #20
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f004 ff3d 	bl	8005e40 <strcat>
	for(int i = 1; i < number_of_fields + 1; i++)
 8000fc6:	193b      	adds	r3, r7, r4
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	193a      	adds	r2, r7, r4
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	230b      	movs	r3, #11
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	22d4      	movs	r2, #212	; 0xd4
 8000fd8:	18ba      	adds	r2, r7, r2
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	ddd9      	ble.n	8000f94 <ESP8266_TS_Send_Data_MultiField+0x70>
	}

	strcat(message, "\r\n");
 8000fe0:	2414      	movs	r4, #20
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff f88f 	bl	8000108 <strlen>
 8000fea:	0003      	movs	r3, r0
 8000fec:	001a      	movs	r2, r3
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	189a      	adds	r2, r3, r2
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <ESP8266_TS_Send_Data_MultiField+0x16c>)
 8000ff4:	0010      	movs	r0, r2
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	f004 feee 	bl	8005ddc <memcpy>

	// send data length information
	sprintf(cipsend_buff, "AT+CIPSEND=%d\r\n", strlen(message));
 8001000:	193b      	adds	r3, r7, r4
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff f880 	bl	8000108 <strlen>
 8001008:	0002      	movs	r2, r0
 800100a:	4922      	ldr	r1, [pc, #136]	; (8001094 <ESP8266_TS_Send_Data_MultiField+0x170>)
 800100c:	25b8      	movs	r5, #184	; 0xb8
 800100e:	197b      	adds	r3, r7, r5
 8001010:	0018      	movs	r0, r3
 8001012:	f004 fef5 	bl	8005e00 <siprintf>
	UART_send_message(cipsend_buff, strlen(cipsend_buff));
 8001016:	197b      	adds	r3, r7, r5
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff f875 	bl	8000108 <strlen>
 800101e:	0003      	movs	r3, r0
 8001020:	b2da      	uxtb	r2, r3
 8001022:	197b      	adds	r3, r7, r5
 8001024:	0011      	movs	r1, r2
 8001026:	0018      	movs	r0, r3
 8001028:	f000 f8fa 	bl	8001220 <UART_send_message>

	HAL_Delay(5 * ESP_RESPOND_TIME);
 800102c:	23fa      	movs	r3, #250	; 0xfa
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	0018      	movs	r0, r3
 8001032:	f000 ff6f 	bl	8001f14 <HAL_Delay>
	//while(!(Parser_simple_parse(">", ESP->MessageReceive)));
	UART_send_message(message, strlen(message)); // send data
 8001036:	193b      	adds	r3, r7, r4
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff f865 	bl	8000108 <strlen>
 800103e:	0003      	movs	r3, r0
 8001040:	b2da      	uxtb	r2, r3
 8001042:	193b      	adds	r3, r7, r4
 8001044:	0011      	movs	r1, r2
 8001046:	0018      	movs	r0, r3
 8001048:	f000 f8ea 	bl	8001220 <UART_send_message>
	//while(!ESP8266_Check_OK_Respond(ESP));

	// if TCP isn't closed
	if(ESP8266_is_TCP_disconnected(ESP) != ESP_OK)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff fe16 	bl	8000c80 <ESP8266_is_TCP_disconnected>
 8001054:	0003      	movs	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d003      	beq.n	8001062 <ESP8266_TS_Send_Data_MultiField+0x13e>
	{
		ESP8266_Disconnect_TCP(ESP);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff ff4d 	bl	8000efc <ESP8266_Disconnect_TCP>
	}

	//ESP8266_EnterDeepSleep(ESP, 2000);

	ESP->ESP8266_status = ESP_OK;
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	230e      	movs	r3, #14
 8001066:	33ff      	adds	r3, #255	; 0xff
 8001068:	2101      	movs	r1, #1
 800106a:	54d1      	strb	r1, [r2, r3]
	return ESP_OK;
 800106c:	2301      	movs	r3, #1
}
 800106e:	0018      	movs	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	b036      	add	sp, #216	; 0xd8
 8001074:	bdb0      	pop	{r4, r5, r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	0800675c 	.word	0x0800675c
 800107c:	08006760 	.word	0x08006760
 8001080:	080067c0 	.word	0x080067c0
 8001084:	08006770 	.word	0x08006770
 8001088:	7fffffff 	.word	0x7fffffff
 800108c:	08006788 	.word	0x08006788
 8001090:	08006794 	.word	0x08006794
 8001094:	08006798 	.word	0x08006798

08001098 <RingBuffer_Init>:

#include "RingBuffer.h"


void RingBuffer_Init(RingBuffer_t* RingBuffer)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	RingBuffer->head = 0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	705a      	strb	r2, [r3, #1]
	RingBuffer->tail = 0;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
	RingBuffer->BUFFER_FULL_FLAG = 0;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2282      	movs	r2, #130	; 0x82
 80010b0:	2100      	movs	r1, #0
 80010b2:	5499      	strb	r1, [r3, r2]
	RingBuffer->BUFFER_EMPTY_FLAG = 1;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2283      	movs	r2, #131	; 0x83
 80010b8:	2101      	movs	r1, #1
 80010ba:	5499      	strb	r1, [r3, r2]
	RingBuffer->data_counter = 0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2284      	movs	r2, #132	; 0x84
 80010c0:	2100      	movs	r1, #0
 80010c2:	5499      	strb	r1, [r3, r2]
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b002      	add	sp, #8
 80010ca:	bd80      	pop	{r7, pc}

080010cc <RB_Buff_Write>:
	while(*string++ && (!RingBuffer->BUFFER_FULL_FLAG));
}


void RB_Buff_Write(RingBuffer_t* RingBuffer, uint8_t value)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	000a      	movs	r2, r1
 80010d6:	1cfb      	adds	r3, r7, #3
 80010d8:	701a      	strb	r2, [r3, #0]
	if(((RingBuffer->head + 1) % BUFFER_SIZE) != RingBuffer->tail)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	785b      	ldrb	r3, [r3, #1]
 80010de:	3301      	adds	r3, #1
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <RB_Buff_Write+0x84>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	d504      	bpl.n	80010f0 <RB_Buff_Write+0x24>
 80010e6:	3b01      	subs	r3, #1
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	4252      	negs	r2, r2
 80010ec:	4313      	orrs	r3, r2
 80010ee:	3301      	adds	r3, #1
 80010f0:	001a      	movs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d021      	beq.n	800113e <RB_Buff_Write+0x72>
	{
		RingBuffer->BUFFER_EMPTY_FLAG = 0;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2283      	movs	r2, #131	; 0x83
 80010fe:	2100      	movs	r1, #0
 8001100:	5499      	strb	r1, [r3, r2]
		RingBuffer->buffer[RingBuffer->head] = value;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	001a      	movs	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	189b      	adds	r3, r3, r2
 800110c:	1cfa      	adds	r2, r7, #3
 800110e:	7812      	ldrb	r2, [r2, #0]
 8001110:	709a      	strb	r2, [r3, #2]
		RingBuffer->head++;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	3301      	adds	r3, #1
 8001118:	b2da      	uxtb	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	705a      	strb	r2, [r3, #1]
		RingBuffer->head %= BUFFER_SIZE;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	785b      	ldrb	r3, [r3, #1]
 8001122:	227f      	movs	r2, #127	; 0x7f
 8001124:	4013      	ands	r3, r2
 8001126:	b2da      	uxtb	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	705a      	strb	r2, [r3, #1]
		RingBuffer->data_counter++;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2284      	movs	r2, #132	; 0x84
 8001130:	5c9b      	ldrb	r3, [r3, r2]
 8001132:	3301      	adds	r3, #1
 8001134:	b2d9      	uxtb	r1, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2284      	movs	r2, #132	; 0x84
 800113a:	5499      	strb	r1, [r3, r2]
	}
	else
	{
		RingBuffer->BUFFER_FULL_FLAG = 1;
	}
}
 800113c:	e003      	b.n	8001146 <RB_Buff_Write+0x7a>
		RingBuffer->BUFFER_FULL_FLAG = 1;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2282      	movs	r2, #130	; 0x82
 8001142:	2101      	movs	r1, #1
 8001144:	5499      	strb	r1, [r3, r2]
}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	8000007f 	.word	0x8000007f

08001154 <RB_Buff_Read>:



void RB_Buff_Read(RingBuffer_t* RingBuffer, uint8_t* data)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	if(RingBuffer->tail != RingBuffer->head)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	785b      	ldrb	r3, [r3, #1]
 8001166:	429a      	cmp	r2, r3
 8001168:	d021      	beq.n	80011ae <RB_Buff_Read+0x5a>
	{
		RingBuffer->BUFFER_FULL_FLAG = 0;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2282      	movs	r2, #130	; 0x82
 800116e:	2100      	movs	r1, #0
 8001170:	5499      	strb	r1, [r3, r2]
		*data = RingBuffer->buffer[RingBuffer->tail];
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	001a      	movs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	189b      	adds	r3, r3, r2
 800117c:	789a      	ldrb	r2, [r3, #2]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	701a      	strb	r2, [r3, #0]
		RingBuffer->tail++;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	701a      	strb	r2, [r3, #0]
		RingBuffer->tail %= BUFFER_SIZE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	227f      	movs	r2, #127	; 0x7f
 8001194:	4013      	ands	r3, r2
 8001196:	b2da      	uxtb	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	701a      	strb	r2, [r3, #0]
		RingBuffer->data_counter--;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2284      	movs	r2, #132	; 0x84
 80011a0:	5c9b      	ldrb	r3, [r3, r2]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b2d9      	uxtb	r1, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2284      	movs	r2, #132	; 0x84
 80011aa:	5499      	strb	r1, [r3, r2]

	else
	{
		RingBuffer->BUFFER_EMPTY_FLAG = 1;
	}
}
 80011ac:	e003      	b.n	80011b6 <RB_Buff_Read+0x62>
		RingBuffer->BUFFER_EMPTY_FLAG = 1;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2283      	movs	r2, #131	; 0x83
 80011b2:	2101      	movs	r1, #1
 80011b4:	5499      	strb	r1, [r3, r2]
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b002      	add	sp, #8
 80011bc:	bd80      	pop	{r7, pc}

080011be <RB_Flush>:
{
	return RingBuffer->data_counter;
}

void RB_Flush(RingBuffer_t* RingBuffer)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
	// clear buffer
	RingBuffer->head = 0;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	705a      	strb	r2, [r3, #1]
	RingBuffer->tail = 0;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	RingBuffer->data_counter = 0;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2284      	movs	r2, #132	; 0x84
 80011d6:	2100      	movs	r1, #0
 80011d8:	5499      	strb	r1, [r3, r2]
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <UART_send_string>:
 */

#include "Utilis.h"

void UART_send_string(char* message)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b095      	sub	sp, #84	; 0x54
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	uint8_t length;
	uint8_t message_buf[64];
	length = sprintf((char*)message_buf, message);
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	240c      	movs	r4, #12
 80011f0:	193b      	adds	r3, r7, r4
 80011f2:	0011      	movs	r1, r2
 80011f4:	0018      	movs	r0, r3
 80011f6:	f004 fe03 	bl	8005e00 <siprintf>
 80011fa:	0002      	movs	r2, r0
 80011fc:	214f      	movs	r1, #79	; 0x4f
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(UART, message_buf, length, 100);
 8001202:	187b      	adds	r3, r7, r1
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b29a      	uxth	r2, r3
 8001208:	1939      	adds	r1, r7, r4
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <UART_send_string+0x38>)
 800120c:	2364      	movs	r3, #100	; 0x64
 800120e:	f003 fb23 	bl	8004858 <HAL_UART_Transmit>
}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b015      	add	sp, #84	; 0x54
 8001218:	bd90      	pop	{r4, r7, pc}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	2000034c 	.word	0x2000034c

08001220 <UART_send_message>:

void UART_send_message(char* string, uint8_t string_size)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	000a      	movs	r2, r1
 800122a:	1cfb      	adds	r3, r7, #3
 800122c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(UART, (uint8_t*)string, string_size, 100);
 800122e:	1cfb      	adds	r3, r7, #3
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b29a      	uxth	r2, r3
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <UART_send_message+0x28>)
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	f003 fb0d 	bl	8004858 <HAL_UART_Transmit>
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	2000034c 	.word	0x2000034c

0800124c <delay_init>:

#include "main.h"
#include "delay.h"

void delay_init()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(_TIMER);
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <delay_init+0x14>)
 8001252:	0018      	movs	r0, r3
 8001254:	f003 f84e 	bl	80042f4 <HAL_TIM_Base_Start>
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	200002c4 	.word	0x200002c4

08001264 <delay_us>:



void delay_us(uint16_t us)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	0002      	movs	r2, r0
 800126c:	1dbb      	adds	r3, r7, #6
 800126e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(_TIMER, 0); // set CNT register to 0
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <delay_us+0x30>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(_TIMER) < us); // wait until timer reach us
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <delay_us+0x30>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001280:	1dbb      	adds	r3, r7, #6
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3f8      	bcc.n	800127a <delay_us+0x16>
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b002      	add	sp, #8
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	200002c4 	.word	0x200002c4

08001298 <delay_ms>:


void delay_ms(uint16_t ms)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	0002      	movs	r2, r0
 80012a0:	1dbb      	adds	r3, r7, #6
 80012a2:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<ms;i++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	e007      	b.n	80012ba <delay_ms+0x22>
	{
		delay_us(1000);
 80012aa:	23fa      	movs	r3, #250	; 0xfa
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7ff ffd8 	bl	8001264 <delay_us>
	for(int i=0;i<ms;i++)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3301      	adds	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	1dbb      	adds	r3, r7, #6
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dbf2      	blt.n	80012aa <delay_ms+0x12>
	}
}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b004      	add	sp, #16
 80012cc:	bd80      	pop	{r7, pc}

080012ce <DHT11_Init>:
#include "main.h"
#include "delay.h"


void DHT11_Init(dht11_sensor* sensor, GPIO_TypeDef* _PORT, uint16_t _PIN)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	1dbb      	adds	r3, r7, #6
 80012da:	801a      	strh	r2, [r3, #0]
	sensor->Port = _PORT;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	601a      	str	r2, [r3, #0]
	sensor->Pin = _PIN;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1dba      	adds	r2, r7, #6
 80012e6:	8812      	ldrh	r2, [r2, #0]
 80012e8:	809a      	strh	r2, [r3, #4]
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b004      	add	sp, #16
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <change_to_output>:



static void change_to_output(dht11_sensor* sensor)
{
 80012f2:	b590      	push	{r4, r7, lr}
 80012f4:	b089      	sub	sp, #36	; 0x24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_data = {0};
 80012fa:	240c      	movs	r4, #12
 80012fc:	193b      	adds	r3, r7, r4
 80012fe:	0018      	movs	r0, r3
 8001300:	2314      	movs	r3, #20
 8001302:	001a      	movs	r2, r3
 8001304:	2100      	movs	r1, #0
 8001306:	f004 fd72 	bl	8005dee <memset>
	gpio_data.Pin = sensor->Pin;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	889b      	ldrh	r3, [r3, #4]
 800130e:	001a      	movs	r2, r3
 8001310:	0021      	movs	r1, r4
 8001312:	187b      	adds	r3, r7, r1
 8001314:	601a      	str	r2, [r3, #0]
	gpio_data.Mode = GPIO_MODE_OUTPUT_OD;
 8001316:	187b      	adds	r3, r7, r1
 8001318:	2211      	movs	r2, #17
 800131a:	605a      	str	r2, [r3, #4]
	gpio_data.Pull = GPIO_NOPULL;
 800131c:	187b      	adds	r3, r7, r1
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
	gpio_data.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]


	HAL_GPIO_Init(sensor->Port, &gpio_data);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	187a      	adds	r2, r7, r1
 800132e:	0011      	movs	r1, r2
 8001330:	0018      	movs	r0, r3
 8001332:	f001 f933 	bl	800259c <HAL_GPIO_Init>
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b009      	add	sp, #36	; 0x24
 800133c:	bd90      	pop	{r4, r7, pc}

0800133e <send_start_signal>:


static void send_start_signal(dht11_sensor* sensor)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->Port, sensor->Pin, GPIO_PIN_RESET); // set Data pin to LOW
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	889b      	ldrh	r3, [r3, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	0019      	movs	r1, r3
 8001352:	f001 faae 	bl	80028b2 <HAL_GPIO_WritePin>
	delay_ms(18);
 8001356:	2012      	movs	r0, #18
 8001358:	f7ff ff9e 	bl	8001298 <delay_ms>
	HAL_GPIO_WritePin(sensor->Port, sensor->Pin, GPIO_PIN_SET); // set Data pin to HIGH
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	889b      	ldrh	r3, [r3, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	0019      	movs	r1, r3
 8001368:	f001 faa3 	bl	80028b2 <HAL_GPIO_WritePin>
}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b002      	add	sp, #8
 8001372:	bd80      	pop	{r7, pc}

08001374 <change_to_input>:


static void change_to_input(dht11_sensor* sensor)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_data = {0};
 800137c:	240c      	movs	r4, #12
 800137e:	193b      	adds	r3, r7, r4
 8001380:	0018      	movs	r0, r3
 8001382:	2314      	movs	r3, #20
 8001384:	001a      	movs	r2, r3
 8001386:	2100      	movs	r1, #0
 8001388:	f004 fd31 	bl	8005dee <memset>
	gpio_data.Pin = sensor->Pin;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	889b      	ldrh	r3, [r3, #4]
 8001390:	001a      	movs	r2, r3
 8001392:	0021      	movs	r1, r4
 8001394:	187b      	adds	r3, r7, r1
 8001396:	601a      	str	r2, [r3, #0]
	gpio_data.Mode = GPIO_MODE_INPUT;
 8001398:	187b      	adds	r3, r7, r1
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
	gpio_data.Pull = GPIO_NOPULL;
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
	gpio_data.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]


	HAL_GPIO_Init(sensor->Port, &gpio_data);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	187a      	adds	r2, r7, r1
 80013b0:	0011      	movs	r1, r2
 80013b2:	0018      	movs	r0, r3
 80013b4:	f001 f8f2 	bl	800259c <HAL_GPIO_Init>

}
 80013b8:	46c0      	nop			; (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b009      	add	sp, #36	; 0x24
 80013be:	bd90      	pop	{r4, r7, pc}

080013c0 <check_response>:


static void check_response(dht11_sensor* sensor)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	delay_us(RESPONSE_TIMEOUT);
 80013c8:	2028      	movs	r0, #40	; 0x28
 80013ca:	f7ff ff4b 	bl	8001264 <delay_us>
	if(!(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin)))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	889b      	ldrh	r3, [r3, #4]
 80013d6:	0019      	movs	r1, r3
 80013d8:	0010      	movs	r0, r2
 80013da:	f001 fa4d 	bl	8002878 <HAL_GPIO_ReadPin>
 80013de:	1e03      	subs	r3, r0, #0
 80013e0:	d102      	bne.n	80013e8 <check_response+0x28>
	{
		delay_us(LOW_HIGH_RESPONSE_TIME);
 80013e2:	2050      	movs	r0, #80	; 0x50
 80013e4:	f7ff ff3e 	bl	8001264 <delay_us>
	}

	while((HAL_GPIO_ReadPin(sensor->Port, sensor->Pin)));
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	889b      	ldrh	r3, [r3, #4]
 80013f2:	0019      	movs	r1, r3
 80013f4:	0010      	movs	r0, r2
 80013f6:	f001 fa3f 	bl	8002878 <HAL_GPIO_ReadPin>
 80013fa:	1e03      	subs	r3, r0, #0
 80013fc:	d1f5      	bne.n	80013ea <check_response+0x2a>
}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}

08001408 <read_byte>:


static uint8_t read_byte(dht11_sensor* sensor)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	for(int i=0; i<8; i++)
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	e046      	b.n	80014a4 <read_byte+0x9c>
	{
		while(!(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin)));
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	889b      	ldrh	r3, [r3, #4]
 8001420:	0019      	movs	r1, r3
 8001422:	0010      	movs	r0, r2
 8001424:	f001 fa28 	bl	8002878 <HAL_GPIO_ReadPin>
 8001428:	1e03      	subs	r3, r0, #0
 800142a:	d0f5      	beq.n	8001418 <read_byte+0x10>
		delay_us(TRANSMISION_LOGIC_0_TIME);
 800142c:	2028      	movs	r0, #40	; 0x28
 800142e:	f7ff ff19 	bl	8001264 <delay_us>
		if(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	889b      	ldrh	r3, [r3, #4]
 800143a:	0019      	movs	r1, r3
 800143c:	0010      	movs	r0, r2
 800143e:	f001 fa1b 	bl	8002878 <HAL_GPIO_ReadPin>
 8001442:	1e03      	subs	r3, r0, #0
 8001444:	d00f      	beq.n	8001466 <read_byte+0x5e>
		{
			//there is logic '1'
			byte |= (1<<(7-i));
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	2207      	movs	r2, #7
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2201      	movs	r2, #1
 800144e:	409a      	lsls	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	b25a      	sxtb	r2, r3
 8001454:	210f      	movs	r1, #15
 8001456:	187b      	adds	r3, r7, r1
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b25b      	sxtb	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	b25a      	sxtb	r2, r3
 8001460:	187b      	adds	r3, r7, r1
 8001462:	701a      	strb	r2, [r3, #0]
 8001464:	e010      	b.n	8001488 <read_byte+0x80>
		}

		else
		{
			// there is logic '0'
			byte &= ~(1<<(7-i));
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	2207      	movs	r2, #7
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2201      	movs	r2, #1
 800146e:	409a      	lsls	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	b25b      	sxtb	r3, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	b25b      	sxtb	r3, r3
 8001478:	210f      	movs	r1, #15
 800147a:	187a      	adds	r2, r7, r1
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	b252      	sxtb	r2, r2
 8001480:	4013      	ands	r3, r2
 8001482:	b25a      	sxtb	r2, r3
 8001484:	187b      	adds	r3, r7, r1
 8001486:	701a      	strb	r2, [r3, #0]
		}
		//wait for pin to go low
		while(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin));
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	889b      	ldrh	r3, [r3, #4]
 8001492:	0019      	movs	r1, r3
 8001494:	0010      	movs	r0, r2
 8001496:	f001 f9ef 	bl	8002878 <HAL_GPIO_ReadPin>
 800149a:	1e03      	subs	r3, r0, #0
 800149c:	d1f5      	bne.n	800148a <read_byte+0x82>
	for(int i=0; i<8; i++)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	3301      	adds	r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b07      	cmp	r3, #7
 80014a8:	ddb5      	ble.n	8001416 <read_byte+0xe>
	}

	return byte;
 80014aa:	230f      	movs	r3, #15
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	781b      	ldrb	r3, [r3, #0]
}
 80014b0:	0018      	movs	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b004      	add	sp, #16
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <read_data>:


static void read_data(dht11_sensor* sensor, uint8_t* humidity_val, int8_t* temp_val, uint8_t* check_sum)
{
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
	uint8_t humidity_integral;
	uint8_t humidity_dec;
	uint8_t temp_integral;
	uint8_t temp_dec;

	humidity_integral = read_byte(sensor);
 80014c6:	2517      	movs	r5, #23
 80014c8:	197c      	adds	r4, r7, r5
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff ff9b 	bl	8001408 <read_byte>
 80014d2:	0003      	movs	r3, r0
 80014d4:	7023      	strb	r3, [r4, #0]
	humidity_dec = read_byte(sensor);
 80014d6:	2316      	movs	r3, #22
 80014d8:	18fc      	adds	r4, r7, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff ff93 	bl	8001408 <read_byte>
 80014e2:	0003      	movs	r3, r0
 80014e4:	7023      	strb	r3, [r4, #0]
	temp_integral = read_byte(sensor);
 80014e6:	2615      	movs	r6, #21
 80014e8:	19bc      	adds	r4, r7, r6
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7ff ff8b 	bl	8001408 <read_byte>
 80014f2:	0003      	movs	r3, r0
 80014f4:	7023      	strb	r3, [r4, #0]
	temp_dec = read_byte(sensor);
 80014f6:	2314      	movs	r3, #20
 80014f8:	18fc      	adds	r4, r7, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff ff83 	bl	8001408 <read_byte>
 8001502:	0003      	movs	r3, r0
 8001504:	7023      	strb	r3, [r4, #0]

	*check_sum = read_byte(sensor);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff ff7d 	bl	8001408 <read_byte>
 800150e:	0003      	movs	r3, r0
 8001510:	001a      	movs	r2, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	701a      	strb	r2, [r3, #0]
	*humidity_val = humidity_integral;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	197a      	adds	r2, r7, r5
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	701a      	strb	r2, [r3, #0]
	*temp_val = temp_integral;
 800151e:	19bb      	adds	r3, r7, r6
 8001520:	2200      	movs	r2, #0
 8001522:	569a      	ldrsb	r2, [r3, r2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	701a      	strb	r2, [r3, #0]
}
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	b007      	add	sp, #28
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001530 <DHT11_get_data>:


void DHT11_get_data(dht11_sensor* sensor, uint8_t* humidity_val, int8_t* temp_val, uint8_t* check_sum)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
	send_start_signal(sensor);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff fefc 	bl	800133e <send_start_signal>
	change_to_input(sensor);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff ff13 	bl	8001374 <change_to_input>
	check_response(sensor);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff ff35 	bl	80013c0 <check_response>
	read_data(sensor, humidity_val, temp_val, check_sum);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff ffab 	bl	80014b8 <read_data>
	change_to_output(sensor);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff fec4 	bl	80012f2 <change_to_output>
}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b004      	add	sp, #16
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_DMA_Init+0x38>)
 800157c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_DMA_Init+0x38>)
 8001580:	2101      	movs	r1, #1
 8001582:	430a      	orrs	r2, r1
 8001584:	631a      	str	r2, [r3, #48]	; 0x30
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_DMA_Init+0x38>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	2201      	movs	r2, #1
 800158c:	4013      	ands	r3, r2
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	200b      	movs	r0, #11
 8001598:	f000 fd8c 	bl	80020b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800159c:	200b      	movs	r0, #11
 800159e:	f000 fd9e 	bl	80020de <HAL_NVIC_EnableIRQ>

}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b002      	add	sp, #8
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	40021000 	.word	0x40021000

080015b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b089      	sub	sp, #36	; 0x24
 80015b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	240c      	movs	r4, #12
 80015b8:	193b      	adds	r3, r7, r4
 80015ba:	0018      	movs	r0, r3
 80015bc:	2314      	movs	r3, #20
 80015be:	001a      	movs	r2, r3
 80015c0:	2100      	movs	r1, #0
 80015c2:	f004 fc14 	bl	8005dee <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <MX_GPIO_Init+0xc8>)
 80015c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ca:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <MX_GPIO_Init+0xc8>)
 80015cc:	2104      	movs	r1, #4
 80015ce:	430a      	orrs	r2, r1
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <MX_GPIO_Init+0xc8>)
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	2204      	movs	r2, #4
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b26      	ldr	r3, [pc, #152]	; (8001678 <MX_GPIO_Init+0xc8>)
 80015e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e2:	4b25      	ldr	r3, [pc, #148]	; (8001678 <MX_GPIO_Init+0xc8>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	430a      	orrs	r2, r1
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ea:	4b23      	ldr	r3, [pc, #140]	; (8001678 <MX_GPIO_Init+0xc8>)
 80015ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ee:	2201      	movs	r2, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <MX_GPIO_Init+0xc8>)
 80015f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <MX_GPIO_Init+0xc8>)
 80015fc:	2102      	movs	r1, #2
 80015fe:	430a      	orrs	r2, r1
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <MX_GPIO_Init+0xc8>)
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	2202      	movs	r2, #2
 8001608:	4013      	ands	r3, r2
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_GPIO_Init+0xcc>)
 8001610:	2200      	movs	r2, #0
 8001612:	2108      	movs	r1, #8
 8001614:	0018      	movs	r0, r3
 8001616:	f001 f94c 	bl	80028b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_SIGNAL_GPIO_Port, DHT11_SIGNAL_Pin, GPIO_PIN_SET);
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_GPIO_Init+0xcc>)
 800161c:	2201      	movs	r2, #1
 800161e:	2110      	movs	r1, #16
 8001620:	0018      	movs	r0, r3
 8001622:	f001 f946 	bl	80028b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001626:	193b      	adds	r3, r7, r4
 8001628:	2208      	movs	r2, #8
 800162a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	193b      	adds	r3, r7, r4
 800162e:	2201      	movs	r2, #1
 8001630:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	193b      	adds	r3, r7, r4
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	193b      	adds	r3, r7, r4
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800163e:	193b      	adds	r3, r7, r4
 8001640:	4a0e      	ldr	r2, [pc, #56]	; (800167c <MX_GPIO_Init+0xcc>)
 8001642:	0019      	movs	r1, r3
 8001644:	0010      	movs	r0, r2
 8001646:	f000 ffa9 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_SIGNAL_Pin;
 800164a:	0021      	movs	r1, r4
 800164c:	187b      	adds	r3, r7, r1
 800164e:	2210      	movs	r2, #16
 8001650:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001652:	187b      	adds	r3, r7, r1
 8001654:	2211      	movs	r2, #17
 8001656:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	187b      	adds	r3, r7, r1
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	187b      	adds	r3, r7, r1
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT11_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001664:	187b      	adds	r3, r7, r1
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <MX_GPIO_Init+0xcc>)
 8001668:	0019      	movs	r1, r3
 800166a:	0010      	movs	r0, r2
 800166c:	f000 ff96 	bl	800259c <HAL_GPIO_Init>

}
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b009      	add	sp, #36	; 0x24
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	40021000 	.word	0x40021000
 800167c:	50000400 	.word	0x50000400

08001680 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <MX_I2C1_Init+0x74>)
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <MX_I2C1_Init+0x78>)
 8001688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40000A0B;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_I2C1_Init+0x74>)
 800168c:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <MX_I2C1_Init+0x7c>)
 800168e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_I2C1_Init+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_I2C1_Init+0x74>)
 8001698:	2201      	movs	r2, #1
 800169a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_I2C1_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016bc:	0018      	movs	r0, r3
 80016be:	f001 f931 	bl	8002924 <HAL_I2C_Init>
 80016c2:	1e03      	subs	r3, r0, #0
 80016c4:	d001      	beq.n	80016ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016c6:	f000 f99b 	bl	8001a00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016cc:	2100      	movs	r1, #0
 80016ce:	0018      	movs	r0, r3
 80016d0:	f001 fe72 	bl	80033b8 <HAL_I2CEx_ConfigAnalogFilter>
 80016d4:	1e03      	subs	r3, r0, #0
 80016d6:	d001      	beq.n	80016dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016d8:	f000 f992 	bl	8001a00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016de:	2100      	movs	r1, #0
 80016e0:	0018      	movs	r0, r3
 80016e2:	f001 feb5 	bl	8003450 <HAL_I2CEx_ConfigDigitalFilter>
 80016e6:	1e03      	subs	r3, r0, #0
 80016e8:	d001      	beq.n	80016ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016ea:	f000 f989 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200000bc 	.word	0x200000bc
 80016f8:	40005400 	.word	0x40005400
 80016fc:	40000a0b 	.word	0x40000a0b

08001700 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	240c      	movs	r4, #12
 800170a:	193b      	adds	r3, r7, r4
 800170c:	0018      	movs	r0, r3
 800170e:	2314      	movs	r3, #20
 8001710:	001a      	movs	r2, r3
 8001712:	2100      	movs	r1, #0
 8001714:	f004 fb6b 	bl	8005dee <memset>
  if(i2cHandle->Instance==I2C1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a18      	ldr	r2, [pc, #96]	; (8001780 <HAL_I2C_MspInit+0x80>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d12a      	bne.n	8001778 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_I2C_MspInit+0x84>)
 8001724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <HAL_I2C_MspInit+0x84>)
 8001728:	2101      	movs	r1, #1
 800172a:	430a      	orrs	r2, r1
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_I2C_MspInit+0x84>)
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	2201      	movs	r2, #1
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800173a:	193b      	adds	r3, r7, r4
 800173c:	22c0      	movs	r2, #192	; 0xc0
 800173e:	00d2      	lsls	r2, r2, #3
 8001740:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001742:	0021      	movs	r1, r4
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2212      	movs	r2, #18
 8001748:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	187b      	adds	r3, r7, r1
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	187b      	adds	r3, r7, r1
 8001752:	2203      	movs	r2, #3
 8001754:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001756:	187b      	adds	r3, r7, r1
 8001758:	2201      	movs	r2, #1
 800175a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	187a      	adds	r2, r7, r1
 800175e:	23a0      	movs	r3, #160	; 0xa0
 8001760:	05db      	lsls	r3, r3, #23
 8001762:	0011      	movs	r1, r2
 8001764:	0018      	movs	r0, r3
 8001766:	f000 ff19 	bl	800259c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_I2C_MspInit+0x84>)
 800176c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_I2C_MspInit+0x84>)
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	0389      	lsls	r1, r1, #14
 8001774:	430a      	orrs	r2, r1
 8001776:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001778:	46c0      	nop			; (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	b009      	add	sp, #36	; 0x24
 800177e:	bd90      	pop	{r4, r7, pc}
 8001780:	40005400 	.word	0x40005400
 8001784:	40021000 	.word	0x40021000

08001788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800178c:	f000 fb52 	bl	8001e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001790:	f000 f87c 	bl	800188c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001794:	f7ff ff0c 	bl	80015b0 <MX_GPIO_Init>

  MX_DMA_Init();
 8001798:	f7ff feec 	bl	8001574 <MX_DMA_Init>

  MX_USART2_UART_Init();
 800179c:	f000 fa80 	bl	8001ca0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80017a0:	f7ff ff6e 	bl	8001680 <MX_I2C1_Init>
  MX_TIM2_Init();
 80017a4:	f000 fa12 	bl	8001bcc <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80017a8:	f000 f8e4 	bl	8001974 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, UART_RX_val, 128);
 80017ac:	4926      	ldr	r1, [pc, #152]	; (8001848 <main+0xc0>)
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <main+0xc4>)
 80017b0:	2280      	movs	r2, #128	; 0x80
 80017b2:	0018      	movs	r0, r3
 80017b4:	f004 fa79 	bl	8005caa <HAL_UARTEx_ReceiveToIdle_DMA>
  //HAL_UART_Receive_IT(&huart2, &UART_RX_val, 1);
  //INA219_Init(&hi2c1, INA_I2C_ADDR);
  delay_init();
 80017b8:	f7ff fd48 	bl	800124c <delay_init>
  DHT11_Init(&DHT11, DHT11_SIGNAL_GPIO_Port, DHT11_SIGNAL_Pin);
 80017bc:	4924      	ldr	r1, [pc, #144]	; (8001850 <main+0xc8>)
 80017be:	4b25      	ldr	r3, [pc, #148]	; (8001854 <main+0xcc>)
 80017c0:	2210      	movs	r2, #16
 80017c2:	0018      	movs	r0, r3
 80017c4:	f7ff fd83 	bl	80012ce <DHT11_Init>
  BMP280_Init(&hi2c1, 0x77);
 80017c8:	4b23      	ldr	r3, [pc, #140]	; (8001858 <main+0xd0>)
 80017ca:	2177      	movs	r1, #119	; 0x77
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff f9d5 	bl	8000b7c <BMP280_Init>
  ESP8266_Init(&ESP_module, "t-mobil", "19962016igor", AP_STATION);
 80017d2:	4a22      	ldr	r2, [pc, #136]	; (800185c <main+0xd4>)
 80017d4:	4922      	ldr	r1, [pc, #136]	; (8001860 <main+0xd8>)
 80017d6:	4823      	ldr	r0, [pc, #140]	; (8001864 <main+0xdc>)
 80017d8:	2302      	movs	r3, #2
 80017da:	f7ff fafd 	bl	8000dd8 <ESP8266_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <main+0xc8>)
 80017e0:	2108      	movs	r1, #8
 80017e2:	0018      	movs	r0, r3
 80017e4:	f001 f882 	bl	80028ec <HAL_GPIO_TogglePin>
	  //INA219_Get_Data_OneShot(&solar_voltage, &solar_current);
	  BMP280_get_data_FORCED(&bmp_temp, &bmp_press);
 80017e8:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <main+0xe0>)
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <main+0xe4>)
 80017ec:	0011      	movs	r1, r2
 80017ee:	0018      	movs	r0, r3
 80017f0:	f7ff f974 	bl	8000adc <BMP280_get_data_FORCED>
	  DHT11_get_data(&DHT11, &dht11_humidity, &dht11_temp, &dht11_check_sum);
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <main+0xe8>)
 80017f6:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <main+0xec>)
 80017f8:	491f      	ldr	r1, [pc, #124]	; (8001878 <main+0xf0>)
 80017fa:	4816      	ldr	r0, [pc, #88]	; (8001854 <main+0xcc>)
 80017fc:	f7ff fe98 	bl	8001530 <DHT11_get_data>

	  sensors_data_buff[0] = bmp_temp;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <main+0xe4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <main+0xf4>)
 8001808:	801a      	strh	r2, [r3, #0]
	  sensors_data_buff[1] = bmp_press;
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <main+0xe0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <main+0xf4>)
 8001812:	805a      	strh	r2, [r3, #2]
	  sensors_data_buff[2] = dht11_humidity;
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <main+0xf0>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <main+0xf4>)
 800181c:	809a      	strh	r2, [r3, #4]
	  sensors_data_buff[3] = solar_voltage;
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <main+0xf8>)
 8001820:	881a      	ldrh	r2, [r3, #0]
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <main+0xf4>)
 8001824:	80da      	strh	r2, [r3, #6]
	  sensors_data_buff[4] = solar_current;
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <main+0xfc>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b29a      	uxth	r2, r3
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <main+0xf4>)
 800182e:	811a      	strh	r2, [r3, #8]

	  ESP8266_TS_Send_Data_MultiField(&ESP_module, 5, sensors_data_buff);
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <main+0xf4>)
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <main+0xdc>)
 8001834:	2105      	movs	r1, #5
 8001836:	0018      	movs	r0, r3
 8001838:	f7ff fb74 	bl	8000f24 <ESP8266_TS_Send_Data_MultiField>
	  HAL_Delay(20000);
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <main+0x100>)
 800183e:	0018      	movs	r0, r3
 8001840:	f000 fb68 	bl	8001f14 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001844:	e7cb      	b.n	80017de <main+0x56>
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	20000230 	.word	0x20000230
 800184c:	2000034c 	.word	0x2000034c
 8001850:	50000400 	.word	0x50000400
 8001854:	20000228 	.word	0x20000228
 8001858:	200000bc 	.word	0x200000bc
 800185c:	080067a8 	.word	0x080067a8
 8001860:	080067b8 	.word	0x080067b8
 8001864:	20000114 	.word	0x20000114
 8001868:	2000010c 	.word	0x2000010c
 800186c:	200002b0 	.word	0x200002b0
 8001870:	200002b4 	.word	0x200002b4
 8001874:	20000110 	.word	0x20000110
 8001878:	20000224 	.word	0x20000224
 800187c:	200002b8 	.word	0x200002b8
 8001880:	20000108 	.word	0x20000108
 8001884:	2000010a 	.word	0x2000010a
 8001888:	00004e20 	.word	0x00004e20

0800188c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b099      	sub	sp, #100	; 0x64
 8001890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001892:	242c      	movs	r4, #44	; 0x2c
 8001894:	193b      	adds	r3, r7, r4
 8001896:	0018      	movs	r0, r3
 8001898:	2334      	movs	r3, #52	; 0x34
 800189a:	001a      	movs	r2, r3
 800189c:	2100      	movs	r1, #0
 800189e:	f004 faa6 	bl	8005dee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a2:	2318      	movs	r3, #24
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	0018      	movs	r0, r3
 80018a8:	2314      	movs	r3, #20
 80018aa:	001a      	movs	r2, r3
 80018ac:	2100      	movs	r1, #0
 80018ae:	f004 fa9e 	bl	8005dee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b2:	003b      	movs	r3, r7
 80018b4:	0018      	movs	r0, r3
 80018b6:	2318      	movs	r3, #24
 80018b8:	001a      	movs	r2, r3
 80018ba:	2100      	movs	r1, #0
 80018bc:	f004 fa97 	bl	8005dee <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c0:	4b2a      	ldr	r3, [pc, #168]	; (800196c <SystemClock_Config+0xe0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a2a      	ldr	r2, [pc, #168]	; (8001970 <SystemClock_Config+0xe4>)
 80018c6:	401a      	ands	r2, r3
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <SystemClock_Config+0xe0>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	0109      	lsls	r1, r1, #4
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d2:	0021      	movs	r1, r4
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	2202      	movs	r2, #2
 80018d8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2201      	movs	r2, #1
 80018de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2210      	movs	r2, #16
 80018e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2202      	movs	r2, #2
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2200      	movs	r2, #0
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	03d2      	lsls	r2, r2, #15
 80018fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001900:	187b      	adds	r3, r7, r1
 8001902:	0018      	movs	r0, r3
 8001904:	f001 fdf0 	bl	80034e8 <HAL_RCC_OscConfig>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800190c:	f000 f878 	bl	8001a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001910:	2118      	movs	r1, #24
 8001912:	187b      	adds	r3, r7, r1
 8001914:	220f      	movs	r2, #15
 8001916:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001918:	187b      	adds	r3, r7, r1
 800191a:	2203      	movs	r2, #3
 800191c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800191e:	187b      	adds	r3, r7, r1
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001924:	187b      	adds	r3, r7, r1
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800192a:	187b      	adds	r3, r7, r1
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001930:	187b      	adds	r3, r7, r1
 8001932:	2100      	movs	r1, #0
 8001934:	0018      	movs	r0, r3
 8001936:	f002 f953 	bl	8003be0 <HAL_RCC_ClockConfig>
 800193a:	1e03      	subs	r3, r0, #0
 800193c:	d001      	beq.n	8001942 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800193e:	f000 f85f 	bl	8001a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001942:	003b      	movs	r3, r7
 8001944:	220a      	movs	r2, #10
 8001946:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001948:	003b      	movs	r3, r7
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800194e:	003b      	movs	r3, r7
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001954:	003b      	movs	r3, r7
 8001956:	0018      	movs	r0, r3
 8001958:	f002 fb66 	bl	8004028 <HAL_RCCEx_PeriphCLKConfig>
 800195c:	1e03      	subs	r3, r0, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001960:	f000 f84e 	bl	8001a00 <Error_Handler>
  }
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b019      	add	sp, #100	; 0x64
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	40007000 	.word	0x40007000
 8001970:	ffffe7ff 	.word	0xffffe7ff

08001974 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	2100      	movs	r1, #0
 800197c:	201c      	movs	r0, #28
 800197e:	f000 fb99 	bl	80020b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001982:	201c      	movs	r0, #28
 8001984:	f000 fbab 	bl	80020de <HAL_NVIC_EnableIRQ>
}
 8001988:	46c0      	nop			; (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_UARTEx_RxEventCallback>:
//	HAL_UART_Receive_IT(&huart2, &UART_RX_val, 1);
//}


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	000a      	movs	r2, r1
 800199a:	1cbb      	adds	r3, r7, #2
 800199c:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART2)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <HAL_UARTEx_RxEventCallback+0x5c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d11c      	bne.n	80019e2 <HAL_UARTEx_RxEventCallback+0x52>
	{
		for(int i=0; i < Size; i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e00b      	b.n	80019c6 <HAL_UARTEx_RxEventCallback+0x36>
		{
			RB_Buff_Write(&ESP_module.ESP_RX_Buff, UART_RX_val[i]);
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_UARTEx_RxEventCallback+0x60>)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	18d3      	adds	r3, r2, r3
 80019b4:	781a      	ldrb	r2, [r3, #0]
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_UARTEx_RxEventCallback+0x64>)
 80019b8:	0011      	movs	r1, r2
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7ff fb86 	bl	80010cc <RB_Buff_Write>
		for(int i=0; i < Size; i++)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3301      	adds	r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	1cbb      	adds	r3, r7, #2
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dbee      	blt.n	80019ae <HAL_UARTEx_RxEventCallback+0x1e>
		}

		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, UART_RX_val, 128);
 80019d0:	4907      	ldr	r1, [pc, #28]	; (80019f0 <HAL_UARTEx_RxEventCallback+0x60>)
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_UARTEx_RxEventCallback+0x68>)
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	0018      	movs	r0, r3
 80019d8:	f004 f967 	bl	8005caa <HAL_UARTEx_ReceiveToIdle_DMA>
		RX_RESPOND_FLAG = 0;
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_UARTEx_RxEventCallback+0x6c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]

	}
}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b004      	add	sp, #16
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	40004400 	.word	0x40004400
 80019f0:	20000230 	.word	0x20000230
 80019f4:	2000011c 	.word	0x2000011c
 80019f8:	2000034c 	.word	0x2000034c
 80019fc:	200000b8 	.word	0x200000b8

08001a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a04:	b672      	cpsid	i
}
 8001a06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <Error_Handler+0x8>

08001a0a <Parser_clean_string>:


#include "parser.h"

void Parser_clean_string(RingBuffer_t* RX_buffer, uint8_t Destination_buffer[])
{
 8001a0a:	b590      	push	{r4, r7, lr}
 8001a0c:	b087      	sub	sp, #28
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
	uint8_t data_cnt = 0;
 8001a14:	210f      	movs	r1, #15
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]


	uint8_t j = 0;
 8001a1c:	2317      	movs	r3, #23
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]

	data_cnt = RX_buffer->data_counter;
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	2184      	movs	r1, #132	; 0x84
 8001a2a:	5c52      	ldrb	r2, [r2, r1]
 8001a2c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < data_cnt - 2; i++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	e021      	b.n	8001a78 <Parser_clean_string+0x6e>
	{
		uint8_t tmp;
		RB_Buff_Read(RX_buffer, &tmp);
 8001a34:	240e      	movs	r4, #14
 8001a36:	193a      	adds	r2, r7, r4
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	0011      	movs	r1, r2
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff fb89 	bl	8001154 <RB_Buff_Read>

		if((tmp=='\n') || (tmp=='\r'))
 8001a42:	0021      	movs	r1, r4
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b0a      	cmp	r3, #10
 8001a4a:	d011      	beq.n	8001a70 <Parser_clean_string+0x66>
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b0d      	cmp	r3, #13
 8001a52:	d00d      	beq.n	8001a70 <Parser_clean_string+0x66>
			continue;
		}

		else
		{
			Destination_buffer[j] = tmp;
 8001a54:	2017      	movs	r0, #23
 8001a56:	183b      	adds	r3, r7, r0
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	18d3      	adds	r3, r2, r3
 8001a5e:	187a      	adds	r2, r7, r1
 8001a60:	7812      	ldrb	r2, [r2, #0]
 8001a62:	701a      	strb	r2, [r3, #0]
			j++;
 8001a64:	183b      	adds	r3, r7, r0
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	183b      	adds	r3, r7, r0
 8001a6a:	3201      	adds	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e000      	b.n	8001a72 <Parser_clean_string+0x68>
			continue;
 8001a70:	46c0      	nop			; (mov r8, r8)
	for(int i=0; i < data_cnt - 2; i++)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	3301      	adds	r3, #1
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	230f      	movs	r3, #15
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	3b02      	subs	r3, #2
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	dbd6      	blt.n	8001a34 <Parser_clean_string+0x2a>
		}
	}

	Destination_buffer[j] = '\0';
 8001a86:	2317      	movs	r3, #23
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	18d3      	adds	r3, r2, r3
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b007      	add	sp, #28
 8001a9a:	bd90      	pop	{r4, r7, pc}

08001a9c <Parser_simple_parse>:
	return 0;
}


uint8_t Parser_simple_parse(char* message, uint8_t buffer[])
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
	char *ptr;

	ptr = strstr((char*)buffer, message);
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	0011      	movs	r1, r2
 8001aac:	0018      	movs	r0, r3
 8001aae:	f004 f9d4 	bl	8005e5a <strstr>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	60fb      	str	r3, [r7, #12]
	if(ptr == NULL)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <Parser_simple_parse+0x24>
	{
		return 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e000      	b.n	8001ac2 <Parser_simple_parse+0x26>
	}

	else
	{
		return 1;
 8001ac0:	2301      	movs	r3, #1
	}
}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b004      	add	sp, #16
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_MspInit+0x24>)
 8001ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x24>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <HAL_MspInit+0x24>)
 8001ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_MspInit+0x24>)
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	0549      	lsls	r1, r1, #21
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b18:	f000 f9e0 	bl	8001edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 fc59 	bl	80023e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	20000304 	.word	0x20000304

08001b3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <USART2_IRQHandler+0x14>)
 8001b42:	0018      	movs	r0, r3
 8001b44:	f002 ff30 	bl	80049a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	2000034c 	.word	0x2000034c

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	18d3      	adds	r3, r2, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f004 f900 	bl	8005d88 <__errno>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	425b      	negs	r3, r3
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	18d2      	adds	r2, r2, r3
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <_sbrk+0x64>)
 8001ba4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	0018      	movs	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b006      	add	sp, #24
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20002000 	.word	0x20002000
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	2000008c 	.word	0x2000008c
 8001bbc:	200003e8 	.word	0x200003e8

08001bc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc4:	46c0      	nop			; (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	2310      	movs	r3, #16
 8001bda:	001a      	movs	r2, r3
 8001bdc:	2100      	movs	r1, #0
 8001bde:	f004 f906 	bl	8005dee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be2:	003b      	movs	r3, r7
 8001be4:	0018      	movs	r0, r3
 8001be6:	2308      	movs	r3, #8
 8001be8:	001a      	movs	r2, r3
 8001bea:	2100      	movs	r1, #0
 8001bec:	f004 f8ff 	bl	8005dee <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <MX_TIM2_Init+0xa0>)
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	05d2      	lsls	r2, r2, #23
 8001bf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12;
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <MX_TIM2_Init+0xa0>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <MX_TIM2_Init+0xa0>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <MX_TIM2_Init+0xa0>)
 8001c06:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001c08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <MX_TIM2_Init+0xa0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <MX_TIM2_Init+0xa0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <MX_TIM2_Init+0xa0>)
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f002 fb2b 	bl	8004274 <HAL_TIM_Base_Init>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c22:	f7ff feed 	bl	8001a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c26:	2108      	movs	r1, #8
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	0152      	lsls	r2, r2, #5
 8001c2e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c30:	187a      	adds	r2, r7, r1
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <MX_TIM2_Init+0xa0>)
 8001c34:	0011      	movs	r1, r2
 8001c36:	0018      	movs	r0, r3
 8001c38:	f002 fba0 	bl	800437c <HAL_TIM_ConfigClockSource>
 8001c3c:	1e03      	subs	r3, r0, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c40:	f7ff fede 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c44:	003b      	movs	r3, r7
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4a:	003b      	movs	r3, r7
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c50:	003a      	movs	r2, r7
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_TIM2_Init+0xa0>)
 8001c54:	0011      	movs	r1, r2
 8001c56:	0018      	movs	r0, r3
 8001c58:	f002 fd52 	bl	8004700 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5c:	1e03      	subs	r3, r0, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001c60:	f7ff fece 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b006      	add	sp, #24
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200002c4 	.word	0x200002c4
 8001c70:	0000ffff 	.word	0x0000ffff

08001c74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	05db      	lsls	r3, r3, #23
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d105      	bne.n	8001c94 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <HAL_TIM_Base_MspInit+0x28>)
 8001c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_TIM_Base_MspInit+0x28>)
 8001c8e:	2101      	movs	r1, #1
 8001c90:	430a      	orrs	r2, r1
 8001c92:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b002      	add	sp, #8
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001ca6:	4a15      	ldr	r2, [pc, #84]	; (8001cfc <MX_USART2_UART_Init+0x5c>)
 8001ca8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cac:	22e1      	movs	r2, #225	; 0xe1
 8001cae:	0252      	lsls	r2, r2, #9
 8001cb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f002 fd63 	bl	80047b0 <HAL_UART_Init>
 8001cea:	1e03      	subs	r3, r0, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cee:	f7ff fe87 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	2000034c 	.word	0x2000034c
 8001cfc:	40004400 	.word	0x40004400

08001d00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	240c      	movs	r4, #12
 8001d0a:	193b      	adds	r3, r7, r4
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	2314      	movs	r3, #20
 8001d10:	001a      	movs	r2, r3
 8001d12:	2100      	movs	r1, #0
 8001d14:	f004 f86b 	bl	8005dee <memset>
  if(uartHandle->Instance==USART2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2c      	ldr	r2, [pc, #176]	; (8001dd0 <HAL_UART_MspInit+0xd0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d152      	bne.n	8001dc8 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d22:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <HAL_UART_MspInit+0xd4>)
 8001d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d26:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <HAL_UART_MspInit+0xd4>)
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	0289      	lsls	r1, r1, #10
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <HAL_UART_MspInit+0xd4>)
 8001d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d34:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <HAL_UART_MspInit+0xd4>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d3c:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <HAL_UART_MspInit+0xd4>)
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	2201      	movs	r2, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_3;
 8001d48:	0021      	movs	r1, r4
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	220c      	movs	r2, #12
 8001d4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2202      	movs	r2, #2
 8001d54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001d62:	187b      	adds	r3, r7, r1
 8001d64:	2204      	movs	r2, #4
 8001d66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	187a      	adds	r2, r7, r1
 8001d6a:	23a0      	movs	r3, #160	; 0xa0
 8001d6c:	05db      	lsls	r3, r3, #23
 8001d6e:	0011      	movs	r1, r2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f000 fc13 	bl	800259c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_UART_MspInit+0xd8>)
 8001d78:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <HAL_UART_MspInit+0xdc>)
 8001d7a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_UART_MspInit+0xd8>)
 8001d7e:	2204      	movs	r2, #4
 8001d80:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_UART_MspInit+0xd8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_UART_MspInit+0xd8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_UART_MspInit+0xd8>)
 8001d90:	2280      	movs	r2, #128	; 0x80
 8001d92:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_UART_MspInit+0xd8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <HAL_UART_MspInit+0xd8>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_UART_MspInit+0xd8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_UART_MspInit+0xd8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_UART_MspInit+0xd8>)
 8001dae:	0018      	movs	r0, r3
 8001db0:	f000 f9b2 	bl	8002118 <HAL_DMA_Init>
 8001db4:	1e03      	subs	r3, r0, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8001db8:	f7ff fe22 	bl	8001a00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a06      	ldr	r2, [pc, #24]	; (8001dd8 <HAL_UART_MspInit+0xd8>)
 8001dc0:	671a      	str	r2, [r3, #112]	; 0x70
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_UART_MspInit+0xd8>)
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b009      	add	sp, #36	; 0x24
 8001dce:	bd90      	pop	{r4, r7, pc}
 8001dd0:	40004400 	.word	0x40004400
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	20000304 	.word	0x20000304
 8001ddc:	40020058 	.word	0x40020058

08001de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001de0:	480d      	ldr	r0, [pc, #52]	; (8001e18 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001de2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de4:	480d      	ldr	r0, [pc, #52]	; (8001e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001de6:	490e      	ldr	r1, [pc, #56]	; (8001e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001de8:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <LoopForever+0xe>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dfc:	4c0b      	ldr	r4, [pc, #44]	; (8001e2c <LoopForever+0x16>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e0a:	f7ff fed9 	bl	8001bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f003 ffc1 	bl	8005d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e12:	f7ff fcb9 	bl	8001788 <main>

08001e16 <LoopForever>:

LoopForever:
    b LoopForever
 8001e16:	e7fe      	b.n	8001e16 <LoopForever>
   ldr   r0, =_estack
 8001e18:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e24:	08006884 	.word	0x08006884
  ldr r2, =_sbss
 8001e28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e2c:	200003e4 	.word	0x200003e4

08001e30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC1_COMP_IRQHandler>
	...

08001e34 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_Init+0x3c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_Init+0x3c>)
 8001e46:	2140      	movs	r1, #64	; 0x40
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f000 f811 	bl	8001e74 <HAL_InitTick>
 8001e52:	1e03      	subs	r3, r0, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001e56:	1dfb      	adds	r3, r7, #7
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	e001      	b.n	8001e62 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e5e:	f7ff fe35 	bl	8001acc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e62:	1dfb      	adds	r3, r7, #7
 8001e64:	781b      	ldrb	r3, [r3, #0]
}
 8001e66:	0018      	movs	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	40022000 	.word	0x40022000

08001e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_InitTick+0x5c>)
 8001e7e:	681c      	ldr	r4, [r3, #0]
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_InitTick+0x60>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	0019      	movs	r1, r3
 8001e86:	23fa      	movs	r3, #250	; 0xfa
 8001e88:	0098      	lsls	r0, r3, #2
 8001e8a:	f7fe f94f 	bl	800012c <__udivsi3>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	0019      	movs	r1, r3
 8001e92:	0020      	movs	r0, r4
 8001e94:	f7fe f94a 	bl	800012c <__udivsi3>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 f92f 	bl	80020fe <HAL_SYSTICK_Config>
 8001ea0:	1e03      	subs	r3, r0, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e00f      	b.n	8001ec8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d80b      	bhi.n	8001ec6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	425b      	negs	r3, r3
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 f8fc 	bl	80020b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_InitTick+0x64>)
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e000      	b.n	8001ec8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b003      	add	sp, #12
 8001ece:	bd90      	pop	{r4, r7, pc}
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_IncTick+0x1c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_IncTick+0x20>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	18d2      	adds	r2, r2, r3
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <HAL_IncTick+0x20>)
 8001eee:	601a      	str	r2, [r3, #0]
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	200003d0 	.word	0x200003d0

08001f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  return uwTick;
 8001f04:	4b02      	ldr	r3, [pc, #8]	; (8001f10 <HAL_GetTick+0x10>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	200003d0 	.word	0x200003d0

08001f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff fff0 	bl	8001f00 <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	d005      	beq.n	8001f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_Delay+0x44>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	001a      	movs	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	189b      	adds	r3, r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	f7ff ffe0 	bl	8001f00 <HAL_GetTick>
 8001f40:	0002      	movs	r2, r0
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d8f7      	bhi.n	8001f3c <HAL_Delay+0x28>
  {
  }
}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b004      	add	sp, #16
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	20000008 	.word	0x20000008

08001f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	0002      	movs	r2, r0
 8001f64:	1dfb      	adds	r3, r7, #7
 8001f66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	1dfb      	adds	r3, r7, #7
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8001f6e:	d809      	bhi.n	8001f84 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f70:	1dfb      	adds	r3, r7, #7
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	001a      	movs	r2, r3
 8001f76:	231f      	movs	r3, #31
 8001f78:	401a      	ands	r2, r3
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <__NVIC_EnableIRQ+0x30>)
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	4091      	lsls	r1, r2
 8001f80:	000a      	movs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]
  }
}
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b002      	add	sp, #8
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	e000e100 	.word	0xe000e100

08001f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	0002      	movs	r2, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	1dfb      	adds	r3, r7, #7
 8001f9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	1dfb      	adds	r3, r7, #7
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8001fa4:	d828      	bhi.n	8001ff8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa6:	4a2f      	ldr	r2, [pc, #188]	; (8002064 <__NVIC_SetPriority+0xd4>)
 8001fa8:	1dfb      	adds	r3, r7, #7
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	b25b      	sxtb	r3, r3
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	33c0      	adds	r3, #192	; 0xc0
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	589b      	ldr	r3, [r3, r2]
 8001fb6:	1dfa      	adds	r2, r7, #7
 8001fb8:	7812      	ldrb	r2, [r2, #0]
 8001fba:	0011      	movs	r1, r2
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	00d2      	lsls	r2, r2, #3
 8001fc2:	21ff      	movs	r1, #255	; 0xff
 8001fc4:	4091      	lsls	r1, r2
 8001fc6:	000a      	movs	r2, r1
 8001fc8:	43d2      	mvns	r2, r2
 8001fca:	401a      	ands	r2, r3
 8001fcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	019b      	lsls	r3, r3, #6
 8001fd2:	22ff      	movs	r2, #255	; 0xff
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	0018      	movs	r0, r3
 8001fdc:	2303      	movs	r3, #3
 8001fde:	4003      	ands	r3, r0
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe4:	481f      	ldr	r0, [pc, #124]	; (8002064 <__NVIC_SetPriority+0xd4>)
 8001fe6:	1dfb      	adds	r3, r7, #7
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	33c0      	adds	r3, #192	; 0xc0
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ff6:	e031      	b.n	800205c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <__NVIC_SetPriority+0xd8>)
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	0019      	movs	r1, r3
 8002000:	230f      	movs	r3, #15
 8002002:	400b      	ands	r3, r1
 8002004:	3b08      	subs	r3, #8
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3306      	adds	r3, #6
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	18d3      	adds	r3, r2, r3
 800200e:	3304      	adds	r3, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	1dfa      	adds	r2, r7, #7
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	0011      	movs	r1, r2
 8002018:	2203      	movs	r2, #3
 800201a:	400a      	ands	r2, r1
 800201c:	00d2      	lsls	r2, r2, #3
 800201e:	21ff      	movs	r1, #255	; 0xff
 8002020:	4091      	lsls	r1, r2
 8002022:	000a      	movs	r2, r1
 8002024:	43d2      	mvns	r2, r2
 8002026:	401a      	ands	r2, r3
 8002028:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	019b      	lsls	r3, r3, #6
 800202e:	22ff      	movs	r2, #255	; 0xff
 8002030:	401a      	ands	r2, r3
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	0018      	movs	r0, r3
 8002038:	2303      	movs	r3, #3
 800203a:	4003      	ands	r3, r0
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <__NVIC_SetPriority+0xd8>)
 8002042:	1dfb      	adds	r3, r7, #7
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	001c      	movs	r4, r3
 8002048:	230f      	movs	r3, #15
 800204a:	4023      	ands	r3, r4
 800204c:	3b08      	subs	r3, #8
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	430a      	orrs	r2, r1
 8002052:	3306      	adds	r3, #6
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	18c3      	adds	r3, r0, r3
 8002058:	3304      	adds	r3, #4
 800205a:	601a      	str	r2, [r3, #0]
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b003      	add	sp, #12
 8002062:	bd90      	pop	{r4, r7, pc}
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	1e5a      	subs	r2, r3, #1
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	045b      	lsls	r3, r3, #17
 800207c:	429a      	cmp	r2, r3
 800207e:	d301      	bcc.n	8002084 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002080:	2301      	movs	r3, #1
 8002082:	e010      	b.n	80020a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <SysTick_Config+0x44>)
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	3a01      	subs	r2, #1
 800208a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208c:	2301      	movs	r3, #1
 800208e:	425b      	negs	r3, r3
 8002090:	2103      	movs	r1, #3
 8002092:	0018      	movs	r0, r3
 8002094:	f7ff ff7c 	bl	8001f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <SysTick_Config+0x44>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <SysTick_Config+0x44>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	210f      	movs	r1, #15
 80020c0:	187b      	adds	r3, r7, r1
 80020c2:	1c02      	adds	r2, r0, #0
 80020c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	187b      	adds	r3, r7, r1
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	b25b      	sxtb	r3, r3
 80020ce:	0011      	movs	r1, r2
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff ff5d 	bl	8001f90 <__NVIC_SetPriority>
}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	b004      	add	sp, #16
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	0002      	movs	r2, r0
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ea:	1dfb      	adds	r3, r7, #7
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b25b      	sxtb	r3, r3
 80020f0:	0018      	movs	r0, r3
 80020f2:	f7ff ff33 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0018      	movs	r0, r3
 800210a:	f7ff ffaf 	bl	800206c <SysTick_Config>
 800210e:	0003      	movs	r3, r0
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	b002      	add	sp, #8
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e061      	b.n	80021ee <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a32      	ldr	r2, [pc, #200]	; (80021f8 <HAL_DMA_Init+0xe0>)
 8002130:	4694      	mov	ip, r2
 8002132:	4463      	add	r3, ip
 8002134:	2114      	movs	r1, #20
 8002136:	0018      	movs	r0, r3
 8002138:	f7fd fff8 	bl	800012c <__udivsi3>
 800213c:	0003      	movs	r3, r0
 800213e:	009a      	lsls	r2, r3, #2
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a2d      	ldr	r2, [pc, #180]	; (80021fc <HAL_DMA_Init+0xe4>)
 8002148:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2225      	movs	r2, #37	; 0x25
 800214e:	2102      	movs	r1, #2
 8002150:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4a28      	ldr	r2, [pc, #160]	; (8002200 <HAL_DMA_Init+0xe8>)
 800215e:	4013      	ands	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800216a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	01db      	lsls	r3, r3, #7
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d018      	beq.n	80021d6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_DMA_Init+0xec>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	211c      	movs	r1, #28
 80021ae:	400b      	ands	r3, r1
 80021b0:	210f      	movs	r1, #15
 80021b2:	4099      	lsls	r1, r3
 80021b4:	000b      	movs	r3, r1
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_DMA_Init+0xec>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_DMA_Init+0xec>)
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	201c      	movs	r0, #28
 80021cc:	4003      	ands	r3, r0
 80021ce:	409a      	lsls	r2, r3
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <HAL_DMA_Init+0xec>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2225      	movs	r2, #37	; 0x25
 80021e0:	2101      	movs	r1, #1
 80021e2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	2100      	movs	r1, #0
 80021ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	0018      	movs	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b004      	add	sp, #16
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	bffdfff8 	.word	0xbffdfff8
 80021fc:	40020000 	.word	0x40020000
 8002200:	ffff800f 	.word	0xffff800f
 8002204:	400200a8 	.word	0x400200a8

08002208 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002216:	2317      	movs	r3, #23
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2224      	movs	r2, #36	; 0x24
 8002222:	5c9b      	ldrb	r3, [r3, r2]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_DMA_Start_IT+0x24>
 8002228:	2302      	movs	r3, #2
 800222a:	e04f      	b.n	80022cc <HAL_DMA_Start_IT+0xc4>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2224      	movs	r2, #36	; 0x24
 8002230:	2101      	movs	r1, #1
 8002232:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2225      	movs	r2, #37	; 0x25
 8002238:	5c9b      	ldrb	r3, [r3, r2]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d13a      	bne.n	80022b6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2225      	movs	r2, #37	; 0x25
 8002244:	2102      	movs	r1, #2
 8002246:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2101      	movs	r1, #1
 800225a:	438a      	bics	r2, r1
 800225c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f96a 	bl	800253e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	210e      	movs	r1, #14
 800227e:	430a      	orrs	r2, r1
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e00f      	b.n	80022a4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2104      	movs	r1, #4
 8002290:	438a      	bics	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	210a      	movs	r1, #10
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2101      	movs	r1, #1
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e007      	b.n	80022c6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2224      	movs	r2, #36	; 0x24
 80022ba:	2100      	movs	r1, #0
 80022bc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80022be:	2317      	movs	r3, #23
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2202      	movs	r2, #2
 80022c4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80022c6:	2317      	movs	r3, #23
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	781b      	ldrb	r3, [r3, #0]
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b006      	add	sp, #24
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022dc:	230f      	movs	r3, #15
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2225      	movs	r2, #37	; 0x25
 80022e8:	5c9b      	ldrb	r3, [r3, r2]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d008      	beq.n	8002302 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2204      	movs	r2, #4
 80022f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2224      	movs	r2, #36	; 0x24
 80022fa:	2100      	movs	r1, #0
 80022fc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e024      	b.n	800234c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	210e      	movs	r1, #14
 800230e:	438a      	bics	r2, r1
 8002310:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	438a      	bics	r2, r1
 8002320:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	221c      	movs	r2, #28
 8002328:	401a      	ands	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	2101      	movs	r1, #1
 8002330:	4091      	lsls	r1, r2
 8002332:	000a      	movs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2225      	movs	r2, #37	; 0x25
 800233a:	2101      	movs	r1, #1
 800233c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2224      	movs	r2, #36	; 0x24
 8002342:	2100      	movs	r1, #0
 8002344:	5499      	strb	r1, [r3, r2]

    return status;
 8002346:	230f      	movs	r3, #15
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b004      	add	sp, #16
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800235c:	210f      	movs	r1, #15
 800235e:	187b      	adds	r3, r7, r1
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2225      	movs	r2, #37	; 0x25
 8002368:	5c9b      	ldrb	r3, [r3, r2]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d006      	beq.n	800237e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2204      	movs	r2, #4
 8002374:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002376:	187b      	adds	r3, r7, r1
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
 800237c:	e02a      	b.n	80023d4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	210e      	movs	r1, #14
 800238a:	438a      	bics	r2, r1
 800238c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2101      	movs	r1, #1
 800239a:	438a      	bics	r2, r1
 800239c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	221c      	movs	r2, #28
 80023a4:	401a      	ands	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2101      	movs	r1, #1
 80023ac:	4091      	lsls	r1, r2
 80023ae:	000a      	movs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2225      	movs	r2, #37	; 0x25
 80023b6:	2101      	movs	r1, #1
 80023b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2224      	movs	r2, #36	; 0x24
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	0010      	movs	r0, r2
 80023d2:	4798      	blx	r3
    }
  }
  return status;
 80023d4:	230f      	movs	r3, #15
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	781b      	ldrb	r3, [r3, #0]
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b004      	add	sp, #16
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	221c      	movs	r2, #28
 8002400:	4013      	ands	r3, r2
 8002402:	2204      	movs	r2, #4
 8002404:	409a      	lsls	r2, r3
 8002406:	0013      	movs	r3, r2
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	d026      	beq.n	800245c <HAL_DMA_IRQHandler+0x7a>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2204      	movs	r2, #4
 8002412:	4013      	ands	r3, r2
 8002414:	d022      	beq.n	800245c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2220      	movs	r2, #32
 800241e:	4013      	ands	r3, r2
 8002420:	d107      	bne.n	8002432 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2104      	movs	r1, #4
 800242e:	438a      	bics	r2, r1
 8002430:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	221c      	movs	r2, #28
 8002438:	401a      	ands	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	2104      	movs	r1, #4
 8002440:	4091      	lsls	r1, r2
 8002442:	000a      	movs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	2b00      	cmp	r3, #0
 800244c:	d100      	bne.n	8002450 <HAL_DMA_IRQHandler+0x6e>
 800244e:	e071      	b.n	8002534 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	0010      	movs	r0, r2
 8002458:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800245a:	e06b      	b.n	8002534 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	221c      	movs	r2, #28
 8002462:	4013      	ands	r3, r2
 8002464:	2202      	movs	r2, #2
 8002466:	409a      	lsls	r2, r3
 8002468:	0013      	movs	r3, r2
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4013      	ands	r3, r2
 800246e:	d02d      	beq.n	80024cc <HAL_DMA_IRQHandler+0xea>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2202      	movs	r2, #2
 8002474:	4013      	ands	r3, r2
 8002476:	d029      	beq.n	80024cc <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2220      	movs	r2, #32
 8002480:	4013      	ands	r3, r2
 8002482:	d10b      	bne.n	800249c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	210a      	movs	r1, #10
 8002490:	438a      	bics	r2, r1
 8002492:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2225      	movs	r2, #37	; 0x25
 8002498:	2101      	movs	r1, #1
 800249a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	221c      	movs	r2, #28
 80024a2:	401a      	ands	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	2102      	movs	r1, #2
 80024aa:	4091      	lsls	r1, r2
 80024ac:	000a      	movs	r2, r1
 80024ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2224      	movs	r2, #36	; 0x24
 80024b4:	2100      	movs	r1, #0
 80024b6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d039      	beq.n	8002534 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	0010      	movs	r0, r2
 80024c8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024ca:	e033      	b.n	8002534 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	221c      	movs	r2, #28
 80024d2:	4013      	ands	r3, r2
 80024d4:	2208      	movs	r2, #8
 80024d6:	409a      	lsls	r2, r3
 80024d8:	0013      	movs	r3, r2
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4013      	ands	r3, r2
 80024de:	d02a      	beq.n	8002536 <HAL_DMA_IRQHandler+0x154>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2208      	movs	r2, #8
 80024e4:	4013      	ands	r3, r2
 80024e6:	d026      	beq.n	8002536 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	210e      	movs	r1, #14
 80024f4:	438a      	bics	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	221c      	movs	r2, #28
 80024fe:	401a      	ands	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	2101      	movs	r1, #1
 8002506:	4091      	lsls	r1, r2
 8002508:	000a      	movs	r2, r1
 800250a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2225      	movs	r2, #37	; 0x25
 8002516:	2101      	movs	r1, #1
 8002518:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2224      	movs	r2, #36	; 0x24
 800251e:	2100      	movs	r1, #0
 8002520:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	0010      	movs	r0, r2
 8002532:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46c0      	nop			; (mov r8, r8)
}
 8002538:	46bd      	mov	sp, r7
 800253a:	b004      	add	sp, #16
 800253c:	bd80      	pop	{r7, pc}

0800253e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	221c      	movs	r2, #28
 8002552:	401a      	ands	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	2101      	movs	r1, #1
 800255a:	4091      	lsls	r1, r2
 800255c:	000a      	movs	r2, r1
 800255e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b10      	cmp	r3, #16
 800256e:	d108      	bne.n	8002582 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002580:	e007      	b.n	8002592 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	60da      	str	r2, [r3, #12]
}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	46bd      	mov	sp, r7
 8002596:	b004      	add	sp, #16
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80025b2:	e149      	b.n	8002848 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2101      	movs	r1, #1
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4091      	lsls	r1, r2
 80025be:	000a      	movs	r2, r1
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d100      	bne.n	80025cc <HAL_GPIO_Init+0x30>
 80025ca:	e13a      	b.n	8002842 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2203      	movs	r2, #3
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d005      	beq.n	80025e4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2203      	movs	r2, #3
 80025de:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d130      	bne.n	8002646 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	409a      	lsls	r2, r3
 80025f2:	0013      	movs	r3, r2
 80025f4:	43da      	mvns	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	409a      	lsls	r2, r3
 8002606:	0013      	movs	r3, r2
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800261a:	2201      	movs	r2, #1
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	409a      	lsls	r2, r3
 8002620:	0013      	movs	r3, r2
 8002622:	43da      	mvns	r2, r3
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	2201      	movs	r2, #1
 8002632:	401a      	ands	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	409a      	lsls	r2, r3
 8002638:	0013      	movs	r3, r2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2203      	movs	r2, #3
 800264c:	4013      	ands	r3, r2
 800264e:	2b03      	cmp	r3, #3
 8002650:	d017      	beq.n	8002682 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	409a      	lsls	r2, r3
 8002660:	0013      	movs	r3, r2
 8002662:	43da      	mvns	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	409a      	lsls	r2, r3
 8002674:	0013      	movs	r3, r2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2203      	movs	r2, #3
 8002688:	4013      	ands	r3, r2
 800268a:	2b02      	cmp	r3, #2
 800268c:	d123      	bne.n	80026d6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	08da      	lsrs	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3208      	adds	r2, #8
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	58d3      	ldr	r3, [r2, r3]
 800269a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2207      	movs	r2, #7
 80026a0:	4013      	ands	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	409a      	lsls	r2, r3
 80026a8:	0013      	movs	r3, r2
 80026aa:	43da      	mvns	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2107      	movs	r1, #7
 80026ba:	400b      	ands	r3, r1
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	409a      	lsls	r2, r3
 80026c0:	0013      	movs	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	08da      	lsrs	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3208      	adds	r2, #8
 80026d0:	0092      	lsls	r2, r2, #2
 80026d2:	6939      	ldr	r1, [r7, #16]
 80026d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	409a      	lsls	r2, r3
 80026e4:	0013      	movs	r3, r2
 80026e6:	43da      	mvns	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2203      	movs	r2, #3
 80026f4:	401a      	ands	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	409a      	lsls	r2, r3
 80026fc:	0013      	movs	r3, r2
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	23c0      	movs	r3, #192	; 0xc0
 8002710:	029b      	lsls	r3, r3, #10
 8002712:	4013      	ands	r3, r2
 8002714:	d100      	bne.n	8002718 <HAL_GPIO_Init+0x17c>
 8002716:	e094      	b.n	8002842 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002718:	4b51      	ldr	r3, [pc, #324]	; (8002860 <HAL_GPIO_Init+0x2c4>)
 800271a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800271c:	4b50      	ldr	r3, [pc, #320]	; (8002860 <HAL_GPIO_Init+0x2c4>)
 800271e:	2101      	movs	r1, #1
 8002720:	430a      	orrs	r2, r1
 8002722:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002724:	4a4f      	ldr	r2, [pc, #316]	; (8002864 <HAL_GPIO_Init+0x2c8>)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	589b      	ldr	r3, [r3, r2]
 8002730:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2203      	movs	r2, #3
 8002736:	4013      	ands	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	220f      	movs	r2, #15
 800273c:	409a      	lsls	r2, r3
 800273e:	0013      	movs	r3, r2
 8002740:	43da      	mvns	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	23a0      	movs	r3, #160	; 0xa0
 800274c:	05db      	lsls	r3, r3, #23
 800274e:	429a      	cmp	r2, r3
 8002750:	d013      	beq.n	800277a <HAL_GPIO_Init+0x1de>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a44      	ldr	r2, [pc, #272]	; (8002868 <HAL_GPIO_Init+0x2cc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00d      	beq.n	8002776 <HAL_GPIO_Init+0x1da>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a43      	ldr	r2, [pc, #268]	; (800286c <HAL_GPIO_Init+0x2d0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <HAL_GPIO_Init+0x1d6>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a42      	ldr	r2, [pc, #264]	; (8002870 <HAL_GPIO_Init+0x2d4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_GPIO_Init+0x1d2>
 800276a:	2305      	movs	r3, #5
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x1e0>
 800276e:	2306      	movs	r3, #6
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x1e0>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x1e0>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x1e0>
 800277a:	2300      	movs	r3, #0
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	2103      	movs	r1, #3
 8002780:	400a      	ands	r2, r1
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4093      	lsls	r3, r2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800278c:	4935      	ldr	r1, [pc, #212]	; (8002864 <HAL_GPIO_Init+0x2c8>)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800279a:	4b36      	ldr	r3, [pc, #216]	; (8002874 <HAL_GPIO_Init+0x2d8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	43da      	mvns	r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	025b      	lsls	r3, r3, #9
 80027b2:	4013      	ands	r3, r2
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027be:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <HAL_GPIO_Init+0x2d8>)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80027c4:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <HAL_GPIO_Init+0x2d8>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43da      	mvns	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	029b      	lsls	r3, r3, #10
 80027dc:	4013      	ands	r3, r2
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <HAL_GPIO_Init+0x2d8>)
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <HAL_GPIO_Init+0x2d8>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43da      	mvns	r2, r3
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	035b      	lsls	r3, r3, #13
 8002806:	4013      	ands	r3, r2
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002812:	4b18      	ldr	r3, [pc, #96]	; (8002874 <HAL_GPIO_Init+0x2d8>)
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002818:	4b16      	ldr	r3, [pc, #88]	; (8002874 <HAL_GPIO_Init+0x2d8>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43da      	mvns	r2, r3
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	039b      	lsls	r3, r3, #14
 8002830:	4013      	ands	r3, r2
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HAL_GPIO_Init+0x2d8>)
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	40da      	lsrs	r2, r3
 8002850:	1e13      	subs	r3, r2, #0
 8002852:	d000      	beq.n	8002856 <HAL_GPIO_Init+0x2ba>
 8002854:	e6ae      	b.n	80025b4 <HAL_GPIO_Init+0x18>
  }
}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b006      	add	sp, #24
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	40010000 	.word	0x40010000
 8002868:	50000400 	.word	0x50000400
 800286c:	50000800 	.word	0x50000800
 8002870:	50001c00 	.word	0x50001c00
 8002874:	40010400 	.word	0x40010400

08002878 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	000a      	movs	r2, r1
 8002882:	1cbb      	adds	r3, r7, #2
 8002884:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	1cba      	adds	r2, r7, #2
 800288c:	8812      	ldrh	r2, [r2, #0]
 800288e:	4013      	ands	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002892:	230f      	movs	r3, #15
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	e003      	b.n	80028a4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800289c:	230f      	movs	r3, #15
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80028a4:	230f      	movs	r3, #15
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	781b      	ldrb	r3, [r3, #0]
}
 80028aa:	0018      	movs	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b004      	add	sp, #16
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	0008      	movs	r0, r1
 80028bc:	0011      	movs	r1, r2
 80028be:	1cbb      	adds	r3, r7, #2
 80028c0:	1c02      	adds	r2, r0, #0
 80028c2:	801a      	strh	r2, [r3, #0]
 80028c4:	1c7b      	adds	r3, r7, #1
 80028c6:	1c0a      	adds	r2, r1, #0
 80028c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028ca:	1c7b      	adds	r3, r7, #1
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d004      	beq.n	80028dc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	1cbb      	adds	r3, r7, #2
 80028d4:	881a      	ldrh	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80028da:	e003      	b.n	80028e4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80028dc:	1cbb      	adds	r3, r7, #2
 80028de:	881a      	ldrh	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	000a      	movs	r2, r1
 80028f6:	1cbb      	adds	r3, r7, #2
 80028f8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002900:	1cbb      	adds	r3, r7, #2
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4013      	ands	r3, r2
 8002908:	041a      	lsls	r2, r3, #16
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	43db      	mvns	r3, r3
 800290e:	1cb9      	adds	r1, r7, #2
 8002910:	8809      	ldrh	r1, [r1, #0]
 8002912:	400b      	ands	r3, r1
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	619a      	str	r2, [r3, #24]
}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	b004      	add	sp, #16
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e082      	b.n	8002a3c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2241      	movs	r2, #65	; 0x41
 800293a:	5c9b      	ldrb	r3, [r3, r2]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d107      	bne.n	8002952 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2240      	movs	r2, #64	; 0x40
 8002946:	2100      	movs	r1, #0
 8002948:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0018      	movs	r0, r3
 800294e:	f7fe fed7 	bl	8001700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2241      	movs	r2, #65	; 0x41
 8002956:	2124      	movs	r1, #36	; 0x24
 8002958:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	438a      	bics	r2, r1
 8002968:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4934      	ldr	r1, [pc, #208]	; (8002a44 <HAL_I2C_Init+0x120>)
 8002974:	400a      	ands	r2, r1
 8002976:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4931      	ldr	r1, [pc, #196]	; (8002a48 <HAL_I2C_Init+0x124>)
 8002984:	400a      	ands	r2, r1
 8002986:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d108      	bne.n	80029a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	0209      	lsls	r1, r1, #8
 800299c:	430a      	orrs	r2, r1
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	e007      	b.n	80029b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2184      	movs	r1, #132	; 0x84
 80029ac:	0209      	lsls	r1, r1, #8
 80029ae:	430a      	orrs	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d104      	bne.n	80029c4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2280      	movs	r2, #128	; 0x80
 80029c0:	0112      	lsls	r2, r2, #4
 80029c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	491f      	ldr	r1, [pc, #124]	; (8002a4c <HAL_I2C_Init+0x128>)
 80029d0:	430a      	orrs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	491a      	ldr	r1, [pc, #104]	; (8002a48 <HAL_I2C_Init+0x124>)
 80029e0:	400a      	ands	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	431a      	orrs	r2, r3
 80029ee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69d9      	ldr	r1, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1a      	ldr	r2, [r3, #32]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2101      	movs	r1, #1
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2241      	movs	r2, #65	; 0x41
 8002a28:	2120      	movs	r1, #32
 8002a2a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2242      	movs	r2, #66	; 0x42
 8002a36:	2100      	movs	r1, #0
 8002a38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	f0ffffff 	.word	0xf0ffffff
 8002a48:	ffff7fff 	.word	0xffff7fff
 8002a4c:	02008000 	.word	0x02008000

08002a50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	000c      	movs	r4, r1
 8002a5a:	0010      	movs	r0, r2
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	230a      	movs	r3, #10
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	1c22      	adds	r2, r4, #0
 8002a64:	801a      	strh	r2, [r3, #0]
 8002a66:	2308      	movs	r3, #8
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	1c02      	adds	r2, r0, #0
 8002a6c:	801a      	strh	r2, [r3, #0]
 8002a6e:	1dbb      	adds	r3, r7, #6
 8002a70:	1c0a      	adds	r2, r1, #0
 8002a72:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2241      	movs	r2, #65	; 0x41
 8002a78:	5c9b      	ldrb	r3, [r3, r2]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d000      	beq.n	8002a82 <HAL_I2C_Mem_Write+0x32>
 8002a80:	e10c      	b.n	8002c9c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d004      	beq.n	8002a92 <HAL_I2C_Mem_Write+0x42>
 8002a88:	232c      	movs	r3, #44	; 0x2c
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d105      	bne.n	8002a9e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2280      	movs	r2, #128	; 0x80
 8002a96:	0092      	lsls	r2, r2, #2
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e0ff      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2240      	movs	r2, #64	; 0x40
 8002aa2:	5c9b      	ldrb	r3, [r3, r2]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_I2C_Mem_Write+0x5c>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e0f8      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2240      	movs	r2, #64	; 0x40
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ab4:	f7ff fa24 	bl	8001f00 <HAL_GetTick>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	0219      	lsls	r1, r3, #8
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	2319      	movs	r3, #25
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f000 fb0b 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002ace:	1e03      	subs	r3, r0, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e0e3      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2241      	movs	r2, #65	; 0x41
 8002ada:	2121      	movs	r1, #33	; 0x21
 8002adc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2242      	movs	r2, #66	; 0x42
 8002ae2:	2140      	movs	r1, #64	; 0x40
 8002ae4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	222c      	movs	r2, #44	; 0x2c
 8002af6:	18ba      	adds	r2, r7, r2
 8002af8:	8812      	ldrh	r2, [r2, #0]
 8002afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b02:	1dbb      	adds	r3, r7, #6
 8002b04:	881c      	ldrh	r4, [r3, #0]
 8002b06:	2308      	movs	r3, #8
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	881a      	ldrh	r2, [r3, #0]
 8002b0c:	230a      	movs	r3, #10
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	8819      	ldrh	r1, [r3, #0]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	0023      	movs	r3, r4
 8002b1e:	f000 f9f9 	bl	8002f14 <I2C_RequestMemoryWrite>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2240      	movs	r2, #64	; 0x40
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0b5      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2bff      	cmp	r3, #255	; 0xff
 8002b3a:	d911      	bls.n	8002b60 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	22ff      	movs	r2, #255	; 0xff
 8002b40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	045c      	lsls	r4, r3, #17
 8002b4c:	230a      	movs	r3, #10
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	8819      	ldrh	r1, [r3, #0]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	2300      	movs	r3, #0
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	0023      	movs	r3, r4
 8002b5a:	f000 fbf7 	bl	800334c <I2C_TransferConfig>
 8002b5e:	e012      	b.n	8002b86 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	049c      	lsls	r4, r3, #18
 8002b74:	230a      	movs	r3, #10
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	8819      	ldrh	r1, [r3, #0]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	0023      	movs	r3, r4
 8002b82:	f000 fbe3 	bl	800334c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f000 fae8 	bl	8003162 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e081      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	781a      	ldrb	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d03a      	beq.n	8002c4a <HAL_I2C_Mem_Write+0x1fa>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d136      	bne.n	8002c4a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	0013      	movs	r3, r2
 8002be6:	2200      	movs	r2, #0
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	f000 fa7b 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e053      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2bff      	cmp	r3, #255	; 0xff
 8002bfe:	d911      	bls.n	8002c24 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	22ff      	movs	r2, #255	; 0xff
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	045c      	lsls	r4, r3, #17
 8002c10:	230a      	movs	r3, #10
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	8819      	ldrh	r1, [r3, #0]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	0023      	movs	r3, r4
 8002c1e:	f000 fb95 	bl	800334c <I2C_TransferConfig>
 8002c22:	e012      	b.n	8002c4a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	049c      	lsls	r4, r3, #18
 8002c38:	230a      	movs	r3, #10
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	8819      	ldrh	r1, [r3, #0]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	2300      	movs	r3, #0
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	0023      	movs	r3, r4
 8002c46:	f000 fb81 	bl	800334c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d198      	bne.n	8002b86 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 fac0 	bl	80031e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c60:	1e03      	subs	r3, r0, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e01a      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	490b      	ldr	r1, [pc, #44]	; (8002ca8 <HAL_I2C_Mem_Write+0x258>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2241      	movs	r2, #65	; 0x41
 8002c84:	2120      	movs	r1, #32
 8002c86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2242      	movs	r2, #66	; 0x42
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2240      	movs	r2, #64	; 0x40
 8002c94:	2100      	movs	r1, #0
 8002c96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e000      	b.n	8002c9e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002c9c:	2302      	movs	r3, #2
  }
}
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b007      	add	sp, #28
 8002ca4:	bd90      	pop	{r4, r7, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	fe00e800 	.word	0xfe00e800

08002cac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b089      	sub	sp, #36	; 0x24
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	000c      	movs	r4, r1
 8002cb6:	0010      	movs	r0, r2
 8002cb8:	0019      	movs	r1, r3
 8002cba:	230a      	movs	r3, #10
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	1c22      	adds	r2, r4, #0
 8002cc0:	801a      	strh	r2, [r3, #0]
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	1c02      	adds	r2, r0, #0
 8002cc8:	801a      	strh	r2, [r3, #0]
 8002cca:	1dbb      	adds	r3, r7, #6
 8002ccc:	1c0a      	adds	r2, r1, #0
 8002cce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2241      	movs	r2, #65	; 0x41
 8002cd4:	5c9b      	ldrb	r3, [r3, r2]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d000      	beq.n	8002cde <HAL_I2C_Mem_Read+0x32>
 8002cdc:	e110      	b.n	8002f00 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <HAL_I2C_Mem_Read+0x42>
 8002ce4:	232c      	movs	r3, #44	; 0x2c
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d105      	bne.n	8002cfa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2280      	movs	r2, #128	; 0x80
 8002cf2:	0092      	lsls	r2, r2, #2
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e103      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2240      	movs	r2, #64	; 0x40
 8002cfe:	5c9b      	ldrb	r3, [r3, r2]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_I2C_Mem_Read+0x5c>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e0fc      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2240      	movs	r2, #64	; 0x40
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d10:	f7ff f8f6 	bl	8001f00 <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	0219      	lsls	r1, r3, #8
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2319      	movs	r3, #25
 8002d24:	2201      	movs	r2, #1
 8002d26:	f000 f9dd 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002d2a:	1e03      	subs	r3, r0, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e0e7      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2241      	movs	r2, #65	; 0x41
 8002d36:	2122      	movs	r1, #34	; 0x22
 8002d38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2242      	movs	r2, #66	; 0x42
 8002d3e:	2140      	movs	r1, #64	; 0x40
 8002d40:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	222c      	movs	r2, #44	; 0x2c
 8002d52:	18ba      	adds	r2, r7, r2
 8002d54:	8812      	ldrh	r2, [r2, #0]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d5e:	1dbb      	adds	r3, r7, #6
 8002d60:	881c      	ldrh	r4, [r3, #0]
 8002d62:	2308      	movs	r3, #8
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	230a      	movs	r3, #10
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	8819      	ldrh	r1, [r3, #0]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	0023      	movs	r3, r4
 8002d7a:	f000 f92f 	bl	8002fdc <I2C_RequestMemoryRead>
 8002d7e:	1e03      	subs	r3, r0, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2240      	movs	r2, #64	; 0x40
 8002d86:	2100      	movs	r1, #0
 8002d88:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0b9      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2bff      	cmp	r3, #255	; 0xff
 8002d96:	d911      	bls.n	8002dbc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	22ff      	movs	r2, #255	; 0xff
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	045c      	lsls	r4, r3, #17
 8002da8:	230a      	movs	r3, #10
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	8819      	ldrh	r1, [r3, #0]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	4b56      	ldr	r3, [pc, #344]	; (8002f0c <HAL_I2C_Mem_Read+0x260>)
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	0023      	movs	r3, r4
 8002db6:	f000 fac9 	bl	800334c <I2C_TransferConfig>
 8002dba:	e012      	b.n	8002de2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	049c      	lsls	r4, r3, #18
 8002dd0:	230a      	movs	r3, #10
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	8819      	ldrh	r1, [r3, #0]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	4b4c      	ldr	r3, [pc, #304]	; (8002f0c <HAL_I2C_Mem_Read+0x260>)
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	0023      	movs	r3, r4
 8002dde:	f000 fab5 	bl	800334c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	0013      	movs	r3, r2
 8002dec:	2200      	movs	r2, #0
 8002dee:	2104      	movs	r1, #4
 8002df0:	f000 f978 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002df4:	1e03      	subs	r3, r0, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e082      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d03a      	beq.n	8002eae <HAL_I2C_Mem_Read+0x202>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d136      	bne.n	8002eae <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	0013      	movs	r3, r2
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2180      	movs	r1, #128	; 0x80
 8002e4e:	f000 f949 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002e52:	1e03      	subs	r3, r0, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e053      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2bff      	cmp	r3, #255	; 0xff
 8002e62:	d911      	bls.n	8002e88 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	22ff      	movs	r2, #255	; 0xff
 8002e68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	045c      	lsls	r4, r3, #17
 8002e74:	230a      	movs	r3, #10
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	8819      	ldrh	r1, [r3, #0]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	0023      	movs	r3, r4
 8002e82:	f000 fa63 	bl	800334c <I2C_TransferConfig>
 8002e86:	e012      	b.n	8002eae <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	049c      	lsls	r4, r3, #18
 8002e9c:	230a      	movs	r3, #10
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	8819      	ldrh	r1, [r3, #0]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	0023      	movs	r3, r4
 8002eaa:	f000 fa4f 	bl	800334c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d194      	bne.n	8002de2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 f98e 	bl	80031e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e01a      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	490c      	ldr	r1, [pc, #48]	; (8002f10 <HAL_I2C_Mem_Read+0x264>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2241      	movs	r2, #65	; 0x41
 8002ee8:	2120      	movs	r1, #32
 8002eea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2242      	movs	r2, #66	; 0x42
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2240      	movs	r2, #64	; 0x40
 8002ef8:	2100      	movs	r1, #0
 8002efa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	0018      	movs	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b007      	add	sp, #28
 8002f08:	bd90      	pop	{r4, r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	80002400 	.word	0x80002400
 8002f10:	fe00e800 	.word	0xfe00e800

08002f14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f14:	b5b0      	push	{r4, r5, r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	000c      	movs	r4, r1
 8002f1e:	0010      	movs	r0, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	250a      	movs	r5, #10
 8002f24:	197b      	adds	r3, r7, r5
 8002f26:	1c22      	adds	r2, r4, #0
 8002f28:	801a      	strh	r2, [r3, #0]
 8002f2a:	2308      	movs	r3, #8
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	1c02      	adds	r2, r0, #0
 8002f30:	801a      	strh	r2, [r3, #0]
 8002f32:	1dbb      	adds	r3, r7, #6
 8002f34:	1c0a      	adds	r2, r1, #0
 8002f36:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f38:	1dbb      	adds	r3, r7, #6
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	045c      	lsls	r4, r3, #17
 8002f42:	197b      	adds	r3, r7, r5
 8002f44:	8819      	ldrh	r1, [r3, #0]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <I2C_RequestMemoryWrite+0xc4>)
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	0023      	movs	r3, r4
 8002f4e:	f000 f9fd 	bl	800334c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f54:	6a39      	ldr	r1, [r7, #32]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f000 f902 	bl	8003162 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f5e:	1e03      	subs	r3, r0, #0
 8002f60:	d001      	beq.n	8002f66 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e033      	b.n	8002fce <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f66:	1dbb      	adds	r3, r7, #6
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f6e:	2308      	movs	r3, #8
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f7c:	e019      	b.n	8002fb2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f7e:	2308      	movs	r3, #8
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	0a1b      	lsrs	r3, r3, #8
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f92:	6a39      	ldr	r1, [r7, #32]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f000 f8e3 	bl	8003162 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f9c:	1e03      	subs	r3, r0, #0
 8002f9e:	d001      	beq.n	8002fa4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e014      	b.n	8002fce <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fa4:	2308      	movs	r3, #8
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb2:	6a3a      	ldr	r2, [r7, #32]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	0013      	movs	r3, r2
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	f000 f890 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002fc4:	1e03      	subs	r3, r0, #0
 8002fc6:	d001      	beq.n	8002fcc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	0018      	movs	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b004      	add	sp, #16
 8002fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	80002000 	.word	0x80002000

08002fdc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002fdc:	b5b0      	push	{r4, r5, r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	000c      	movs	r4, r1
 8002fe6:	0010      	movs	r0, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	250a      	movs	r5, #10
 8002fec:	197b      	adds	r3, r7, r5
 8002fee:	1c22      	adds	r2, r4, #0
 8002ff0:	801a      	strh	r2, [r3, #0]
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	1c02      	adds	r2, r0, #0
 8002ff8:	801a      	strh	r2, [r3, #0]
 8002ffa:	1dbb      	adds	r3, r7, #6
 8002ffc:	1c0a      	adds	r2, r1, #0
 8002ffe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003000:	1dbb      	adds	r3, r7, #6
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	197b      	adds	r3, r7, r5
 8003008:	8819      	ldrh	r1, [r3, #0]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	4b23      	ldr	r3, [pc, #140]	; (800309c <I2C_RequestMemoryRead+0xc0>)
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2300      	movs	r3, #0
 8003012:	f000 f99b 	bl	800334c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003018:	6a39      	ldr	r1, [r7, #32]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	0018      	movs	r0, r3
 800301e:	f000 f8a0 	bl	8003162 <I2C_WaitOnTXISFlagUntilTimeout>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d001      	beq.n	800302a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e033      	b.n	8003092 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800302a:	1dbb      	adds	r3, r7, #6
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d107      	bne.n	8003042 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003032:	2308      	movs	r3, #8
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	b2da      	uxtb	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	629a      	str	r2, [r3, #40]	; 0x28
 8003040:	e019      	b.n	8003076 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003042:	2308      	movs	r3, #8
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	b29b      	uxth	r3, r3
 800304c:	b2da      	uxtb	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003056:	6a39      	ldr	r1, [r7, #32]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	0018      	movs	r0, r3
 800305c:	f000 f881 	bl	8003162 <I2C_WaitOnTXISFlagUntilTimeout>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d001      	beq.n	8003068 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e014      	b.n	8003092 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003068:	2308      	movs	r3, #8
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003076:	6a3a      	ldr	r2, [r7, #32]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	0013      	movs	r3, r2
 8003080:	2200      	movs	r2, #0
 8003082:	2140      	movs	r1, #64	; 0x40
 8003084:	f000 f82e 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8003088:	1e03      	subs	r3, r0, #0
 800308a:	d001      	beq.n	8003090 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	0018      	movs	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	b004      	add	sp, #16
 8003098:	bdb0      	pop	{r4, r5, r7, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	80002000 	.word	0x80002000

080030a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2202      	movs	r2, #2
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d103      	bne.n	80030be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2201      	movs	r2, #1
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d007      	beq.n	80030dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2101      	movs	r1, #1
 80030d8:	430a      	orrs	r2, r1
 80030da:	619a      	str	r2, [r3, #24]
  }
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	1dfb      	adds	r3, r7, #7
 80030f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030f4:	e021      	b.n	800313a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	d01e      	beq.n	800313a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fc:	f7fe ff00 	bl	8001f00 <HAL_GetTick>
 8003100:	0002      	movs	r2, r0
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d302      	bcc.n	8003112 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d113      	bne.n	800313a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	2220      	movs	r2, #32
 8003118:	431a      	orrs	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2241      	movs	r2, #65	; 0x41
 8003122:	2120      	movs	r1, #32
 8003124:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2242      	movs	r2, #66	; 0x42
 800312a:	2100      	movs	r1, #0
 800312c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2240      	movs	r2, #64	; 0x40
 8003132:	2100      	movs	r1, #0
 8003134:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e00f      	b.n	800315a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	4013      	ands	r3, r2
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	425a      	negs	r2, r3
 800314a:	4153      	adcs	r3, r2
 800314c:	b2db      	uxtb	r3, r3
 800314e:	001a      	movs	r2, r3
 8003150:	1dfb      	adds	r3, r7, #7
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d0ce      	beq.n	80030f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b004      	add	sp, #16
 8003160:	bd80      	pop	{r7, pc}

08003162 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800316e:	e02b      	b.n	80031c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	0018      	movs	r0, r3
 8003178:	f000 f86e 	bl	8003258 <I2C_IsAcknowledgeFailed>
 800317c:	1e03      	subs	r3, r0, #0
 800317e:	d001      	beq.n	8003184 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e029      	b.n	80031d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	3301      	adds	r3, #1
 8003188:	d01e      	beq.n	80031c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318a:	f7fe feb9 	bl	8001f00 <HAL_GetTick>
 800318e:	0002      	movs	r2, r0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	429a      	cmp	r2, r3
 8003198:	d302      	bcc.n	80031a0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d113      	bne.n	80031c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a4:	2220      	movs	r2, #32
 80031a6:	431a      	orrs	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2241      	movs	r2, #65	; 0x41
 80031b0:	2120      	movs	r1, #32
 80031b2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2242      	movs	r2, #66	; 0x42
 80031b8:	2100      	movs	r1, #0
 80031ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2240      	movs	r2, #64	; 0x40
 80031c0:	2100      	movs	r1, #0
 80031c2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e007      	b.n	80031d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2202      	movs	r2, #2
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d1cc      	bne.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b004      	add	sp, #16
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ec:	e028      	b.n	8003240 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	0018      	movs	r0, r3
 80031f6:	f000 f82f 	bl	8003258 <I2C_IsAcknowledgeFailed>
 80031fa:	1e03      	subs	r3, r0, #0
 80031fc:	d001      	beq.n	8003202 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e026      	b.n	8003250 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003202:	f7fe fe7d 	bl	8001f00 <HAL_GetTick>
 8003206:	0002      	movs	r2, r0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d113      	bne.n	8003240 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321c:	2220      	movs	r2, #32
 800321e:	431a      	orrs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2241      	movs	r2, #65	; 0x41
 8003228:	2120      	movs	r1, #32
 800322a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2242      	movs	r2, #66	; 0x42
 8003230:	2100      	movs	r1, #0
 8003232:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2240      	movs	r2, #64	; 0x40
 8003238:	2100      	movs	r1, #0
 800323a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e007      	b.n	8003250 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2220      	movs	r2, #32
 8003248:	4013      	ands	r3, r2
 800324a:	2b20      	cmp	r3, #32
 800324c:	d1cf      	bne.n	80031ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	b004      	add	sp, #16
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2210      	movs	r2, #16
 800326c:	4013      	ands	r3, r2
 800326e:	2b10      	cmp	r3, #16
 8003270:	d164      	bne.n	800333c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	049b      	lsls	r3, r3, #18
 800327c:	401a      	ands	r2, r3
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	049b      	lsls	r3, r3, #18
 8003282:	429a      	cmp	r2, r3
 8003284:	d02b      	beq.n	80032de <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	01c9      	lsls	r1, r1, #7
 8003294:	430a      	orrs	r2, r1
 8003296:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003298:	e021      	b.n	80032de <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	3301      	adds	r3, #1
 800329e:	d01e      	beq.n	80032de <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a0:	f7fe fe2e 	bl	8001f00 <HAL_GetTick>
 80032a4:	0002      	movs	r2, r0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d302      	bcc.n	80032b6 <I2C_IsAcknowledgeFailed+0x5e>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d113      	bne.n	80032de <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	2220      	movs	r2, #32
 80032bc:	431a      	orrs	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2241      	movs	r2, #65	; 0x41
 80032c6:	2120      	movs	r1, #32
 80032c8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2242      	movs	r2, #66	; 0x42
 80032ce:	2100      	movs	r1, #0
 80032d0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2240      	movs	r2, #64	; 0x40
 80032d6:	2100      	movs	r1, #0
 80032d8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e02f      	b.n	800333e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2220      	movs	r2, #32
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d1d6      	bne.n	800329a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2210      	movs	r2, #16
 80032f2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2220      	movs	r2, #32
 80032fa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff fece 	bl	80030a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	490e      	ldr	r1, [pc, #56]	; (8003348 <I2C_IsAcknowledgeFailed+0xf0>)
 8003310:	400a      	ands	r2, r1
 8003312:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	2204      	movs	r2, #4
 800331a:	431a      	orrs	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2241      	movs	r2, #65	; 0x41
 8003324:	2120      	movs	r1, #32
 8003326:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2242      	movs	r2, #66	; 0x42
 800332c:	2100      	movs	r1, #0
 800332e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2240      	movs	r2, #64	; 0x40
 8003334:	2100      	movs	r1, #0
 8003336:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	0018      	movs	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	b004      	add	sp, #16
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	fe00e800 	.word	0xfe00e800

0800334c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	0008      	movs	r0, r1
 8003356:	0011      	movs	r1, r2
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	240a      	movs	r4, #10
 800335c:	193b      	adds	r3, r7, r4
 800335e:	1c02      	adds	r2, r0, #0
 8003360:	801a      	strh	r2, [r3, #0]
 8003362:	2009      	movs	r0, #9
 8003364:	183b      	adds	r3, r7, r0
 8003366:	1c0a      	adds	r2, r1, #0
 8003368:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	6a3a      	ldr	r2, [r7, #32]
 8003372:	0d51      	lsrs	r1, r2, #21
 8003374:	2280      	movs	r2, #128	; 0x80
 8003376:	00d2      	lsls	r2, r2, #3
 8003378:	400a      	ands	r2, r1
 800337a:	490e      	ldr	r1, [pc, #56]	; (80033b4 <I2C_TransferConfig+0x68>)
 800337c:	430a      	orrs	r2, r1
 800337e:	43d2      	mvns	r2, r2
 8003380:	401a      	ands	r2, r3
 8003382:	0011      	movs	r1, r2
 8003384:	193b      	adds	r3, r7, r4
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	059b      	lsls	r3, r3, #22
 800338a:	0d9a      	lsrs	r2, r3, #22
 800338c:	183b      	adds	r3, r7, r0
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	0418      	lsls	r0, r3, #16
 8003392:	23ff      	movs	r3, #255	; 0xff
 8003394:	041b      	lsls	r3, r3, #16
 8003396:	4003      	ands	r3, r0
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	431a      	orrs	r2, r3
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b005      	add	sp, #20
 80033b0:	bd90      	pop	{r4, r7, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	03ff63ff 	.word	0x03ff63ff

080033b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2241      	movs	r2, #65	; 0x41
 80033c6:	5c9b      	ldrb	r3, [r3, r2]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d138      	bne.n	8003440 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2240      	movs	r2, #64	; 0x40
 80033d2:	5c9b      	ldrb	r3, [r3, r2]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033d8:	2302      	movs	r3, #2
 80033da:	e032      	b.n	8003442 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2240      	movs	r2, #64	; 0x40
 80033e0:	2101      	movs	r1, #1
 80033e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2241      	movs	r2, #65	; 0x41
 80033e8:	2124      	movs	r1, #36	; 0x24
 80033ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2101      	movs	r1, #1
 80033f8:	438a      	bics	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4911      	ldr	r1, [pc, #68]	; (800344c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003408:	400a      	ands	r2, r1
 800340a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6819      	ldr	r1, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2101      	movs	r1, #1
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2241      	movs	r2, #65	; 0x41
 8003430:	2120      	movs	r1, #32
 8003432:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2240      	movs	r2, #64	; 0x40
 8003438:	2100      	movs	r1, #0
 800343a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	e000      	b.n	8003442 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003440:	2302      	movs	r3, #2
  }
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b002      	add	sp, #8
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	ffffefff 	.word	0xffffefff

08003450 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2241      	movs	r2, #65	; 0x41
 800345e:	5c9b      	ldrb	r3, [r3, r2]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b20      	cmp	r3, #32
 8003464:	d139      	bne.n	80034da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2240      	movs	r2, #64	; 0x40
 800346a:	5c9b      	ldrb	r3, [r3, r2]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003470:	2302      	movs	r3, #2
 8003472:	e033      	b.n	80034dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2240      	movs	r2, #64	; 0x40
 8003478:	2101      	movs	r1, #1
 800347a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2241      	movs	r2, #65	; 0x41
 8003480:	2124      	movs	r1, #36	; 0x24
 8003482:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2101      	movs	r1, #1
 8003490:	438a      	bics	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4a11      	ldr	r2, [pc, #68]	; (80034e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	021b      	lsls	r3, r3, #8
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2101      	movs	r1, #1
 80034c2:	430a      	orrs	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2241      	movs	r2, #65	; 0x41
 80034ca:	2120      	movs	r1, #32
 80034cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2240      	movs	r2, #64	; 0x40
 80034d2:	2100      	movs	r1, #0
 80034d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	e000      	b.n	80034dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034da:	2302      	movs	r3, #2
  }
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b004      	add	sp, #16
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	fffff0ff 	.word	0xfffff0ff

080034e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b5b0      	push	{r4, r5, r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f000 fb6c 	bl	8003bd4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034fc:	4bc8      	ldr	r3, [pc, #800]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	220c      	movs	r2, #12
 8003502:	4013      	ands	r3, r2
 8003504:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003506:	4bc6      	ldr	r3, [pc, #792]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	025b      	lsls	r3, r3, #9
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2201      	movs	r2, #1
 8003518:	4013      	ands	r3, r2
 800351a:	d100      	bne.n	800351e <HAL_RCC_OscConfig+0x36>
 800351c:	e07d      	b.n	800361a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d007      	beq.n	8003534 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d112      	bne.n	8003550 <HAL_RCC_OscConfig+0x68>
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	025b      	lsls	r3, r3, #9
 8003530:	429a      	cmp	r2, r3
 8003532:	d10d      	bne.n	8003550 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	4bba      	ldr	r3, [pc, #744]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	029b      	lsls	r3, r3, #10
 800353c:	4013      	ands	r3, r2
 800353e:	d100      	bne.n	8003542 <HAL_RCC_OscConfig+0x5a>
 8003540:	e06a      	b.n	8003618 <HAL_RCC_OscConfig+0x130>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d166      	bne.n	8003618 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f000 fb42 	bl	8003bd4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	025b      	lsls	r3, r3, #9
 8003558:	429a      	cmp	r2, r3
 800355a:	d107      	bne.n	800356c <HAL_RCC_OscConfig+0x84>
 800355c:	4bb0      	ldr	r3, [pc, #704]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	4baf      	ldr	r3, [pc, #700]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	0249      	lsls	r1, r1, #9
 8003566:	430a      	orrs	r2, r1
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e027      	b.n	80035bc <HAL_RCC_OscConfig+0xd4>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	23a0      	movs	r3, #160	; 0xa0
 8003572:	02db      	lsls	r3, r3, #11
 8003574:	429a      	cmp	r2, r3
 8003576:	d10e      	bne.n	8003596 <HAL_RCC_OscConfig+0xae>
 8003578:	4ba9      	ldr	r3, [pc, #676]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4ba8      	ldr	r3, [pc, #672]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 800357e:	2180      	movs	r1, #128	; 0x80
 8003580:	02c9      	lsls	r1, r1, #11
 8003582:	430a      	orrs	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	4ba6      	ldr	r3, [pc, #664]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4ba5      	ldr	r3, [pc, #660]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 800358c:	2180      	movs	r1, #128	; 0x80
 800358e:	0249      	lsls	r1, r1, #9
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e012      	b.n	80035bc <HAL_RCC_OscConfig+0xd4>
 8003596:	4ba2      	ldr	r3, [pc, #648]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4ba1      	ldr	r3, [pc, #644]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 800359c:	49a1      	ldr	r1, [pc, #644]	; (8003824 <HAL_RCC_OscConfig+0x33c>)
 800359e:	400a      	ands	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	4b9f      	ldr	r3, [pc, #636]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	025b      	lsls	r3, r3, #9
 80035aa:	4013      	ands	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4b9b      	ldr	r3, [pc, #620]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b9a      	ldr	r3, [pc, #616]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 80035b6:	499c      	ldr	r1, [pc, #624]	; (8003828 <HAL_RCC_OscConfig+0x340>)
 80035b8:	400a      	ands	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d014      	beq.n	80035ee <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fe fc9c 	bl	8001f00 <HAL_GetTick>
 80035c8:	0003      	movs	r3, r0
 80035ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ce:	f7fe fc97 	bl	8001f00 <HAL_GetTick>
 80035d2:	0002      	movs	r2, r0
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b64      	cmp	r3, #100	; 0x64
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e2f9      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035e0:	4b8f      	ldr	r3, [pc, #572]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	029b      	lsls	r3, r3, #10
 80035e8:	4013      	ands	r3, r2
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0xe6>
 80035ec:	e015      	b.n	800361a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7fe fc87 	bl	8001f00 <HAL_GetTick>
 80035f2:	0003      	movs	r3, r0
 80035f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe fc82 	bl	8001f00 <HAL_GetTick>
 80035fc:	0002      	movs	r2, r0
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e2e4      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800360a:	4b85      	ldr	r3, [pc, #532]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	029b      	lsls	r3, r3, #10
 8003612:	4013      	ands	r3, r2
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x110>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2202      	movs	r2, #2
 8003620:	4013      	ands	r3, r2
 8003622:	d100      	bne.n	8003626 <HAL_RCC_OscConfig+0x13e>
 8003624:	e099      	b.n	800375a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	2220      	movs	r2, #32
 8003630:	4013      	ands	r3, r2
 8003632:	d009      	beq.n	8003648 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003634:	4b7a      	ldr	r3, [pc, #488]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b79      	ldr	r3, [pc, #484]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 800363a:	2120      	movs	r1, #32
 800363c:	430a      	orrs	r2, r1
 800363e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	2220      	movs	r2, #32
 8003644:	4393      	bics	r3, r2
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b04      	cmp	r3, #4
 800364c:	d005      	beq.n	800365a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	2b0c      	cmp	r3, #12
 8003652:	d13e      	bne.n	80036d2 <HAL_RCC_OscConfig+0x1ea>
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d13b      	bne.n	80036d2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800365a:	4b71      	ldr	r3, [pc, #452]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2204      	movs	r2, #4
 8003660:	4013      	ands	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_RCC_OscConfig+0x186>
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e2b2      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366e:	4b6c      	ldr	r3, [pc, #432]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4a6e      	ldr	r2, [pc, #440]	; (800382c <HAL_RCC_OscConfig+0x344>)
 8003674:	4013      	ands	r3, r2
 8003676:	0019      	movs	r1, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	021a      	lsls	r2, r3, #8
 800367e:	4b68      	ldr	r3, [pc, #416]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003680:	430a      	orrs	r2, r1
 8003682:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003684:	4b66      	ldr	r3, [pc, #408]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2209      	movs	r2, #9
 800368a:	4393      	bics	r3, r2
 800368c:	0019      	movs	r1, r3
 800368e:	4b64      	ldr	r3, [pc, #400]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003696:	f000 fbeb 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 800369a:	0001      	movs	r1, r0
 800369c:	4b60      	ldr	r3, [pc, #384]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	220f      	movs	r2, #15
 80036a4:	4013      	ands	r3, r2
 80036a6:	4a62      	ldr	r2, [pc, #392]	; (8003830 <HAL_RCC_OscConfig+0x348>)
 80036a8:	5cd3      	ldrb	r3, [r2, r3]
 80036aa:	000a      	movs	r2, r1
 80036ac:	40da      	lsrs	r2, r3
 80036ae:	4b61      	ldr	r3, [pc, #388]	; (8003834 <HAL_RCC_OscConfig+0x34c>)
 80036b0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80036b2:	4b61      	ldr	r3, [pc, #388]	; (8003838 <HAL_RCC_OscConfig+0x350>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2513      	movs	r5, #19
 80036b8:	197c      	adds	r4, r7, r5
 80036ba:	0018      	movs	r0, r3
 80036bc:	f7fe fbda 	bl	8001e74 <HAL_InitTick>
 80036c0:	0003      	movs	r3, r0
 80036c2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80036c4:	197b      	adds	r3, r7, r5
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d046      	beq.n	800375a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80036cc:	197b      	adds	r3, r7, r5
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	e280      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d027      	beq.n	8003728 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80036d8:	4b51      	ldr	r3, [pc, #324]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2209      	movs	r2, #9
 80036de:	4393      	bics	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	4b4f      	ldr	r3, [pc, #316]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 80036e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fe fc09 	bl	8001f00 <HAL_GetTick>
 80036ee:	0003      	movs	r3, r0
 80036f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fe fc04 	bl	8001f00 <HAL_GetTick>
 80036f8:	0002      	movs	r2, r0
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e266      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003706:	4b46      	ldr	r3, [pc, #280]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2204      	movs	r2, #4
 800370c:	4013      	ands	r3, r2
 800370e:	d0f1      	beq.n	80036f4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003710:	4b43      	ldr	r3, [pc, #268]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4a45      	ldr	r2, [pc, #276]	; (800382c <HAL_RCC_OscConfig+0x344>)
 8003716:	4013      	ands	r3, r2
 8003718:	0019      	movs	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	021a      	lsls	r2, r3, #8
 8003720:	4b3f      	ldr	r3, [pc, #252]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	e018      	b.n	800375a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003728:	4b3d      	ldr	r3, [pc, #244]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b3c      	ldr	r3, [pc, #240]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 800372e:	2101      	movs	r1, #1
 8003730:	438a      	bics	r2, r1
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe fbe4 	bl	8001f00 <HAL_GetTick>
 8003738:	0003      	movs	r3, r0
 800373a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800373e:	f7fe fbdf 	bl	8001f00 <HAL_GetTick>
 8003742:	0002      	movs	r2, r0
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e241      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003750:	4b33      	ldr	r3, [pc, #204]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2204      	movs	r2, #4
 8003756:	4013      	ands	r3, r2
 8003758:	d1f1      	bne.n	800373e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2210      	movs	r2, #16
 8003760:	4013      	ands	r3, r2
 8003762:	d100      	bne.n	8003766 <HAL_RCC_OscConfig+0x27e>
 8003764:	e0a1      	b.n	80038aa <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d140      	bne.n	80037ee <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800376c:	4b2c      	ldr	r3, [pc, #176]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4013      	ands	r3, r2
 8003776:	d005      	beq.n	8003784 <HAL_RCC_OscConfig+0x29c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e227      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003784:	4b26      	ldr	r3, [pc, #152]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a2c      	ldr	r2, [pc, #176]	; (800383c <HAL_RCC_OscConfig+0x354>)
 800378a:	4013      	ands	r3, r2
 800378c:	0019      	movs	r1, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1a      	ldr	r2, [r3, #32]
 8003792:	4b23      	ldr	r3, [pc, #140]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 8003794:	430a      	orrs	r2, r1
 8003796:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003798:	4b21      	ldr	r3, [pc, #132]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	0a19      	lsrs	r1, r3, #8
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	061a      	lsls	r2, r3, #24
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 80037a8:	430a      	orrs	r2, r1
 80037aa:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	0b5b      	lsrs	r3, r3, #13
 80037b2:	3301      	adds	r3, #1
 80037b4:	2280      	movs	r2, #128	; 0x80
 80037b6:	0212      	lsls	r2, r2, #8
 80037b8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80037ba:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	210f      	movs	r1, #15
 80037c2:	400b      	ands	r3, r1
 80037c4:	491a      	ldr	r1, [pc, #104]	; (8003830 <HAL_RCC_OscConfig+0x348>)
 80037c6:	5ccb      	ldrb	r3, [r1, r3]
 80037c8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037ca:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <HAL_RCC_OscConfig+0x34c>)
 80037cc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <HAL_RCC_OscConfig+0x350>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2513      	movs	r5, #19
 80037d4:	197c      	adds	r4, r7, r5
 80037d6:	0018      	movs	r0, r3
 80037d8:	f7fe fb4c 	bl	8001e74 <HAL_InitTick>
 80037dc:	0003      	movs	r3, r0
 80037de:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80037e0:	197b      	adds	r3, r7, r5
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d060      	beq.n	80038aa <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80037e8:	197b      	adds	r3, r7, r5
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	e1f2      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d03f      	beq.n	8003876 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_OscConfig+0x338>)
 80037fc:	2180      	movs	r1, #128	; 0x80
 80037fe:	0049      	lsls	r1, r1, #1
 8003800:	430a      	orrs	r2, r1
 8003802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003804:	f7fe fb7c 	bl	8001f00 <HAL_GetTick>
 8003808:	0003      	movs	r3, r0
 800380a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800380c:	e018      	b.n	8003840 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800380e:	f7fe fb77 	bl	8001f00 <HAL_GetTick>
 8003812:	0002      	movs	r2, r0
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d911      	bls.n	8003840 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e1d9      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
 8003820:	40021000 	.word	0x40021000
 8003824:	fffeffff 	.word	0xfffeffff
 8003828:	fffbffff 	.word	0xfffbffff
 800382c:	ffffe0ff 	.word	0xffffe0ff
 8003830:	080067d4 	.word	0x080067d4
 8003834:	20000000 	.word	0x20000000
 8003838:	20000004 	.word	0x20000004
 800383c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003840:	4bc9      	ldr	r3, [pc, #804]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4013      	ands	r3, r2
 800384a:	d0e0      	beq.n	800380e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800384c:	4bc6      	ldr	r3, [pc, #792]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4ac6      	ldr	r2, [pc, #792]	; (8003b6c <HAL_RCC_OscConfig+0x684>)
 8003852:	4013      	ands	r3, r2
 8003854:	0019      	movs	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1a      	ldr	r2, [r3, #32]
 800385a:	4bc3      	ldr	r3, [pc, #780]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 800385c:	430a      	orrs	r2, r1
 800385e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003860:	4bc1      	ldr	r3, [pc, #772]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	0a19      	lsrs	r1, r3, #8
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	061a      	lsls	r2, r3, #24
 800386e:	4bbe      	ldr	r3, [pc, #760]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003870:	430a      	orrs	r2, r1
 8003872:	605a      	str	r2, [r3, #4]
 8003874:	e019      	b.n	80038aa <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003876:	4bbc      	ldr	r3, [pc, #752]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4bbb      	ldr	r3, [pc, #748]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 800387c:	49bc      	ldr	r1, [pc, #752]	; (8003b70 <HAL_RCC_OscConfig+0x688>)
 800387e:	400a      	ands	r2, r1
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7fe fb3d 	bl	8001f00 <HAL_GetTick>
 8003886:	0003      	movs	r3, r0
 8003888:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800388c:	f7fe fb38 	bl	8001f00 <HAL_GetTick>
 8003890:	0002      	movs	r2, r0
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e19a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800389e:	4bb2      	ldr	r3, [pc, #712]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4013      	ands	r3, r2
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2208      	movs	r2, #8
 80038b0:	4013      	ands	r3, r2
 80038b2:	d036      	beq.n	8003922 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d019      	beq.n	80038f0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038bc:	4baa      	ldr	r3, [pc, #680]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80038be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038c0:	4ba9      	ldr	r3, [pc, #676]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80038c2:	2101      	movs	r1, #1
 80038c4:	430a      	orrs	r2, r1
 80038c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c8:	f7fe fb1a 	bl	8001f00 <HAL_GetTick>
 80038cc:	0003      	movs	r3, r0
 80038ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d2:	f7fe fb15 	bl	8001f00 <HAL_GetTick>
 80038d6:	0002      	movs	r2, r0
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e177      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038e4:	4ba0      	ldr	r3, [pc, #640]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80038e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e8:	2202      	movs	r2, #2
 80038ea:	4013      	ands	r3, r2
 80038ec:	d0f1      	beq.n	80038d2 <HAL_RCC_OscConfig+0x3ea>
 80038ee:	e018      	b.n	8003922 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f0:	4b9d      	ldr	r3, [pc, #628]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80038f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038f4:	4b9c      	ldr	r3, [pc, #624]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80038f6:	2101      	movs	r1, #1
 80038f8:	438a      	bics	r2, r1
 80038fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fc:	f7fe fb00 	bl	8001f00 <HAL_GetTick>
 8003900:	0003      	movs	r3, r0
 8003902:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003906:	f7fe fafb 	bl	8001f00 <HAL_GetTick>
 800390a:	0002      	movs	r2, r0
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e15d      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003918:	4b93      	ldr	r3, [pc, #588]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	2202      	movs	r2, #2
 800391e:	4013      	ands	r3, r2
 8003920:	d1f1      	bne.n	8003906 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2204      	movs	r2, #4
 8003928:	4013      	ands	r3, r2
 800392a:	d100      	bne.n	800392e <HAL_RCC_OscConfig+0x446>
 800392c:	e0ae      	b.n	8003a8c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392e:	2023      	movs	r0, #35	; 0x23
 8003930:	183b      	adds	r3, r7, r0
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003936:	4b8c      	ldr	r3, [pc, #560]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	055b      	lsls	r3, r3, #21
 800393e:	4013      	ands	r3, r2
 8003940:	d109      	bne.n	8003956 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	4b89      	ldr	r3, [pc, #548]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003946:	4b88      	ldr	r3, [pc, #544]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003948:	2180      	movs	r1, #128	; 0x80
 800394a:	0549      	lsls	r1, r1, #21
 800394c:	430a      	orrs	r2, r1
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003950:	183b      	adds	r3, r7, r0
 8003952:	2201      	movs	r2, #1
 8003954:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003956:	4b87      	ldr	r3, [pc, #540]	; (8003b74 <HAL_RCC_OscConfig+0x68c>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4013      	ands	r3, r2
 8003960:	d11a      	bne.n	8003998 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003962:	4b84      	ldr	r3, [pc, #528]	; (8003b74 <HAL_RCC_OscConfig+0x68c>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b83      	ldr	r3, [pc, #524]	; (8003b74 <HAL_RCC_OscConfig+0x68c>)
 8003968:	2180      	movs	r1, #128	; 0x80
 800396a:	0049      	lsls	r1, r1, #1
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003970:	f7fe fac6 	bl	8001f00 <HAL_GetTick>
 8003974:	0003      	movs	r3, r0
 8003976:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397a:	f7fe fac1 	bl	8001f00 <HAL_GetTick>
 800397e:	0002      	movs	r2, r0
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b64      	cmp	r3, #100	; 0x64
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e123      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	4b79      	ldr	r3, [pc, #484]	; (8003b74 <HAL_RCC_OscConfig+0x68c>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4013      	ands	r3, r2
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4cc>
 80039a4:	4b70      	ldr	r3, [pc, #448]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80039a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039a8:	4b6f      	ldr	r3, [pc, #444]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80039aa:	2180      	movs	r1, #128	; 0x80
 80039ac:	0049      	lsls	r1, r1, #1
 80039ae:	430a      	orrs	r2, r1
 80039b0:	651a      	str	r2, [r3, #80]	; 0x50
 80039b2:	e031      	b.n	8003a18 <HAL_RCC_OscConfig+0x530>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10c      	bne.n	80039d6 <HAL_RCC_OscConfig+0x4ee>
 80039bc:	4b6a      	ldr	r3, [pc, #424]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80039be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039c0:	4b69      	ldr	r3, [pc, #420]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80039c2:	496b      	ldr	r1, [pc, #428]	; (8003b70 <HAL_RCC_OscConfig+0x688>)
 80039c4:	400a      	ands	r2, r1
 80039c6:	651a      	str	r2, [r3, #80]	; 0x50
 80039c8:	4b67      	ldr	r3, [pc, #412]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80039ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039cc:	4b66      	ldr	r3, [pc, #408]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80039ce:	496a      	ldr	r1, [pc, #424]	; (8003b78 <HAL_RCC_OscConfig+0x690>)
 80039d0:	400a      	ands	r2, r1
 80039d2:	651a      	str	r2, [r3, #80]	; 0x50
 80039d4:	e020      	b.n	8003a18 <HAL_RCC_OscConfig+0x530>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	23a0      	movs	r3, #160	; 0xa0
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	429a      	cmp	r2, r3
 80039e0:	d10e      	bne.n	8003a00 <HAL_RCC_OscConfig+0x518>
 80039e2:	4b61      	ldr	r3, [pc, #388]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80039e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039e6:	4b60      	ldr	r3, [pc, #384]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80039e8:	2180      	movs	r1, #128	; 0x80
 80039ea:	00c9      	lsls	r1, r1, #3
 80039ec:	430a      	orrs	r2, r1
 80039ee:	651a      	str	r2, [r3, #80]	; 0x50
 80039f0:	4b5d      	ldr	r3, [pc, #372]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80039f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039f4:	4b5c      	ldr	r3, [pc, #368]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 80039f6:	2180      	movs	r1, #128	; 0x80
 80039f8:	0049      	lsls	r1, r1, #1
 80039fa:	430a      	orrs	r2, r1
 80039fc:	651a      	str	r2, [r3, #80]	; 0x50
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0x530>
 8003a00:	4b59      	ldr	r3, [pc, #356]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003a02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a04:	4b58      	ldr	r3, [pc, #352]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003a06:	495a      	ldr	r1, [pc, #360]	; (8003b70 <HAL_RCC_OscConfig+0x688>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	651a      	str	r2, [r3, #80]	; 0x50
 8003a0c:	4b56      	ldr	r3, [pc, #344]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003a0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a10:	4b55      	ldr	r3, [pc, #340]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003a12:	4959      	ldr	r1, [pc, #356]	; (8003b78 <HAL_RCC_OscConfig+0x690>)
 8003a14:	400a      	ands	r2, r1
 8003a16:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d015      	beq.n	8003a4c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a20:	f7fe fa6e 	bl	8001f00 <HAL_GetTick>
 8003a24:	0003      	movs	r3, r0
 8003a26:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a28:	e009      	b.n	8003a3e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a2a:	f7fe fa69 	bl	8001f00 <HAL_GetTick>
 8003a2e:	0002      	movs	r2, r0
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	4a51      	ldr	r2, [pc, #324]	; (8003b7c <HAL_RCC_OscConfig+0x694>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e0ca      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a3e:	4b4a      	ldr	r3, [pc, #296]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003a40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a42:	2380      	movs	r3, #128	; 0x80
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4013      	ands	r3, r2
 8003a48:	d0ef      	beq.n	8003a2a <HAL_RCC_OscConfig+0x542>
 8003a4a:	e014      	b.n	8003a76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4c:	f7fe fa58 	bl	8001f00 <HAL_GetTick>
 8003a50:	0003      	movs	r3, r0
 8003a52:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a54:	e009      	b.n	8003a6a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fe fa53 	bl	8001f00 <HAL_GetTick>
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	4a46      	ldr	r2, [pc, #280]	; (8003b7c <HAL_RCC_OscConfig+0x694>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e0b4      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a6a:	4b3f      	ldr	r3, [pc, #252]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4013      	ands	r3, r2
 8003a74:	d1ef      	bne.n	8003a56 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a76:	2323      	movs	r3, #35	; 0x23
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d105      	bne.n	8003a8c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a80:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a84:	4b38      	ldr	r3, [pc, #224]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003a86:	493e      	ldr	r1, [pc, #248]	; (8003b80 <HAL_RCC_OscConfig+0x698>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d100      	bne.n	8003a96 <HAL_RCC_OscConfig+0x5ae>
 8003a94:	e09d      	b.n	8003bd2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	2b0c      	cmp	r3, #12
 8003a9a:	d100      	bne.n	8003a9e <HAL_RCC_OscConfig+0x5b6>
 8003a9c:	e076      	b.n	8003b8c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d145      	bne.n	8003b32 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa6:	4b30      	ldr	r3, [pc, #192]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003aac:	4935      	ldr	r1, [pc, #212]	; (8003b84 <HAL_RCC_OscConfig+0x69c>)
 8003aae:	400a      	ands	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab2:	f7fe fa25 	bl	8001f00 <HAL_GetTick>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fe fa20 	bl	8001f00 <HAL_GetTick>
 8003ac0:	0002      	movs	r2, r0
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e082      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ace:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	049b      	lsls	r3, r3, #18
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ada:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	4a2a      	ldr	r2, [pc, #168]	; (8003b88 <HAL_RCC_OscConfig+0x6a0>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	431a      	orrs	r2, r3
 8003af4:	4b1c      	ldr	r3, [pc, #112]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003af6:	430a      	orrs	r2, r1
 8003af8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003afa:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003b00:	2180      	movs	r1, #128	; 0x80
 8003b02:	0449      	lsls	r1, r1, #17
 8003b04:	430a      	orrs	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fe f9fa 	bl	8001f00 <HAL_GetTick>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fe f9f5 	bl	8001f00 <HAL_GetTick>
 8003b16:	0002      	movs	r2, r0
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e057      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003b24:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	049b      	lsls	r3, r3, #18
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x62a>
 8003b30:	e04f      	b.n	8003bd2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003b38:	4912      	ldr	r1, [pc, #72]	; (8003b84 <HAL_RCC_OscConfig+0x69c>)
 8003b3a:	400a      	ands	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7fe f9df 	bl	8001f00 <HAL_GetTick>
 8003b42:	0003      	movs	r3, r0
 8003b44:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fe f9da 	bl	8001f00 <HAL_GetTick>
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e03c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b5a:	4b03      	ldr	r3, [pc, #12]	; (8003b68 <HAL_RCC_OscConfig+0x680>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	049b      	lsls	r3, r3, #18
 8003b62:	4013      	ands	r3, r2
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x660>
 8003b66:	e034      	b.n	8003bd2 <HAL_RCC_OscConfig+0x6ea>
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	ffff1fff 	.word	0xffff1fff
 8003b70:	fffffeff 	.word	0xfffffeff
 8003b74:	40007000 	.word	0x40007000
 8003b78:	fffffbff 	.word	0xfffffbff
 8003b7c:	00001388 	.word	0x00001388
 8003b80:	efffffff 	.word	0xefffffff
 8003b84:	feffffff 	.word	0xfeffffff
 8003b88:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e01d      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b98:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <HAL_RCC_OscConfig+0x6f4>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	025b      	lsls	r3, r3, #9
 8003ba4:	401a      	ands	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d10f      	bne.n	8003bce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	23f0      	movs	r3, #240	; 0xf0
 8003bb2:	039b      	lsls	r3, r3, #14
 8003bb4:	401a      	ands	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d107      	bne.n	8003bce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	23c0      	movs	r3, #192	; 0xc0
 8003bc2:	041b      	lsls	r3, r3, #16
 8003bc4:	401a      	ands	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b00a      	add	sp, #40	; 0x28
 8003bda:	bdb0      	pop	{r4, r5, r7, pc}
 8003bdc:	40021000 	.word	0x40021000

08003be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be0:	b5b0      	push	{r4, r5, r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e128      	b.n	8003e46 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b96      	ldr	r3, [pc, #600]	; (8003e50 <HAL_RCC_ClockConfig+0x270>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d91e      	bls.n	8003c40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b93      	ldr	r3, [pc, #588]	; (8003e50 <HAL_RCC_ClockConfig+0x270>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2201      	movs	r2, #1
 8003c08:	4393      	bics	r3, r2
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	4b90      	ldr	r3, [pc, #576]	; (8003e50 <HAL_RCC_ClockConfig+0x270>)
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c14:	f7fe f974 	bl	8001f00 <HAL_GetTick>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1c:	e009      	b.n	8003c32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c1e:	f7fe f96f 	bl	8001f00 <HAL_GetTick>
 8003c22:	0002      	movs	r2, r0
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	4a8a      	ldr	r2, [pc, #552]	; (8003e54 <HAL_RCC_ClockConfig+0x274>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e109      	b.n	8003e46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b87      	ldr	r3, [pc, #540]	; (8003e50 <HAL_RCC_ClockConfig+0x270>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2201      	movs	r2, #1
 8003c38:	4013      	ands	r3, r2
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1ee      	bne.n	8003c1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2202      	movs	r2, #2
 8003c46:	4013      	ands	r3, r2
 8003c48:	d009      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c4a:	4b83      	ldr	r3, [pc, #524]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	22f0      	movs	r2, #240	; 0xf0
 8003c50:	4393      	bics	r3, r2
 8003c52:	0019      	movs	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	4b7f      	ldr	r3, [pc, #508]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2201      	movs	r2, #1
 8003c64:	4013      	ands	r3, r2
 8003c66:	d100      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x8a>
 8003c68:	e089      	b.n	8003d7e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c72:	4b79      	ldr	r3, [pc, #484]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	2380      	movs	r3, #128	; 0x80
 8003c78:	029b      	lsls	r3, r3, #10
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d120      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e0e1      	b.n	8003e46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c8a:	4b73      	ldr	r3, [pc, #460]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	049b      	lsls	r3, r3, #18
 8003c92:	4013      	ands	r3, r2
 8003c94:	d114      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0d5      	b.n	8003e46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d106      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ca2:	4b6d      	ldr	r3, [pc, #436]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d109      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0ca      	b.n	8003e46 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cb0:	4b69      	ldr	r3, [pc, #420]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0c2      	b.n	8003e46 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cc0:	4b65      	ldr	r3, [pc, #404]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	4393      	bics	r3, r2
 8003cc8:	0019      	movs	r1, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	4b62      	ldr	r3, [pc, #392]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cd4:	f7fe f914 	bl	8001f00 <HAL_GetTick>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d111      	bne.n	8003d08 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce4:	e009      	b.n	8003cfa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce6:	f7fe f90b 	bl	8001f00 <HAL_GetTick>
 8003cea:	0002      	movs	r2, r0
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	4a58      	ldr	r2, [pc, #352]	; (8003e54 <HAL_RCC_ClockConfig+0x274>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e0a5      	b.n	8003e46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cfa:	4b57      	ldr	r3, [pc, #348]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	220c      	movs	r2, #12
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d1ef      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0x106>
 8003d06:	e03a      	b.n	8003d7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d111      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d10:	e009      	b.n	8003d26 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d12:	f7fe f8f5 	bl	8001f00 <HAL_GetTick>
 8003d16:	0002      	movs	r2, r0
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	4a4d      	ldr	r2, [pc, #308]	; (8003e54 <HAL_RCC_ClockConfig+0x274>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e08f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d26:	4b4c      	ldr	r3, [pc, #304]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	220c      	movs	r2, #12
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b0c      	cmp	r3, #12
 8003d30:	d1ef      	bne.n	8003d12 <HAL_RCC_ClockConfig+0x132>
 8003d32:	e024      	b.n	8003d7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d11b      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d3c:	e009      	b.n	8003d52 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d3e:	f7fe f8df 	bl	8001f00 <HAL_GetTick>
 8003d42:	0002      	movs	r2, r0
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	4a42      	ldr	r2, [pc, #264]	; (8003e54 <HAL_RCC_ClockConfig+0x274>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e079      	b.n	8003e46 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d52:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	220c      	movs	r2, #12
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d1ef      	bne.n	8003d3e <HAL_RCC_ClockConfig+0x15e>
 8003d5e:	e00e      	b.n	8003d7e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7fe f8ce 	bl	8001f00 <HAL_GetTick>
 8003d64:	0002      	movs	r2, r0
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	4a3a      	ldr	r2, [pc, #232]	; (8003e54 <HAL_RCC_ClockConfig+0x274>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e068      	b.n	8003e46 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d74:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	220c      	movs	r2, #12
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d7e:	4b34      	ldr	r3, [pc, #208]	; (8003e50 <HAL_RCC_ClockConfig+0x270>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2201      	movs	r2, #1
 8003d84:	4013      	ands	r3, r2
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d21e      	bcs.n	8003dca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8c:	4b30      	ldr	r3, [pc, #192]	; (8003e50 <HAL_RCC_ClockConfig+0x270>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2201      	movs	r2, #1
 8003d92:	4393      	bics	r3, r2
 8003d94:	0019      	movs	r1, r3
 8003d96:	4b2e      	ldr	r3, [pc, #184]	; (8003e50 <HAL_RCC_ClockConfig+0x270>)
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d9e:	f7fe f8af 	bl	8001f00 <HAL_GetTick>
 8003da2:	0003      	movs	r3, r0
 8003da4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	e009      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da8:	f7fe f8aa 	bl	8001f00 <HAL_GetTick>
 8003dac:	0002      	movs	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	4a28      	ldr	r2, [pc, #160]	; (8003e54 <HAL_RCC_ClockConfig+0x274>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e044      	b.n	8003e46 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbc:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <HAL_RCC_ClockConfig+0x270>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d1ee      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2204      	movs	r2, #4
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd4:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a20      	ldr	r2, [pc, #128]	; (8003e5c <HAL_RCC_ClockConfig+0x27c>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	0019      	movs	r1, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003de4:	430a      	orrs	r2, r1
 8003de6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2208      	movs	r2, #8
 8003dee:	4013      	ands	r3, r2
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003df2:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <HAL_RCC_ClockConfig+0x280>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	0019      	movs	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	00da      	lsls	r2, r3, #3
 8003e02:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003e04:	430a      	orrs	r2, r1
 8003e06:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e08:	f000 f832 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003e0c:	0001      	movs	r1, r0
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_RCC_ClockConfig+0x278>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	091b      	lsrs	r3, r3, #4
 8003e14:	220f      	movs	r2, #15
 8003e16:	4013      	ands	r3, r2
 8003e18:	4a12      	ldr	r2, [pc, #72]	; (8003e64 <HAL_RCC_ClockConfig+0x284>)
 8003e1a:	5cd3      	ldrb	r3, [r2, r3]
 8003e1c:	000a      	movs	r2, r1
 8003e1e:	40da      	lsrs	r2, r3
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <HAL_RCC_ClockConfig+0x288>)
 8003e22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <HAL_RCC_ClockConfig+0x28c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	250b      	movs	r5, #11
 8003e2a:	197c      	adds	r4, r7, r5
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7fe f821 	bl	8001e74 <HAL_InitTick>
 8003e32:	0003      	movs	r3, r0
 8003e34:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003e36:	197b      	adds	r3, r7, r5
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003e3e:	197b      	adds	r3, r7, r5
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	e000      	b.n	8003e46 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b004      	add	sp, #16
 8003e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	40022000 	.word	0x40022000
 8003e54:	00001388 	.word	0x00001388
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	fffff8ff 	.word	0xfffff8ff
 8003e60:	ffffc7ff 	.word	0xffffc7ff
 8003e64:	080067d4 	.word	0x080067d4
 8003e68:	20000000 	.word	0x20000000
 8003e6c:	20000004 	.word	0x20000004

08003e70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e70:	b5b0      	push	{r4, r5, r7, lr}
 8003e72:	b08e      	sub	sp, #56	; 0x38
 8003e74:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003e76:	4b4c      	ldr	r3, [pc, #304]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e7e:	230c      	movs	r3, #12
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b0c      	cmp	r3, #12
 8003e84:	d014      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003e86:	d900      	bls.n	8003e8a <HAL_RCC_GetSysClockFreq+0x1a>
 8003e88:	e07b      	b.n	8003f82 <HAL_RCC_GetSysClockFreq+0x112>
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d002      	beq.n	8003e94 <HAL_RCC_GetSysClockFreq+0x24>
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d00b      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8003e92:	e076      	b.n	8003f82 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003e94:	4b44      	ldr	r3, [pc, #272]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2210      	movs	r2, #16
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d002      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003e9e:	4b43      	ldr	r3, [pc, #268]	; (8003fac <HAL_RCC_GetSysClockFreq+0x13c>)
 8003ea0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003ea2:	e07c      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003ea4:	4b42      	ldr	r3, [pc, #264]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003ea6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ea8:	e079      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eaa:	4b42      	ldr	r3, [pc, #264]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x144>)
 8003eac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003eae:	e076      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	0c9a      	lsrs	r2, r3, #18
 8003eb4:	230f      	movs	r3, #15
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	4b3f      	ldr	r3, [pc, #252]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x148>)
 8003eba:	5c9b      	ldrb	r3, [r3, r2]
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	0d9a      	lsrs	r2, r3, #22
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eca:	4b37      	ldr	r3, [pc, #220]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	025b      	lsls	r3, r3, #9
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d01a      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	4a35      	ldr	r2, [pc, #212]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x144>)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	69b8      	ldr	r0, [r7, #24]
 8003ee4:	69f9      	ldr	r1, [r7, #28]
 8003ee6:	f7fc fab7 	bl	8000458 <__aeabi_lmul>
 8003eea:	0002      	movs	r2, r0
 8003eec:	000b      	movs	r3, r1
 8003eee:	0010      	movs	r0, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f7fc fa8b 	bl	8000418 <__aeabi_uldivmod>
 8003f02:	0002      	movs	r2, r0
 8003f04:	000b      	movs	r3, r1
 8003f06:	0013      	movs	r3, r2
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
 8003f0a:	e037      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f0c:	4b26      	ldr	r3, [pc, #152]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2210      	movs	r2, #16
 8003f12:	4013      	ands	r3, r2
 8003f14:	d01a      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	4a23      	ldr	r2, [pc, #140]	; (8003fac <HAL_RCC_GetSysClockFreq+0x13c>)
 8003f20:	2300      	movs	r3, #0
 8003f22:	68b8      	ldr	r0, [r7, #8]
 8003f24:	68f9      	ldr	r1, [r7, #12]
 8003f26:	f7fc fa97 	bl	8000458 <__aeabi_lmul>
 8003f2a:	0002      	movs	r2, r0
 8003f2c:	000b      	movs	r3, r1
 8003f2e:	0010      	movs	r0, r2
 8003f30:	0019      	movs	r1, r3
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	603b      	str	r3, [r7, #0]
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f7fc fa6b 	bl	8000418 <__aeabi_uldivmod>
 8003f42:	0002      	movs	r2, r0
 8003f44:	000b      	movs	r3, r1
 8003f46:	0013      	movs	r3, r2
 8003f48:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4a:	e017      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	0018      	movs	r0, r3
 8003f50:	2300      	movs	r3, #0
 8003f52:	0019      	movs	r1, r3
 8003f54:	4a16      	ldr	r2, [pc, #88]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003f56:	2300      	movs	r3, #0
 8003f58:	f7fc fa7e 	bl	8000458 <__aeabi_lmul>
 8003f5c:	0002      	movs	r2, r0
 8003f5e:	000b      	movs	r3, r1
 8003f60:	0010      	movs	r0, r2
 8003f62:	0019      	movs	r1, r3
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	001c      	movs	r4, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	001d      	movs	r5, r3
 8003f6c:	0022      	movs	r2, r4
 8003f6e:	002b      	movs	r3, r5
 8003f70:	f7fc fa52 	bl	8000418 <__aeabi_uldivmod>
 8003f74:	0002      	movs	r2, r0
 8003f76:	000b      	movs	r3, r1
 8003f78:	0013      	movs	r3, r2
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f80:	e00d      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	0b5b      	lsrs	r3, r3, #13
 8003f88:	2207      	movs	r2, #7
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	3301      	adds	r3, #1
 8003f92:	2280      	movs	r2, #128	; 0x80
 8003f94:	0212      	lsls	r2, r2, #8
 8003f96:	409a      	lsls	r2, r3
 8003f98:	0013      	movs	r3, r2
 8003f9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f9c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b00e      	add	sp, #56	; 0x38
 8003fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	003d0900 	.word	0x003d0900
 8003fb0:	00f42400 	.word	0x00f42400
 8003fb4:	007a1200 	.word	0x007a1200
 8003fb8:	080067ec 	.word	0x080067ec

08003fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc0:	4b02      	ldr	r3, [pc, #8]	; (8003fcc <HAL_RCC_GetHCLKFreq+0x10>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	20000000 	.word	0x20000000

08003fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fd4:	f7ff fff2 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8003fd8:	0001      	movs	r1, r0
 8003fda:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fe6:	5cd3      	ldrb	r3, [r2, r3]
 8003fe8:	40d9      	lsrs	r1, r3
 8003fea:	000b      	movs	r3, r1
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	080067e4 	.word	0x080067e4

08003ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004000:	f7ff ffdc 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8004004:	0001      	movs	r1, r0
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	0adb      	lsrs	r3, r3, #11
 800400c:	2207      	movs	r2, #7
 800400e:	4013      	ands	r3, r2
 8004010:	4a04      	ldr	r2, [pc, #16]	; (8004024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004012:	5cd3      	ldrb	r3, [r2, r3]
 8004014:	40d9      	lsrs	r1, r3
 8004016:	000b      	movs	r3, r1
}
 8004018:	0018      	movs	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	40021000 	.word	0x40021000
 8004024:	080067e4 	.word	0x080067e4

08004028 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004030:	2017      	movs	r0, #23
 8004032:	183b      	adds	r3, r7, r0
 8004034:	2200      	movs	r2, #0
 8004036:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2220      	movs	r2, #32
 800403e:	4013      	ands	r3, r2
 8004040:	d100      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004042:	e0c2      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004044:	4b81      	ldr	r3, [pc, #516]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	055b      	lsls	r3, r3, #21
 800404c:	4013      	ands	r3, r2
 800404e:	d109      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004050:	4b7e      	ldr	r3, [pc, #504]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004054:	4b7d      	ldr	r3, [pc, #500]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004056:	2180      	movs	r1, #128	; 0x80
 8004058:	0549      	lsls	r1, r1, #21
 800405a:	430a      	orrs	r2, r1
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800405e:	183b      	adds	r3, r7, r0
 8004060:	2201      	movs	r2, #1
 8004062:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004064:	4b7a      	ldr	r3, [pc, #488]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4013      	ands	r3, r2
 800406e:	d11a      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004070:	4b77      	ldr	r3, [pc, #476]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b76      	ldr	r3, [pc, #472]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004076:	2180      	movs	r1, #128	; 0x80
 8004078:	0049      	lsls	r1, r1, #1
 800407a:	430a      	orrs	r2, r1
 800407c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800407e:	f7fd ff3f 	bl	8001f00 <HAL_GetTick>
 8004082:	0003      	movs	r3, r0
 8004084:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004086:	e008      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004088:	f7fd ff3a 	bl	8001f00 <HAL_GetTick>
 800408c:	0002      	movs	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e0d4      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409a:	4b6d      	ldr	r3, [pc, #436]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80040a6:	4b69      	ldr	r3, [pc, #420]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	23c0      	movs	r3, #192	; 0xc0
 80040ac:	039b      	lsls	r3, r3, #14
 80040ae:	4013      	ands	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	23c0      	movs	r3, #192	; 0xc0
 80040b8:	039b      	lsls	r3, r3, #14
 80040ba:	4013      	ands	r3, r2
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d013      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	23c0      	movs	r3, #192	; 0xc0
 80040c8:	029b      	lsls	r3, r3, #10
 80040ca:	401a      	ands	r2, r3
 80040cc:	23c0      	movs	r3, #192	; 0xc0
 80040ce:	029b      	lsls	r3, r3, #10
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d10a      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80040d4:	4b5d      	ldr	r3, [pc, #372]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	029b      	lsls	r3, r3, #10
 80040dc:	401a      	ands	r2, r3
 80040de:	2380      	movs	r3, #128	; 0x80
 80040e0:	029b      	lsls	r3, r3, #10
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d101      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e0ac      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80040ea:	4b58      	ldr	r3, [pc, #352]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80040ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040ee:	23c0      	movs	r3, #192	; 0xc0
 80040f0:	029b      	lsls	r3, r3, #10
 80040f2:	4013      	ands	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d03b      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	23c0      	movs	r3, #192	; 0xc0
 8004102:	029b      	lsls	r3, r3, #10
 8004104:	4013      	ands	r3, r2
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	429a      	cmp	r2, r3
 800410a:	d033      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2220      	movs	r2, #32
 8004112:	4013      	ands	r3, r2
 8004114:	d02e      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004116:	4b4d      	ldr	r3, [pc, #308]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411a:	4a4e      	ldr	r2, [pc, #312]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800411c:	4013      	ands	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004120:	4b4a      	ldr	r3, [pc, #296]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004122:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004124:	4b49      	ldr	r3, [pc, #292]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004126:	2180      	movs	r1, #128	; 0x80
 8004128:	0309      	lsls	r1, r1, #12
 800412a:	430a      	orrs	r2, r1
 800412c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800412e:	4b47      	ldr	r3, [pc, #284]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004130:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004132:	4b46      	ldr	r3, [pc, #280]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004134:	4948      	ldr	r1, [pc, #288]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004136:	400a      	ands	r2, r1
 8004138:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800413a:	4b44      	ldr	r3, [pc, #272]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4013      	ands	r3, r2
 8004148:	d014      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fd fed9 	bl	8001f00 <HAL_GetTick>
 800414e:	0003      	movs	r3, r0
 8004150:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004152:	e009      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004154:	f7fd fed4 	bl	8001f00 <HAL_GetTick>
 8004158:	0002      	movs	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	4a3f      	ldr	r2, [pc, #252]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d901      	bls.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e06d      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004168:	4b38      	ldr	r3, [pc, #224]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800416a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800416c:	2380      	movs	r3, #128	; 0x80
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4013      	ands	r3, r2
 8004172:	d0ef      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	23c0      	movs	r3, #192	; 0xc0
 800417a:	029b      	lsls	r3, r3, #10
 800417c:	401a      	ands	r2, r3
 800417e:	23c0      	movs	r3, #192	; 0xc0
 8004180:	029b      	lsls	r3, r3, #10
 8004182:	429a      	cmp	r2, r3
 8004184:	d10c      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004186:	4b31      	ldr	r3, [pc, #196]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a35      	ldr	r2, [pc, #212]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800418c:	4013      	ands	r3, r2
 800418e:	0019      	movs	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	23c0      	movs	r3, #192	; 0xc0
 8004196:	039b      	lsls	r3, r3, #14
 8004198:	401a      	ands	r2, r3
 800419a:	4b2c      	ldr	r3, [pc, #176]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800419c:	430a      	orrs	r2, r1
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	4b2a      	ldr	r3, [pc, #168]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80041a2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	23c0      	movs	r3, #192	; 0xc0
 80041aa:	029b      	lsls	r3, r3, #10
 80041ac:	401a      	ands	r2, r3
 80041ae:	4b27      	ldr	r3, [pc, #156]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80041b0:	430a      	orrs	r2, r1
 80041b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041b4:	2317      	movs	r3, #23
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d105      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041be:	4b23      	ldr	r3, [pc, #140]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80041c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c2:	4b22      	ldr	r3, [pc, #136]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80041c4:	4927      	ldr	r1, [pc, #156]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80041c6:	400a      	ands	r2, r1
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2202      	movs	r2, #2
 80041d0:	4013      	ands	r3, r2
 80041d2:	d009      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041d4:	4b1d      	ldr	r3, [pc, #116]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80041d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d8:	220c      	movs	r2, #12
 80041da:	4393      	bics	r3, r2
 80041dc:	0019      	movs	r1, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	4b1a      	ldr	r3, [pc, #104]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80041e4:	430a      	orrs	r2, r1
 80041e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2204      	movs	r2, #4
 80041ee:	4013      	ands	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f2:	4b16      	ldr	r3, [pc, #88]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80041f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f6:	4a1c      	ldr	r2, [pc, #112]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	0019      	movs	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004202:	430a      	orrs	r2, r1
 8004204:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2208      	movs	r2, #8
 800420c:	4013      	ands	r3, r2
 800420e:	d009      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004210:	4b0e      	ldr	r3, [pc, #56]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004214:	4a15      	ldr	r2, [pc, #84]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004216:	4013      	ands	r3, r2
 8004218:	0019      	movs	r1, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004220:	430a      	orrs	r2, r1
 8004222:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2280      	movs	r2, #128	; 0x80
 800422a:	4013      	ands	r3, r2
 800422c:	d009      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004232:	4a0f      	ldr	r2, [pc, #60]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004234:	4013      	ands	r3, r2
 8004236:	0019      	movs	r1, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800423e:	430a      	orrs	r2, r1
 8004240:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	0018      	movs	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	b006      	add	sp, #24
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000
 8004250:	40007000 	.word	0x40007000
 8004254:	fffcffff 	.word	0xfffcffff
 8004258:	fff7ffff 	.word	0xfff7ffff
 800425c:	00001388 	.word	0x00001388
 8004260:	ffcfffff 	.word	0xffcfffff
 8004264:	efffffff 	.word	0xefffffff
 8004268:	fffff3ff 	.word	0xfffff3ff
 800426c:	ffffcfff 	.word	0xffffcfff
 8004270:	fff3ffff 	.word	0xfff3ffff

08004274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e032      	b.n	80042ec <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2239      	movs	r2, #57	; 0x39
 800428a:	5c9b      	ldrb	r3, [r3, r2]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d107      	bne.n	80042a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2238      	movs	r2, #56	; 0x38
 8004296:	2100      	movs	r1, #0
 8004298:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	0018      	movs	r0, r3
 800429e:	f7fd fce9 	bl	8001c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2239      	movs	r2, #57	; 0x39
 80042a6:	2102      	movs	r1, #2
 80042a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	0019      	movs	r1, r3
 80042b4:	0010      	movs	r0, r2
 80042b6:	f000 f935 	bl	8004524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	223e      	movs	r2, #62	; 0x3e
 80042be:	2101      	movs	r1, #1
 80042c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	223a      	movs	r2, #58	; 0x3a
 80042c6:	2101      	movs	r1, #1
 80042c8:	5499      	strb	r1, [r3, r2]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	223b      	movs	r2, #59	; 0x3b
 80042ce:	2101      	movs	r1, #1
 80042d0:	5499      	strb	r1, [r3, r2]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	223c      	movs	r2, #60	; 0x3c
 80042d6:	2101      	movs	r1, #1
 80042d8:	5499      	strb	r1, [r3, r2]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	223d      	movs	r2, #61	; 0x3d
 80042de:	2101      	movs	r1, #1
 80042e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2239      	movs	r2, #57	; 0x39
 80042e6:	2101      	movs	r1, #1
 80042e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	0018      	movs	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b002      	add	sp, #8
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2239      	movs	r2, #57	; 0x39
 8004300:	5c9b      	ldrb	r3, [r3, r2]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e02e      	b.n	800436a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2239      	movs	r2, #57	; 0x39
 8004310:	2102      	movs	r1, #2
 8004312:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	2380      	movs	r3, #128	; 0x80
 800431a:	05db      	lsls	r3, r3, #23
 800431c:	429a      	cmp	r2, r3
 800431e:	d009      	beq.n	8004334 <HAL_TIM_Base_Start+0x40>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a13      	ldr	r2, [pc, #76]	; (8004374 <HAL_TIM_Base_Start+0x80>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <HAL_TIM_Base_Start+0x40>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a12      	ldr	r2, [pc, #72]	; (8004378 <HAL_TIM_Base_Start+0x84>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d111      	bne.n	8004358 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2207      	movs	r2, #7
 800433c:	4013      	ands	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b06      	cmp	r3, #6
 8004344:	d010      	beq.n	8004368 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2101      	movs	r1, #1
 8004352:	430a      	orrs	r2, r1
 8004354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004356:	e007      	b.n	8004368 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2101      	movs	r1, #1
 8004364:	430a      	orrs	r2, r1
 8004366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	0018      	movs	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	b004      	add	sp, #16
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	40010800 	.word	0x40010800
 8004378:	40011400 	.word	0x40011400

0800437c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004386:	230f      	movs	r3, #15
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2238      	movs	r2, #56	; 0x38
 8004392:	5c9b      	ldrb	r3, [r3, r2]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_TIM_ConfigClockSource+0x20>
 8004398:	2302      	movs	r3, #2
 800439a:	e0bc      	b.n	8004516 <HAL_TIM_ConfigClockSource+0x19a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2238      	movs	r2, #56	; 0x38
 80043a0:	2101      	movs	r1, #1
 80043a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2239      	movs	r2, #57	; 0x39
 80043a8:	2102      	movs	r1, #2
 80043aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2277      	movs	r2, #119	; 0x77
 80043b8:	4393      	bics	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4a58      	ldr	r2, [pc, #352]	; (8004520 <HAL_TIM_ConfigClockSource+0x1a4>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2280      	movs	r2, #128	; 0x80
 80043d2:	0192      	lsls	r2, r2, #6
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d040      	beq.n	800445a <HAL_TIM_ConfigClockSource+0xde>
 80043d8:	2280      	movs	r2, #128	; 0x80
 80043da:	0192      	lsls	r2, r2, #6
 80043dc:	4293      	cmp	r3, r2
 80043de:	d900      	bls.n	80043e2 <HAL_TIM_ConfigClockSource+0x66>
 80043e0:	e088      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x178>
 80043e2:	2280      	movs	r2, #128	; 0x80
 80043e4:	0152      	lsls	r2, r2, #5
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d100      	bne.n	80043ec <HAL_TIM_ConfigClockSource+0x70>
 80043ea:	e088      	b.n	80044fe <HAL_TIM_ConfigClockSource+0x182>
 80043ec:	2280      	movs	r2, #128	; 0x80
 80043ee:	0152      	lsls	r2, r2, #5
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d900      	bls.n	80043f6 <HAL_TIM_ConfigClockSource+0x7a>
 80043f4:	e07e      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x178>
 80043f6:	2b70      	cmp	r3, #112	; 0x70
 80043f8:	d018      	beq.n	800442c <HAL_TIM_ConfigClockSource+0xb0>
 80043fa:	d900      	bls.n	80043fe <HAL_TIM_ConfigClockSource+0x82>
 80043fc:	e07a      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x178>
 80043fe:	2b60      	cmp	r3, #96	; 0x60
 8004400:	d04f      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0x126>
 8004402:	d900      	bls.n	8004406 <HAL_TIM_ConfigClockSource+0x8a>
 8004404:	e076      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x178>
 8004406:	2b50      	cmp	r3, #80	; 0x50
 8004408:	d03b      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0x106>
 800440a:	d900      	bls.n	800440e <HAL_TIM_ConfigClockSource+0x92>
 800440c:	e072      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x178>
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d057      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x146>
 8004412:	d900      	bls.n	8004416 <HAL_TIM_ConfigClockSource+0x9a>
 8004414:	e06e      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x178>
 8004416:	2b30      	cmp	r3, #48	; 0x30
 8004418:	d063      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x166>
 800441a:	d86b      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x178>
 800441c:	2b20      	cmp	r3, #32
 800441e:	d060      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x166>
 8004420:	d868      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x178>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d05d      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x166>
 8004426:	2b10      	cmp	r3, #16
 8004428:	d05b      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x166>
 800442a:	e063      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	6899      	ldr	r1, [r3, #8]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f000 f940 	bl	80046c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2277      	movs	r2, #119	; 0x77
 800444c:	4313      	orrs	r3, r2
 800444e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	609a      	str	r2, [r3, #8]
      break;
 8004458:	e052      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6899      	ldr	r1, [r3, #8]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f000 f929 	bl	80046c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	01c9      	lsls	r1, r1, #7
 800447c:	430a      	orrs	r2, r1
 800447e:	609a      	str	r2, [r3, #8]
      break;
 8004480:	e03e      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6859      	ldr	r1, [r3, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	001a      	movs	r2, r3
 8004490:	f000 f89c 	bl	80045cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2150      	movs	r1, #80	; 0x50
 800449a:	0018      	movs	r0, r3
 800449c:	f000 f8f6 	bl	800468c <TIM_ITRx_SetConfig>
      break;
 80044a0:	e02e      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6859      	ldr	r1, [r3, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	001a      	movs	r2, r3
 80044b0:	f000 f8ba 	bl	8004628 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2160      	movs	r1, #96	; 0x60
 80044ba:	0018      	movs	r0, r3
 80044bc:	f000 f8e6 	bl	800468c <TIM_ITRx_SetConfig>
      break;
 80044c0:	e01e      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6859      	ldr	r1, [r3, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	001a      	movs	r2, r3
 80044d0:	f000 f87c 	bl	80045cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2140      	movs	r1, #64	; 0x40
 80044da:	0018      	movs	r0, r3
 80044dc:	f000 f8d6 	bl	800468c <TIM_ITRx_SetConfig>
      break;
 80044e0:	e00e      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	0019      	movs	r1, r3
 80044ec:	0010      	movs	r0, r2
 80044ee:	f000 f8cd 	bl	800468c <TIM_ITRx_SetConfig>
      break;
 80044f2:	e005      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80044f4:	230f      	movs	r3, #15
 80044f6:	18fb      	adds	r3, r7, r3
 80044f8:	2201      	movs	r2, #1
 80044fa:	701a      	strb	r2, [r3, #0]
      break;
 80044fc:	e000      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80044fe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2239      	movs	r2, #57	; 0x39
 8004504:	2101      	movs	r1, #1
 8004506:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2238      	movs	r2, #56	; 0x38
 800450c:	2100      	movs	r1, #0
 800450e:	5499      	strb	r1, [r3, r2]

  return status;
 8004510:	230f      	movs	r3, #15
 8004512:	18fb      	adds	r3, r7, r3
 8004514:	781b      	ldrb	r3, [r3, #0]
}
 8004516:	0018      	movs	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	b004      	add	sp, #16
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	ffff00ff 	.word	0xffff00ff

08004524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	05db      	lsls	r3, r3, #23
 800453a:	429a      	cmp	r2, r3
 800453c:	d007      	beq.n	800454e <TIM_Base_SetConfig+0x2a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a1f      	ldr	r2, [pc, #124]	; (80045c0 <TIM_Base_SetConfig+0x9c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d003      	beq.n	800454e <TIM_Base_SetConfig+0x2a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <TIM_Base_SetConfig+0xa0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d108      	bne.n	8004560 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2270      	movs	r2, #112	; 0x70
 8004552:	4393      	bics	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	2380      	movs	r3, #128	; 0x80
 8004564:	05db      	lsls	r3, r3, #23
 8004566:	429a      	cmp	r2, r3
 8004568:	d007      	beq.n	800457a <TIM_Base_SetConfig+0x56>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <TIM_Base_SetConfig+0x9c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d003      	beq.n	800457a <TIM_Base_SetConfig+0x56>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <TIM_Base_SetConfig+0xa0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d108      	bne.n	800458c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <TIM_Base_SetConfig+0xa4>)
 800457e:	4013      	ands	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2280      	movs	r2, #128	; 0x80
 8004590:	4393      	bics	r3, r2
 8004592:	001a      	movs	r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	615a      	str	r2, [r3, #20]
}
 80045b8:	46c0      	nop			; (mov r8, r8)
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b004      	add	sp, #16
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40010800 	.word	0x40010800
 80045c4:	40011400 	.word	0x40011400
 80045c8:	fffffcff 	.word	0xfffffcff

080045cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	2201      	movs	r2, #1
 80045e4:	4393      	bics	r3, r2
 80045e6:	001a      	movs	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	22f0      	movs	r2, #240	; 0xf0
 80045f6:	4393      	bics	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	220a      	movs	r2, #10
 8004608:	4393      	bics	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	621a      	str	r2, [r3, #32]
}
 8004620:	46c0      	nop			; (mov r8, r8)
 8004622:	46bd      	mov	sp, r7
 8004624:	b006      	add	sp, #24
 8004626:	bd80      	pop	{r7, pc}

08004628 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	2210      	movs	r2, #16
 800463a:	4393      	bics	r3, r2
 800463c:	001a      	movs	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	4a0d      	ldr	r2, [pc, #52]	; (8004688 <TIM_TI2_ConfigInputStage+0x60>)
 8004652:	4013      	ands	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	031b      	lsls	r3, r3, #12
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	22a0      	movs	r2, #160	; 0xa0
 8004664:	4393      	bics	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b006      	add	sp, #24
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	ffff0fff 	.word	0xffff0fff

0800468c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2270      	movs	r2, #112	; 0x70
 80046a0:	4393      	bics	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	2207      	movs	r2, #7
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	609a      	str	r2, [r3, #8]
}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b004      	add	sp, #16
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	4a09      	ldr	r2, [pc, #36]	; (80046fc <TIM_ETR_SetConfig+0x3c>)
 80046d8:	4013      	ands	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	021a      	lsls	r2, r3, #8
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	609a      	str	r2, [r3, #8]
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b006      	add	sp, #24
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	ffff00ff 	.word	0xffff00ff

08004700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2238      	movs	r2, #56	; 0x38
 800470e:	5c9b      	ldrb	r3, [r3, r2]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004714:	2302      	movs	r3, #2
 8004716:	e042      	b.n	800479e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2238      	movs	r2, #56	; 0x38
 800471c:	2101      	movs	r1, #1
 800471e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2239      	movs	r2, #57	; 0x39
 8004724:	2102      	movs	r1, #2
 8004726:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2270      	movs	r2, #112	; 0x70
 800473c:	4393      	bics	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	05db      	lsls	r3, r3, #23
 800475a:	429a      	cmp	r2, r3
 800475c:	d009      	beq.n	8004772 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a11      	ldr	r2, [pc, #68]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d004      	beq.n	8004772 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a0f      	ldr	r2, [pc, #60]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d10c      	bne.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2280      	movs	r2, #128	; 0x80
 8004776:	4393      	bics	r3, r2
 8004778:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	4313      	orrs	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2239      	movs	r2, #57	; 0x39
 8004790:	2101      	movs	r1, #1
 8004792:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2238      	movs	r2, #56	; 0x38
 8004798:	2100      	movs	r1, #0
 800479a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	0018      	movs	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b004      	add	sp, #16
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	40010800 	.word	0x40010800
 80047ac:	40011400 	.word	0x40011400

080047b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e044      	b.n	800484c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d107      	bne.n	80047da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2274      	movs	r2, #116	; 0x74
 80047ce:	2100      	movs	r1, #0
 80047d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	0018      	movs	r0, r3
 80047d6:	f7fd fa93 	bl	8001d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2224      	movs	r2, #36	; 0x24
 80047de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2101      	movs	r1, #1
 80047ec:	438a      	bics	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f000 fbd2 	bl	8004f9c <UART_SetConfig>
 80047f8:	0003      	movs	r3, r0
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e024      	b.n	800484c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	0018      	movs	r0, r3
 800480e:	f000 fe27 	bl	8005460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	490d      	ldr	r1, [pc, #52]	; (8004854 <HAL_UART_Init+0xa4>)
 800481e:	400a      	ands	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	212a      	movs	r1, #42	; 0x2a
 800482e:	438a      	bics	r2, r1
 8004830:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2101      	movs	r1, #1
 800483e:	430a      	orrs	r2, r1
 8004840:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0018      	movs	r0, r3
 8004846:	f000 febf 	bl	80055c8 <UART_CheckIdleState>
 800484a:	0003      	movs	r3, r0
}
 800484c:	0018      	movs	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	b002      	add	sp, #8
 8004852:	bd80      	pop	{r7, pc}
 8004854:	ffffb7ff 	.word	0xffffb7ff

08004858 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	1dbb      	adds	r3, r7, #6
 8004866:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800486c:	2b20      	cmp	r3, #32
 800486e:	d000      	beq.n	8004872 <HAL_UART_Transmit+0x1a>
 8004870:	e095      	b.n	800499e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_UART_Transmit+0x28>
 8004878:	1dbb      	adds	r3, r7, #6
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e08d      	b.n	80049a0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	2380      	movs	r3, #128	; 0x80
 800488a:	015b      	lsls	r3, r3, #5
 800488c:	429a      	cmp	r2, r3
 800488e:	d109      	bne.n	80048a4 <HAL_UART_Transmit+0x4c>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2201      	movs	r2, #1
 800489c:	4013      	ands	r3, r2
 800489e:	d001      	beq.n	80048a4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e07d      	b.n	80049a0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2274      	movs	r2, #116	; 0x74
 80048a8:	5c9b      	ldrb	r3, [r3, r2]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Transmit+0x5a>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e076      	b.n	80049a0 <HAL_UART_Transmit+0x148>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2274      	movs	r2, #116	; 0x74
 80048b6:	2101      	movs	r1, #1
 80048b8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2280      	movs	r2, #128	; 0x80
 80048be:	2100      	movs	r1, #0
 80048c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2221      	movs	r2, #33	; 0x21
 80048c6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048c8:	f7fd fb1a 	bl	8001f00 <HAL_GetTick>
 80048cc:	0003      	movs	r3, r0
 80048ce:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	1dba      	adds	r2, r7, #6
 80048d4:	2150      	movs	r1, #80	; 0x50
 80048d6:	8812      	ldrh	r2, [r2, #0]
 80048d8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1dba      	adds	r2, r7, #6
 80048de:	2152      	movs	r1, #82	; 0x52
 80048e0:	8812      	ldrh	r2, [r2, #0]
 80048e2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	2380      	movs	r3, #128	; 0x80
 80048ea:	015b      	lsls	r3, r3, #5
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d108      	bne.n	8004902 <HAL_UART_Transmit+0xaa>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d104      	bne.n	8004902 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	e003      	b.n	800490a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004906:	2300      	movs	r3, #0
 8004908:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2274      	movs	r2, #116	; 0x74
 800490e:	2100      	movs	r1, #0
 8004910:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004912:	e02c      	b.n	800496e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	0013      	movs	r3, r2
 800491e:	2200      	movs	r2, #0
 8004920:	2180      	movs	r1, #128	; 0x80
 8004922:	f000 fe99 	bl	8005658 <UART_WaitOnFlagUntilTimeout>
 8004926:	1e03      	subs	r3, r0, #0
 8004928:	d001      	beq.n	800492e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e038      	b.n	80049a0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10b      	bne.n	800494c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	001a      	movs	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	05d2      	lsls	r2, r2, #23
 8004940:	0dd2      	lsrs	r2, r2, #23
 8004942:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	3302      	adds	r3, #2
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	e007      	b.n	800495c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	781a      	ldrb	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3301      	adds	r3, #1
 800495a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2252      	movs	r2, #82	; 0x52
 8004960:	5a9b      	ldrh	r3, [r3, r2]
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b299      	uxth	r1, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2252      	movs	r2, #82	; 0x52
 800496c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2252      	movs	r2, #82	; 0x52
 8004972:	5a9b      	ldrh	r3, [r3, r2]
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1cc      	bne.n	8004914 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	0013      	movs	r3, r2
 8004984:	2200      	movs	r2, #0
 8004986:	2140      	movs	r1, #64	; 0x40
 8004988:	f000 fe66 	bl	8005658 <UART_WaitOnFlagUntilTimeout>
 800498c:	1e03      	subs	r3, r0, #0
 800498e:	d001      	beq.n	8004994 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e005      	b.n	80049a0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	e000      	b.n	80049a0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800499e:	2302      	movs	r3, #2
  }
}
 80049a0:	0018      	movs	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b008      	add	sp, #32
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b0ab      	sub	sp, #172	; 0xac
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	22a4      	movs	r2, #164	; 0xa4
 80049b8:	18b9      	adds	r1, r7, r2
 80049ba:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	20a0      	movs	r0, #160	; 0xa0
 80049c4:	1839      	adds	r1, r7, r0
 80049c6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	219c      	movs	r1, #156	; 0x9c
 80049d0:	1879      	adds	r1, r7, r1
 80049d2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049d4:	0011      	movs	r1, r2
 80049d6:	18bb      	adds	r3, r7, r2
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a99      	ldr	r2, [pc, #612]	; (8004c40 <HAL_UART_IRQHandler+0x298>)
 80049dc:	4013      	ands	r3, r2
 80049de:	2298      	movs	r2, #152	; 0x98
 80049e0:	18bc      	adds	r4, r7, r2
 80049e2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80049e4:	18bb      	adds	r3, r7, r2
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d114      	bne.n	8004a16 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049ec:	187b      	adds	r3, r7, r1
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2220      	movs	r2, #32
 80049f2:	4013      	ands	r3, r2
 80049f4:	d00f      	beq.n	8004a16 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049f6:	183b      	adds	r3, r7, r0
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2220      	movs	r2, #32
 80049fc:	4013      	ands	r3, r2
 80049fe:	d00a      	beq.n	8004a16 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d100      	bne.n	8004a0a <HAL_UART_IRQHandler+0x62>
 8004a08:	e298      	b.n	8004f3c <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	0010      	movs	r0, r2
 8004a12:	4798      	blx	r3
      }
      return;
 8004a14:	e292      	b.n	8004f3c <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a16:	2398      	movs	r3, #152	; 0x98
 8004a18:	18fb      	adds	r3, r7, r3
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d100      	bne.n	8004a22 <HAL_UART_IRQHandler+0x7a>
 8004a20:	e114      	b.n	8004c4c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a22:	239c      	movs	r3, #156	; 0x9c
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d106      	bne.n	8004a3c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a2e:	23a0      	movs	r3, #160	; 0xa0
 8004a30:	18fb      	adds	r3, r7, r3
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a83      	ldr	r2, [pc, #524]	; (8004c44 <HAL_UART_IRQHandler+0x29c>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	d100      	bne.n	8004a3c <HAL_UART_IRQHandler+0x94>
 8004a3a:	e107      	b.n	8004c4c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a3c:	23a4      	movs	r3, #164	; 0xa4
 8004a3e:	18fb      	adds	r3, r7, r3
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2201      	movs	r2, #1
 8004a44:	4013      	ands	r3, r2
 8004a46:	d012      	beq.n	8004a6e <HAL_UART_IRQHandler+0xc6>
 8004a48:	23a0      	movs	r3, #160	; 0xa0
 8004a4a:	18fb      	adds	r3, r7, r3
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	2380      	movs	r3, #128	; 0x80
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	4013      	ands	r3, r2
 8004a54:	d00b      	beq.n	8004a6e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2280      	movs	r2, #128	; 0x80
 8004a62:	589b      	ldr	r3, [r3, r2]
 8004a64:	2201      	movs	r2, #1
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2180      	movs	r1, #128	; 0x80
 8004a6c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a6e:	23a4      	movs	r3, #164	; 0xa4
 8004a70:	18fb      	adds	r3, r7, r3
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2202      	movs	r2, #2
 8004a76:	4013      	ands	r3, r2
 8004a78:	d011      	beq.n	8004a9e <HAL_UART_IRQHandler+0xf6>
 8004a7a:	239c      	movs	r3, #156	; 0x9c
 8004a7c:	18fb      	adds	r3, r7, r3
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2201      	movs	r2, #1
 8004a82:	4013      	ands	r3, r2
 8004a84:	d00b      	beq.n	8004a9e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	589b      	ldr	r3, [r3, r2]
 8004a94:	2204      	movs	r2, #4
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2180      	movs	r1, #128	; 0x80
 8004a9c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a9e:	23a4      	movs	r3, #164	; 0xa4
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d011      	beq.n	8004ace <HAL_UART_IRQHandler+0x126>
 8004aaa:	239c      	movs	r3, #156	; 0x9c
 8004aac:	18fb      	adds	r3, r7, r3
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d00b      	beq.n	8004ace <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2204      	movs	r2, #4
 8004abc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2280      	movs	r2, #128	; 0x80
 8004ac2:	589b      	ldr	r3, [r3, r2]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2180      	movs	r1, #128	; 0x80
 8004acc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ace:	23a4      	movs	r3, #164	; 0xa4
 8004ad0:	18fb      	adds	r3, r7, r3
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d017      	beq.n	8004b0a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ada:	23a0      	movs	r3, #160	; 0xa0
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d105      	bne.n	8004af2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ae6:	239c      	movs	r3, #156	; 0x9c
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2201      	movs	r2, #1
 8004aee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004af0:	d00b      	beq.n	8004b0a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2208      	movs	r2, #8
 8004af8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2280      	movs	r2, #128	; 0x80
 8004afe:	589b      	ldr	r3, [r3, r2]
 8004b00:	2208      	movs	r2, #8
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2180      	movs	r1, #128	; 0x80
 8004b08:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b0a:	23a4      	movs	r3, #164	; 0xa4
 8004b0c:	18fb      	adds	r3, r7, r3
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	4013      	ands	r3, r2
 8004b16:	d013      	beq.n	8004b40 <HAL_UART_IRQHandler+0x198>
 8004b18:	23a0      	movs	r3, #160	; 0xa0
 8004b1a:	18fb      	adds	r3, r7, r3
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	2380      	movs	r3, #128	; 0x80
 8004b20:	04db      	lsls	r3, r3, #19
 8004b22:	4013      	ands	r3, r2
 8004b24:	d00c      	beq.n	8004b40 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2280      	movs	r2, #128	; 0x80
 8004b2c:	0112      	lsls	r2, r2, #4
 8004b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	589b      	ldr	r3, [r3, r2]
 8004b36:	2220      	movs	r2, #32
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2180      	movs	r1, #128	; 0x80
 8004b3e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2280      	movs	r2, #128	; 0x80
 8004b44:	589b      	ldr	r3, [r3, r2]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d100      	bne.n	8004b4c <HAL_UART_IRQHandler+0x1a4>
 8004b4a:	e1f9      	b.n	8004f40 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b4c:	23a4      	movs	r3, #164	; 0xa4
 8004b4e:	18fb      	adds	r3, r7, r3
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2220      	movs	r2, #32
 8004b54:	4013      	ands	r3, r2
 8004b56:	d00e      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b58:	23a0      	movs	r3, #160	; 0xa0
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	4013      	ands	r3, r2
 8004b62:	d008      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	0010      	movs	r0, r2
 8004b74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2280      	movs	r2, #128	; 0x80
 8004b7a:	589b      	ldr	r3, [r3, r2]
 8004b7c:	2194      	movs	r1, #148	; 0x94
 8004b7e:	187a      	adds	r2, r7, r1
 8004b80:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2240      	movs	r2, #64	; 0x40
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d004      	beq.n	8004b9a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b90:	187b      	adds	r3, r7, r1
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2228      	movs	r2, #40	; 0x28
 8004b96:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b98:	d047      	beq.n	8004c2a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f000 fee5 	bl	800596c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2240      	movs	r2, #64	; 0x40
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	d137      	bne.n	8004c20 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb8:	2090      	movs	r0, #144	; 0x90
 8004bba:	183a      	adds	r2, r7, r0
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bc4:	f383 8810 	msr	PRIMASK, r3
}
 8004bc8:	46c0      	nop			; (mov r8, r8)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2140      	movs	r1, #64	; 0x40
 8004bd6:	438a      	bics	r2, r1
 8004bd8:	609a      	str	r2, [r3, #8]
 8004bda:	183b      	adds	r3, r7, r0
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004be2:	f383 8810 	msr	PRIMASK, r3
}
 8004be6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d012      	beq.n	8004c16 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf4:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <HAL_UART_IRQHandler+0x2a0>)
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f7fd fba9 	bl	8002354 <HAL_DMA_Abort_IT>
 8004c02:	1e03      	subs	r3, r0, #0
 8004c04:	d01a      	beq.n	8004c3c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c10:	0018      	movs	r0, r3
 8004c12:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c14:	e012      	b.n	8004c3c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 f9b7 	bl	8004f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1e:	e00d      	b.n	8004c3c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	0018      	movs	r0, r3
 8004c24:	f000 f9b2 	bl	8004f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c28:	e008      	b.n	8004c3c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f000 f9ad 	bl	8004f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2280      	movs	r2, #128	; 0x80
 8004c36:	2100      	movs	r1, #0
 8004c38:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004c3a:	e181      	b.n	8004f40 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	46c0      	nop			; (mov r8, r8)
    return;
 8004c3e:	e17f      	b.n	8004f40 <HAL_UART_IRQHandler+0x598>
 8004c40:	0000080f 	.word	0x0000080f
 8004c44:	04000120 	.word	0x04000120
 8004c48:	08005c17 	.word	0x08005c17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d000      	beq.n	8004c56 <HAL_UART_IRQHandler+0x2ae>
 8004c54:	e133      	b.n	8004ebe <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c56:	23a4      	movs	r3, #164	; 0xa4
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d100      	bne.n	8004c64 <HAL_UART_IRQHandler+0x2bc>
 8004c62:	e12c      	b.n	8004ebe <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c64:	23a0      	movs	r3, #160	; 0xa0
 8004c66:	18fb      	adds	r3, r7, r3
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2210      	movs	r2, #16
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d100      	bne.n	8004c72 <HAL_UART_IRQHandler+0x2ca>
 8004c70:	e125      	b.n	8004ebe <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2210      	movs	r2, #16
 8004c78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2240      	movs	r2, #64	; 0x40
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d000      	beq.n	8004c8a <HAL_UART_IRQHandler+0x2e2>
 8004c88:	e09d      	b.n	8004dc6 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	217e      	movs	r1, #126	; 0x7e
 8004c94:	187b      	adds	r3, r7, r1
 8004c96:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004c98:	187b      	adds	r3, r7, r1
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d100      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x2fa>
 8004ca0:	e150      	b.n	8004f44 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2258      	movs	r2, #88	; 0x58
 8004ca6:	5a9b      	ldrh	r3, [r3, r2]
 8004ca8:	187a      	adds	r2, r7, r1
 8004caa:	8812      	ldrh	r2, [r2, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d300      	bcc.n	8004cb2 <HAL_UART_IRQHandler+0x30a>
 8004cb0:	e148      	b.n	8004f44 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	187a      	adds	r2, r7, r1
 8004cb6:	215a      	movs	r1, #90	; 0x5a
 8004cb8:	8812      	ldrh	r2, [r2, #0]
 8004cba:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d16e      	bne.n	8004da8 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cca:	f3ef 8310 	mrs	r3, PRIMASK
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cd2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cda:	f383 8810 	msr	PRIMASK, r3
}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	499a      	ldr	r1, [pc, #616]	; (8004f54 <HAL_UART_IRQHandler+0x5ac>)
 8004cec:	400a      	ands	r2, r1
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	f383 8810 	msr	PRIMASK, r3
}
 8004cfa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d04:	677b      	str	r3, [r7, #116]	; 0x74
 8004d06:	2301      	movs	r3, #1
 8004d08:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d0c:	f383 8810 	msr	PRIMASK, r3
}
 8004d10:	46c0      	nop			; (mov r8, r8)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	438a      	bics	r2, r1
 8004d20:	609a      	str	r2, [r3, #8]
 8004d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d24:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d28:	f383 8810 	msr	PRIMASK, r3
}
 8004d2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d32:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d36:	673b      	str	r3, [r7, #112]	; 0x70
 8004d38:	2301      	movs	r3, #1
 8004d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d3e:	f383 8810 	msr	PRIMASK, r3
}
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2140      	movs	r1, #64	; 0x40
 8004d50:	438a      	bics	r2, r1
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d56:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d5a:	f383 8810 	msr	PRIMASK, r3
}
 8004d5e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d70:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d76:	2301      	movs	r3, #1
 8004d78:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d7c:	f383 8810 	msr	PRIMASK, r3
}
 8004d80:	46c0      	nop			; (mov r8, r8)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2110      	movs	r1, #16
 8004d8e:	438a      	bics	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d94:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d98:	f383 8810 	msr	PRIMASK, r3
}
 8004d9c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	0018      	movs	r0, r3
 8004da4:	f7fd fa96 	bl	80022d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2258      	movs	r2, #88	; 0x58
 8004dac:	5a9a      	ldrh	r2, [r3, r2]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	215a      	movs	r1, #90	; 0x5a
 8004db2:	5a5b      	ldrh	r3, [r3, r1]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	0011      	movs	r1, r2
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f7fc fde6 	bl	8001990 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dc4:	e0be      	b.n	8004f44 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2258      	movs	r2, #88	; 0x58
 8004dca:	5a99      	ldrh	r1, [r3, r2]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	225a      	movs	r2, #90	; 0x5a
 8004dd0:	5a9b      	ldrh	r3, [r3, r2]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	208e      	movs	r0, #142	; 0x8e
 8004dd6:	183b      	adds	r3, r7, r0
 8004dd8:	1a8a      	subs	r2, r1, r2
 8004dda:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	225a      	movs	r2, #90	; 0x5a
 8004de0:	5a9b      	ldrh	r3, [r3, r2]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d100      	bne.n	8004dea <HAL_UART_IRQHandler+0x442>
 8004de8:	e0ae      	b.n	8004f48 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8004dea:	183b      	adds	r3, r7, r0
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d100      	bne.n	8004df4 <HAL_UART_IRQHandler+0x44c>
 8004df2:	e0a9      	b.n	8004f48 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df4:	f3ef 8310 	mrs	r3, PRIMASK
 8004df8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dfc:	2488      	movs	r4, #136	; 0x88
 8004dfe:	193a      	adds	r2, r7, r4
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	2301      	movs	r3, #1
 8004e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f383 8810 	msr	PRIMASK, r3
}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	494f      	ldr	r1, [pc, #316]	; (8004f58 <HAL_UART_IRQHandler+0x5b0>)
 8004e1a:	400a      	ands	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	193b      	adds	r3, r7, r4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f383 8810 	msr	PRIMASK, r3
}
 8004e2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e30:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e32:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e34:	2484      	movs	r4, #132	; 0x84
 8004e36:	193a      	adds	r2, r7, r4
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f383 8810 	msr	PRIMASK, r3
}
 8004e44:	46c0      	nop			; (mov r8, r8)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2101      	movs	r1, #1
 8004e52:	438a      	bics	r2, r1
 8004e54:	609a      	str	r2, [r3, #8]
 8004e56:	193b      	adds	r3, r7, r4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	f383 8810 	msr	PRIMASK, r3
}
 8004e62:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e76:	f3ef 8310 	mrs	r3, PRIMASK
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e7e:	2480      	movs	r4, #128	; 0x80
 8004e80:	193a      	adds	r2, r7, r4
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	2301      	movs	r3, #1
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	f383 8810 	msr	PRIMASK, r3
}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2110      	movs	r1, #16
 8004e9c:	438a      	bics	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	193b      	adds	r3, r7, r4
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	f383 8810 	msr	PRIMASK, r3
}
 8004eac:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eae:	183b      	adds	r3, r7, r0
 8004eb0:	881a      	ldrh	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	0011      	movs	r1, r2
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f7fc fd6a 	bl	8001990 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ebc:	e044      	b.n	8004f48 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ebe:	23a4      	movs	r3, #164	; 0xa4
 8004ec0:	18fb      	adds	r3, r7, r3
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	2380      	movs	r3, #128	; 0x80
 8004ec6:	035b      	lsls	r3, r3, #13
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d010      	beq.n	8004eee <HAL_UART_IRQHandler+0x546>
 8004ecc:	239c      	movs	r3, #156	; 0x9c
 8004ece:	18fb      	adds	r3, r7, r3
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	2380      	movs	r3, #128	; 0x80
 8004ed4:	03db      	lsls	r3, r3, #15
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d009      	beq.n	8004eee <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2280      	movs	r2, #128	; 0x80
 8004ee0:	0352      	lsls	r2, r2, #13
 8004ee2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f000 fed7 	bl	8005c9a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004eec:	e02f      	b.n	8004f4e <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004eee:	23a4      	movs	r3, #164	; 0xa4
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2280      	movs	r2, #128	; 0x80
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d00f      	beq.n	8004f1a <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004efa:	23a0      	movs	r3, #160	; 0xa0
 8004efc:	18fb      	adds	r3, r7, r3
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2280      	movs	r2, #128	; 0x80
 8004f02:	4013      	ands	r3, r2
 8004f04:	d009      	beq.n	8004f1a <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01e      	beq.n	8004f4c <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	0010      	movs	r0, r2
 8004f16:	4798      	blx	r3
    }
    return;
 8004f18:	e018      	b.n	8004f4c <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f1a:	23a4      	movs	r3, #164	; 0xa4
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2240      	movs	r2, #64	; 0x40
 8004f22:	4013      	ands	r3, r2
 8004f24:	d013      	beq.n	8004f4e <HAL_UART_IRQHandler+0x5a6>
 8004f26:	23a0      	movs	r3, #160	; 0xa0
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2240      	movs	r2, #64	; 0x40
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d00d      	beq.n	8004f4e <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	0018      	movs	r0, r3
 8004f36:	f000 fe85 	bl	8005c44 <UART_EndTransmit_IT>
    return;
 8004f3a:	e008      	b.n	8004f4e <HAL_UART_IRQHandler+0x5a6>
      return;
 8004f3c:	46c0      	nop			; (mov r8, r8)
 8004f3e:	e006      	b.n	8004f4e <HAL_UART_IRQHandler+0x5a6>
    return;
 8004f40:	46c0      	nop			; (mov r8, r8)
 8004f42:	e004      	b.n	8004f4e <HAL_UART_IRQHandler+0x5a6>
      return;
 8004f44:	46c0      	nop			; (mov r8, r8)
 8004f46:	e002      	b.n	8004f4e <HAL_UART_IRQHandler+0x5a6>
      return;
 8004f48:	46c0      	nop			; (mov r8, r8)
 8004f4a:	e000      	b.n	8004f4e <HAL_UART_IRQHandler+0x5a6>
    return;
 8004f4c:	46c0      	nop			; (mov r8, r8)
  }

}
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b02b      	add	sp, #172	; 0xac
 8004f52:	bd90      	pop	{r4, r7, pc}
 8004f54:	fffffeff 	.word	0xfffffeff
 8004f58:	fffffedf 	.word	0xfffffedf

08004f5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f64:	46c0      	nop			; (mov r8, r8)
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b002      	add	sp, #8
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004f74:	46c0      	nop			; (mov r8, r8)
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b002      	add	sp, #8
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f84:	46c0      	nop			; (mov r8, r8)
 8004f86:	46bd      	mov	sp, r7
 8004f88:	b002      	add	sp, #8
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f94:	46c0      	nop			; (mov r8, r8)
 8004f96:	46bd      	mov	sp, r7
 8004f98:	b002      	add	sp, #8
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f9c:	b5b0      	push	{r4, r5, r7, lr}
 8004f9e:	b08e      	sub	sp, #56	; 0x38
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fa4:	231a      	movs	r3, #26
 8004fa6:	2218      	movs	r2, #24
 8004fa8:	4694      	mov	ip, r2
 8004faa:	44bc      	add	ip, r7
 8004fac:	4463      	add	r3, ip
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4abc      	ldr	r2, [pc, #752]	; (80052c4 <UART_SetConfig+0x328>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	0019      	movs	r1, r3
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4ab8      	ldr	r2, [pc, #736]	; (80052c8 <UART_SetConfig+0x32c>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	0019      	movs	r1, r3
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4ab2      	ldr	r2, [pc, #712]	; (80052cc <UART_SetConfig+0x330>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d004      	beq.n	8005012 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800500e:	4313      	orrs	r3, r2
 8005010:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4aad      	ldr	r2, [pc, #692]	; (80052d0 <UART_SetConfig+0x334>)
 800501a:	4013      	ands	r3, r2
 800501c:	0019      	movs	r1, r3
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005024:	430a      	orrs	r2, r1
 8005026:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4aa9      	ldr	r2, [pc, #676]	; (80052d4 <UART_SetConfig+0x338>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d136      	bne.n	80050a0 <UART_SetConfig+0x104>
 8005032:	4ba9      	ldr	r3, [pc, #676]	; (80052d8 <UART_SetConfig+0x33c>)
 8005034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005036:	220c      	movs	r2, #12
 8005038:	4013      	ands	r3, r2
 800503a:	2b0c      	cmp	r3, #12
 800503c:	d020      	beq.n	8005080 <UART_SetConfig+0xe4>
 800503e:	d827      	bhi.n	8005090 <UART_SetConfig+0xf4>
 8005040:	2b08      	cmp	r3, #8
 8005042:	d00d      	beq.n	8005060 <UART_SetConfig+0xc4>
 8005044:	d824      	bhi.n	8005090 <UART_SetConfig+0xf4>
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <UART_SetConfig+0xb4>
 800504a:	2b04      	cmp	r3, #4
 800504c:	d010      	beq.n	8005070 <UART_SetConfig+0xd4>
 800504e:	e01f      	b.n	8005090 <UART_SetConfig+0xf4>
 8005050:	231b      	movs	r3, #27
 8005052:	2218      	movs	r2, #24
 8005054:	4694      	mov	ip, r2
 8005056:	44bc      	add	ip, r7
 8005058:	4463      	add	r3, ip
 800505a:	2200      	movs	r2, #0
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	e06f      	b.n	8005140 <UART_SetConfig+0x1a4>
 8005060:	231b      	movs	r3, #27
 8005062:	2218      	movs	r2, #24
 8005064:	4694      	mov	ip, r2
 8005066:	44bc      	add	ip, r7
 8005068:	4463      	add	r3, ip
 800506a:	2202      	movs	r2, #2
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	e067      	b.n	8005140 <UART_SetConfig+0x1a4>
 8005070:	231b      	movs	r3, #27
 8005072:	2218      	movs	r2, #24
 8005074:	4694      	mov	ip, r2
 8005076:	44bc      	add	ip, r7
 8005078:	4463      	add	r3, ip
 800507a:	2204      	movs	r2, #4
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	e05f      	b.n	8005140 <UART_SetConfig+0x1a4>
 8005080:	231b      	movs	r3, #27
 8005082:	2218      	movs	r2, #24
 8005084:	4694      	mov	ip, r2
 8005086:	44bc      	add	ip, r7
 8005088:	4463      	add	r3, ip
 800508a:	2208      	movs	r2, #8
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	e057      	b.n	8005140 <UART_SetConfig+0x1a4>
 8005090:	231b      	movs	r3, #27
 8005092:	2218      	movs	r2, #24
 8005094:	4694      	mov	ip, r2
 8005096:	44bc      	add	ip, r7
 8005098:	4463      	add	r3, ip
 800509a:	2210      	movs	r2, #16
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	e04f      	b.n	8005140 <UART_SetConfig+0x1a4>
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a89      	ldr	r2, [pc, #548]	; (80052cc <UART_SetConfig+0x330>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d143      	bne.n	8005132 <UART_SetConfig+0x196>
 80050aa:	4b8b      	ldr	r3, [pc, #556]	; (80052d8 <UART_SetConfig+0x33c>)
 80050ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050ae:	23c0      	movs	r3, #192	; 0xc0
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	4013      	ands	r3, r2
 80050b4:	22c0      	movs	r2, #192	; 0xc0
 80050b6:	0112      	lsls	r2, r2, #4
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d02a      	beq.n	8005112 <UART_SetConfig+0x176>
 80050bc:	22c0      	movs	r2, #192	; 0xc0
 80050be:	0112      	lsls	r2, r2, #4
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d82e      	bhi.n	8005122 <UART_SetConfig+0x186>
 80050c4:	2280      	movs	r2, #128	; 0x80
 80050c6:	0112      	lsls	r2, r2, #4
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d012      	beq.n	80050f2 <UART_SetConfig+0x156>
 80050cc:	2280      	movs	r2, #128	; 0x80
 80050ce:	0112      	lsls	r2, r2, #4
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d826      	bhi.n	8005122 <UART_SetConfig+0x186>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <UART_SetConfig+0x146>
 80050d8:	2280      	movs	r2, #128	; 0x80
 80050da:	00d2      	lsls	r2, r2, #3
 80050dc:	4293      	cmp	r3, r2
 80050de:	d010      	beq.n	8005102 <UART_SetConfig+0x166>
 80050e0:	e01f      	b.n	8005122 <UART_SetConfig+0x186>
 80050e2:	231b      	movs	r3, #27
 80050e4:	2218      	movs	r2, #24
 80050e6:	4694      	mov	ip, r2
 80050e8:	44bc      	add	ip, r7
 80050ea:	4463      	add	r3, ip
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	e026      	b.n	8005140 <UART_SetConfig+0x1a4>
 80050f2:	231b      	movs	r3, #27
 80050f4:	2218      	movs	r2, #24
 80050f6:	4694      	mov	ip, r2
 80050f8:	44bc      	add	ip, r7
 80050fa:	4463      	add	r3, ip
 80050fc:	2202      	movs	r2, #2
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	e01e      	b.n	8005140 <UART_SetConfig+0x1a4>
 8005102:	231b      	movs	r3, #27
 8005104:	2218      	movs	r2, #24
 8005106:	4694      	mov	ip, r2
 8005108:	44bc      	add	ip, r7
 800510a:	4463      	add	r3, ip
 800510c:	2204      	movs	r2, #4
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	e016      	b.n	8005140 <UART_SetConfig+0x1a4>
 8005112:	231b      	movs	r3, #27
 8005114:	2218      	movs	r2, #24
 8005116:	4694      	mov	ip, r2
 8005118:	44bc      	add	ip, r7
 800511a:	4463      	add	r3, ip
 800511c:	2208      	movs	r2, #8
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e00e      	b.n	8005140 <UART_SetConfig+0x1a4>
 8005122:	231b      	movs	r3, #27
 8005124:	2218      	movs	r2, #24
 8005126:	4694      	mov	ip, r2
 8005128:	44bc      	add	ip, r7
 800512a:	4463      	add	r3, ip
 800512c:	2210      	movs	r2, #16
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	e006      	b.n	8005140 <UART_SetConfig+0x1a4>
 8005132:	231b      	movs	r3, #27
 8005134:	2218      	movs	r2, #24
 8005136:	4694      	mov	ip, r2
 8005138:	44bc      	add	ip, r7
 800513a:	4463      	add	r3, ip
 800513c:	2210      	movs	r2, #16
 800513e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a61      	ldr	r2, [pc, #388]	; (80052cc <UART_SetConfig+0x330>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d000      	beq.n	800514c <UART_SetConfig+0x1b0>
 800514a:	e088      	b.n	800525e <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800514c:	231b      	movs	r3, #27
 800514e:	2218      	movs	r2, #24
 8005150:	4694      	mov	ip, r2
 8005152:	44bc      	add	ip, r7
 8005154:	4463      	add	r3, ip
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d01d      	beq.n	8005198 <UART_SetConfig+0x1fc>
 800515c:	dc20      	bgt.n	80051a0 <UART_SetConfig+0x204>
 800515e:	2b04      	cmp	r3, #4
 8005160:	d015      	beq.n	800518e <UART_SetConfig+0x1f2>
 8005162:	dc1d      	bgt.n	80051a0 <UART_SetConfig+0x204>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <UART_SetConfig+0x1d2>
 8005168:	2b02      	cmp	r3, #2
 800516a:	d005      	beq.n	8005178 <UART_SetConfig+0x1dc>
 800516c:	e018      	b.n	80051a0 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800516e:	f7fe ff2f 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8005172:	0003      	movs	r3, r0
 8005174:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005176:	e01d      	b.n	80051b4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005178:	4b57      	ldr	r3, [pc, #348]	; (80052d8 <UART_SetConfig+0x33c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2210      	movs	r2, #16
 800517e:	4013      	ands	r3, r2
 8005180:	d002      	beq.n	8005188 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005182:	4b56      	ldr	r3, [pc, #344]	; (80052dc <UART_SetConfig+0x340>)
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005186:	e015      	b.n	80051b4 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8005188:	4b55      	ldr	r3, [pc, #340]	; (80052e0 <UART_SetConfig+0x344>)
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800518c:	e012      	b.n	80051b4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800518e:	f7fe fe6f 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8005192:	0003      	movs	r3, r0
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005196:	e00d      	b.n	80051b4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005198:	2380      	movs	r3, #128	; 0x80
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800519e:	e009      	b.n	80051b4 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80051a4:	231a      	movs	r3, #26
 80051a6:	2218      	movs	r2, #24
 80051a8:	4694      	mov	ip, r2
 80051aa:	44bc      	add	ip, r7
 80051ac:	4463      	add	r3, ip
 80051ae:	2201      	movs	r2, #1
 80051b0:	701a      	strb	r2, [r3, #0]
        break;
 80051b2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d100      	bne.n	80051bc <UART_SetConfig+0x220>
 80051ba:	e139      	b.n	8005430 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	0013      	movs	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	189b      	adds	r3, r3, r2
 80051c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d305      	bcc.n	80051d8 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d907      	bls.n	80051e8 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 80051d8:	231a      	movs	r3, #26
 80051da:	2218      	movs	r2, #24
 80051dc:	4694      	mov	ip, r2
 80051de:	44bc      	add	ip, r7
 80051e0:	4463      	add	r3, ip
 80051e2:	2201      	movs	r2, #1
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e123      	b.n	8005430 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	2300      	movs	r3, #0
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	6939      	ldr	r1, [r7, #16]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	000b      	movs	r3, r1
 80051f6:	0e1b      	lsrs	r3, r3, #24
 80051f8:	0010      	movs	r0, r2
 80051fa:	0205      	lsls	r5, r0, #8
 80051fc:	431d      	orrs	r5, r3
 80051fe:	000b      	movs	r3, r1
 8005200:	021c      	lsls	r4, r3, #8
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	085b      	lsrs	r3, r3, #1
 8005208:	60bb      	str	r3, [r7, #8]
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	68b8      	ldr	r0, [r7, #8]
 8005210:	68f9      	ldr	r1, [r7, #12]
 8005212:	1900      	adds	r0, r0, r4
 8005214:	4169      	adcs	r1, r5
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	2300      	movs	r3, #0
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f7fb f8f8 	bl	8000418 <__aeabi_uldivmod>
 8005228:	0002      	movs	r2, r0
 800522a:	000b      	movs	r3, r1
 800522c:	0013      	movs	r3, r2
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005232:	23c0      	movs	r3, #192	; 0xc0
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	429a      	cmp	r2, r3
 8005238:	d309      	bcc.n	800524e <UART_SetConfig+0x2b2>
 800523a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	035b      	lsls	r3, r3, #13
 8005240:	429a      	cmp	r2, r3
 8005242:	d204      	bcs.n	800524e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800524a:	60da      	str	r2, [r3, #12]
 800524c:	e0f0      	b.n	8005430 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800524e:	231a      	movs	r3, #26
 8005250:	2218      	movs	r2, #24
 8005252:	4694      	mov	ip, r2
 8005254:	44bc      	add	ip, r7
 8005256:	4463      	add	r3, ip
 8005258:	2201      	movs	r2, #1
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e0e8      	b.n	8005430 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	69da      	ldr	r2, [r3, #28]
 8005262:	2380      	movs	r3, #128	; 0x80
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	429a      	cmp	r2, r3
 8005268:	d000      	beq.n	800526c <UART_SetConfig+0x2d0>
 800526a:	e087      	b.n	800537c <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 800526c:	231b      	movs	r3, #27
 800526e:	2218      	movs	r2, #24
 8005270:	4694      	mov	ip, r2
 8005272:	44bc      	add	ip, r7
 8005274:	4463      	add	r3, ip
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d835      	bhi.n	80052e8 <UART_SetConfig+0x34c>
 800527c:	009a      	lsls	r2, r3, #2
 800527e:	4b19      	ldr	r3, [pc, #100]	; (80052e4 <UART_SetConfig+0x348>)
 8005280:	18d3      	adds	r3, r2, r3
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005286:	f7fe fea3 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 800528a:	0003      	movs	r3, r0
 800528c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800528e:	e035      	b.n	80052fc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005290:	f7fe feb4 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 8005294:	0003      	movs	r3, r0
 8005296:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005298:	e030      	b.n	80052fc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800529a:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <UART_SetConfig+0x33c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2210      	movs	r2, #16
 80052a0:	4013      	ands	r3, r2
 80052a2:	d002      	beq.n	80052aa <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052a4:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <UART_SetConfig+0x340>)
 80052a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052a8:	e028      	b.n	80052fc <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 80052aa:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <UART_SetConfig+0x344>)
 80052ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052ae:	e025      	b.n	80052fc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b0:	f7fe fdde 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 80052b4:	0003      	movs	r3, r0
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052b8:	e020      	b.n	80052fc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ba:	2380      	movs	r3, #128	; 0x80
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052c0:	e01c      	b.n	80052fc <UART_SetConfig+0x360>
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	efff69f3 	.word	0xefff69f3
 80052c8:	ffffcfff 	.word	0xffffcfff
 80052cc:	40004800 	.word	0x40004800
 80052d0:	fffff4ff 	.word	0xfffff4ff
 80052d4:	40004400 	.word	0x40004400
 80052d8:	40021000 	.word	0x40021000
 80052dc:	003d0900 	.word	0x003d0900
 80052e0:	00f42400 	.word	0x00f42400
 80052e4:	080067f8 	.word	0x080067f8
      default:
        pclk = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80052ec:	231a      	movs	r3, #26
 80052ee:	2218      	movs	r2, #24
 80052f0:	4694      	mov	ip, r2
 80052f2:	44bc      	add	ip, r7
 80052f4:	4463      	add	r3, ip
 80052f6:	2201      	movs	r2, #1
 80052f8:	701a      	strb	r2, [r3, #0]
        break;
 80052fa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d100      	bne.n	8005304 <UART_SetConfig+0x368>
 8005302:	e095      	b.n	8005430 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	005a      	lsls	r2, r3, #1
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	085b      	lsrs	r3, r3, #1
 800530e:	18d2      	adds	r2, r2, r3
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	0019      	movs	r1, r3
 8005316:	0010      	movs	r0, r2
 8005318:	f7fa ff08 	bl	800012c <__udivsi3>
 800531c:	0003      	movs	r3, r0
 800531e:	b29b      	uxth	r3, r3
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005324:	2b0f      	cmp	r3, #15
 8005326:	d921      	bls.n	800536c <UART_SetConfig+0x3d0>
 8005328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800532a:	2380      	movs	r3, #128	; 0x80
 800532c:	025b      	lsls	r3, r3, #9
 800532e:	429a      	cmp	r2, r3
 8005330:	d21c      	bcs.n	800536c <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	b29a      	uxth	r2, r3
 8005336:	200e      	movs	r0, #14
 8005338:	2418      	movs	r4, #24
 800533a:	193b      	adds	r3, r7, r4
 800533c:	181b      	adds	r3, r3, r0
 800533e:	210f      	movs	r1, #15
 8005340:	438a      	bics	r2, r1
 8005342:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	b29b      	uxth	r3, r3
 800534a:	2207      	movs	r2, #7
 800534c:	4013      	ands	r3, r2
 800534e:	b299      	uxth	r1, r3
 8005350:	193b      	adds	r3, r7, r4
 8005352:	181b      	adds	r3, r3, r0
 8005354:	193a      	adds	r2, r7, r4
 8005356:	1812      	adds	r2, r2, r0
 8005358:	8812      	ldrh	r2, [r2, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	193a      	adds	r2, r7, r4
 8005364:	1812      	adds	r2, r2, r0
 8005366:	8812      	ldrh	r2, [r2, #0]
 8005368:	60da      	str	r2, [r3, #12]
 800536a:	e061      	b.n	8005430 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800536c:	231a      	movs	r3, #26
 800536e:	2218      	movs	r2, #24
 8005370:	4694      	mov	ip, r2
 8005372:	44bc      	add	ip, r7
 8005374:	4463      	add	r3, ip
 8005376:	2201      	movs	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	e059      	b.n	8005430 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800537c:	231b      	movs	r3, #27
 800537e:	2218      	movs	r2, #24
 8005380:	4694      	mov	ip, r2
 8005382:	44bc      	add	ip, r7
 8005384:	4463      	add	r3, ip
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d822      	bhi.n	80053d2 <UART_SetConfig+0x436>
 800538c:	009a      	lsls	r2, r3, #2
 800538e:	4b30      	ldr	r3, [pc, #192]	; (8005450 <UART_SetConfig+0x4b4>)
 8005390:	18d3      	adds	r3, r2, r3
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005396:	f7fe fe1b 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 800539a:	0003      	movs	r3, r0
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800539e:	e022      	b.n	80053e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a0:	f7fe fe2c 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 80053a4:	0003      	movs	r3, r0
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053a8:	e01d      	b.n	80053e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053aa:	4b2a      	ldr	r3, [pc, #168]	; (8005454 <UART_SetConfig+0x4b8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2210      	movs	r2, #16
 80053b0:	4013      	ands	r3, r2
 80053b2:	d002      	beq.n	80053ba <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80053b4:	4b28      	ldr	r3, [pc, #160]	; (8005458 <UART_SetConfig+0x4bc>)
 80053b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053b8:	e015      	b.n	80053e6 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 80053ba:	4b28      	ldr	r3, [pc, #160]	; (800545c <UART_SetConfig+0x4c0>)
 80053bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053be:	e012      	b.n	80053e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c0:	f7fe fd56 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 80053c4:	0003      	movs	r3, r0
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053c8:	e00d      	b.n	80053e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ca:	2380      	movs	r3, #128	; 0x80
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053d0:	e009      	b.n	80053e6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80053d6:	231a      	movs	r3, #26
 80053d8:	2218      	movs	r2, #24
 80053da:	4694      	mov	ip, r2
 80053dc:	44bc      	add	ip, r7
 80053de:	4463      	add	r3, ip
 80053e0:	2201      	movs	r2, #1
 80053e2:	701a      	strb	r2, [r3, #0]
        break;
 80053e4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d021      	beq.n	8005430 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	085a      	lsrs	r2, r3, #1
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	18d2      	adds	r2, r2, r3
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	0019      	movs	r1, r3
 80053fc:	0010      	movs	r0, r2
 80053fe:	f7fa fe95 	bl	800012c <__udivsi3>
 8005402:	0003      	movs	r3, r0
 8005404:	b29b      	uxth	r3, r3
 8005406:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	2b0f      	cmp	r3, #15
 800540c:	d909      	bls.n	8005422 <UART_SetConfig+0x486>
 800540e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005410:	2380      	movs	r3, #128	; 0x80
 8005412:	025b      	lsls	r3, r3, #9
 8005414:	429a      	cmp	r2, r3
 8005416:	d204      	bcs.n	8005422 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800541e:	60da      	str	r2, [r3, #12]
 8005420:	e006      	b.n	8005430 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005422:	231a      	movs	r3, #26
 8005424:	2218      	movs	r2, #24
 8005426:	4694      	mov	ip, r2
 8005428:	44bc      	add	ip, r7
 800542a:	4463      	add	r3, ip
 800542c:	2201      	movs	r2, #1
 800542e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	2200      	movs	r2, #0
 8005434:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	2200      	movs	r2, #0
 800543a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800543c:	231a      	movs	r3, #26
 800543e:	2218      	movs	r2, #24
 8005440:	4694      	mov	ip, r2
 8005442:	44bc      	add	ip, r7
 8005444:	4463      	add	r3, ip
 8005446:	781b      	ldrb	r3, [r3, #0]
}
 8005448:	0018      	movs	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	b00e      	add	sp, #56	; 0x38
 800544e:	bdb0      	pop	{r4, r5, r7, pc}
 8005450:	0800681c 	.word	0x0800681c
 8005454:	40021000 	.word	0x40021000
 8005458:	003d0900 	.word	0x003d0900
 800545c:	00f42400 	.word	0x00f42400

08005460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	2201      	movs	r2, #1
 800546e:	4013      	ands	r3, r2
 8005470:	d00b      	beq.n	800548a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a4a      	ldr	r2, [pc, #296]	; (80055a4 <UART_AdvFeatureConfig+0x144>)
 800547a:	4013      	ands	r3, r2
 800547c:	0019      	movs	r1, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2202      	movs	r2, #2
 8005490:	4013      	ands	r3, r2
 8005492:	d00b      	beq.n	80054ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	4a43      	ldr	r2, [pc, #268]	; (80055a8 <UART_AdvFeatureConfig+0x148>)
 800549c:	4013      	ands	r3, r2
 800549e:	0019      	movs	r1, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	2204      	movs	r2, #4
 80054b2:	4013      	ands	r3, r2
 80054b4:	d00b      	beq.n	80054ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4a3b      	ldr	r2, [pc, #236]	; (80055ac <UART_AdvFeatureConfig+0x14c>)
 80054be:	4013      	ands	r3, r2
 80054c0:	0019      	movs	r1, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	2208      	movs	r2, #8
 80054d4:	4013      	ands	r3, r2
 80054d6:	d00b      	beq.n	80054f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	4a34      	ldr	r2, [pc, #208]	; (80055b0 <UART_AdvFeatureConfig+0x150>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	0019      	movs	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	2210      	movs	r2, #16
 80054f6:	4013      	ands	r3, r2
 80054f8:	d00b      	beq.n	8005512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	4a2c      	ldr	r2, [pc, #176]	; (80055b4 <UART_AdvFeatureConfig+0x154>)
 8005502:	4013      	ands	r3, r2
 8005504:	0019      	movs	r1, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	2220      	movs	r2, #32
 8005518:	4013      	ands	r3, r2
 800551a:	d00b      	beq.n	8005534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	4a25      	ldr	r2, [pc, #148]	; (80055b8 <UART_AdvFeatureConfig+0x158>)
 8005524:	4013      	ands	r3, r2
 8005526:	0019      	movs	r1, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	2240      	movs	r2, #64	; 0x40
 800553a:	4013      	ands	r3, r2
 800553c:	d01d      	beq.n	800557a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4a1d      	ldr	r2, [pc, #116]	; (80055bc <UART_AdvFeatureConfig+0x15c>)
 8005546:	4013      	ands	r3, r2
 8005548:	0019      	movs	r1, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	035b      	lsls	r3, r3, #13
 800555e:	429a      	cmp	r2, r3
 8005560:	d10b      	bne.n	800557a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4a15      	ldr	r2, [pc, #84]	; (80055c0 <UART_AdvFeatureConfig+0x160>)
 800556a:	4013      	ands	r3, r2
 800556c:	0019      	movs	r1, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	2280      	movs	r2, #128	; 0x80
 8005580:	4013      	ands	r3, r2
 8005582:	d00b      	beq.n	800559c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	4a0e      	ldr	r2, [pc, #56]	; (80055c4 <UART_AdvFeatureConfig+0x164>)
 800558c:	4013      	ands	r3, r2
 800558e:	0019      	movs	r1, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]
  }
}
 800559c:	46c0      	nop			; (mov r8, r8)
 800559e:	46bd      	mov	sp, r7
 80055a0:	b002      	add	sp, #8
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	fffdffff 	.word	0xfffdffff
 80055a8:	fffeffff 	.word	0xfffeffff
 80055ac:	fffbffff 	.word	0xfffbffff
 80055b0:	ffff7fff 	.word	0xffff7fff
 80055b4:	ffffefff 	.word	0xffffefff
 80055b8:	ffffdfff 	.word	0xffffdfff
 80055bc:	ffefffff 	.word	0xffefffff
 80055c0:	ff9fffff 	.word	0xff9fffff
 80055c4:	fff7ffff 	.word	0xfff7ffff

080055c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2280      	movs	r2, #128	; 0x80
 80055d4:	2100      	movs	r1, #0
 80055d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055d8:	f7fc fc92 	bl	8001f00 <HAL_GetTick>
 80055dc:	0003      	movs	r3, r0
 80055de:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2208      	movs	r2, #8
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d10c      	bne.n	8005608 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2280      	movs	r2, #128	; 0x80
 80055f2:	0391      	lsls	r1, r2, #14
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4a17      	ldr	r2, [pc, #92]	; (8005654 <UART_CheckIdleState+0x8c>)
 80055f8:	9200      	str	r2, [sp, #0]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f000 f82c 	bl	8005658 <UART_WaitOnFlagUntilTimeout>
 8005600:	1e03      	subs	r3, r0, #0
 8005602:	d001      	beq.n	8005608 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e021      	b.n	800564c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2204      	movs	r2, #4
 8005610:	4013      	ands	r3, r2
 8005612:	2b04      	cmp	r3, #4
 8005614:	d10c      	bne.n	8005630 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2280      	movs	r2, #128	; 0x80
 800561a:	03d1      	lsls	r1, r2, #15
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4a0d      	ldr	r2, [pc, #52]	; (8005654 <UART_CheckIdleState+0x8c>)
 8005620:	9200      	str	r2, [sp, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	f000 f818 	bl	8005658 <UART_WaitOnFlagUntilTimeout>
 8005628:	1e03      	subs	r3, r0, #0
 800562a:	d001      	beq.n	8005630 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e00d      	b.n	800564c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2274      	movs	r2, #116	; 0x74
 8005646:	2100      	movs	r1, #0
 8005648:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	0018      	movs	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	b004      	add	sp, #16
 8005652:	bd80      	pop	{r7, pc}
 8005654:	01ffffff 	.word	0x01ffffff

08005658 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b094      	sub	sp, #80	; 0x50
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	1dfb      	adds	r3, r7, #7
 8005666:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005668:	e0a3      	b.n	80057b2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800566a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800566c:	3301      	adds	r3, #1
 800566e:	d100      	bne.n	8005672 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005670:	e09f      	b.n	80057b2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005672:	f7fc fc45 	bl	8001f00 <HAL_GetTick>
 8005676:	0002      	movs	r2, r0
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800567e:	429a      	cmp	r2, r3
 8005680:	d302      	bcc.n	8005688 <UART_WaitOnFlagUntilTimeout+0x30>
 8005682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005684:	2b00      	cmp	r3, #0
 8005686:	d13d      	bne.n	8005704 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005688:	f3ef 8310 	mrs	r3, PRIMASK
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005690:	647b      	str	r3, [r7, #68]	; 0x44
 8005692:	2301      	movs	r3, #1
 8005694:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	f383 8810 	msr	PRIMASK, r3
}
 800569c:	46c0      	nop			; (mov r8, r8)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	494c      	ldr	r1, [pc, #304]	; (80057dc <UART_WaitOnFlagUntilTimeout+0x184>)
 80056aa:	400a      	ands	r2, r1
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	f383 8810 	msr	PRIMASK, r3
}
 80056b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ba:	f3ef 8310 	mrs	r3, PRIMASK
 80056be:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80056c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c2:	643b      	str	r3, [r7, #64]	; 0x40
 80056c4:	2301      	movs	r3, #1
 80056c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	f383 8810 	msr	PRIMASK, r3
}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2101      	movs	r1, #1
 80056dc:	438a      	bics	r2, r1
 80056de:	609a      	str	r2, [r3, #8]
 80056e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e6:	f383 8810 	msr	PRIMASK, r3
}
 80056ea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2220      	movs	r2, #32
 80056f6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2274      	movs	r2, #116	; 0x74
 80056fc:	2100      	movs	r1, #0
 80056fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e067      	b.n	80057d4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2204      	movs	r2, #4
 800570c:	4013      	ands	r3, r2
 800570e:	d050      	beq.n	80057b2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69da      	ldr	r2, [r3, #28]
 8005716:	2380      	movs	r3, #128	; 0x80
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	401a      	ands	r2, r3
 800571c:	2380      	movs	r3, #128	; 0x80
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	429a      	cmp	r2, r3
 8005722:	d146      	bne.n	80057b2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2280      	movs	r2, #128	; 0x80
 800572a:	0112      	lsls	r2, r2, #4
 800572c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800572e:	f3ef 8310 	mrs	r3, PRIMASK
 8005732:	613b      	str	r3, [r7, #16]
  return(result);
 8005734:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005738:	2301      	movs	r3, #1
 800573a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f383 8810 	msr	PRIMASK, r3
}
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4923      	ldr	r1, [pc, #140]	; (80057dc <UART_WaitOnFlagUntilTimeout+0x184>)
 8005750:	400a      	ands	r2, r1
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005756:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	f383 8810 	msr	PRIMASK, r3
}
 800575e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005760:	f3ef 8310 	mrs	r3, PRIMASK
 8005764:	61fb      	str	r3, [r7, #28]
  return(result);
 8005766:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005768:	64bb      	str	r3, [r7, #72]	; 0x48
 800576a:	2301      	movs	r3, #1
 800576c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	f383 8810 	msr	PRIMASK, r3
}
 8005774:	46c0      	nop			; (mov r8, r8)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2101      	movs	r1, #1
 8005782:	438a      	bics	r2, r1
 8005784:	609a      	str	r2, [r3, #8]
 8005786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	f383 8810 	msr	PRIMASK, r3
}
 8005790:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2280      	movs	r2, #128	; 0x80
 80057a2:	2120      	movs	r1, #32
 80057a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2274      	movs	r2, #116	; 0x74
 80057aa:	2100      	movs	r1, #0
 80057ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e010      	b.n	80057d4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	4013      	ands	r3, r2
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	425a      	negs	r2, r3
 80057c2:	4153      	adcs	r3, r2
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	001a      	movs	r2, r3
 80057c8:	1dfb      	adds	r3, r7, #7
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d100      	bne.n	80057d2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80057d0:	e74b      	b.n	800566a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	0018      	movs	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	b014      	add	sp, #80	; 0x50
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	fffffe5f 	.word	0xfffffe5f

080057e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b090      	sub	sp, #64	; 0x40
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	1dbb      	adds	r3, r7, #6
 80057ec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	1dba      	adds	r2, r7, #6
 80057f8:	2158      	movs	r1, #88	; 0x58
 80057fa:	8812      	ldrh	r2, [r2, #0]
 80057fc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2280      	movs	r2, #128	; 0x80
 8005802:	2100      	movs	r1, #0
 8005804:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2222      	movs	r2, #34	; 0x22
 800580a:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	2b00      	cmp	r3, #0
 8005812:	d02b      	beq.n	800586c <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005818:	4a3f      	ldr	r2, [pc, #252]	; (8005918 <UART_Start_Receive_DMA+0x138>)
 800581a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005820:	4a3e      	ldr	r2, [pc, #248]	; (800591c <UART_Start_Receive_DMA+0x13c>)
 8005822:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	4a3d      	ldr	r2, [pc, #244]	; (8005920 <UART_Start_Receive_DMA+0x140>)
 800582a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005830:	2200      	movs	r2, #0
 8005832:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3324      	adds	r3, #36	; 0x24
 800583e:	0019      	movs	r1, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005844:	001a      	movs	r2, r3
 8005846:	1dbb      	adds	r3, r7, #6
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	f7fc fcdd 	bl	8002208 <HAL_DMA_Start_IT>
 800584e:	1e03      	subs	r3, r0, #0
 8005850:	d00c      	beq.n	800586c <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2280      	movs	r2, #128	; 0x80
 8005856:	2110      	movs	r1, #16
 8005858:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2274      	movs	r2, #116	; 0x74
 800585e:	2100      	movs	r1, #0
 8005860:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e050      	b.n	800590e <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2274      	movs	r2, #116	; 0x74
 8005870:	2100      	movs	r1, #0
 8005872:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005874:	f3ef 8310 	mrs	r3, PRIMASK
 8005878:	613b      	str	r3, [r7, #16]
  return(result);
 800587a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800587c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800587e:	2301      	movs	r3, #1
 8005880:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f383 8810 	msr	PRIMASK, r3
}
 8005888:	46c0      	nop			; (mov r8, r8)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2180      	movs	r1, #128	; 0x80
 8005896:	0049      	lsls	r1, r1, #1
 8005898:	430a      	orrs	r2, r1
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	f383 8810 	msr	PRIMASK, r3
}
 80058a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a8:	f3ef 8310 	mrs	r3, PRIMASK
 80058ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80058ae:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80058b2:	2301      	movs	r3, #1
 80058b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	f383 8810 	msr	PRIMASK, r3
}
 80058bc:	46c0      	nop			; (mov r8, r8)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2101      	movs	r1, #1
 80058ca:	430a      	orrs	r2, r1
 80058cc:	609a      	str	r2, [r3, #8]
 80058ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	f383 8810 	msr	PRIMASK, r3
}
 80058d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058da:	f3ef 8310 	mrs	r3, PRIMASK
 80058de:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
 80058e4:	2301      	movs	r3, #1
 80058e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	f383 8810 	msr	PRIMASK, r3
}
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2140      	movs	r1, #64	; 0x40
 80058fc:	430a      	orrs	r2, r1
 80058fe:	609a      	str	r2, [r3, #8]
 8005900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005902:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	f383 8810 	msr	PRIMASK, r3
}
 800590a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	0018      	movs	r0, r3
 8005910:	46bd      	mov	sp, r7
 8005912:	b010      	add	sp, #64	; 0x40
 8005914:	bd80      	pop	{r7, pc}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	08005a31 	.word	0x08005a31
 800591c:	08005b59 	.word	0x08005b59
 8005920:	08005b95 	.word	0x08005b95

08005924 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800592c:	f3ef 8310 	mrs	r3, PRIMASK
 8005930:	60bb      	str	r3, [r7, #8]
  return(result);
 8005932:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	2301      	movs	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f383 8810 	msr	PRIMASK, r3
}
 8005940:	46c0      	nop			; (mov r8, r8)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	21c0      	movs	r1, #192	; 0xc0
 800594e:	438a      	bics	r2, r1
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f383 8810 	msr	PRIMASK, r3
}
 800595c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005964:	46c0      	nop			; (mov r8, r8)
 8005966:	46bd      	mov	sp, r7
 8005968:	b006      	add	sp, #24
 800596a:	bd80      	pop	{r7, pc}

0800596c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08e      	sub	sp, #56	; 0x38
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005974:	f3ef 8310 	mrs	r3, PRIMASK
 8005978:	617b      	str	r3, [r7, #20]
  return(result);
 800597a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
 800597e:	2301      	movs	r3, #1
 8005980:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	f383 8810 	msr	PRIMASK, r3
}
 8005988:	46c0      	nop			; (mov r8, r8)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4925      	ldr	r1, [pc, #148]	; (8005a2c <UART_EndRxTransfer+0xc0>)
 8005996:	400a      	ands	r2, r1
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f383 8810 	msr	PRIMASK, r3
}
 80059a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a6:	f3ef 8310 	mrs	r3, PRIMASK
 80059aa:	623b      	str	r3, [r7, #32]
  return(result);
 80059ac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ae:	633b      	str	r3, [r7, #48]	; 0x30
 80059b0:	2301      	movs	r3, #1
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	f383 8810 	msr	PRIMASK, r3
}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2101      	movs	r1, #1
 80059c8:	438a      	bics	r2, r1
 80059ca:	609a      	str	r2, [r3, #8]
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	f383 8810 	msr	PRIMASK, r3
}
 80059d6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d118      	bne.n	8005a12 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e0:	f3ef 8310 	mrs	r3, PRIMASK
 80059e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80059e6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ea:	2301      	movs	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f383 8810 	msr	PRIMASK, r3
}
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2110      	movs	r1, #16
 8005a02:	438a      	bics	r2, r1
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f383 8810 	msr	PRIMASK, r3
}
 8005a10:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005a24:	46c0      	nop			; (mov r8, r8)
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b00e      	add	sp, #56	; 0x38
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	fffffedf 	.word	0xfffffedf

08005a30 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b094      	sub	sp, #80	; 0x50
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2220      	movs	r2, #32
 8005a46:	4013      	ands	r3, r2
 8005a48:	d16e      	bne.n	8005b28 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8005a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a4c:	225a      	movs	r2, #90	; 0x5a
 8005a4e:	2100      	movs	r1, #0
 8005a50:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a52:	f3ef 8310 	mrs	r3, PRIMASK
 8005a56:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a58:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	f383 8810 	msr	PRIMASK, r3
}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4938      	ldr	r1, [pc, #224]	; (8005b54 <UART_DMAReceiveCplt+0x124>)
 8005a74:	400a      	ands	r2, r1
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	f383 8810 	msr	PRIMASK, r3
}
 8005a82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a84:	f3ef 8310 	mrs	r3, PRIMASK
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a8e:	2301      	movs	r3, #1
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	f383 8810 	msr	PRIMASK, r3
}
 8005a98:	46c0      	nop			; (mov r8, r8)
 8005a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	438a      	bics	r2, r1
 8005aa8:	609a      	str	r2, [r3, #8]
 8005aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	f383 8810 	msr	PRIMASK, r3
}
 8005ab4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005abe:	643b      	str	r3, [r7, #64]	; 0x40
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac6:	f383 8810 	msr	PRIMASK, r3
}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2140      	movs	r1, #64	; 0x40
 8005ad8:	438a      	bics	r2, r1
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ade:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae2:	f383 8810 	msr	PRIMASK, r3
}
 8005ae6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aea:	2220      	movs	r2, #32
 8005aec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d118      	bne.n	8005b28 <UART_DMAReceiveCplt+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af6:	f3ef 8310 	mrs	r3, PRIMASK
 8005afa:	60fb      	str	r3, [r7, #12]
  return(result);
 8005afc:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b00:	2301      	movs	r3, #1
 8005b02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f383 8810 	msr	PRIMASK, r3
}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2110      	movs	r1, #16
 8005b18:	438a      	bics	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f383 8810 	msr	PRIMASK, r3
}
 8005b26:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d108      	bne.n	8005b42 <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b32:	2258      	movs	r2, #88	; 0x58
 8005b34:	5a9a      	ldrh	r2, [r3, r2]
 8005b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b38:	0011      	movs	r1, r2
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7fb ff28 	bl	8001990 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b40:	e003      	b.n	8005b4a <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8005b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b44:	0018      	movs	r0, r3
 8005b46:	f7ff fa11 	bl	8004f6c <HAL_UART_RxCpltCallback>
}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b014      	add	sp, #80	; 0x50
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	fffffeff 	.word	0xfffffeff

08005b58 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d10a      	bne.n	8005b84 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2258      	movs	r2, #88	; 0x58
 8005b72:	5a9b      	ldrh	r3, [r3, r2]
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	0011      	movs	r1, r2
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f7fb ff07 	bl	8001990 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b82:	e003      	b.n	8005b8c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	0018      	movs	r0, r3
 8005b88:	f7ff f9f8 	bl	8004f7c <HAL_UART_RxHalfCpltCallback>
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b004      	add	sp, #16
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ba6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2280      	movs	r2, #128	; 0x80
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	2b80      	cmp	r3, #128	; 0x80
 8005bba:	d10a      	bne.n	8005bd2 <UART_DMAError+0x3e>
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	2b21      	cmp	r3, #33	; 0x21
 8005bc0:	d107      	bne.n	8005bd2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2252      	movs	r2, #82	; 0x52
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f7ff fea9 	bl	8005924 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2240      	movs	r2, #64	; 0x40
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d10a      	bne.n	8005bf6 <UART_DMAError+0x62>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b22      	cmp	r3, #34	; 0x22
 8005be4:	d107      	bne.n	8005bf6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	225a      	movs	r2, #90	; 0x5a
 8005bea:	2100      	movs	r1, #0
 8005bec:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f7ff febb 	bl	800596c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2280      	movs	r2, #128	; 0x80
 8005bfa:	589b      	ldr	r3, [r3, r2]
 8005bfc:	2210      	movs	r2, #16
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2180      	movs	r1, #128	; 0x80
 8005c04:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f7ff f9bf 	bl	8004f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	46bd      	mov	sp, r7
 8005c12:	b006      	add	sp, #24
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	225a      	movs	r2, #90	; 0x5a
 8005c28:	2100      	movs	r1, #0
 8005c2a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2252      	movs	r2, #82	; 0x52
 8005c30:	2100      	movs	r1, #0
 8005c32:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	0018      	movs	r0, r3
 8005c38:	f7ff f9a8 	bl	8004f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c3c:	46c0      	nop			; (mov r8, r8)
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	b004      	add	sp, #16
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c50:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c52:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	2301      	movs	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f383 8810 	msr	PRIMASK, r3
}
 8005c60:	46c0      	nop			; (mov r8, r8)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2140      	movs	r1, #64	; 0x40
 8005c6e:	438a      	bics	r2, r1
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f383 8810 	msr	PRIMASK, r3
}
 8005c7c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f7ff f965 	bl	8004f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c92:	46c0      	nop			; (mov r8, r8)
 8005c94:	46bd      	mov	sp, r7
 8005c96:	b006      	add	sp, #24
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ca2:	46c0      	nop			; (mov r8, r8)
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	b002      	add	sp, #8
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005caa:	b5b0      	push	{r4, r5, r7, lr}
 8005cac:	b08a      	sub	sp, #40	; 0x28
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	1dbb      	adds	r3, r7, #6
 8005cb6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cbc:	2b20      	cmp	r3, #32
 8005cbe:	d15e      	bne.n	8005d7e <HAL_UARTEx_ReceiveToIdle_DMA+0xd4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8005cc6:	1dbb      	adds	r3, r7, #6
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e056      	b.n	8005d80 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	2380      	movs	r3, #128	; 0x80
 8005cd8:	015b      	lsls	r3, r3, #5
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d109      	bne.n	8005cf2 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d105      	bne.n	8005cf2 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	4013      	ands	r3, r2
 8005cec:	d001      	beq.n	8005cf2 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
      {
        return  HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e046      	b.n	8005d80 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
      }
    }

    __HAL_LOCK(huart);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2274      	movs	r2, #116	; 0x74
 8005cf6:	5c9b      	ldrb	r3, [r3, r2]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e03f      	b.n	8005d80 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2274      	movs	r2, #116	; 0x74
 8005d04:	2101      	movs	r1, #1
 8005d06:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005d0e:	2527      	movs	r5, #39	; 0x27
 8005d10:	197c      	adds	r4, r7, r5
 8005d12:	1dbb      	adds	r3, r7, #6
 8005d14:	881a      	ldrh	r2, [r3, #0]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f7ff fd60 	bl	80057e0 <UART_Start_Receive_DMA>
 8005d20:	0003      	movs	r3, r0
 8005d22:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005d24:	197b      	adds	r3, r7, r5
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d124      	bne.n	8005d76 <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d11c      	bne.n	8005d6e <HAL_UARTEx_ReceiveToIdle_DMA+0xc4>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2210      	movs	r2, #16
 8005d3a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d40:	617b      	str	r3, [r7, #20]
  return(result);
 8005d42:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d44:	623b      	str	r3, [r7, #32]
 8005d46:	2301      	movs	r3, #1
 8005d48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	f383 8810 	msr	PRIMASK, r3
}
 8005d50:	46c0      	nop			; (mov r8, r8)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2110      	movs	r1, #16
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f383 8810 	msr	PRIMASK, r3
}
 8005d6c:	e003      	b.n	8005d76 <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005d6e:	2327      	movs	r3, #39	; 0x27
 8005d70:	18fb      	adds	r3, r7, r3
 8005d72:	2201      	movs	r2, #1
 8005d74:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8005d76:	2327      	movs	r3, #39	; 0x27
 8005d78:	18fb      	adds	r3, r7, r3
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	e000      	b.n	8005d80 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
  }
  else
  {
    return HAL_BUSY;
 8005d7e:	2302      	movs	r3, #2
  }
}
 8005d80:	0018      	movs	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b00a      	add	sp, #40	; 0x28
 8005d86:	bdb0      	pop	{r4, r5, r7, pc}

08005d88 <__errno>:
 8005d88:	4b01      	ldr	r3, [pc, #4]	; (8005d90 <__errno+0x8>)
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	4770      	bx	lr
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	2000000c 	.word	0x2000000c

08005d94 <__libc_init_array>:
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	2600      	movs	r6, #0
 8005d98:	4d0c      	ldr	r5, [pc, #48]	; (8005dcc <__libc_init_array+0x38>)
 8005d9a:	4c0d      	ldr	r4, [pc, #52]	; (8005dd0 <__libc_init_array+0x3c>)
 8005d9c:	1b64      	subs	r4, r4, r5
 8005d9e:	10a4      	asrs	r4, r4, #2
 8005da0:	42a6      	cmp	r6, r4
 8005da2:	d109      	bne.n	8005db8 <__libc_init_array+0x24>
 8005da4:	2600      	movs	r6, #0
 8005da6:	f000 fc6b 	bl	8006680 <_init>
 8005daa:	4d0a      	ldr	r5, [pc, #40]	; (8005dd4 <__libc_init_array+0x40>)
 8005dac:	4c0a      	ldr	r4, [pc, #40]	; (8005dd8 <__libc_init_array+0x44>)
 8005dae:	1b64      	subs	r4, r4, r5
 8005db0:	10a4      	asrs	r4, r4, #2
 8005db2:	42a6      	cmp	r6, r4
 8005db4:	d105      	bne.n	8005dc2 <__libc_init_array+0x2e>
 8005db6:	bd70      	pop	{r4, r5, r6, pc}
 8005db8:	00b3      	lsls	r3, r6, #2
 8005dba:	58eb      	ldr	r3, [r5, r3]
 8005dbc:	4798      	blx	r3
 8005dbe:	3601      	adds	r6, #1
 8005dc0:	e7ee      	b.n	8005da0 <__libc_init_array+0xc>
 8005dc2:	00b3      	lsls	r3, r6, #2
 8005dc4:	58eb      	ldr	r3, [r5, r3]
 8005dc6:	4798      	blx	r3
 8005dc8:	3601      	adds	r6, #1
 8005dca:	e7f2      	b.n	8005db2 <__libc_init_array+0x1e>
 8005dcc:	0800687c 	.word	0x0800687c
 8005dd0:	0800687c 	.word	0x0800687c
 8005dd4:	0800687c 	.word	0x0800687c
 8005dd8:	08006880 	.word	0x08006880

08005ddc <memcpy>:
 8005ddc:	2300      	movs	r3, #0
 8005dde:	b510      	push	{r4, lr}
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d100      	bne.n	8005de6 <memcpy+0xa>
 8005de4:	bd10      	pop	{r4, pc}
 8005de6:	5ccc      	ldrb	r4, [r1, r3]
 8005de8:	54c4      	strb	r4, [r0, r3]
 8005dea:	3301      	adds	r3, #1
 8005dec:	e7f8      	b.n	8005de0 <memcpy+0x4>

08005dee <memset>:
 8005dee:	0003      	movs	r3, r0
 8005df0:	1882      	adds	r2, r0, r2
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d100      	bne.n	8005df8 <memset+0xa>
 8005df6:	4770      	bx	lr
 8005df8:	7019      	strb	r1, [r3, #0]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	e7f9      	b.n	8005df2 <memset+0x4>
	...

08005e00 <siprintf>:
 8005e00:	b40e      	push	{r1, r2, r3}
 8005e02:	b500      	push	{lr}
 8005e04:	490b      	ldr	r1, [pc, #44]	; (8005e34 <siprintf+0x34>)
 8005e06:	b09c      	sub	sp, #112	; 0x70
 8005e08:	ab1d      	add	r3, sp, #116	; 0x74
 8005e0a:	9002      	str	r0, [sp, #8]
 8005e0c:	9006      	str	r0, [sp, #24]
 8005e0e:	9107      	str	r1, [sp, #28]
 8005e10:	9104      	str	r1, [sp, #16]
 8005e12:	4809      	ldr	r0, [pc, #36]	; (8005e38 <siprintf+0x38>)
 8005e14:	4909      	ldr	r1, [pc, #36]	; (8005e3c <siprintf+0x3c>)
 8005e16:	cb04      	ldmia	r3!, {r2}
 8005e18:	9105      	str	r1, [sp, #20]
 8005e1a:	6800      	ldr	r0, [r0, #0]
 8005e1c:	a902      	add	r1, sp, #8
 8005e1e:	9301      	str	r3, [sp, #4]
 8005e20:	f000 f894 	bl	8005f4c <_svfiprintf_r>
 8005e24:	2300      	movs	r3, #0
 8005e26:	9a02      	ldr	r2, [sp, #8]
 8005e28:	7013      	strb	r3, [r2, #0]
 8005e2a:	b01c      	add	sp, #112	; 0x70
 8005e2c:	bc08      	pop	{r3}
 8005e2e:	b003      	add	sp, #12
 8005e30:	4718      	bx	r3
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	7fffffff 	.word	0x7fffffff
 8005e38:	2000000c 	.word	0x2000000c
 8005e3c:	ffff0208 	.word	0xffff0208

08005e40 <strcat>:
 8005e40:	0002      	movs	r2, r0
 8005e42:	b510      	push	{r4, lr}
 8005e44:	7813      	ldrb	r3, [r2, #0]
 8005e46:	0014      	movs	r4, r2
 8005e48:	3201      	adds	r2, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1fa      	bne.n	8005e44 <strcat+0x4>
 8005e4e:	5cca      	ldrb	r2, [r1, r3]
 8005e50:	54e2      	strb	r2, [r4, r3]
 8005e52:	3301      	adds	r3, #1
 8005e54:	2a00      	cmp	r2, #0
 8005e56:	d1fa      	bne.n	8005e4e <strcat+0xe>
 8005e58:	bd10      	pop	{r4, pc}

08005e5a <strstr>:
 8005e5a:	780a      	ldrb	r2, [r1, #0]
 8005e5c:	b530      	push	{r4, r5, lr}
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	d10c      	bne.n	8005e7c <strstr+0x22>
 8005e62:	bd30      	pop	{r4, r5, pc}
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d108      	bne.n	8005e7a <strstr+0x20>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	5ccc      	ldrb	r4, [r1, r3]
 8005e6c:	2c00      	cmp	r4, #0
 8005e6e:	d0f8      	beq.n	8005e62 <strstr+0x8>
 8005e70:	5cc5      	ldrb	r5, [r0, r3]
 8005e72:	42a5      	cmp	r5, r4
 8005e74:	d101      	bne.n	8005e7a <strstr+0x20>
 8005e76:	3301      	adds	r3, #1
 8005e78:	e7f7      	b.n	8005e6a <strstr+0x10>
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	7803      	ldrb	r3, [r0, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f0      	bne.n	8005e64 <strstr+0xa>
 8005e82:	0018      	movs	r0, r3
 8005e84:	e7ed      	b.n	8005e62 <strstr+0x8>
	...

08005e88 <__ssputs_r>:
 8005e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8a:	688e      	ldr	r6, [r1, #8]
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	0007      	movs	r7, r0
 8005e90:	000c      	movs	r4, r1
 8005e92:	9203      	str	r2, [sp, #12]
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	429e      	cmp	r6, r3
 8005e98:	d83c      	bhi.n	8005f14 <__ssputs_r+0x8c>
 8005e9a:	2390      	movs	r3, #144	; 0x90
 8005e9c:	898a      	ldrh	r2, [r1, #12]
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	421a      	tst	r2, r3
 8005ea2:	d034      	beq.n	8005f0e <__ssputs_r+0x86>
 8005ea4:	2503      	movs	r5, #3
 8005ea6:	6909      	ldr	r1, [r1, #16]
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	1a5b      	subs	r3, r3, r1
 8005eac:	9302      	str	r3, [sp, #8]
 8005eae:	6963      	ldr	r3, [r4, #20]
 8005eb0:	9802      	ldr	r0, [sp, #8]
 8005eb2:	435d      	muls	r5, r3
 8005eb4:	0feb      	lsrs	r3, r5, #31
 8005eb6:	195d      	adds	r5, r3, r5
 8005eb8:	9b01      	ldr	r3, [sp, #4]
 8005eba:	106d      	asrs	r5, r5, #1
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	181b      	adds	r3, r3, r0
 8005ec0:	42ab      	cmp	r3, r5
 8005ec2:	d900      	bls.n	8005ec6 <__ssputs_r+0x3e>
 8005ec4:	001d      	movs	r5, r3
 8005ec6:	0553      	lsls	r3, r2, #21
 8005ec8:	d532      	bpl.n	8005f30 <__ssputs_r+0xa8>
 8005eca:	0029      	movs	r1, r5
 8005ecc:	0038      	movs	r0, r7
 8005ece:	f000 fb27 	bl	8006520 <_malloc_r>
 8005ed2:	1e06      	subs	r6, r0, #0
 8005ed4:	d109      	bne.n	8005eea <__ssputs_r+0x62>
 8005ed6:	230c      	movs	r3, #12
 8005ed8:	603b      	str	r3, [r7, #0]
 8005eda:	2340      	movs	r3, #64	; 0x40
 8005edc:	2001      	movs	r0, #1
 8005ede:	89a2      	ldrh	r2, [r4, #12]
 8005ee0:	4240      	negs	r0, r0
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	81a3      	strh	r3, [r4, #12]
 8005ee6:	b005      	add	sp, #20
 8005ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eea:	9a02      	ldr	r2, [sp, #8]
 8005eec:	6921      	ldr	r1, [r4, #16]
 8005eee:	f7ff ff75 	bl	8005ddc <memcpy>
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	4a14      	ldr	r2, [pc, #80]	; (8005f48 <__ssputs_r+0xc0>)
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	2380      	movs	r3, #128	; 0x80
 8005efa:	4313      	orrs	r3, r2
 8005efc:	81a3      	strh	r3, [r4, #12]
 8005efe:	9b02      	ldr	r3, [sp, #8]
 8005f00:	6126      	str	r6, [r4, #16]
 8005f02:	18f6      	adds	r6, r6, r3
 8005f04:	6026      	str	r6, [r4, #0]
 8005f06:	6165      	str	r5, [r4, #20]
 8005f08:	9e01      	ldr	r6, [sp, #4]
 8005f0a:	1aed      	subs	r5, r5, r3
 8005f0c:	60a5      	str	r5, [r4, #8]
 8005f0e:	9b01      	ldr	r3, [sp, #4]
 8005f10:	429e      	cmp	r6, r3
 8005f12:	d900      	bls.n	8005f16 <__ssputs_r+0x8e>
 8005f14:	9e01      	ldr	r6, [sp, #4]
 8005f16:	0032      	movs	r2, r6
 8005f18:	9903      	ldr	r1, [sp, #12]
 8005f1a:	6820      	ldr	r0, [r4, #0]
 8005f1c:	f000 faa3 	bl	8006466 <memmove>
 8005f20:	68a3      	ldr	r3, [r4, #8]
 8005f22:	2000      	movs	r0, #0
 8005f24:	1b9b      	subs	r3, r3, r6
 8005f26:	60a3      	str	r3, [r4, #8]
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	199e      	adds	r6, r3, r6
 8005f2c:	6026      	str	r6, [r4, #0]
 8005f2e:	e7da      	b.n	8005ee6 <__ssputs_r+0x5e>
 8005f30:	002a      	movs	r2, r5
 8005f32:	0038      	movs	r0, r7
 8005f34:	f000 fb52 	bl	80065dc <_realloc_r>
 8005f38:	1e06      	subs	r6, r0, #0
 8005f3a:	d1e0      	bne.n	8005efe <__ssputs_r+0x76>
 8005f3c:	0038      	movs	r0, r7
 8005f3e:	6921      	ldr	r1, [r4, #16]
 8005f40:	f000 faa4 	bl	800648c <_free_r>
 8005f44:	e7c7      	b.n	8005ed6 <__ssputs_r+0x4e>
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	fffffb7f 	.word	0xfffffb7f

08005f4c <_svfiprintf_r>:
 8005f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4e:	b0a1      	sub	sp, #132	; 0x84
 8005f50:	9003      	str	r0, [sp, #12]
 8005f52:	001d      	movs	r5, r3
 8005f54:	898b      	ldrh	r3, [r1, #12]
 8005f56:	000f      	movs	r7, r1
 8005f58:	0016      	movs	r6, r2
 8005f5a:	061b      	lsls	r3, r3, #24
 8005f5c:	d511      	bpl.n	8005f82 <_svfiprintf_r+0x36>
 8005f5e:	690b      	ldr	r3, [r1, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10e      	bne.n	8005f82 <_svfiprintf_r+0x36>
 8005f64:	2140      	movs	r1, #64	; 0x40
 8005f66:	f000 fadb 	bl	8006520 <_malloc_r>
 8005f6a:	6038      	str	r0, [r7, #0]
 8005f6c:	6138      	str	r0, [r7, #16]
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d105      	bne.n	8005f7e <_svfiprintf_r+0x32>
 8005f72:	230c      	movs	r3, #12
 8005f74:	9a03      	ldr	r2, [sp, #12]
 8005f76:	3801      	subs	r0, #1
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	b021      	add	sp, #132	; 0x84
 8005f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f7e:	2340      	movs	r3, #64	; 0x40
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	2300      	movs	r3, #0
 8005f84:	ac08      	add	r4, sp, #32
 8005f86:	6163      	str	r3, [r4, #20]
 8005f88:	3320      	adds	r3, #32
 8005f8a:	7663      	strb	r3, [r4, #25]
 8005f8c:	3310      	adds	r3, #16
 8005f8e:	76a3      	strb	r3, [r4, #26]
 8005f90:	9507      	str	r5, [sp, #28]
 8005f92:	0035      	movs	r5, r6
 8005f94:	782b      	ldrb	r3, [r5, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <_svfiprintf_r+0x52>
 8005f9a:	2b25      	cmp	r3, #37	; 0x25
 8005f9c:	d147      	bne.n	800602e <_svfiprintf_r+0xe2>
 8005f9e:	1bab      	subs	r3, r5, r6
 8005fa0:	9305      	str	r3, [sp, #20]
 8005fa2:	42b5      	cmp	r5, r6
 8005fa4:	d00c      	beq.n	8005fc0 <_svfiprintf_r+0x74>
 8005fa6:	0032      	movs	r2, r6
 8005fa8:	0039      	movs	r1, r7
 8005faa:	9803      	ldr	r0, [sp, #12]
 8005fac:	f7ff ff6c 	bl	8005e88 <__ssputs_r>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d100      	bne.n	8005fb6 <_svfiprintf_r+0x6a>
 8005fb4:	e0ae      	b.n	8006114 <_svfiprintf_r+0x1c8>
 8005fb6:	6962      	ldr	r2, [r4, #20]
 8005fb8:	9b05      	ldr	r3, [sp, #20]
 8005fba:	4694      	mov	ip, r2
 8005fbc:	4463      	add	r3, ip
 8005fbe:	6163      	str	r3, [r4, #20]
 8005fc0:	782b      	ldrb	r3, [r5, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d100      	bne.n	8005fc8 <_svfiprintf_r+0x7c>
 8005fc6:	e0a5      	b.n	8006114 <_svfiprintf_r+0x1c8>
 8005fc8:	2201      	movs	r2, #1
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4252      	negs	r2, r2
 8005fce:	6062      	str	r2, [r4, #4]
 8005fd0:	a904      	add	r1, sp, #16
 8005fd2:	3254      	adds	r2, #84	; 0x54
 8005fd4:	1852      	adds	r2, r2, r1
 8005fd6:	1c6e      	adds	r6, r5, #1
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	60e3      	str	r3, [r4, #12]
 8005fdc:	60a3      	str	r3, [r4, #8]
 8005fde:	7013      	strb	r3, [r2, #0]
 8005fe0:	65a3      	str	r3, [r4, #88]	; 0x58
 8005fe2:	2205      	movs	r2, #5
 8005fe4:	7831      	ldrb	r1, [r6, #0]
 8005fe6:	4854      	ldr	r0, [pc, #336]	; (8006138 <_svfiprintf_r+0x1ec>)
 8005fe8:	f000 fa32 	bl	8006450 <memchr>
 8005fec:	1c75      	adds	r5, r6, #1
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d11f      	bne.n	8006032 <_svfiprintf_r+0xe6>
 8005ff2:	6822      	ldr	r2, [r4, #0]
 8005ff4:	06d3      	lsls	r3, r2, #27
 8005ff6:	d504      	bpl.n	8006002 <_svfiprintf_r+0xb6>
 8005ff8:	2353      	movs	r3, #83	; 0x53
 8005ffa:	a904      	add	r1, sp, #16
 8005ffc:	185b      	adds	r3, r3, r1
 8005ffe:	2120      	movs	r1, #32
 8006000:	7019      	strb	r1, [r3, #0]
 8006002:	0713      	lsls	r3, r2, #28
 8006004:	d504      	bpl.n	8006010 <_svfiprintf_r+0xc4>
 8006006:	2353      	movs	r3, #83	; 0x53
 8006008:	a904      	add	r1, sp, #16
 800600a:	185b      	adds	r3, r3, r1
 800600c:	212b      	movs	r1, #43	; 0x2b
 800600e:	7019      	strb	r1, [r3, #0]
 8006010:	7833      	ldrb	r3, [r6, #0]
 8006012:	2b2a      	cmp	r3, #42	; 0x2a
 8006014:	d016      	beq.n	8006044 <_svfiprintf_r+0xf8>
 8006016:	0035      	movs	r5, r6
 8006018:	2100      	movs	r1, #0
 800601a:	200a      	movs	r0, #10
 800601c:	68e3      	ldr	r3, [r4, #12]
 800601e:	782a      	ldrb	r2, [r5, #0]
 8006020:	1c6e      	adds	r6, r5, #1
 8006022:	3a30      	subs	r2, #48	; 0x30
 8006024:	2a09      	cmp	r2, #9
 8006026:	d94e      	bls.n	80060c6 <_svfiprintf_r+0x17a>
 8006028:	2900      	cmp	r1, #0
 800602a:	d111      	bne.n	8006050 <_svfiprintf_r+0x104>
 800602c:	e017      	b.n	800605e <_svfiprintf_r+0x112>
 800602e:	3501      	adds	r5, #1
 8006030:	e7b0      	b.n	8005f94 <_svfiprintf_r+0x48>
 8006032:	4b41      	ldr	r3, [pc, #260]	; (8006138 <_svfiprintf_r+0x1ec>)
 8006034:	6822      	ldr	r2, [r4, #0]
 8006036:	1ac0      	subs	r0, r0, r3
 8006038:	2301      	movs	r3, #1
 800603a:	4083      	lsls	r3, r0
 800603c:	4313      	orrs	r3, r2
 800603e:	002e      	movs	r6, r5
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	e7ce      	b.n	8005fe2 <_svfiprintf_r+0x96>
 8006044:	9b07      	ldr	r3, [sp, #28]
 8006046:	1d19      	adds	r1, r3, #4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	9107      	str	r1, [sp, #28]
 800604c:	2b00      	cmp	r3, #0
 800604e:	db01      	blt.n	8006054 <_svfiprintf_r+0x108>
 8006050:	930b      	str	r3, [sp, #44]	; 0x2c
 8006052:	e004      	b.n	800605e <_svfiprintf_r+0x112>
 8006054:	425b      	negs	r3, r3
 8006056:	60e3      	str	r3, [r4, #12]
 8006058:	2302      	movs	r3, #2
 800605a:	4313      	orrs	r3, r2
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	782b      	ldrb	r3, [r5, #0]
 8006060:	2b2e      	cmp	r3, #46	; 0x2e
 8006062:	d10a      	bne.n	800607a <_svfiprintf_r+0x12e>
 8006064:	786b      	ldrb	r3, [r5, #1]
 8006066:	2b2a      	cmp	r3, #42	; 0x2a
 8006068:	d135      	bne.n	80060d6 <_svfiprintf_r+0x18a>
 800606a:	9b07      	ldr	r3, [sp, #28]
 800606c:	3502      	adds	r5, #2
 800606e:	1d1a      	adds	r2, r3, #4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	9207      	str	r2, [sp, #28]
 8006074:	2b00      	cmp	r3, #0
 8006076:	db2b      	blt.n	80060d0 <_svfiprintf_r+0x184>
 8006078:	9309      	str	r3, [sp, #36]	; 0x24
 800607a:	4e30      	ldr	r6, [pc, #192]	; (800613c <_svfiprintf_r+0x1f0>)
 800607c:	2203      	movs	r2, #3
 800607e:	0030      	movs	r0, r6
 8006080:	7829      	ldrb	r1, [r5, #0]
 8006082:	f000 f9e5 	bl	8006450 <memchr>
 8006086:	2800      	cmp	r0, #0
 8006088:	d006      	beq.n	8006098 <_svfiprintf_r+0x14c>
 800608a:	2340      	movs	r3, #64	; 0x40
 800608c:	1b80      	subs	r0, r0, r6
 800608e:	4083      	lsls	r3, r0
 8006090:	6822      	ldr	r2, [r4, #0]
 8006092:	3501      	adds	r5, #1
 8006094:	4313      	orrs	r3, r2
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	7829      	ldrb	r1, [r5, #0]
 800609a:	2206      	movs	r2, #6
 800609c:	4828      	ldr	r0, [pc, #160]	; (8006140 <_svfiprintf_r+0x1f4>)
 800609e:	1c6e      	adds	r6, r5, #1
 80060a0:	7621      	strb	r1, [r4, #24]
 80060a2:	f000 f9d5 	bl	8006450 <memchr>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d03c      	beq.n	8006124 <_svfiprintf_r+0x1d8>
 80060aa:	4b26      	ldr	r3, [pc, #152]	; (8006144 <_svfiprintf_r+0x1f8>)
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d125      	bne.n	80060fc <_svfiprintf_r+0x1b0>
 80060b0:	2207      	movs	r2, #7
 80060b2:	9b07      	ldr	r3, [sp, #28]
 80060b4:	3307      	adds	r3, #7
 80060b6:	4393      	bics	r3, r2
 80060b8:	3308      	adds	r3, #8
 80060ba:	9307      	str	r3, [sp, #28]
 80060bc:	6963      	ldr	r3, [r4, #20]
 80060be:	9a04      	ldr	r2, [sp, #16]
 80060c0:	189b      	adds	r3, r3, r2
 80060c2:	6163      	str	r3, [r4, #20]
 80060c4:	e765      	b.n	8005f92 <_svfiprintf_r+0x46>
 80060c6:	4343      	muls	r3, r0
 80060c8:	0035      	movs	r5, r6
 80060ca:	2101      	movs	r1, #1
 80060cc:	189b      	adds	r3, r3, r2
 80060ce:	e7a6      	b.n	800601e <_svfiprintf_r+0xd2>
 80060d0:	2301      	movs	r3, #1
 80060d2:	425b      	negs	r3, r3
 80060d4:	e7d0      	b.n	8006078 <_svfiprintf_r+0x12c>
 80060d6:	2300      	movs	r3, #0
 80060d8:	200a      	movs	r0, #10
 80060da:	001a      	movs	r2, r3
 80060dc:	3501      	adds	r5, #1
 80060de:	6063      	str	r3, [r4, #4]
 80060e0:	7829      	ldrb	r1, [r5, #0]
 80060e2:	1c6e      	adds	r6, r5, #1
 80060e4:	3930      	subs	r1, #48	; 0x30
 80060e6:	2909      	cmp	r1, #9
 80060e8:	d903      	bls.n	80060f2 <_svfiprintf_r+0x1a6>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0c5      	beq.n	800607a <_svfiprintf_r+0x12e>
 80060ee:	9209      	str	r2, [sp, #36]	; 0x24
 80060f0:	e7c3      	b.n	800607a <_svfiprintf_r+0x12e>
 80060f2:	4342      	muls	r2, r0
 80060f4:	0035      	movs	r5, r6
 80060f6:	2301      	movs	r3, #1
 80060f8:	1852      	adds	r2, r2, r1
 80060fa:	e7f1      	b.n	80060e0 <_svfiprintf_r+0x194>
 80060fc:	ab07      	add	r3, sp, #28
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	003a      	movs	r2, r7
 8006102:	0021      	movs	r1, r4
 8006104:	4b10      	ldr	r3, [pc, #64]	; (8006148 <_svfiprintf_r+0x1fc>)
 8006106:	9803      	ldr	r0, [sp, #12]
 8006108:	e000      	b.n	800610c <_svfiprintf_r+0x1c0>
 800610a:	bf00      	nop
 800610c:	9004      	str	r0, [sp, #16]
 800610e:	9b04      	ldr	r3, [sp, #16]
 8006110:	3301      	adds	r3, #1
 8006112:	d1d3      	bne.n	80060bc <_svfiprintf_r+0x170>
 8006114:	89bb      	ldrh	r3, [r7, #12]
 8006116:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006118:	065b      	lsls	r3, r3, #25
 800611a:	d400      	bmi.n	800611e <_svfiprintf_r+0x1d2>
 800611c:	e72d      	b.n	8005f7a <_svfiprintf_r+0x2e>
 800611e:	2001      	movs	r0, #1
 8006120:	4240      	negs	r0, r0
 8006122:	e72a      	b.n	8005f7a <_svfiprintf_r+0x2e>
 8006124:	ab07      	add	r3, sp, #28
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	003a      	movs	r2, r7
 800612a:	0021      	movs	r1, r4
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <_svfiprintf_r+0x1fc>)
 800612e:	9803      	ldr	r0, [sp, #12]
 8006130:	f000 f87c 	bl	800622c <_printf_i>
 8006134:	e7ea      	b.n	800610c <_svfiprintf_r+0x1c0>
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	08006840 	.word	0x08006840
 800613c:	08006846 	.word	0x08006846
 8006140:	0800684a 	.word	0x0800684a
 8006144:	00000000 	.word	0x00000000
 8006148:	08005e89 	.word	0x08005e89

0800614c <_printf_common>:
 800614c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800614e:	0015      	movs	r5, r2
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	688a      	ldr	r2, [r1, #8]
 8006154:	690b      	ldr	r3, [r1, #16]
 8006156:	000c      	movs	r4, r1
 8006158:	9000      	str	r0, [sp, #0]
 800615a:	4293      	cmp	r3, r2
 800615c:	da00      	bge.n	8006160 <_printf_common+0x14>
 800615e:	0013      	movs	r3, r2
 8006160:	0022      	movs	r2, r4
 8006162:	602b      	str	r3, [r5, #0]
 8006164:	3243      	adds	r2, #67	; 0x43
 8006166:	7812      	ldrb	r2, [r2, #0]
 8006168:	2a00      	cmp	r2, #0
 800616a:	d001      	beq.n	8006170 <_printf_common+0x24>
 800616c:	3301      	adds	r3, #1
 800616e:	602b      	str	r3, [r5, #0]
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	069b      	lsls	r3, r3, #26
 8006174:	d502      	bpl.n	800617c <_printf_common+0x30>
 8006176:	682b      	ldr	r3, [r5, #0]
 8006178:	3302      	adds	r3, #2
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	6822      	ldr	r2, [r4, #0]
 800617e:	2306      	movs	r3, #6
 8006180:	0017      	movs	r7, r2
 8006182:	401f      	ands	r7, r3
 8006184:	421a      	tst	r2, r3
 8006186:	d027      	beq.n	80061d8 <_printf_common+0x8c>
 8006188:	0023      	movs	r3, r4
 800618a:	3343      	adds	r3, #67	; 0x43
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	1e5a      	subs	r2, r3, #1
 8006190:	4193      	sbcs	r3, r2
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	0692      	lsls	r2, r2, #26
 8006196:	d430      	bmi.n	80061fa <_printf_common+0xae>
 8006198:	0022      	movs	r2, r4
 800619a:	9901      	ldr	r1, [sp, #4]
 800619c:	9800      	ldr	r0, [sp, #0]
 800619e:	9e08      	ldr	r6, [sp, #32]
 80061a0:	3243      	adds	r2, #67	; 0x43
 80061a2:	47b0      	blx	r6
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d025      	beq.n	80061f4 <_printf_common+0xa8>
 80061a8:	2306      	movs	r3, #6
 80061aa:	6820      	ldr	r0, [r4, #0]
 80061ac:	682a      	ldr	r2, [r5, #0]
 80061ae:	68e1      	ldr	r1, [r4, #12]
 80061b0:	2500      	movs	r5, #0
 80061b2:	4003      	ands	r3, r0
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d103      	bne.n	80061c0 <_printf_common+0x74>
 80061b8:	1a8d      	subs	r5, r1, r2
 80061ba:	43eb      	mvns	r3, r5
 80061bc:	17db      	asrs	r3, r3, #31
 80061be:	401d      	ands	r5, r3
 80061c0:	68a3      	ldr	r3, [r4, #8]
 80061c2:	6922      	ldr	r2, [r4, #16]
 80061c4:	4293      	cmp	r3, r2
 80061c6:	dd01      	ble.n	80061cc <_printf_common+0x80>
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	18ed      	adds	r5, r5, r3
 80061cc:	2700      	movs	r7, #0
 80061ce:	42bd      	cmp	r5, r7
 80061d0:	d120      	bne.n	8006214 <_printf_common+0xc8>
 80061d2:	2000      	movs	r0, #0
 80061d4:	e010      	b.n	80061f8 <_printf_common+0xac>
 80061d6:	3701      	adds	r7, #1
 80061d8:	68e3      	ldr	r3, [r4, #12]
 80061da:	682a      	ldr	r2, [r5, #0]
 80061dc:	1a9b      	subs	r3, r3, r2
 80061de:	42bb      	cmp	r3, r7
 80061e0:	ddd2      	ble.n	8006188 <_printf_common+0x3c>
 80061e2:	0022      	movs	r2, r4
 80061e4:	2301      	movs	r3, #1
 80061e6:	9901      	ldr	r1, [sp, #4]
 80061e8:	9800      	ldr	r0, [sp, #0]
 80061ea:	9e08      	ldr	r6, [sp, #32]
 80061ec:	3219      	adds	r2, #25
 80061ee:	47b0      	blx	r6
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d1f0      	bne.n	80061d6 <_printf_common+0x8a>
 80061f4:	2001      	movs	r0, #1
 80061f6:	4240      	negs	r0, r0
 80061f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061fa:	2030      	movs	r0, #48	; 0x30
 80061fc:	18e1      	adds	r1, r4, r3
 80061fe:	3143      	adds	r1, #67	; 0x43
 8006200:	7008      	strb	r0, [r1, #0]
 8006202:	0021      	movs	r1, r4
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	3145      	adds	r1, #69	; 0x45
 8006208:	7809      	ldrb	r1, [r1, #0]
 800620a:	18a2      	adds	r2, r4, r2
 800620c:	3243      	adds	r2, #67	; 0x43
 800620e:	3302      	adds	r3, #2
 8006210:	7011      	strb	r1, [r2, #0]
 8006212:	e7c1      	b.n	8006198 <_printf_common+0x4c>
 8006214:	0022      	movs	r2, r4
 8006216:	2301      	movs	r3, #1
 8006218:	9901      	ldr	r1, [sp, #4]
 800621a:	9800      	ldr	r0, [sp, #0]
 800621c:	9e08      	ldr	r6, [sp, #32]
 800621e:	321a      	adds	r2, #26
 8006220:	47b0      	blx	r6
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	d0e6      	beq.n	80061f4 <_printf_common+0xa8>
 8006226:	3701      	adds	r7, #1
 8006228:	e7d1      	b.n	80061ce <_printf_common+0x82>
	...

0800622c <_printf_i>:
 800622c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800622e:	b08b      	sub	sp, #44	; 0x2c
 8006230:	9206      	str	r2, [sp, #24]
 8006232:	000a      	movs	r2, r1
 8006234:	3243      	adds	r2, #67	; 0x43
 8006236:	9307      	str	r3, [sp, #28]
 8006238:	9005      	str	r0, [sp, #20]
 800623a:	9204      	str	r2, [sp, #16]
 800623c:	7e0a      	ldrb	r2, [r1, #24]
 800623e:	000c      	movs	r4, r1
 8006240:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006242:	2a78      	cmp	r2, #120	; 0x78
 8006244:	d806      	bhi.n	8006254 <_printf_i+0x28>
 8006246:	2a62      	cmp	r2, #98	; 0x62
 8006248:	d808      	bhi.n	800625c <_printf_i+0x30>
 800624a:	2a00      	cmp	r2, #0
 800624c:	d100      	bne.n	8006250 <_printf_i+0x24>
 800624e:	e0c0      	b.n	80063d2 <_printf_i+0x1a6>
 8006250:	2a58      	cmp	r2, #88	; 0x58
 8006252:	d052      	beq.n	80062fa <_printf_i+0xce>
 8006254:	0026      	movs	r6, r4
 8006256:	3642      	adds	r6, #66	; 0x42
 8006258:	7032      	strb	r2, [r6, #0]
 800625a:	e022      	b.n	80062a2 <_printf_i+0x76>
 800625c:	0010      	movs	r0, r2
 800625e:	3863      	subs	r0, #99	; 0x63
 8006260:	2815      	cmp	r0, #21
 8006262:	d8f7      	bhi.n	8006254 <_printf_i+0x28>
 8006264:	f7f9 ff58 	bl	8000118 <__gnu_thumb1_case_shi>
 8006268:	001f0016 	.word	0x001f0016
 800626c:	fff6fff6 	.word	0xfff6fff6
 8006270:	fff6fff6 	.word	0xfff6fff6
 8006274:	fff6001f 	.word	0xfff6001f
 8006278:	fff6fff6 	.word	0xfff6fff6
 800627c:	00a8fff6 	.word	0x00a8fff6
 8006280:	009a0036 	.word	0x009a0036
 8006284:	fff6fff6 	.word	0xfff6fff6
 8006288:	fff600b9 	.word	0xfff600b9
 800628c:	fff60036 	.word	0xfff60036
 8006290:	009efff6 	.word	0x009efff6
 8006294:	0026      	movs	r6, r4
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	3642      	adds	r6, #66	; 0x42
 800629a:	1d11      	adds	r1, r2, #4
 800629c:	6019      	str	r1, [r3, #0]
 800629e:	6813      	ldr	r3, [r2, #0]
 80062a0:	7033      	strb	r3, [r6, #0]
 80062a2:	2301      	movs	r3, #1
 80062a4:	e0a7      	b.n	80063f6 <_printf_i+0x1ca>
 80062a6:	6808      	ldr	r0, [r1, #0]
 80062a8:	6819      	ldr	r1, [r3, #0]
 80062aa:	1d0a      	adds	r2, r1, #4
 80062ac:	0605      	lsls	r5, r0, #24
 80062ae:	d50b      	bpl.n	80062c8 <_printf_i+0x9c>
 80062b0:	680d      	ldr	r5, [r1, #0]
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	2d00      	cmp	r5, #0
 80062b6:	da03      	bge.n	80062c0 <_printf_i+0x94>
 80062b8:	232d      	movs	r3, #45	; 0x2d
 80062ba:	9a04      	ldr	r2, [sp, #16]
 80062bc:	426d      	negs	r5, r5
 80062be:	7013      	strb	r3, [r2, #0]
 80062c0:	4b61      	ldr	r3, [pc, #388]	; (8006448 <_printf_i+0x21c>)
 80062c2:	270a      	movs	r7, #10
 80062c4:	9303      	str	r3, [sp, #12]
 80062c6:	e032      	b.n	800632e <_printf_i+0x102>
 80062c8:	680d      	ldr	r5, [r1, #0]
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	0641      	lsls	r1, r0, #25
 80062ce:	d5f1      	bpl.n	80062b4 <_printf_i+0x88>
 80062d0:	b22d      	sxth	r5, r5
 80062d2:	e7ef      	b.n	80062b4 <_printf_i+0x88>
 80062d4:	680d      	ldr	r5, [r1, #0]
 80062d6:	6819      	ldr	r1, [r3, #0]
 80062d8:	1d08      	adds	r0, r1, #4
 80062da:	6018      	str	r0, [r3, #0]
 80062dc:	062e      	lsls	r6, r5, #24
 80062de:	d501      	bpl.n	80062e4 <_printf_i+0xb8>
 80062e0:	680d      	ldr	r5, [r1, #0]
 80062e2:	e003      	b.n	80062ec <_printf_i+0xc0>
 80062e4:	066d      	lsls	r5, r5, #25
 80062e6:	d5fb      	bpl.n	80062e0 <_printf_i+0xb4>
 80062e8:	680d      	ldr	r5, [r1, #0]
 80062ea:	b2ad      	uxth	r5, r5
 80062ec:	4b56      	ldr	r3, [pc, #344]	; (8006448 <_printf_i+0x21c>)
 80062ee:	270a      	movs	r7, #10
 80062f0:	9303      	str	r3, [sp, #12]
 80062f2:	2a6f      	cmp	r2, #111	; 0x6f
 80062f4:	d117      	bne.n	8006326 <_printf_i+0xfa>
 80062f6:	2708      	movs	r7, #8
 80062f8:	e015      	b.n	8006326 <_printf_i+0xfa>
 80062fa:	3145      	adds	r1, #69	; 0x45
 80062fc:	700a      	strb	r2, [r1, #0]
 80062fe:	4a52      	ldr	r2, [pc, #328]	; (8006448 <_printf_i+0x21c>)
 8006300:	9203      	str	r2, [sp, #12]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	6821      	ldr	r1, [r4, #0]
 8006306:	ca20      	ldmia	r2!, {r5}
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	0608      	lsls	r0, r1, #24
 800630c:	d550      	bpl.n	80063b0 <_printf_i+0x184>
 800630e:	07cb      	lsls	r3, r1, #31
 8006310:	d502      	bpl.n	8006318 <_printf_i+0xec>
 8006312:	2320      	movs	r3, #32
 8006314:	4319      	orrs	r1, r3
 8006316:	6021      	str	r1, [r4, #0]
 8006318:	2710      	movs	r7, #16
 800631a:	2d00      	cmp	r5, #0
 800631c:	d103      	bne.n	8006326 <_printf_i+0xfa>
 800631e:	2320      	movs	r3, #32
 8006320:	6822      	ldr	r2, [r4, #0]
 8006322:	439a      	bics	r2, r3
 8006324:	6022      	str	r2, [r4, #0]
 8006326:	0023      	movs	r3, r4
 8006328:	2200      	movs	r2, #0
 800632a:	3343      	adds	r3, #67	; 0x43
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	6863      	ldr	r3, [r4, #4]
 8006330:	60a3      	str	r3, [r4, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	db03      	blt.n	800633e <_printf_i+0x112>
 8006336:	2204      	movs	r2, #4
 8006338:	6821      	ldr	r1, [r4, #0]
 800633a:	4391      	bics	r1, r2
 800633c:	6021      	str	r1, [r4, #0]
 800633e:	2d00      	cmp	r5, #0
 8006340:	d102      	bne.n	8006348 <_printf_i+0x11c>
 8006342:	9e04      	ldr	r6, [sp, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00c      	beq.n	8006362 <_printf_i+0x136>
 8006348:	9e04      	ldr	r6, [sp, #16]
 800634a:	0028      	movs	r0, r5
 800634c:	0039      	movs	r1, r7
 800634e:	f7f9 ff73 	bl	8000238 <__aeabi_uidivmod>
 8006352:	9b03      	ldr	r3, [sp, #12]
 8006354:	3e01      	subs	r6, #1
 8006356:	5c5b      	ldrb	r3, [r3, r1]
 8006358:	7033      	strb	r3, [r6, #0]
 800635a:	002b      	movs	r3, r5
 800635c:	0005      	movs	r5, r0
 800635e:	429f      	cmp	r7, r3
 8006360:	d9f3      	bls.n	800634a <_printf_i+0x11e>
 8006362:	2f08      	cmp	r7, #8
 8006364:	d109      	bne.n	800637a <_printf_i+0x14e>
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	07db      	lsls	r3, r3, #31
 800636a:	d506      	bpl.n	800637a <_printf_i+0x14e>
 800636c:	6863      	ldr	r3, [r4, #4]
 800636e:	6922      	ldr	r2, [r4, #16]
 8006370:	4293      	cmp	r3, r2
 8006372:	dc02      	bgt.n	800637a <_printf_i+0x14e>
 8006374:	2330      	movs	r3, #48	; 0x30
 8006376:	3e01      	subs	r6, #1
 8006378:	7033      	strb	r3, [r6, #0]
 800637a:	9b04      	ldr	r3, [sp, #16]
 800637c:	1b9b      	subs	r3, r3, r6
 800637e:	6123      	str	r3, [r4, #16]
 8006380:	9b07      	ldr	r3, [sp, #28]
 8006382:	0021      	movs	r1, r4
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	9805      	ldr	r0, [sp, #20]
 8006388:	9b06      	ldr	r3, [sp, #24]
 800638a:	aa09      	add	r2, sp, #36	; 0x24
 800638c:	f7ff fede 	bl	800614c <_printf_common>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d135      	bne.n	8006400 <_printf_i+0x1d4>
 8006394:	2001      	movs	r0, #1
 8006396:	4240      	negs	r0, r0
 8006398:	b00b      	add	sp, #44	; 0x2c
 800639a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800639c:	2220      	movs	r2, #32
 800639e:	6809      	ldr	r1, [r1, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	6022      	str	r2, [r4, #0]
 80063a4:	0022      	movs	r2, r4
 80063a6:	2178      	movs	r1, #120	; 0x78
 80063a8:	3245      	adds	r2, #69	; 0x45
 80063aa:	7011      	strb	r1, [r2, #0]
 80063ac:	4a27      	ldr	r2, [pc, #156]	; (800644c <_printf_i+0x220>)
 80063ae:	e7a7      	b.n	8006300 <_printf_i+0xd4>
 80063b0:	0648      	lsls	r0, r1, #25
 80063b2:	d5ac      	bpl.n	800630e <_printf_i+0xe2>
 80063b4:	b2ad      	uxth	r5, r5
 80063b6:	e7aa      	b.n	800630e <_printf_i+0xe2>
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	680d      	ldr	r5, [r1, #0]
 80063bc:	1d10      	adds	r0, r2, #4
 80063be:	6949      	ldr	r1, [r1, #20]
 80063c0:	6018      	str	r0, [r3, #0]
 80063c2:	6813      	ldr	r3, [r2, #0]
 80063c4:	062e      	lsls	r6, r5, #24
 80063c6:	d501      	bpl.n	80063cc <_printf_i+0x1a0>
 80063c8:	6019      	str	r1, [r3, #0]
 80063ca:	e002      	b.n	80063d2 <_printf_i+0x1a6>
 80063cc:	066d      	lsls	r5, r5, #25
 80063ce:	d5fb      	bpl.n	80063c8 <_printf_i+0x19c>
 80063d0:	8019      	strh	r1, [r3, #0]
 80063d2:	2300      	movs	r3, #0
 80063d4:	9e04      	ldr	r6, [sp, #16]
 80063d6:	6123      	str	r3, [r4, #16]
 80063d8:	e7d2      	b.n	8006380 <_printf_i+0x154>
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	1d11      	adds	r1, r2, #4
 80063de:	6019      	str	r1, [r3, #0]
 80063e0:	6816      	ldr	r6, [r2, #0]
 80063e2:	2100      	movs	r1, #0
 80063e4:	0030      	movs	r0, r6
 80063e6:	6862      	ldr	r2, [r4, #4]
 80063e8:	f000 f832 	bl	8006450 <memchr>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d001      	beq.n	80063f4 <_printf_i+0x1c8>
 80063f0:	1b80      	subs	r0, r0, r6
 80063f2:	6060      	str	r0, [r4, #4]
 80063f4:	6863      	ldr	r3, [r4, #4]
 80063f6:	6123      	str	r3, [r4, #16]
 80063f8:	2300      	movs	r3, #0
 80063fa:	9a04      	ldr	r2, [sp, #16]
 80063fc:	7013      	strb	r3, [r2, #0]
 80063fe:	e7bf      	b.n	8006380 <_printf_i+0x154>
 8006400:	6923      	ldr	r3, [r4, #16]
 8006402:	0032      	movs	r2, r6
 8006404:	9906      	ldr	r1, [sp, #24]
 8006406:	9805      	ldr	r0, [sp, #20]
 8006408:	9d07      	ldr	r5, [sp, #28]
 800640a:	47a8      	blx	r5
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d0c1      	beq.n	8006394 <_printf_i+0x168>
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	079b      	lsls	r3, r3, #30
 8006414:	d415      	bmi.n	8006442 <_printf_i+0x216>
 8006416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006418:	68e0      	ldr	r0, [r4, #12]
 800641a:	4298      	cmp	r0, r3
 800641c:	dabc      	bge.n	8006398 <_printf_i+0x16c>
 800641e:	0018      	movs	r0, r3
 8006420:	e7ba      	b.n	8006398 <_printf_i+0x16c>
 8006422:	0022      	movs	r2, r4
 8006424:	2301      	movs	r3, #1
 8006426:	9906      	ldr	r1, [sp, #24]
 8006428:	9805      	ldr	r0, [sp, #20]
 800642a:	9e07      	ldr	r6, [sp, #28]
 800642c:	3219      	adds	r2, #25
 800642e:	47b0      	blx	r6
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d0af      	beq.n	8006394 <_printf_i+0x168>
 8006434:	3501      	adds	r5, #1
 8006436:	68e3      	ldr	r3, [r4, #12]
 8006438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	42ab      	cmp	r3, r5
 800643e:	dcf0      	bgt.n	8006422 <_printf_i+0x1f6>
 8006440:	e7e9      	b.n	8006416 <_printf_i+0x1ea>
 8006442:	2500      	movs	r5, #0
 8006444:	e7f7      	b.n	8006436 <_printf_i+0x20a>
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	08006851 	.word	0x08006851
 800644c:	08006862 	.word	0x08006862

08006450 <memchr>:
 8006450:	b2c9      	uxtb	r1, r1
 8006452:	1882      	adds	r2, r0, r2
 8006454:	4290      	cmp	r0, r2
 8006456:	d101      	bne.n	800645c <memchr+0xc>
 8006458:	2000      	movs	r0, #0
 800645a:	4770      	bx	lr
 800645c:	7803      	ldrb	r3, [r0, #0]
 800645e:	428b      	cmp	r3, r1
 8006460:	d0fb      	beq.n	800645a <memchr+0xa>
 8006462:	3001      	adds	r0, #1
 8006464:	e7f6      	b.n	8006454 <memchr+0x4>

08006466 <memmove>:
 8006466:	b510      	push	{r4, lr}
 8006468:	4288      	cmp	r0, r1
 800646a:	d902      	bls.n	8006472 <memmove+0xc>
 800646c:	188b      	adds	r3, r1, r2
 800646e:	4298      	cmp	r0, r3
 8006470:	d303      	bcc.n	800647a <memmove+0x14>
 8006472:	2300      	movs	r3, #0
 8006474:	e007      	b.n	8006486 <memmove+0x20>
 8006476:	5c8b      	ldrb	r3, [r1, r2]
 8006478:	5483      	strb	r3, [r0, r2]
 800647a:	3a01      	subs	r2, #1
 800647c:	d2fb      	bcs.n	8006476 <memmove+0x10>
 800647e:	bd10      	pop	{r4, pc}
 8006480:	5ccc      	ldrb	r4, [r1, r3]
 8006482:	54c4      	strb	r4, [r0, r3]
 8006484:	3301      	adds	r3, #1
 8006486:	429a      	cmp	r2, r3
 8006488:	d1fa      	bne.n	8006480 <memmove+0x1a>
 800648a:	e7f8      	b.n	800647e <memmove+0x18>

0800648c <_free_r>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	0005      	movs	r5, r0
 8006490:	2900      	cmp	r1, #0
 8006492:	d010      	beq.n	80064b6 <_free_r+0x2a>
 8006494:	1f0c      	subs	r4, r1, #4
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	da00      	bge.n	800649e <_free_r+0x12>
 800649c:	18e4      	adds	r4, r4, r3
 800649e:	0028      	movs	r0, r5
 80064a0:	f000 f8d4 	bl	800664c <__malloc_lock>
 80064a4:	4a1d      	ldr	r2, [pc, #116]	; (800651c <_free_r+0x90>)
 80064a6:	6813      	ldr	r3, [r2, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d105      	bne.n	80064b8 <_free_r+0x2c>
 80064ac:	6063      	str	r3, [r4, #4]
 80064ae:	6014      	str	r4, [r2, #0]
 80064b0:	0028      	movs	r0, r5
 80064b2:	f000 f8d3 	bl	800665c <__malloc_unlock>
 80064b6:	bd70      	pop	{r4, r5, r6, pc}
 80064b8:	42a3      	cmp	r3, r4
 80064ba:	d908      	bls.n	80064ce <_free_r+0x42>
 80064bc:	6821      	ldr	r1, [r4, #0]
 80064be:	1860      	adds	r0, r4, r1
 80064c0:	4283      	cmp	r3, r0
 80064c2:	d1f3      	bne.n	80064ac <_free_r+0x20>
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	1841      	adds	r1, r0, r1
 80064ca:	6021      	str	r1, [r4, #0]
 80064cc:	e7ee      	b.n	80064ac <_free_r+0x20>
 80064ce:	001a      	movs	r2, r3
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <_free_r+0x4e>
 80064d6:	42a3      	cmp	r3, r4
 80064d8:	d9f9      	bls.n	80064ce <_free_r+0x42>
 80064da:	6811      	ldr	r1, [r2, #0]
 80064dc:	1850      	adds	r0, r2, r1
 80064de:	42a0      	cmp	r0, r4
 80064e0:	d10b      	bne.n	80064fa <_free_r+0x6e>
 80064e2:	6820      	ldr	r0, [r4, #0]
 80064e4:	1809      	adds	r1, r1, r0
 80064e6:	1850      	adds	r0, r2, r1
 80064e8:	6011      	str	r1, [r2, #0]
 80064ea:	4283      	cmp	r3, r0
 80064ec:	d1e0      	bne.n	80064b0 <_free_r+0x24>
 80064ee:	6818      	ldr	r0, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	1841      	adds	r1, r0, r1
 80064f4:	6011      	str	r1, [r2, #0]
 80064f6:	6053      	str	r3, [r2, #4]
 80064f8:	e7da      	b.n	80064b0 <_free_r+0x24>
 80064fa:	42a0      	cmp	r0, r4
 80064fc:	d902      	bls.n	8006504 <_free_r+0x78>
 80064fe:	230c      	movs	r3, #12
 8006500:	602b      	str	r3, [r5, #0]
 8006502:	e7d5      	b.n	80064b0 <_free_r+0x24>
 8006504:	6821      	ldr	r1, [r4, #0]
 8006506:	1860      	adds	r0, r4, r1
 8006508:	4283      	cmp	r3, r0
 800650a:	d103      	bne.n	8006514 <_free_r+0x88>
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	1841      	adds	r1, r0, r1
 8006512:	6021      	str	r1, [r4, #0]
 8006514:	6063      	str	r3, [r4, #4]
 8006516:	6054      	str	r4, [r2, #4]
 8006518:	e7ca      	b.n	80064b0 <_free_r+0x24>
 800651a:	46c0      	nop			; (mov r8, r8)
 800651c:	20000090 	.word	0x20000090

08006520 <_malloc_r>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	2303      	movs	r3, #3
 8006524:	1ccd      	adds	r5, r1, #3
 8006526:	439d      	bics	r5, r3
 8006528:	3508      	adds	r5, #8
 800652a:	0006      	movs	r6, r0
 800652c:	2d0c      	cmp	r5, #12
 800652e:	d21f      	bcs.n	8006570 <_malloc_r+0x50>
 8006530:	250c      	movs	r5, #12
 8006532:	42a9      	cmp	r1, r5
 8006534:	d81e      	bhi.n	8006574 <_malloc_r+0x54>
 8006536:	0030      	movs	r0, r6
 8006538:	f000 f888 	bl	800664c <__malloc_lock>
 800653c:	4925      	ldr	r1, [pc, #148]	; (80065d4 <_malloc_r+0xb4>)
 800653e:	680a      	ldr	r2, [r1, #0]
 8006540:	0014      	movs	r4, r2
 8006542:	2c00      	cmp	r4, #0
 8006544:	d11a      	bne.n	800657c <_malloc_r+0x5c>
 8006546:	4f24      	ldr	r7, [pc, #144]	; (80065d8 <_malloc_r+0xb8>)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d104      	bne.n	8006558 <_malloc_r+0x38>
 800654e:	0021      	movs	r1, r4
 8006550:	0030      	movs	r0, r6
 8006552:	f000 f869 	bl	8006628 <_sbrk_r>
 8006556:	6038      	str	r0, [r7, #0]
 8006558:	0029      	movs	r1, r5
 800655a:	0030      	movs	r0, r6
 800655c:	f000 f864 	bl	8006628 <_sbrk_r>
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d12b      	bne.n	80065bc <_malloc_r+0x9c>
 8006564:	230c      	movs	r3, #12
 8006566:	0030      	movs	r0, r6
 8006568:	6033      	str	r3, [r6, #0]
 800656a:	f000 f877 	bl	800665c <__malloc_unlock>
 800656e:	e003      	b.n	8006578 <_malloc_r+0x58>
 8006570:	2d00      	cmp	r5, #0
 8006572:	dade      	bge.n	8006532 <_malloc_r+0x12>
 8006574:	230c      	movs	r3, #12
 8006576:	6033      	str	r3, [r6, #0]
 8006578:	2000      	movs	r0, #0
 800657a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	1b5b      	subs	r3, r3, r5
 8006580:	d419      	bmi.n	80065b6 <_malloc_r+0x96>
 8006582:	2b0b      	cmp	r3, #11
 8006584:	d903      	bls.n	800658e <_malloc_r+0x6e>
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	18e4      	adds	r4, r4, r3
 800658a:	6025      	str	r5, [r4, #0]
 800658c:	e003      	b.n	8006596 <_malloc_r+0x76>
 800658e:	6863      	ldr	r3, [r4, #4]
 8006590:	42a2      	cmp	r2, r4
 8006592:	d10e      	bne.n	80065b2 <_malloc_r+0x92>
 8006594:	600b      	str	r3, [r1, #0]
 8006596:	0030      	movs	r0, r6
 8006598:	f000 f860 	bl	800665c <__malloc_unlock>
 800659c:	0020      	movs	r0, r4
 800659e:	2207      	movs	r2, #7
 80065a0:	300b      	adds	r0, #11
 80065a2:	1d23      	adds	r3, r4, #4
 80065a4:	4390      	bics	r0, r2
 80065a6:	1ac2      	subs	r2, r0, r3
 80065a8:	4298      	cmp	r0, r3
 80065aa:	d0e6      	beq.n	800657a <_malloc_r+0x5a>
 80065ac:	1a1b      	subs	r3, r3, r0
 80065ae:	50a3      	str	r3, [r4, r2]
 80065b0:	e7e3      	b.n	800657a <_malloc_r+0x5a>
 80065b2:	6053      	str	r3, [r2, #4]
 80065b4:	e7ef      	b.n	8006596 <_malloc_r+0x76>
 80065b6:	0022      	movs	r2, r4
 80065b8:	6864      	ldr	r4, [r4, #4]
 80065ba:	e7c2      	b.n	8006542 <_malloc_r+0x22>
 80065bc:	2303      	movs	r3, #3
 80065be:	1cc4      	adds	r4, r0, #3
 80065c0:	439c      	bics	r4, r3
 80065c2:	42a0      	cmp	r0, r4
 80065c4:	d0e1      	beq.n	800658a <_malloc_r+0x6a>
 80065c6:	1a21      	subs	r1, r4, r0
 80065c8:	0030      	movs	r0, r6
 80065ca:	f000 f82d 	bl	8006628 <_sbrk_r>
 80065ce:	1c43      	adds	r3, r0, #1
 80065d0:	d1db      	bne.n	800658a <_malloc_r+0x6a>
 80065d2:	e7c7      	b.n	8006564 <_malloc_r+0x44>
 80065d4:	20000090 	.word	0x20000090
 80065d8:	20000094 	.word	0x20000094

080065dc <_realloc_r>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	0007      	movs	r7, r0
 80065e0:	000d      	movs	r5, r1
 80065e2:	0016      	movs	r6, r2
 80065e4:	2900      	cmp	r1, #0
 80065e6:	d105      	bne.n	80065f4 <_realloc_r+0x18>
 80065e8:	0011      	movs	r1, r2
 80065ea:	f7ff ff99 	bl	8006520 <_malloc_r>
 80065ee:	0004      	movs	r4, r0
 80065f0:	0020      	movs	r0, r4
 80065f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065f4:	2a00      	cmp	r2, #0
 80065f6:	d103      	bne.n	8006600 <_realloc_r+0x24>
 80065f8:	f7ff ff48 	bl	800648c <_free_r>
 80065fc:	0034      	movs	r4, r6
 80065fe:	e7f7      	b.n	80065f0 <_realloc_r+0x14>
 8006600:	f000 f834 	bl	800666c <_malloc_usable_size_r>
 8006604:	002c      	movs	r4, r5
 8006606:	42b0      	cmp	r0, r6
 8006608:	d2f2      	bcs.n	80065f0 <_realloc_r+0x14>
 800660a:	0031      	movs	r1, r6
 800660c:	0038      	movs	r0, r7
 800660e:	f7ff ff87 	bl	8006520 <_malloc_r>
 8006612:	1e04      	subs	r4, r0, #0
 8006614:	d0ec      	beq.n	80065f0 <_realloc_r+0x14>
 8006616:	0029      	movs	r1, r5
 8006618:	0032      	movs	r2, r6
 800661a:	f7ff fbdf 	bl	8005ddc <memcpy>
 800661e:	0029      	movs	r1, r5
 8006620:	0038      	movs	r0, r7
 8006622:	f7ff ff33 	bl	800648c <_free_r>
 8006626:	e7e3      	b.n	80065f0 <_realloc_r+0x14>

08006628 <_sbrk_r>:
 8006628:	2300      	movs	r3, #0
 800662a:	b570      	push	{r4, r5, r6, lr}
 800662c:	4d06      	ldr	r5, [pc, #24]	; (8006648 <_sbrk_r+0x20>)
 800662e:	0004      	movs	r4, r0
 8006630:	0008      	movs	r0, r1
 8006632:	602b      	str	r3, [r5, #0]
 8006634:	f7fb fa8e 	bl	8001b54 <_sbrk>
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	d103      	bne.n	8006644 <_sbrk_r+0x1c>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d000      	beq.n	8006644 <_sbrk_r+0x1c>
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	bd70      	pop	{r4, r5, r6, pc}
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	200003d4 	.word	0x200003d4

0800664c <__malloc_lock>:
 800664c:	b510      	push	{r4, lr}
 800664e:	4802      	ldr	r0, [pc, #8]	; (8006658 <__malloc_lock+0xc>)
 8006650:	f000 f814 	bl	800667c <__retarget_lock_acquire_recursive>
 8006654:	bd10      	pop	{r4, pc}
 8006656:	46c0      	nop			; (mov r8, r8)
 8006658:	200003dc 	.word	0x200003dc

0800665c <__malloc_unlock>:
 800665c:	b510      	push	{r4, lr}
 800665e:	4802      	ldr	r0, [pc, #8]	; (8006668 <__malloc_unlock+0xc>)
 8006660:	f000 f80d 	bl	800667e <__retarget_lock_release_recursive>
 8006664:	bd10      	pop	{r4, pc}
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	200003dc 	.word	0x200003dc

0800666c <_malloc_usable_size_r>:
 800666c:	1f0b      	subs	r3, r1, #4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	1f18      	subs	r0, r3, #4
 8006672:	2b00      	cmp	r3, #0
 8006674:	da01      	bge.n	800667a <_malloc_usable_size_r+0xe>
 8006676:	580b      	ldr	r3, [r1, r0]
 8006678:	18c0      	adds	r0, r0, r3
 800667a:	4770      	bx	lr

0800667c <__retarget_lock_acquire_recursive>:
 800667c:	4770      	bx	lr

0800667e <__retarget_lock_release_recursive>:
 800667e:	4770      	bx	lr

08006680 <_init>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	46c0      	nop			; (mov r8, r8)
 8006684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006686:	bc08      	pop	{r3}
 8006688:	469e      	mov	lr, r3
 800668a:	4770      	bx	lr

0800668c <_fini>:
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006692:	bc08      	pop	{r3}
 8006694:	469e      	mov	lr, r3
 8006696:	4770      	bx	lr
