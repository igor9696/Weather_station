
Weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006280  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08006340  08006340  00016340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064ec  080064ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064f4  080064f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f4  080064f4  000164f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064f8  080064f8  000164f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080064fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000070  0800656c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  0800656c  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ff7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003796  00000000  00000000  0003808f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0003b828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  0003c910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013fdb  00000000  00000000  0003d860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017353  00000000  00000000  0005183b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007001b  00000000  00000000  00068b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d8ba9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eac  00000000  00000000  000d8bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006328 	.word	0x08006328

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006328 	.word	0x08006328

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	1c08      	adds	r0, r1, #0
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f82e 	bl	8000498 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	0415      	lsls	r5, r2, #16
 800044c:	0c2d      	lsrs	r5, r5, #16
 800044e:	000f      	movs	r7, r1
 8000450:	0001      	movs	r1, r0
 8000452:	002e      	movs	r6, r5
 8000454:	46c6      	mov	lr, r8
 8000456:	4684      	mov	ip, r0
 8000458:	0400      	lsls	r0, r0, #16
 800045a:	0c14      	lsrs	r4, r2, #16
 800045c:	0c00      	lsrs	r0, r0, #16
 800045e:	0c09      	lsrs	r1, r1, #16
 8000460:	4346      	muls	r6, r0
 8000462:	434d      	muls	r5, r1
 8000464:	4360      	muls	r0, r4
 8000466:	4361      	muls	r1, r4
 8000468:	1940      	adds	r0, r0, r5
 800046a:	0c34      	lsrs	r4, r6, #16
 800046c:	1824      	adds	r4, r4, r0
 800046e:	b500      	push	{lr}
 8000470:	42a5      	cmp	r5, r4
 8000472:	d903      	bls.n	800047c <__aeabi_lmul+0x34>
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	0240      	lsls	r0, r0, #9
 8000478:	4680      	mov	r8, r0
 800047a:	4441      	add	r1, r8
 800047c:	0c25      	lsrs	r5, r4, #16
 800047e:	186d      	adds	r5, r5, r1
 8000480:	4661      	mov	r1, ip
 8000482:	4359      	muls	r1, r3
 8000484:	437a      	muls	r2, r7
 8000486:	0430      	lsls	r0, r6, #16
 8000488:	1949      	adds	r1, r1, r5
 800048a:	0424      	lsls	r4, r4, #16
 800048c:	0c00      	lsrs	r0, r0, #16
 800048e:	1820      	adds	r0, r4, r0
 8000490:	1889      	adds	r1, r1, r2
 8000492:	bc80      	pop	{r7}
 8000494:	46b8      	mov	r8, r7
 8000496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000498 <__udivmoddi4>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	4657      	mov	r7, sl
 800049c:	464e      	mov	r6, r9
 800049e:	4645      	mov	r5, r8
 80004a0:	46de      	mov	lr, fp
 80004a2:	b5e0      	push	{r5, r6, r7, lr}
 80004a4:	0004      	movs	r4, r0
 80004a6:	000d      	movs	r5, r1
 80004a8:	4692      	mov	sl, r2
 80004aa:	4699      	mov	r9, r3
 80004ac:	b083      	sub	sp, #12
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d830      	bhi.n	8000514 <__udivmoddi4+0x7c>
 80004b2:	d02d      	beq.n	8000510 <__udivmoddi4+0x78>
 80004b4:	4649      	mov	r1, r9
 80004b6:	4650      	mov	r0, sl
 80004b8:	f000 f8ba 	bl	8000630 <__clzdi2>
 80004bc:	0029      	movs	r1, r5
 80004be:	0006      	movs	r6, r0
 80004c0:	0020      	movs	r0, r4
 80004c2:	f000 f8b5 	bl	8000630 <__clzdi2>
 80004c6:	1a33      	subs	r3, r6, r0
 80004c8:	4698      	mov	r8, r3
 80004ca:	3b20      	subs	r3, #32
 80004cc:	469b      	mov	fp, r3
 80004ce:	d433      	bmi.n	8000538 <__udivmoddi4+0xa0>
 80004d0:	465a      	mov	r2, fp
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	4642      	mov	r2, r8
 80004d8:	001f      	movs	r7, r3
 80004da:	4653      	mov	r3, sl
 80004dc:	4093      	lsls	r3, r2
 80004de:	001e      	movs	r6, r3
 80004e0:	42af      	cmp	r7, r5
 80004e2:	d83a      	bhi.n	800055a <__udivmoddi4+0xc2>
 80004e4:	42af      	cmp	r7, r5
 80004e6:	d100      	bne.n	80004ea <__udivmoddi4+0x52>
 80004e8:	e078      	b.n	80005dc <__udivmoddi4+0x144>
 80004ea:	465b      	mov	r3, fp
 80004ec:	1ba4      	subs	r4, r4, r6
 80004ee:	41bd      	sbcs	r5, r7
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	da00      	bge.n	80004f6 <__udivmoddi4+0x5e>
 80004f4:	e075      	b.n	80005e2 <__udivmoddi4+0x14a>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	465a      	mov	r2, fp
 8000502:	4093      	lsls	r3, r2
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2301      	movs	r3, #1
 8000508:	4642      	mov	r2, r8
 800050a:	4093      	lsls	r3, r2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	e028      	b.n	8000562 <__udivmoddi4+0xca>
 8000510:	4282      	cmp	r2, r0
 8000512:	d9cf      	bls.n	80004b4 <__udivmoddi4+0x1c>
 8000514:	2200      	movs	r2, #0
 8000516:	2300      	movs	r3, #0
 8000518:	9200      	str	r2, [sp, #0]
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <__udivmoddi4+0x8e>
 8000522:	601c      	str	r4, [r3, #0]
 8000524:	605d      	str	r5, [r3, #4]
 8000526:	9800      	ldr	r0, [sp, #0]
 8000528:	9901      	ldr	r1, [sp, #4]
 800052a:	b003      	add	sp, #12
 800052c:	bcf0      	pop	{r4, r5, r6, r7}
 800052e:	46bb      	mov	fp, r7
 8000530:	46b2      	mov	sl, r6
 8000532:	46a9      	mov	r9, r5
 8000534:	46a0      	mov	r8, r4
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000538:	4642      	mov	r2, r8
 800053a:	2320      	movs	r3, #32
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	4652      	mov	r2, sl
 8000540:	40da      	lsrs	r2, r3
 8000542:	4641      	mov	r1, r8
 8000544:	0013      	movs	r3, r2
 8000546:	464a      	mov	r2, r9
 8000548:	408a      	lsls	r2, r1
 800054a:	0017      	movs	r7, r2
 800054c:	4642      	mov	r2, r8
 800054e:	431f      	orrs	r7, r3
 8000550:	4653      	mov	r3, sl
 8000552:	4093      	lsls	r3, r2
 8000554:	001e      	movs	r6, r3
 8000556:	42af      	cmp	r7, r5
 8000558:	d9c4      	bls.n	80004e4 <__udivmoddi4+0x4c>
 800055a:	2200      	movs	r2, #0
 800055c:	2300      	movs	r3, #0
 800055e:	9200      	str	r2, [sp, #0]
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0d9      	beq.n	800051c <__udivmoddi4+0x84>
 8000568:	07fb      	lsls	r3, r7, #31
 800056a:	0872      	lsrs	r2, r6, #1
 800056c:	431a      	orrs	r2, r3
 800056e:	4646      	mov	r6, r8
 8000570:	087b      	lsrs	r3, r7, #1
 8000572:	e00e      	b.n	8000592 <__udivmoddi4+0xfa>
 8000574:	42ab      	cmp	r3, r5
 8000576:	d101      	bne.n	800057c <__udivmoddi4+0xe4>
 8000578:	42a2      	cmp	r2, r4
 800057a:	d80c      	bhi.n	8000596 <__udivmoddi4+0xfe>
 800057c:	1aa4      	subs	r4, r4, r2
 800057e:	419d      	sbcs	r5, r3
 8000580:	2001      	movs	r0, #1
 8000582:	1924      	adds	r4, r4, r4
 8000584:	416d      	adcs	r5, r5
 8000586:	2100      	movs	r1, #0
 8000588:	3e01      	subs	r6, #1
 800058a:	1824      	adds	r4, r4, r0
 800058c:	414d      	adcs	r5, r1
 800058e:	2e00      	cmp	r6, #0
 8000590:	d006      	beq.n	80005a0 <__udivmoddi4+0x108>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d9ee      	bls.n	8000574 <__udivmoddi4+0xdc>
 8000596:	3e01      	subs	r6, #1
 8000598:	1924      	adds	r4, r4, r4
 800059a:	416d      	adcs	r5, r5
 800059c:	2e00      	cmp	r6, #0
 800059e:	d1f8      	bne.n	8000592 <__udivmoddi4+0xfa>
 80005a0:	9800      	ldr	r0, [sp, #0]
 80005a2:	9901      	ldr	r1, [sp, #4]
 80005a4:	465b      	mov	r3, fp
 80005a6:	1900      	adds	r0, r0, r4
 80005a8:	4169      	adcs	r1, r5
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db24      	blt.n	80005f8 <__udivmoddi4+0x160>
 80005ae:	002b      	movs	r3, r5
 80005b0:	465a      	mov	r2, fp
 80005b2:	4644      	mov	r4, r8
 80005b4:	40d3      	lsrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db2a      	blt.n	800061a <__udivmoddi4+0x182>
 80005c4:	0026      	movs	r6, r4
 80005c6:	409e      	lsls	r6, r3
 80005c8:	0033      	movs	r3, r6
 80005ca:	0026      	movs	r6, r4
 80005cc:	4647      	mov	r7, r8
 80005ce:	40be      	lsls	r6, r7
 80005d0:	0032      	movs	r2, r6
 80005d2:	1a80      	subs	r0, r0, r2
 80005d4:	4199      	sbcs	r1, r3
 80005d6:	9000      	str	r0, [sp, #0]
 80005d8:	9101      	str	r1, [sp, #4]
 80005da:	e79f      	b.n	800051c <__udivmoddi4+0x84>
 80005dc:	42a3      	cmp	r3, r4
 80005de:	d8bc      	bhi.n	800055a <__udivmoddi4+0xc2>
 80005e0:	e783      	b.n	80004ea <__udivmoddi4+0x52>
 80005e2:	4642      	mov	r2, r8
 80005e4:	2320      	movs	r3, #32
 80005e6:	2100      	movs	r1, #0
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	2200      	movs	r2, #0
 80005ec:	9100      	str	r1, [sp, #0]
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	2201      	movs	r2, #1
 80005f2:	40da      	lsrs	r2, r3
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	e786      	b.n	8000506 <__udivmoddi4+0x6e>
 80005f8:	4642      	mov	r2, r8
 80005fa:	2320      	movs	r3, #32
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	002a      	movs	r2, r5
 8000600:	4646      	mov	r6, r8
 8000602:	409a      	lsls	r2, r3
 8000604:	0023      	movs	r3, r4
 8000606:	40f3      	lsrs	r3, r6
 8000608:	4644      	mov	r4, r8
 800060a:	4313      	orrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	40e2      	lsrs	r2, r4
 8000610:	001c      	movs	r4, r3
 8000612:	465b      	mov	r3, fp
 8000614:	0015      	movs	r5, r2
 8000616:	2b00      	cmp	r3, #0
 8000618:	dad4      	bge.n	80005c4 <__udivmoddi4+0x12c>
 800061a:	4642      	mov	r2, r8
 800061c:	002f      	movs	r7, r5
 800061e:	2320      	movs	r3, #32
 8000620:	0026      	movs	r6, r4
 8000622:	4097      	lsls	r7, r2
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	40de      	lsrs	r6, r3
 8000628:	003b      	movs	r3, r7
 800062a:	4333      	orrs	r3, r6
 800062c:	e7cd      	b.n	80005ca <__udivmoddi4+0x132>
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__clzdi2>:
 8000630:	b510      	push	{r4, lr}
 8000632:	2900      	cmp	r1, #0
 8000634:	d103      	bne.n	800063e <__clzdi2+0xe>
 8000636:	f000 f807 	bl	8000648 <__clzsi2>
 800063a:	3020      	adds	r0, #32
 800063c:	e002      	b.n	8000644 <__clzdi2+0x14>
 800063e:	1c08      	adds	r0, r1, #0
 8000640:	f000 f802 	bl	8000648 <__clzsi2>
 8000644:	bd10      	pop	{r4, pc}
 8000646:	46c0      	nop			; (mov r8, r8)

08000648 <__clzsi2>:
 8000648:	211c      	movs	r1, #28
 800064a:	2301      	movs	r3, #1
 800064c:	041b      	lsls	r3, r3, #16
 800064e:	4298      	cmp	r0, r3
 8000650:	d301      	bcc.n	8000656 <__clzsi2+0xe>
 8000652:	0c00      	lsrs	r0, r0, #16
 8000654:	3910      	subs	r1, #16
 8000656:	0a1b      	lsrs	r3, r3, #8
 8000658:	4298      	cmp	r0, r3
 800065a:	d301      	bcc.n	8000660 <__clzsi2+0x18>
 800065c:	0a00      	lsrs	r0, r0, #8
 800065e:	3908      	subs	r1, #8
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	4298      	cmp	r0, r3
 8000664:	d301      	bcc.n	800066a <__clzsi2+0x22>
 8000666:	0900      	lsrs	r0, r0, #4
 8000668:	3904      	subs	r1, #4
 800066a:	a202      	add	r2, pc, #8	; (adr r2, 8000674 <__clzsi2+0x2c>)
 800066c:	5c10      	ldrb	r0, [r2, r0]
 800066e:	1840      	adds	r0, r0, r1
 8000670:	4770      	bx	lr
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	02020304 	.word	0x02020304
 8000678:	01010101 	.word	0x01010101
	...

08000684 <read8>:

BMP280_t sensor;

// Read / Write functions
static uint8_t read8(uint8_t memory_address)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b089      	sub	sp, #36	; 0x24
 8000688:	af04      	add	r7, sp, #16
 800068a:	0002      	movs	r2, r0
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, &tmp, 1, I2C_Timeout);
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <read8+0x3c>)
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <read8+0x3c>)
 8000696:	791b      	ldrb	r3, [r3, #4]
 8000698:	b299      	uxth	r1, r3
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b29a      	uxth	r2, r3
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	9302      	str	r3, [sp, #8]
 80006a4:	2301      	movs	r3, #1
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	240f      	movs	r4, #15
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	f002 f90a 	bl	80028c8 <HAL_I2C_Mem_Read>
	return tmp;
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	781b      	ldrb	r3, [r3, #0]
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b005      	add	sp, #20
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	20000098 	.word	0x20000098

080006c4 <read16>:

static uint16_t read16(uint8_t memory_address)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af04      	add	r7, sp, #16
 80006ca:	0002      	movs	r2, r0
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	701a      	strb	r2, [r3, #0]
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, tmp, 2, I2C_Timeout);
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <read16+0x50>)
 80006d2:	6818      	ldr	r0, [r3, #0]
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <read16+0x50>)
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	b299      	uxth	r1, r3
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	2364      	movs	r3, #100	; 0x64
 80006e2:	9302      	str	r3, [sp, #8]
 80006e4:	2302      	movs	r3, #2
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	240c      	movs	r4, #12
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2301      	movs	r3, #1
 80006f0:	f002 f8ea 	bl	80028c8 <HAL_I2C_Mem_Read>
	return (tmp[1] << 8) | (tmp[0]);
 80006f4:	0021      	movs	r1, r4
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	785b      	ldrb	r3, [r3, #1]
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	b21a      	sxth	r2, r3
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b21b      	sxth	r3, r3
 8000704:	4313      	orrs	r3, r2
 8000706:	b21b      	sxth	r3, r3
 8000708:	b29b      	uxth	r3, r3
}
 800070a:	0018      	movs	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	b005      	add	sp, #20
 8000710:	bd90      	pop	{r4, r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	20000098 	.word	0x20000098

08000718 <temp_press_burst_read>:

static void temp_press_burst_read(uint8_t* buff)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af04      	add	r7, sp, #16
 800071e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(sensor.hi2c, sensor.I2C_Addr, press_msb, 1, buff, 6, I2C_Timeout);
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <temp_press_burst_read+0x30>)
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <temp_press_burst_read+0x30>)
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	b299      	uxth	r1, r3
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2306      	movs	r3, #6
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	22f7      	movs	r2, #247	; 0xf7
 800073a:	f002 f8c5 	bl	80028c8 <HAL_I2C_Mem_Read>
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	20000098 	.word	0x20000098

0800074c <write8>:

static void write8(uint8_t memory_address, uint8_t* data)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af04      	add	r7, sp, #16
 8000752:	0002      	movs	r2, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(sensor.hi2c, sensor.I2C_Addr, memory_address, 1, data, 1, I2C_Timeout);
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <write8+0x38>)
 800075c:	6818      	ldr	r0, [r3, #0]
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <write8+0x38>)
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	b299      	uxth	r1, r3
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b29a      	uxth	r2, r3
 800076a:	2364      	movs	r3, #100	; 0x64
 800076c:	9302      	str	r3, [sp, #8]
 800076e:	2301      	movs	r3, #1
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2301      	movs	r3, #1
 8000778:	f001 ff78 	bl	800266c <HAL_I2C_Mem_Write>
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b002      	add	sp, #8
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000098 	.word	0x20000098

08000788 <BMP280_set_mode>:

// User functions
void BMP280_set_mode(BMP_Mode mode)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	0002      	movs	r2, r0
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = read8(ctrl_meas);
 8000794:	20f4      	movs	r0, #244	; 0xf4
 8000796:	f7ff ff75 	bl	8000684 <read8>
 800079a:	0003      	movs	r3, r0
 800079c:	001a      	movs	r2, r3
 800079e:	230f      	movs	r3, #15
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	701a      	strb	r2, [r3, #0]

	switch(mode)
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d028      	beq.n	80007fe <BMP280_set_mode+0x76>
 80007ac:	dc3c      	bgt.n	8000828 <BMP280_set_mode+0xa0>
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <BMP280_set_mode+0x30>
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d00e      	beq.n	80007d4 <BMP280_set_mode+0x4c>
		tmp &= 0xFC;
		tmp |= 0x03;
		write8(ctrl_meas, &tmp);
		break;
	}
}
 80007b6:	e037      	b.n	8000828 <BMP280_set_mode+0xa0>
		tmp &= 0xFC;
 80007b8:	210f      	movs	r1, #15
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2203      	movs	r2, #3
 80007c0:	4393      	bics	r3, r2
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	701a      	strb	r2, [r3, #0]
		write8(ctrl_meas, &tmp);
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	0019      	movs	r1, r3
 80007cc:	20f4      	movs	r0, #244	; 0xf4
 80007ce:	f7ff ffbd 	bl	800074c <write8>
		break;
 80007d2:	e029      	b.n	8000828 <BMP280_set_mode+0xa0>
		tmp &= 0xFC;
 80007d4:	210f      	movs	r1, #15
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2203      	movs	r2, #3
 80007dc:	4393      	bics	r3, r2
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	701a      	strb	r2, [r3, #0]
		tmp |= 0x01;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	701a      	strb	r2, [r3, #0]
		write8(ctrl_meas, &tmp);
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	0019      	movs	r1, r3
 80007f6:	20f4      	movs	r0, #244	; 0xf4
 80007f8:	f7ff ffa8 	bl	800074c <write8>
		break;
 80007fc:	e014      	b.n	8000828 <BMP280_set_mode+0xa0>
		tmp &= 0xFC;
 80007fe:	210f      	movs	r1, #15
 8000800:	187b      	adds	r3, r7, r1
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2203      	movs	r2, #3
 8000806:	4393      	bics	r3, r2
 8000808:	b2da      	uxtb	r2, r3
 800080a:	187b      	adds	r3, r7, r1
 800080c:	701a      	strb	r2, [r3, #0]
		tmp |= 0x03;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2203      	movs	r2, #3
 8000814:	4313      	orrs	r3, r2
 8000816:	b2da      	uxtb	r2, r3
 8000818:	187b      	adds	r3, r7, r1
 800081a:	701a      	strb	r2, [r3, #0]
		write8(ctrl_meas, &tmp);
 800081c:	187b      	adds	r3, r7, r1
 800081e:	0019      	movs	r1, r3
 8000820:	20f4      	movs	r0, #244	; 0xf4
 8000822:	f7ff ff93 	bl	800074c <write8>
		break;
 8000826:	46c0      	nop			; (mov r8, r8)
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b004      	add	sp, #16
 800082e:	bd80      	pop	{r7, pc}

08000830 <BMP280_set_temp_OVS>:

void BMP280_set_temp_OVS(BMP_OVS_rate Rate)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	0002      	movs	r2, r0
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = read8(ctrl_meas);
 800083c:	20f4      	movs	r0, #244	; 0xf4
 800083e:	f7ff ff21 	bl	8000684 <read8>
 8000842:	0003      	movs	r3, r0
 8000844:	001a      	movs	r2, r3
 8000846:	210f      	movs	r1, #15
 8000848:	187b      	adds	r3, r7, r1
 800084a:	701a      	strb	r2, [r3, #0]

	tmp &= 0x1F; // CLEAR bits
 800084c:	187b      	adds	r3, r7, r1
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	221f      	movs	r2, #31
 8000852:	4013      	ands	r3, r2
 8000854:	b2da      	uxtb	r2, r3
 8000856:	187b      	adds	r3, r7, r1
 8000858:	701a      	strb	r2, [r3, #0]
	tmp |= (Rate << 5);
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	015b      	lsls	r3, r3, #5
 8000860:	b25a      	sxtb	r2, r3
 8000862:	187b      	adds	r3, r7, r1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b25b      	sxtb	r3, r3
 8000868:	4313      	orrs	r3, r2
 800086a:	b25b      	sxtb	r3, r3
 800086c:	b2da      	uxtb	r2, r3
 800086e:	187b      	adds	r3, r7, r1
 8000870:	701a      	strb	r2, [r3, #0]
	write8(ctrl_meas, &tmp);
 8000872:	187b      	adds	r3, r7, r1
 8000874:	0019      	movs	r1, r3
 8000876:	20f4      	movs	r0, #244	; 0xf4
 8000878:	f7ff ff68 	bl	800074c <write8>
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b004      	add	sp, #16
 8000882:	bd80      	pop	{r7, pc}

08000884 <BMP280_set_press_OVS>:


void BMP280_set_press_OVS(BMP_OVS_rate Rate)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	0002      	movs	r2, r0
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = read8(ctrl_meas);
 8000890:	20f4      	movs	r0, #244	; 0xf4
 8000892:	f7ff fef7 	bl	8000684 <read8>
 8000896:	0003      	movs	r3, r0
 8000898:	001a      	movs	r2, r3
 800089a:	210f      	movs	r1, #15
 800089c:	187b      	adds	r3, r7, r1
 800089e:	701a      	strb	r2, [r3, #0]

	tmp &= 0xE3; // CLEAR bits
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	221c      	movs	r2, #28
 80008a6:	4393      	bics	r3, r2
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	701a      	strb	r2, [r3, #0]
	tmp |= (Rate << 2);
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	b25a      	sxtb	r2, r3
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	701a      	strb	r2, [r3, #0]

	write8(ctrl_meas, &tmp);
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	0019      	movs	r1, r3
 80008ca:	20f4      	movs	r0, #244	; 0xf4
 80008cc:	f7ff ff3e 	bl	800074c <write8>
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b004      	add	sp, #16
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <BMP280_set_filter>:

void BMP280_set_filter(BMP_filter_rate Rate)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	0002      	movs	r2, r0
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = read8(config);
 80008e4:	20f5      	movs	r0, #245	; 0xf5
 80008e6:	f7ff fecd 	bl	8000684 <read8>
 80008ea:	0003      	movs	r3, r0
 80008ec:	001a      	movs	r2, r3
 80008ee:	210f      	movs	r1, #15
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	701a      	strb	r2, [r3, #0]
	tmp &= 0xE3; // CLEAR bits
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	221c      	movs	r2, #28
 80008fa:	4393      	bics	r3, r2
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	701a      	strb	r2, [r3, #0]
	tmp |= (Rate << 2);
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	b25a      	sxtb	r2, r3
 800090a:	187b      	adds	r3, r7, r1
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b25b      	sxtb	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b25b      	sxtb	r3, r3
 8000914:	b2da      	uxtb	r2, r3
 8000916:	187b      	adds	r3, r7, r1
 8000918:	701a      	strb	r2, [r3, #0]

	write8(ctrl_meas, &tmp);
 800091a:	187b      	adds	r3, r7, r1
 800091c:	0019      	movs	r1, r3
 800091e:	20f4      	movs	r0, #244	; 0xf4
 8000920:	f7ff ff14 	bl	800074c <write8>
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b004      	add	sp, #16
 800092a:	bd80      	pop	{r7, pc}

0800092c <BMP280_temp_compensate>:


static int32_t BMP280_temp_compensate(int32_t temp_raw)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, t_fine;

	var1 = ((((temp_raw>>3)-((int32_t)sensor.dig_t1<<1))) * ((int32_t)sensor.dig_t2)) >> 11;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	10da      	asrs	r2, r3, #3
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <BMP280_temp_compensate+0x58>)
 800093a:	88db      	ldrh	r3, [r3, #6]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	4a10      	ldr	r2, [pc, #64]	; (8000984 <BMP280_temp_compensate+0x58>)
 8000942:	2108      	movs	r1, #8
 8000944:	5e52      	ldrsh	r2, [r2, r1]
 8000946:	4353      	muls	r3, r2
 8000948:	12db      	asrs	r3, r3, #11
 800094a:	617b      	str	r3, [r7, #20]
	var2 = (((((temp_raw>>4)-((int32_t)sensor.dig_t1)) * ((temp_raw>>4)-((int32_t)sensor.dig_t1))) >> 12) *  ((int32_t)sensor.dig_t3)) >> 14;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	111b      	asrs	r3, r3, #4
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <BMP280_temp_compensate+0x58>)
 8000952:	88d2      	ldrh	r2, [r2, #6]
 8000954:	1a9b      	subs	r3, r3, r2
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	1112      	asrs	r2, r2, #4
 800095a:	490a      	ldr	r1, [pc, #40]	; (8000984 <BMP280_temp_compensate+0x58>)
 800095c:	88c9      	ldrh	r1, [r1, #6]
 800095e:	1a52      	subs	r2, r2, r1
 8000960:	4353      	muls	r3, r2
 8000962:	131b      	asrs	r3, r3, #12
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <BMP280_temp_compensate+0x58>)
 8000966:	210a      	movs	r1, #10
 8000968:	5e52      	ldrsh	r2, [r2, r1]
 800096a:	4353      	muls	r3, r2
 800096c:	139b      	asrs	r3, r3, #14
 800096e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	18d3      	adds	r3, r2, r3
 8000976:	60fb      	str	r3, [r7, #12]

	return t_fine;
 8000978:	68fb      	ldr	r3, [r7, #12]
}
 800097a:	0018      	movs	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	b006      	add	sp, #24
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	20000098 	.word	0x20000098

08000988 <BMP280_press_compensate>:

static uint32_t BMP280_press_compensate(int32_t press_raw, int32_t t_fine)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
	int32_t var1, var2;
	uint32_t p;
	var1 = (((int32_t)t_fine)>>1)-(int32_t)64000;
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	105b      	asrs	r3, r3, #1
 8000996:	4a4a      	ldr	r2, [pc, #296]	; (8000ac0 <BMP280_press_compensate+0x138>)
 8000998:	4694      	mov	ip, r2
 800099a:	4463      	add	r3, ip
 800099c:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)sensor.dig_p6);
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	109b      	asrs	r3, r3, #2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	1092      	asrs	r2, r2, #2
 80009a6:	4353      	muls	r3, r2
 80009a8:	12db      	asrs	r3, r3, #11
 80009aa:	4a46      	ldr	r2, [pc, #280]	; (8000ac4 <BMP280_press_compensate+0x13c>)
 80009ac:	2116      	movs	r1, #22
 80009ae:	5e52      	ldrsh	r2, [r2, r1]
 80009b0:	4353      	muls	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((int32_t)sensor.dig_p5))<<1);
 80009b4:	4b43      	ldr	r3, [pc, #268]	; (8000ac4 <BMP280_press_compensate+0x13c>)
 80009b6:	2214      	movs	r2, #20
 80009b8:	5e9b      	ldrsh	r3, [r3, r2]
 80009ba:	001a      	movs	r2, r3
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	4353      	muls	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((int32_t)sensor.dig_p4)<<16);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	109a      	asrs	r2, r3, #2
 80009cc:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <BMP280_press_compensate+0x13c>)
 80009ce:	2112      	movs	r1, #18
 80009d0:	5e5b      	ldrsh	r3, [r3, r1]
 80009d2:	041b      	lsls	r3, r3, #16
 80009d4:	18d3      	adds	r3, r2, r3
 80009d6:	60fb      	str	r3, [r7, #12]
	var1 = (((sensor.dig_p3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)sensor.dig_p2) * var1)>>1))>>18;
 80009d8:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <BMP280_press_compensate+0x13c>)
 80009da:	2210      	movs	r2, #16
 80009dc:	5e9b      	ldrsh	r3, [r3, r2]
 80009de:	0019      	movs	r1, r3
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	109b      	asrs	r3, r3, #2
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	1092      	asrs	r2, r2, #2
 80009e8:	4353      	muls	r3, r2
 80009ea:	135b      	asrs	r3, r3, #13
 80009ec:	434b      	muls	r3, r1
 80009ee:	10da      	asrs	r2, r3, #3
 80009f0:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <BMP280_press_compensate+0x13c>)
 80009f2:	210e      	movs	r1, #14
 80009f4:	5e5b      	ldrsh	r3, [r3, r1]
 80009f6:	0019      	movs	r1, r3
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	434b      	muls	r3, r1
 80009fc:	105b      	asrs	r3, r3, #1
 80009fe:	18d3      	adds	r3, r2, r3
 8000a00:	149b      	asrs	r3, r3, #18
 8000a02:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((int32_t)sensor.dig_p1))>>15);
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	0212      	lsls	r2, r2, #8
 8000a0a:	4694      	mov	ip, r2
 8000a0c:	4463      	add	r3, ip
 8000a0e:	4a2d      	ldr	r2, [pc, #180]	; (8000ac4 <BMP280_press_compensate+0x13c>)
 8000a10:	8992      	ldrh	r2, [r2, #12]
 8000a12:	4353      	muls	r3, r2
 8000a14:	13db      	asrs	r3, r3, #15
 8000a16:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <BMP280_press_compensate+0x9a>
	{
	return 0; // avoid exception caused by division by zero
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e049      	b.n	8000ab6 <BMP280_press_compensate+0x12e>
	}
	p = (((uint32_t)(((int32_t)1048576)-press_raw)-(var2>>12)))*3125;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	131b      	asrs	r3, r3, #12
 8000a26:	001a      	movs	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	18d2      	adds	r2, r2, r3
 8000a2c:	0013      	movs	r3, r2
 8000a2e:	015b      	lsls	r3, r3, #5
 8000a30:	1a9b      	subs	r3, r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	189b      	adds	r3, r3, r2
 8000a36:	009a      	lsls	r2, r3, #2
 8000a38:	189b      	adds	r3, r3, r2
 8000a3a:	009a      	lsls	r2, r3, #2
 8000a3c:	189b      	adds	r3, r3, r2
 8000a3e:	425b      	negs	r3, r3
 8000a40:	4a21      	ldr	r2, [pc, #132]	; (8000ac8 <BMP280_press_compensate+0x140>)
 8000a42:	4694      	mov	ip, r2
 8000a44:	4463      	add	r3, ip
 8000a46:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	db09      	blt.n	8000a62 <BMP280_press_compensate+0xda>
	{
	p = (p << 1) / ((uint32_t)var1);
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	0011      	movs	r1, r2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff fb60 	bl	800011c <__udivsi3>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e007      	b.n	8000a72 <BMP280_press_compensate+0xea>
	}
	else
	{
	p = (p / (uint32_t)var1) * 2;
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	0019      	movs	r1, r3
 8000a66:	6978      	ldr	r0, [r7, #20]
 8000a68:	f7ff fb58 	bl	800011c <__udivsi3>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t)sensor.dig_p9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <BMP280_press_compensate+0x13c>)
 8000a74:	221c      	movs	r2, #28
 8000a76:	5e9b      	ldrsh	r3, [r3, r2]
 8000a78:	0019      	movs	r1, r3
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	08d2      	lsrs	r2, r2, #3
 8000a82:	4353      	muls	r3, r2
 8000a84:	0b5b      	lsrs	r3, r3, #13
 8000a86:	434b      	muls	r3, r1
 8000a88:	131b      	asrs	r3, r3, #12
 8000a8a:	613b      	str	r3, [r7, #16]
	var2 = (((int32_t)(p>>2)) * ((int32_t)sensor.dig_p8))>>13;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	001a      	movs	r2, r3
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <BMP280_press_compensate+0x13c>)
 8000a94:	211a      	movs	r1, #26
 8000a96:	5e5b      	ldrsh	r3, [r3, r1]
 8000a98:	4353      	muls	r3, r2
 8000a9a:	135b      	asrs	r3, r3, #13
 8000a9c:	60fb      	str	r3, [r7, #12]
	p = (uint32_t)((int32_t)p + ((var1 + var2 + sensor.dig_p7) >> 4));
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	18d3      	adds	r3, r2, r3
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <BMP280_press_compensate+0x13c>)
 8000aa6:	2118      	movs	r1, #24
 8000aa8:	5e52      	ldrsh	r2, [r2, r1]
 8000aaa:	189b      	adds	r3, r3, r2
 8000aac:	111a      	asrs	r2, r3, #4
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	18d3      	adds	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
	return p;
 8000ab4:	697b      	ldr	r3, [r7, #20]

}
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b006      	add	sp, #24
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	ffff0600 	.word	0xffff0600
 8000ac4:	20000098 	.word	0x20000098
 8000ac8:	c3500000 	.word	0xc3500000

08000acc <BMP280_get_data_FORCED>:


void BMP280_get_data_FORCED(int32_t* temperature, uint32_t* pressure)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b089      	sub	sp, #36	; 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
	BMP280_set_mode(FORCED); // start conversion
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f7ff fe56 	bl	8000788 <BMP280_set_mode>
	int32_t press_raw;
	uint8_t tmp_buff[6];
	int32_t t_fine;


	temp_press_burst_read(tmp_buff);
 8000adc:	240c      	movs	r4, #12
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff fe19 	bl	8000718 <temp_press_burst_read>
	press_raw = tmp_buff[0] << 12 | (tmp_buff[1] << 4) | (tmp_buff[2] >> 4);
 8000ae6:	0021      	movs	r1, r4
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	031a      	lsls	r2, r3, #12
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	785b      	ldrb	r3, [r3, #1]
 8000af2:	011b      	lsls	r3, r3, #4
 8000af4:	4313      	orrs	r3, r2
 8000af6:	187a      	adds	r2, r7, r1
 8000af8:	7892      	ldrb	r2, [r2, #2]
 8000afa:	0912      	lsrs	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	4313      	orrs	r3, r2
 8000b00:	61fb      	str	r3, [r7, #28]
	temp_raw = tmp_buff[3] << 12 | (tmp_buff[4] << 4) | (tmp_buff[5] >> 4);
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	78db      	ldrb	r3, [r3, #3]
 8000b06:	031a      	lsls	r2, r3, #12
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	791b      	ldrb	r3, [r3, #4]
 8000b0c:	011b      	lsls	r3, r3, #4
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	187a      	adds	r2, r7, r1
 8000b12:	7952      	ldrb	r2, [r2, #5]
 8000b14:	0912      	lsrs	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]

	// compensate temperature
	t_fine = BMP280_temp_compensate(temp_raw);
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f7ff ff04 	bl	800092c <BMP280_temp_compensate>
 8000b24:	0003      	movs	r3, r0
 8000b26:	617b      	str	r3, [r7, #20]
	*temperature = ((t_fine * 5 + 128) >> 8) / 100; // return temperature in [C]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	0013      	movs	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	189b      	adds	r3, r3, r2
 8000b30:	3380      	adds	r3, #128	; 0x80
 8000b32:	121b      	asrs	r3, r3, #8
 8000b34:	2164      	movs	r1, #100	; 0x64
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff fb7a 	bl	8000230 <__divsi3>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	001a      	movs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	601a      	str	r2, [r3, #0]

	// compensate pressure
	*pressure = (BMP280_press_compensate(press_raw, t_fine)) / 100; // return pressure in [Pa]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	0011      	movs	r1, r2
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff ff1c 	bl	8000988 <BMP280_press_compensate>
 8000b50:	0003      	movs	r3, r0
 8000b52:	2164      	movs	r1, #100	; 0x64
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff fae1 	bl	800011c <__udivsi3>
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	601a      	str	r2, [r3, #0]
}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b009      	add	sp, #36	; 0x24
 8000b68:	bd90      	pop	{r4, r7, pc}
	...

08000b6c <BMP280_Init>:




BMP_Status BMP280_Init(I2C_HandleTypeDef* hi2c, uint8_t I2C_Address)
{
 8000b6c:	b5b0      	push	{r4, r5, r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	000a      	movs	r2, r1
 8000b76:	1cfb      	adds	r3, r7, #3
 8000b78:	701a      	strb	r2, [r3, #0]
	sensor.hi2c = hi2c;
 8000b7a:	4b3c      	ldr	r3, [pc, #240]	; (8000c6c <BMP280_Init+0x100>)
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	601a      	str	r2, [r3, #0]
	sensor.I2C_Addr = (I2C_Address << 1);
 8000b80:	1cfb      	adds	r3, r7, #3
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	18db      	adds	r3, r3, r3
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	4b38      	ldr	r3, [pc, #224]	; (8000c6c <BMP280_Init+0x100>)
 8000b8a:	711a      	strb	r2, [r3, #4]

	// check sensor ID
	uint8_t sensor_id = read8(ID);
 8000b8c:	250f      	movs	r5, #15
 8000b8e:	197c      	adds	r4, r7, r5
 8000b90:	20d0      	movs	r0, #208	; 0xd0
 8000b92:	f7ff fd77 	bl	8000684 <read8>
 8000b96:	0003      	movs	r3, r0
 8000b98:	7023      	strb	r3, [r4, #0]
	if(sensor_id != CHIP_ID)
 8000b9a:	197b      	adds	r3, r7, r5
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b58      	cmp	r3, #88	; 0x58
 8000ba0:	d001      	beq.n	8000ba6 <BMP280_Init+0x3a>
	{
		return BMP280_NOK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e05d      	b.n	8000c62 <BMP280_Init+0xf6>
	}

	// load calibration coefficients
	sensor.dig_t1 = read16(dig_T1);
 8000ba6:	2088      	movs	r0, #136	; 0x88
 8000ba8:	f7ff fd8c 	bl	80006c4 <read16>
 8000bac:	0003      	movs	r3, r0
 8000bae:	001a      	movs	r2, r3
 8000bb0:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <BMP280_Init+0x100>)
 8000bb2:	80da      	strh	r2, [r3, #6]
	sensor.dig_t2 = read16(dig_T2);
 8000bb4:	208a      	movs	r0, #138	; 0x8a
 8000bb6:	f7ff fd85 	bl	80006c4 <read16>
 8000bba:	0003      	movs	r3, r0
 8000bbc:	b21a      	sxth	r2, r3
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <BMP280_Init+0x100>)
 8000bc0:	811a      	strh	r2, [r3, #8]
	sensor.dig_t3 = read16(dig_T3);
 8000bc2:	208c      	movs	r0, #140	; 0x8c
 8000bc4:	f7ff fd7e 	bl	80006c4 <read16>
 8000bc8:	0003      	movs	r3, r0
 8000bca:	b21a      	sxth	r2, r3
 8000bcc:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <BMP280_Init+0x100>)
 8000bce:	815a      	strh	r2, [r3, #10]
	sensor.dig_p1 = read16(dig_P1);
 8000bd0:	208e      	movs	r0, #142	; 0x8e
 8000bd2:	f7ff fd77 	bl	80006c4 <read16>
 8000bd6:	0003      	movs	r3, r0
 8000bd8:	001a      	movs	r2, r3
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <BMP280_Init+0x100>)
 8000bdc:	819a      	strh	r2, [r3, #12]
	sensor.dig_p2 = read16(dig_P2);
 8000bde:	2090      	movs	r0, #144	; 0x90
 8000be0:	f7ff fd70 	bl	80006c4 <read16>
 8000be4:	0003      	movs	r3, r0
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <BMP280_Init+0x100>)
 8000bea:	81da      	strh	r2, [r3, #14]
	sensor.dig_p3 = read16(dig_P3);
 8000bec:	2092      	movs	r0, #146	; 0x92
 8000bee:	f7ff fd69 	bl	80006c4 <read16>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	b21a      	sxth	r2, r3
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <BMP280_Init+0x100>)
 8000bf8:	821a      	strh	r2, [r3, #16]
	sensor.dig_p4 = read16(dig_P4);
 8000bfa:	2094      	movs	r0, #148	; 0x94
 8000bfc:	f7ff fd62 	bl	80006c4 <read16>
 8000c00:	0003      	movs	r3, r0
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <BMP280_Init+0x100>)
 8000c06:	825a      	strh	r2, [r3, #18]
	sensor.dig_p5 = read16(dig_P5);
 8000c08:	2096      	movs	r0, #150	; 0x96
 8000c0a:	f7ff fd5b 	bl	80006c4 <read16>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	b21a      	sxth	r2, r3
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <BMP280_Init+0x100>)
 8000c14:	829a      	strh	r2, [r3, #20]
	sensor.dig_p6 = read16(dig_P6);
 8000c16:	2098      	movs	r0, #152	; 0x98
 8000c18:	f7ff fd54 	bl	80006c4 <read16>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	b21a      	sxth	r2, r3
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <BMP280_Init+0x100>)
 8000c22:	82da      	strh	r2, [r3, #22]
	sensor.dig_p7 = read16(dig_P7);
 8000c24:	209a      	movs	r0, #154	; 0x9a
 8000c26:	f7ff fd4d 	bl	80006c4 <read16>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <BMP280_Init+0x100>)
 8000c30:	831a      	strh	r2, [r3, #24]
	sensor.dig_p8 = read16(dig_P8);
 8000c32:	209c      	movs	r0, #156	; 0x9c
 8000c34:	f7ff fd46 	bl	80006c4 <read16>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <BMP280_Init+0x100>)
 8000c3e:	835a      	strh	r2, [r3, #26]
	sensor.dig_p9 = read16(dig_P9);
 8000c40:	209e      	movs	r0, #158	; 0x9e
 8000c42:	f7ff fd3f 	bl	80006c4 <read16>
 8000c46:	0003      	movs	r3, r0
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <BMP280_Init+0x100>)
 8000c4c:	839a      	strh	r2, [r3, #28]

	// initial sensor setup
	// Mode - Forced, Oversampling - UltraLowPower, osrs_p - x1, osrs_t - x1, IIR - off
	// Timing - 1/min, ODR - 1/60Hz, BW - Full

	 BMP280_set_filter(OFF);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fe42 	bl	80008d8 <BMP280_set_filter>
	 BMP280_set_temp_OVS(x1);
 8000c54:	2001      	movs	r0, #1
 8000c56:	f7ff fdeb 	bl	8000830 <BMP280_set_temp_OVS>
	 BMP280_set_press_OVS(x1);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f7ff fe12 	bl	8000884 <BMP280_set_press_OVS>

	return BMP280_OK;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b004      	add	sp, #16
 8000c68:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	20000098 	.word	0x20000098

08000c70 <ESP8266_Check_OK_Respond>:
#include "ESP01.h"

extern const char API_Key[];

static ESP_status ESP8266_Check_OK_Respond(ESP8266_t* ESP)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	if(ESP->ESP_RX_Buff.BUFFER_EMPTY_FLAG)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	228b      	movs	r2, #139	; 0x8b
 8000c7c:	5c9b      	ldrb	r3, [r3, r2]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <ESP8266_Check_OK_Respond+0x16>
	{
		return ESP_NOK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e015      	b.n	8000cb2 <ESP8266_Check_OK_Respond+0x42>
	}

	Parser_clean_string(&ESP->ESP_RX_Buff, ESP->MessageReceive);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3308      	adds	r3, #8
 8000c8a:	001a      	movs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	338d      	adds	r3, #141	; 0x8d
 8000c90:	0019      	movs	r1, r3
 8000c92:	0010      	movs	r0, r2
 8000c94:	f000 feb9 	bl	8001a0a <Parser_clean_string>

	if(!(Parser_simple_parse("OK", ESP->MessageReceive)))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	338d      	adds	r3, #141	; 0x8d
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <ESP8266_Check_OK_Respond+0x4c>)
 8000ca0:	0011      	movs	r1, r2
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 fefa 	bl	8001a9c <Parser_simple_parse>
 8000ca8:	1e03      	subs	r3, r0, #0
 8000caa:	d101      	bne.n	8000cb0 <ESP8266_Check_OK_Respond+0x40>
	{
		return ESP_NOK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	e000      	b.n	8000cb2 <ESP8266_Check_OK_Respond+0x42>
	}

	return ESP_OK;
 8000cb0:	2301      	movs	r3, #1
}
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	08006340 	.word	0x08006340

08000cc0 <ESP8266_is_TCP_disconnected>:


static ESP_status ESP8266_is_TCP_disconnected(ESP8266_t* ESP)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	if(ESP->ESP_RX_Buff.BUFFER_EMPTY_FLAG)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	228b      	movs	r2, #139	; 0x8b
 8000ccc:	5c9b      	ldrb	r3, [r3, r2]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <ESP8266_is_TCP_disconnected+0x16>
	{
		return ESP_NOK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e015      	b.n	8000d02 <ESP8266_is_TCP_disconnected+0x42>
	}

	Parser_clean_string(&ESP->ESP_RX_Buff, ESP->MessageReceive);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3308      	adds	r3, #8
 8000cda:	001a      	movs	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	338d      	adds	r3, #141	; 0x8d
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	0010      	movs	r0, r2
 8000ce4:	f000 fe91 	bl	8001a0a <Parser_clean_string>

	if(!(Parser_simple_parse("CLOSED", ESP->MessageReceive)))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	338d      	adds	r3, #141	; 0x8d
 8000cec:	001a      	movs	r2, r3
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <ESP8266_is_TCP_disconnected+0x4c>)
 8000cf0:	0011      	movs	r1, r2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 fed2 	bl	8001a9c <Parser_simple_parse>
 8000cf8:	1e03      	subs	r3, r0, #0
 8000cfa:	d101      	bne.n	8000d00 <ESP8266_is_TCP_disconnected+0x40>
	{
		return ESP_NOK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e000      	b.n	8000d02 <ESP8266_is_TCP_disconnected+0x42>
	}

	return ESP_OK;
 8000d00:	2301      	movs	r3, #1

}
 8000d02:	0018      	movs	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	08006344 	.word	0x08006344

08000d10 <ESP8266_CheckAT>:



static ESP_status ESP8266_CheckAT(ESP8266_t* ESP)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	UART_send_string("AT\r\n");
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <ESP8266_CheckAT+0x3c>)
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 faa8 	bl	8001270 <UART_send_string>
	HAL_Delay(ESP_RESPOND_TIME);
 8000d20:	2064      	movs	r0, #100	; 0x64
 8000d22:	f001 f8bf 	bl	8001ea4 <HAL_Delay>

	if(ESP8266_Check_OK_Respond(ESP) != ESP_OK)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff ffa1 	bl	8000c70 <ESP8266_Check_OK_Respond>
 8000d2e:	0003      	movs	r3, r0
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d001      	beq.n	8000d38 <ESP8266_CheckAT+0x28>
	{
		return ESP_NOK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	e005      	b.n	8000d44 <ESP8266_CheckAT+0x34>
	}

	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3308      	adds	r3, #8
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 fa84 	bl	800124a <RB_Flush>
	return ESP_OK;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	0018      	movs	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b002      	add	sp, #8
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	0800634c 	.word	0x0800634c

08000d50 <ESP8266_Connect_To_Router>:


static ESP_status ESP8266_Connect_To_Router(ESP8266_t* ESP)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b08d      	sub	sp, #52	; 0x34
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	uint8_t message[36];
	uint8_t length;
	length = sprintf((char*)message, "AT+CWJAP=\"%s\",\"%s\"\r\n", ESP->SSID, ESP->PSWD);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	4913      	ldr	r1, [pc, #76]	; (8000db0 <ESP8266_Connect_To_Router+0x60>)
 8000d62:	2408      	movs	r4, #8
 8000d64:	1938      	adds	r0, r7, r4
 8000d66:	f004 fea3 	bl	8005ab0 <siprintf>
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	212f      	movs	r1, #47	; 0x2f
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	701a      	strb	r2, [r3, #0]
	UART_send_message((char*)message, length);
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	781a      	ldrb	r2, [r3, #0]
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	0011      	movs	r1, r2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f000 fa96 	bl	80012ac <UART_send_message>

	HAL_Delay(20000);
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <ESP8266_Connect_To_Router+0x64>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f001 f88e 	bl	8001ea4 <HAL_Delay>

	if(ESP8266_Check_OK_Respond(ESP) != ESP_OK)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff ff70 	bl	8000c70 <ESP8266_Check_OK_Respond>
 8000d90:	0003      	movs	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d001      	beq.n	8000d9a <ESP8266_Connect_To_Router+0x4a>
	{
		return ESP_NOK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e005      	b.n	8000da6 <ESP8266_Connect_To_Router+0x56>
	}

	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3308      	adds	r3, #8
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 fa53 	bl	800124a <RB_Flush>
	return ESP_OK;
 8000da4:	2301      	movs	r3, #1
}
 8000da6:	0018      	movs	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b00d      	add	sp, #52	; 0x34
 8000dac:	bd90      	pop	{r4, r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	08006354 	.word	0x08006354
 8000db4:	00004e20 	.word	0x00004e20

08000db8 <ESP8266_SetMode>:

ESP_status ESP8266_SetMode(ESP8266_t* ESP, ESP_mode mode)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	000a      	movs	r2, r1
 8000dc2:	1cfb      	adds	r3, r7, #3
 8000dc4:	701a      	strb	r2, [r3, #0]
	switch(mode)
 8000dc6:	1cfb      	adds	r3, r7, #3
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d00f      	beq.n	8000dee <ESP8266_SetMode+0x36>
 8000dce:	dc13      	bgt.n	8000df8 <ESP8266_SetMode+0x40>
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <ESP8266_SetMode+0x22>
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d005      	beq.n	8000de4 <ESP8266_SetMode+0x2c>
 8000dd8:	e00e      	b.n	8000df8 <ESP8266_SetMode+0x40>
	{
	case STATION:
		UART_send_string("AT+CWMODE=1\r\n"); // Set WiFi mode to station mode
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <ESP8266_SetMode+0x6c>)
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 fa47 	bl	8001270 <UART_send_string>
		break;
 8000de2:	e009      	b.n	8000df8 <ESP8266_SetMode+0x40>

	case ACCESS_POINT:
		UART_send_string("AT+CWMODE=2\r\n"); // Set WiFi mode to access point
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <ESP8266_SetMode+0x70>)
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 fa42 	bl	8001270 <UART_send_string>
		break;
 8000dec:	e004      	b.n	8000df8 <ESP8266_SetMode+0x40>

	case AP_STATION:
		UART_send_string("AT+CWMODE=3\r\n"); // Set WiFi mode to station mode + AP mode
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <ESP8266_SetMode+0x74>)
 8000df0:	0018      	movs	r0, r3
 8000df2:	f000 fa3d 	bl	8001270 <UART_send_string>
		break;
 8000df6:	46c0      	nop			; (mov r8, r8)
	}

	HAL_Delay(ESP_RESPOND_TIME);
 8000df8:	2064      	movs	r0, #100	; 0x64
 8000dfa:	f001 f853 	bl	8001ea4 <HAL_Delay>

	if(ESP8266_Check_OK_Respond(ESP) != ESP_OK)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff ff35 	bl	8000c70 <ESP8266_Check_OK_Respond>
 8000e06:	0003      	movs	r3, r0
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d001      	beq.n	8000e10 <ESP8266_SetMode+0x58>
	{
		return ESP_NOK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e005      	b.n	8000e1c <ESP8266_SetMode+0x64>
	}

	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3308      	adds	r3, #8
 8000e14:	0018      	movs	r0, r3
 8000e16:	f000 fa18 	bl	800124a <RB_Flush>
	return ESP_OK;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b002      	add	sp, #8
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	0800636c 	.word	0x0800636c
 8000e28:	0800637c 	.word	0x0800637c
 8000e2c:	0800638c 	.word	0x0800638c

08000e30 <ESP8266_Init>:


ESP_status ESP8266_Init(ESP8266_t* ESP, char* SSID, char* PSWD, ESP_mode Mode)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	1cfb      	adds	r3, r7, #3
 8000e40:	701a      	strb	r2, [r3, #0]
	ESP->SSID = SSID;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	601a      	str	r2, [r3, #0]
	ESP->PSWD = PSWD;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	605a      	str	r2, [r3, #4]
	RingBuffer_Init(&ESP->ESP_RX_Buff);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	3308      	adds	r3, #8
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 f966 	bl	8001124 <RingBuffer_Init>

	// TCP client connection config:
	// 0. Check AT
	if(ESP8266_CheckAT(ESP) != ESP_OK)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff ff58 	bl	8000d10 <ESP8266_CheckAT>
 8000e60:	0003      	movs	r3, r0
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d001      	beq.n	8000e6a <ESP8266_Init+0x3a>
	{
		return ESP_NOK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e015      	b.n	8000e96 <ESP8266_Init+0x66>
	}
	// 1. Set WiFi mode
	if(ESP8266_SetMode(ESP, Mode) != ESP_OK)
 8000e6a:	1cfb      	adds	r3, r7, #3
 8000e6c:	781a      	ldrb	r2, [r3, #0]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	0011      	movs	r1, r2
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff ffa0 	bl	8000db8 <ESP8266_SetMode>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d001      	beq.n	8000e82 <ESP8266_Init+0x52>
	{
		return ESP_NOK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e009      	b.n	8000e96 <ESP8266_Init+0x66>
	}
	// 2. Connect to a router
	if(ESP8266_Connect_To_Router(ESP) != ESP_OK)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	0018      	movs	r0, r3
 8000e86:	f7ff ff63 	bl	8000d50 <ESP8266_Connect_To_Router>
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d001      	beq.n	8000e94 <ESP8266_Init+0x64>
	{
		return ESP_NOK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	e000      	b.n	8000e96 <ESP8266_Init+0x66>
	}

	return ESP_OK;
 8000e94:	2301      	movs	r3, #1
}
 8000e96:	0018      	movs	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b004      	add	sp, #16
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <ESP8266_SetConnectionMode>:

ESP_status ESP8266_SetConnectionMode(ESP8266_t* ESP, ESP_ConnectionMode mode)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	000a      	movs	r2, r1
 8000eaa:	1cfb      	adds	r3, r7, #3
 8000eac:	701a      	strb	r2, [r3, #0]
	switch(mode)
 8000eae:	1cfb      	adds	r3, r7, #3
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <ESP8266_SetConnectionMode+0x1c>
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d005      	beq.n	8000ec6 <ESP8266_SetConnectionMode+0x26>
 8000eba:	e009      	b.n	8000ed0 <ESP8266_SetConnectionMode+0x30>
	{
	case SINGLE_CONNECTION:
		UART_send_string("AT+CIPMUX=0\r\n");
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <ESP8266_SetConnectionMode+0x5c>)
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f000 f9d6 	bl	8001270 <UART_send_string>
		break;
 8000ec4:	e004      	b.n	8000ed0 <ESP8266_SetConnectionMode+0x30>
	case MULTIPLE_CONNECTION:
		UART_send_string("AT+CIPMUX=1\r\n");
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <ESP8266_SetConnectionMode+0x60>)
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f000 f9d1 	bl	8001270 <UART_send_string>
		break;
 8000ece:	46c0      	nop			; (mov r8, r8)
	}

	HAL_Delay(ESP_RESPOND_TIME);
 8000ed0:	2064      	movs	r0, #100	; 0x64
 8000ed2:	f000 ffe7 	bl	8001ea4 <HAL_Delay>
	if(ESP8266_Check_OK_Respond(ESP) != ESP_OK)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff fec9 	bl	8000c70 <ESP8266_Check_OK_Respond>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d001      	beq.n	8000ee8 <ESP8266_SetConnectionMode+0x48>
	{
		return ESP_NOK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	e005      	b.n	8000ef4 <ESP8266_SetConnectionMode+0x54>
	}

	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3308      	adds	r3, #8
 8000eec:	0018      	movs	r0, r3
 8000eee:	f000 f9ac 	bl	800124a <RB_Flush>
	return ESP_OK;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	0800639c 	.word	0x0800639c
 8000f00:	080063ac 	.word	0x080063ac

08000f04 <ESP8266_Connect_TCP>:


ESP_status ESP8266_Connect_TCP(ESP8266_t* ESP, char* Target_IP, char* PORT, ESP_ConnectionMode mode)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b0a7      	sub	sp, #156	; 0x9c
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	001a      	movs	r2, r3
 8000f12:	1cfb      	adds	r3, r7, #3
 8000f14:	701a      	strb	r2, [r3, #0]
	if(ESP8266_SetConnectionMode(ESP, mode) != ESP_OK)
 8000f16:	1cfb      	adds	r3, r7, #3
 8000f18:	781a      	ldrb	r2, [r3, #0]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	0011      	movs	r1, r2
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff ffbe 	bl	8000ea0 <ESP8266_SetConnectionMode>
 8000f24:	0003      	movs	r3, r0
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d004      	beq.n	8000f34 <ESP8266_Connect_TCP+0x30>
	{
		ESP->ESP8266_status = ESP_NOK;
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	230e      	movs	r3, #14
 8000f2e:	33ff      	adds	r3, #255	; 0xff
 8000f30:	2100      	movs	r1, #0
 8000f32:	54d1      	strb	r1, [r2, r3]
	}

	uint8_t message[128];
	uint8_t length;
	length = sprintf((char*)message, "AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", Target_IP, PORT);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	4917      	ldr	r1, [pc, #92]	; (8000f98 <ESP8266_Connect_TCP+0x94>)
 8000f3a:	2414      	movs	r4, #20
 8000f3c:	1938      	adds	r0, r7, r4
 8000f3e:	f004 fdb7 	bl	8005ab0 <siprintf>
 8000f42:	0002      	movs	r2, r0
 8000f44:	2197      	movs	r1, #151	; 0x97
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	701a      	strb	r2, [r3, #0]
	UART_send_message((char*)message, length);
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	781a      	ldrb	r2, [r3, #0]
 8000f4e:	193b      	adds	r3, r7, r4
 8000f50:	0011      	movs	r1, r2
 8000f52:	0018      	movs	r0, r3
 8000f54:	f000 f9aa 	bl	80012ac <UART_send_message>

	HAL_Delay(5000);
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <ESP8266_Connect_TCP+0x98>)
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 ffa2 	bl	8001ea4 <HAL_Delay>

	if(ESP8266_Check_OK_Respond(ESP) != ESP_OK)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	0018      	movs	r0, r3
 8000f64:	f7ff fe84 	bl	8000c70 <ESP8266_Check_OK_Respond>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d004      	beq.n	8000f78 <ESP8266_Connect_TCP+0x74>
	{
		ESP->ESP8266_status = ESP_NOK;
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	230e      	movs	r3, #14
 8000f72:	33ff      	adds	r3, #255	; 0xff
 8000f74:	2100      	movs	r1, #0
 8000f76:	54d1      	strb	r1, [r2, r3]
	}


	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f000 f964 	bl	800124a <RB_Flush>
	ESP->ESP8266_status = ESP_OK;
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	230e      	movs	r3, #14
 8000f86:	33ff      	adds	r3, #255	; 0xff
 8000f88:	2101      	movs	r1, #1
 8000f8a:	54d1      	strb	r1, [r2, r3]

	return ESP_OK;
 8000f8c:	2301      	movs	r3, #1
}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b027      	add	sp, #156	; 0x9c
 8000f94:	bd90      	pop	{r4, r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	080063bc 	.word	0x080063bc
 8000f9c:	00001388 	.word	0x00001388

08000fa0 <ESP8266_Disconnect_TCP>:

ESP_status ESP8266_Disconnect_TCP(ESP8266_t* ESP)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	UART_send_string("AT+CIPCLOSE\r\n");
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <ESP8266_Disconnect_TCP+0x3c>)
 8000faa:	0018      	movs	r0, r3
 8000fac:	f000 f960 	bl	8001270 <UART_send_string>

	HAL_Delay(ESP_RESPOND_TIME);
 8000fb0:	2064      	movs	r0, #100	; 0x64
 8000fb2:	f000 ff77 	bl	8001ea4 <HAL_Delay>
	if(ESP8266_Check_OK_Respond(ESP) != ESP_OK)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f7ff fe59 	bl	8000c70 <ESP8266_Check_OK_Respond>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d001      	beq.n	8000fc8 <ESP8266_Disconnect_TCP+0x28>
	{
		return ESP_NOK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e005      	b.n	8000fd4 <ESP8266_Disconnect_TCP+0x34>
	}

	RB_Flush(&ESP->ESP_RX_Buff); // clean buffer before next received message
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3308      	adds	r3, #8
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f000 f93c 	bl	800124a <RB_Flush>
	return ESP_OK;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	080063d8 	.word	0x080063d8

08000fe0 <ESP8266_TS_Send_Data_SingleField>:

ESP_status ESP8266_TS_Send_Data_SingleField(ESP8266_t* ESP, uint8_t field_number, uint16_t data)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b09d      	sub	sp, #116	; 0x74
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	0008      	movs	r0, r1
 8000fea:	0011      	movs	r1, r2
 8000fec:	1cfb      	adds	r3, r7, #3
 8000fee:	1c02      	adds	r2, r0, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	1c0a      	adds	r2, r1, #0
 8000ff6:	801a      	strh	r2, [r3, #0]
	if(ESP8266_Connect_TCP(ESP, "184.106.153.149", "80", SINGLE_CONNECTION) != ESP_OK)
 8000ff8:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <ESP8266_TS_Send_Data_SingleField+0xe0>)
 8000ffa:	4932      	ldr	r1, [pc, #200]	; (80010c4 <ESP8266_TS_Send_Data_SingleField+0xe4>)
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	2300      	movs	r3, #0
 8001000:	f7ff ff80 	bl	8000f04 <ESP8266_Connect_TCP>
 8001004:	0003      	movs	r3, r0
 8001006:	2b01      	cmp	r3, #1
 8001008:	d004      	beq.n	8001014 <ESP8266_TS_Send_Data_SingleField+0x34>
	{
		ESP->ESP8266_status = ESP_NOK;
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	230e      	movs	r3, #14
 800100e:	33ff      	adds	r3, #255	; 0xff
 8001010:	2100      	movs	r1, #0
 8001012:	54d1      	strb	r1, [r2, r3]

	uint8_t tmp_mess[25];
	uint8_t tmp_length;
	uint8_t message[64];
	uint8_t length;
	length = sprintf((char*)message, "GET /update?api_key=%s&field%d=%d\r\n", API_Key, field_number, data);
 8001014:	1cfb      	adds	r3, r7, #3
 8001016:	781c      	ldrb	r4, [r3, #0]
 8001018:	003b      	movs	r3, r7
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	4a2a      	ldr	r2, [pc, #168]	; (80010c8 <ESP8266_TS_Send_Data_SingleField+0xe8>)
 800101e:	492b      	ldr	r1, [pc, #172]	; (80010cc <ESP8266_TS_Send_Data_SingleField+0xec>)
 8001020:	200c      	movs	r0, #12
 8001022:	1838      	adds	r0, r7, r0
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	0023      	movs	r3, r4
 8001028:	f004 fd42 	bl	8005ab0 <siprintf>
 800102c:	0002      	movs	r2, r0
 800102e:	2167      	movs	r1, #103	; 0x67
 8001030:	187b      	adds	r3, r7, r1
 8001032:	701a      	strb	r2, [r3, #0]
	tmp_length = sprintf((char*)tmp_mess, "AT+CIPSEND=%d\r\n", length);
 8001034:	187b      	adds	r3, r7, r1
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	4925      	ldr	r1, [pc, #148]	; (80010d0 <ESP8266_TS_Send_Data_SingleField+0xf0>)
 800103a:	244c      	movs	r4, #76	; 0x4c
 800103c:	193b      	adds	r3, r7, r4
 800103e:	0018      	movs	r0, r3
 8001040:	f004 fd36 	bl	8005ab0 <siprintf>
 8001044:	0002      	movs	r2, r0
 8001046:	2166      	movs	r1, #102	; 0x66
 8001048:	187b      	adds	r3, r7, r1
 800104a:	701a      	strb	r2, [r3, #0]

	UART_send_message((char*)tmp_mess, tmp_length);  // send data length
 800104c:	187b      	adds	r3, r7, r1
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	193b      	adds	r3, r7, r4
 8001052:	0011      	movs	r1, r2
 8001054:	0018      	movs	r0, r3
 8001056:	f000 f929 	bl	80012ac <UART_send_message>
	HAL_Delay(ESP_RESPOND_TIME);
 800105a:	2064      	movs	r0, #100	; 0x64
 800105c:	f000 ff22 	bl	8001ea4 <HAL_Delay>

	if(ESP8266_Check_OK_Respond(ESP) != ESP_OK)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff fe04 	bl	8000c70 <ESP8266_Check_OK_Respond>
 8001068:	0003      	movs	r3, r0
 800106a:	2b01      	cmp	r3, #1
 800106c:	d004      	beq.n	8001078 <ESP8266_TS_Send_Data_SingleField+0x98>
	{
		ESP->ESP8266_status = ESP_NOK;
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	230e      	movs	r3, #14
 8001072:	33ff      	adds	r3, #255	; 0xff
 8001074:	2100      	movs	r1, #0
 8001076:	54d1      	strb	r1, [r2, r3]
	}

	UART_send_message((char*)message, length); // send data
 8001078:	2367      	movs	r3, #103	; 0x67
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	230c      	movs	r3, #12
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	0011      	movs	r1, r2
 8001084:	0018      	movs	r0, r3
 8001086:	f000 f911 	bl	80012ac <UART_send_message>
	HAL_Delay(2000);
 800108a:	23fa      	movs	r3, #250	; 0xfa
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	0018      	movs	r0, r3
 8001090:	f000 ff08 	bl	8001ea4 <HAL_Delay>

	// if TCP isn't closed
	if(ESP8266_is_TCP_disconnected(ESP) != ESP_OK)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	0018      	movs	r0, r3
 8001098:	f7ff fe12 	bl	8000cc0 <ESP8266_is_TCP_disconnected>
 800109c:	0003      	movs	r3, r0
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d003      	beq.n	80010aa <ESP8266_TS_Send_Data_SingleField+0xca>
	{
		ESP8266_Disconnect_TCP(ESP);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff ff7b 	bl	8000fa0 <ESP8266_Disconnect_TCP>
	}

	ESP->ESP8266_status = ESP_OK;
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	230e      	movs	r3, #14
 80010ae:	33ff      	adds	r3, #255	; 0xff
 80010b0:	2101      	movs	r1, #1
 80010b2:	54d1      	strb	r1, [r2, r3]
	return ESP_OK;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	0018      	movs	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b01b      	add	sp, #108	; 0x6c
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	080063e8 	.word	0x080063e8
 80010c4:	080063ec 	.word	0x080063ec
 80010c8:	08006438 	.word	0x08006438
 80010cc:	080063fc 	.word	0x080063fc
 80010d0:	08006420 	.word	0x08006420

080010d4 <ESP8266_TS_Send_Data_MultiField>:


ESP_status ESP8266_TS_Send_Data_MultiField(ESP8266_t* ESP, uint16_t data_buffer[])
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
	for(int i=1; i<4; i++)
 80010de:	2301      	movs	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	e015      	b.n	8001110 <ESP8266_TS_Send_Data_MultiField+0x3c>
	{
		ESP8266_TS_Send_Data_SingleField(ESP, i, data_buffer[i - 1]);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	b2d9      	uxtb	r1, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <ESP8266_TS_Send_Data_MultiField+0x4c>)
 80010ec:	4694      	mov	ip, r2
 80010ee:	4463      	add	r3, ip
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	18d3      	adds	r3, r2, r3
 80010f6:	881a      	ldrh	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	0018      	movs	r0, r3
 80010fc:	f7ff ff70 	bl	8000fe0 <ESP8266_TS_Send_Data_SingleField>
		HAL_Delay(1000);
 8001100:	23fa      	movs	r3, #250	; 0xfa
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	0018      	movs	r0, r3
 8001106:	f000 fecd 	bl	8001ea4 <HAL_Delay>
	for(int i=1; i<4; i++)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3301      	adds	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b03      	cmp	r3, #3
 8001114:	dde6      	ble.n	80010e4 <ESP8266_TS_Send_Data_MultiField+0x10>
	}

	return ESP_OK;
 8001116:	2301      	movs	r3, #1
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b004      	add	sp, #16
 800111e:	bd80      	pop	{r7, pc}
 8001120:	7fffffff 	.word	0x7fffffff

08001124 <RingBuffer_Init>:

#include "RingBuffer.h"


void RingBuffer_Init(RingBuffer_t* RingBuffer)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	RingBuffer->head = 0;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	705a      	strb	r2, [r3, #1]
	RingBuffer->tail = 0;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
	RingBuffer->BUFFER_FULL_FLAG = 0;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2282      	movs	r2, #130	; 0x82
 800113c:	2100      	movs	r1, #0
 800113e:	5499      	strb	r1, [r3, r2]
	RingBuffer->BUFFER_EMPTY_FLAG = 1;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2283      	movs	r2, #131	; 0x83
 8001144:	2101      	movs	r1, #1
 8001146:	5499      	strb	r1, [r3, r2]
	RingBuffer->data_counter = 0;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2284      	movs	r2, #132	; 0x84
 800114c:	2100      	movs	r1, #0
 800114e:	5499      	strb	r1, [r3, r2]
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b002      	add	sp, #8
 8001156:	bd80      	pop	{r7, pc}

08001158 <RB_Buff_Write>:
	while(*string++ && (!RingBuffer->BUFFER_FULL_FLAG));
}


void RB_Buff_Write(RingBuffer_t* RingBuffer, uint8_t value)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	000a      	movs	r2, r1
 8001162:	1cfb      	adds	r3, r7, #3
 8001164:	701a      	strb	r2, [r3, #0]
	if(((RingBuffer->head + 1) % BUFFER_SIZE) != RingBuffer->tail)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	785b      	ldrb	r3, [r3, #1]
 800116a:	3301      	adds	r3, #1
 800116c:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <RB_Buff_Write+0x84>)
 800116e:	4013      	ands	r3, r2
 8001170:	d504      	bpl.n	800117c <RB_Buff_Write+0x24>
 8001172:	3b01      	subs	r3, #1
 8001174:	2280      	movs	r2, #128	; 0x80
 8001176:	4252      	negs	r2, r2
 8001178:	4313      	orrs	r3, r2
 800117a:	3301      	adds	r3, #1
 800117c:	001a      	movs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d021      	beq.n	80011ca <RB_Buff_Write+0x72>
	{
		RingBuffer->BUFFER_EMPTY_FLAG = 0;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2283      	movs	r2, #131	; 0x83
 800118a:	2100      	movs	r1, #0
 800118c:	5499      	strb	r1, [r3, r2]
		RingBuffer->buffer[RingBuffer->head] = value;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	001a      	movs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	189b      	adds	r3, r3, r2
 8001198:	1cfa      	adds	r2, r7, #3
 800119a:	7812      	ldrb	r2, [r2, #0]
 800119c:	709a      	strb	r2, [r3, #2]
		RingBuffer->head++;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	705a      	strb	r2, [r3, #1]
		RingBuffer->head %= BUFFER_SIZE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	227f      	movs	r2, #127	; 0x7f
 80011b0:	4013      	ands	r3, r2
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	705a      	strb	r2, [r3, #1]
		RingBuffer->data_counter++;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2284      	movs	r2, #132	; 0x84
 80011bc:	5c9b      	ldrb	r3, [r3, r2]
 80011be:	3301      	adds	r3, #1
 80011c0:	b2d9      	uxtb	r1, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2284      	movs	r2, #132	; 0x84
 80011c6:	5499      	strb	r1, [r3, r2]
	}
	else
	{
		RingBuffer->BUFFER_FULL_FLAG = 1;
	}
}
 80011c8:	e003      	b.n	80011d2 <RB_Buff_Write+0x7a>
		RingBuffer->BUFFER_FULL_FLAG = 1;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2282      	movs	r2, #130	; 0x82
 80011ce:	2101      	movs	r1, #1
 80011d0:	5499      	strb	r1, [r3, r2]
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	8000007f 	.word	0x8000007f

080011e0 <RB_Buff_Read>:



void RB_Buff_Read(RingBuffer_t* RingBuffer, uint8_t* data)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	if(RingBuffer->tail != RingBuffer->head)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	781a      	ldrb	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	785b      	ldrb	r3, [r3, #1]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d021      	beq.n	800123a <RB_Buff_Read+0x5a>
	{
		RingBuffer->BUFFER_FULL_FLAG = 0;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2282      	movs	r2, #130	; 0x82
 80011fa:	2100      	movs	r1, #0
 80011fc:	5499      	strb	r1, [r3, r2]
		*data = RingBuffer->buffer[RingBuffer->tail];
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	001a      	movs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	189b      	adds	r3, r3, r2
 8001208:	789a      	ldrb	r2, [r3, #2]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	701a      	strb	r2, [r3, #0]
		RingBuffer->tail++;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	701a      	strb	r2, [r3, #0]
		RingBuffer->tail %= BUFFER_SIZE;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	227f      	movs	r2, #127	; 0x7f
 8001220:	4013      	ands	r3, r2
 8001222:	b2da      	uxtb	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	701a      	strb	r2, [r3, #0]
		RingBuffer->data_counter--;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2284      	movs	r2, #132	; 0x84
 800122c:	5c9b      	ldrb	r3, [r3, r2]
 800122e:	3b01      	subs	r3, #1
 8001230:	b2d9      	uxtb	r1, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2284      	movs	r2, #132	; 0x84
 8001236:	5499      	strb	r1, [r3, r2]

	else
	{
		RingBuffer->BUFFER_EMPTY_FLAG = 1;
	}
}
 8001238:	e003      	b.n	8001242 <RB_Buff_Read+0x62>
		RingBuffer->BUFFER_EMPTY_FLAG = 1;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2283      	movs	r2, #131	; 0x83
 800123e:	2101      	movs	r1, #1
 8001240:	5499      	strb	r1, [r3, r2]
}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b002      	add	sp, #8
 8001248:	bd80      	pop	{r7, pc}

0800124a <RB_Flush>:
{
	return RingBuffer->data_counter;
}

void RB_Flush(RingBuffer_t* RingBuffer)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
	// clear buffer
	RingBuffer->head = 0;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	705a      	strb	r2, [r3, #1]
	RingBuffer->tail = 0;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
	RingBuffer->data_counter = 0;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2284      	movs	r2, #132	; 0x84
 8001262:	2100      	movs	r1, #0
 8001264:	5499      	strb	r1, [r3, r2]
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <UART_send_string>:
 */

#include "Utilis.h"

void UART_send_string(char* message)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b095      	sub	sp, #84	; 0x54
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	uint8_t length;
	uint8_t message_buf[64];
	length = sprintf((char*)message_buf, message);
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	240c      	movs	r4, #12
 800127c:	193b      	adds	r3, r7, r4
 800127e:	0011      	movs	r1, r2
 8001280:	0018      	movs	r0, r3
 8001282:	f004 fc15 	bl	8005ab0 <siprintf>
 8001286:	0002      	movs	r2, r0
 8001288:	214f      	movs	r1, #79	; 0x4f
 800128a:	187b      	adds	r3, r7, r1
 800128c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(UART, message_buf, length, 100);
 800128e:	187b      	adds	r3, r7, r1
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b29a      	uxth	r2, r3
 8001294:	1939      	adds	r1, r7, r4
 8001296:	4804      	ldr	r0, [pc, #16]	; (80012a8 <UART_send_string+0x38>)
 8001298:	2364      	movs	r3, #100	; 0x64
 800129a:	f003 f8eb 	bl	8004474 <HAL_UART_Transmit>
}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b015      	add	sp, #84	; 0x54
 80012a4:	bd90      	pop	{r4, r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	2000027c 	.word	0x2000027c

080012ac <UART_send_message>:

void UART_send_message(char* string, uint8_t string_size)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	000a      	movs	r2, r1
 80012b6:	1cfb      	adds	r3, r7, #3
 80012b8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(UART, (uint8_t*)string, string_size, 100);
 80012ba:	1cfb      	adds	r3, r7, #3
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b29a      	uxth	r2, r3
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4804      	ldr	r0, [pc, #16]	; (80012d4 <UART_send_message+0x28>)
 80012c4:	2364      	movs	r3, #100	; 0x64
 80012c6:	f003 f8d5 	bl	8004474 <HAL_UART_Transmit>
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b002      	add	sp, #8
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	2000027c 	.word	0x2000027c

080012d8 <delay_init>:

#include "main.h"
#include "delay.h"

void delay_init()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(_TIMER);
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <delay_init+0x14>)
 80012de:	0018      	movs	r0, r3
 80012e0:	f002 fe16 	bl	8003f10 <HAL_TIM_Base_Start>
}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	2000023c 	.word	0x2000023c

080012f0 <delay_us>:



void delay_us(uint16_t us)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	0002      	movs	r2, r0
 80012f8:	1dbb      	adds	r3, r7, #6
 80012fa:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(_TIMER, 0); // set CNT register to 0
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <delay_us+0x30>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(_TIMER) < us); // wait until timer reach us
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <delay_us+0x30>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130c:	1dbb      	adds	r3, r7, #6
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d3f8      	bcc.n	8001306 <delay_us+0x16>
}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	2000023c 	.word	0x2000023c

08001324 <delay_ms>:


void delay_ms(uint16_t ms)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	0002      	movs	r2, r0
 800132c:	1dbb      	adds	r3, r7, #6
 800132e:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<ms;i++)
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	e007      	b.n	8001346 <delay_ms+0x22>
	{
		delay_us(1000);
 8001336:	23fa      	movs	r3, #250	; 0xfa
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	0018      	movs	r0, r3
 800133c:	f7ff ffd8 	bl	80012f0 <delay_us>
	for(int i=0;i<ms;i++)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3301      	adds	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	1dbb      	adds	r3, r7, #6
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf2      	blt.n	8001336 <delay_ms+0x12>
	}
}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b004      	add	sp, #16
 8001358:	bd80      	pop	{r7, pc}

0800135a <DHT11_Init>:
#include "main.h"
#include "delay.h"


void DHT11_Init(dht11_sensor* sensor, GPIO_TypeDef* _PORT, uint16_t _PIN)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	1dbb      	adds	r3, r7, #6
 8001366:	801a      	strh	r2, [r3, #0]
	sensor->Port = _PORT;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	601a      	str	r2, [r3, #0]
	sensor->Pin = _PIN;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1dba      	adds	r2, r7, #6
 8001372:	8812      	ldrh	r2, [r2, #0]
 8001374:	809a      	strh	r2, [r3, #4]
}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	b004      	add	sp, #16
 800137c:	bd80      	pop	{r7, pc}

0800137e <change_to_output>:



static void change_to_output(dht11_sensor* sensor)
{
 800137e:	b590      	push	{r4, r7, lr}
 8001380:	b089      	sub	sp, #36	; 0x24
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_data = {0};
 8001386:	240c      	movs	r4, #12
 8001388:	193b      	adds	r3, r7, r4
 800138a:	0018      	movs	r0, r3
 800138c:	2314      	movs	r3, #20
 800138e:	001a      	movs	r2, r3
 8001390:	2100      	movs	r1, #0
 8001392:	f004 fb85 	bl	8005aa0 <memset>
	gpio_data.Pin = sensor->Pin;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	889b      	ldrh	r3, [r3, #4]
 800139a:	001a      	movs	r2, r3
 800139c:	0021      	movs	r1, r4
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	601a      	str	r2, [r3, #0]
	gpio_data.Mode = GPIO_MODE_OUTPUT_OD;
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	2211      	movs	r2, #17
 80013a6:	605a      	str	r2, [r3, #4]
	gpio_data.Pull = GPIO_NOPULL;
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
	gpio_data.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]


	HAL_GPIO_Init(sensor->Port, &gpio_data);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	187a      	adds	r2, r7, r1
 80013ba:	0011      	movs	r1, r2
 80013bc:	0018      	movs	r0, r3
 80013be:	f000 fefb 	bl	80021b8 <HAL_GPIO_Init>
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b009      	add	sp, #36	; 0x24
 80013c8:	bd90      	pop	{r4, r7, pc}

080013ca <send_start_signal>:


static void send_start_signal(dht11_sensor* sensor)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->Port, sensor->Pin, GPIO_PIN_RESET); // set Data pin to LOW
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	889b      	ldrh	r3, [r3, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	0019      	movs	r1, r3
 80013de:	f001 f876 	bl	80024ce <HAL_GPIO_WritePin>
	delay_ms(18);
 80013e2:	2012      	movs	r0, #18
 80013e4:	f7ff ff9e 	bl	8001324 <delay_ms>
	HAL_GPIO_WritePin(sensor->Port, sensor->Pin, GPIO_PIN_SET); // set Data pin to HIGH
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	889b      	ldrh	r3, [r3, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	0019      	movs	r1, r3
 80013f4:	f001 f86b 	bl	80024ce <HAL_GPIO_WritePin>
}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}

08001400 <change_to_input>:


static void change_to_input(dht11_sensor* sensor)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_data = {0};
 8001408:	240c      	movs	r4, #12
 800140a:	193b      	adds	r3, r7, r4
 800140c:	0018      	movs	r0, r3
 800140e:	2314      	movs	r3, #20
 8001410:	001a      	movs	r2, r3
 8001412:	2100      	movs	r1, #0
 8001414:	f004 fb44 	bl	8005aa0 <memset>
	gpio_data.Pin = sensor->Pin;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	889b      	ldrh	r3, [r3, #4]
 800141c:	001a      	movs	r2, r3
 800141e:	0021      	movs	r1, r4
 8001420:	187b      	adds	r3, r7, r1
 8001422:	601a      	str	r2, [r3, #0]
	gpio_data.Mode = GPIO_MODE_INPUT;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
	gpio_data.Pull = GPIO_NOPULL;
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
	gpio_data.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]


	HAL_GPIO_Init(sensor->Port, &gpio_data);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	187a      	adds	r2, r7, r1
 800143c:	0011      	movs	r1, r2
 800143e:	0018      	movs	r0, r3
 8001440:	f000 feba 	bl	80021b8 <HAL_GPIO_Init>

}
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	b009      	add	sp, #36	; 0x24
 800144a:	bd90      	pop	{r4, r7, pc}

0800144c <check_response>:


static void check_response(dht11_sensor* sensor)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	delay_us(RESPONSE_TIMEOUT);
 8001454:	2028      	movs	r0, #40	; 0x28
 8001456:	f7ff ff4b 	bl	80012f0 <delay_us>
	if(!(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin)))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	889b      	ldrh	r3, [r3, #4]
 8001462:	0019      	movs	r1, r3
 8001464:	0010      	movs	r0, r2
 8001466:	f001 f815 	bl	8002494 <HAL_GPIO_ReadPin>
 800146a:	1e03      	subs	r3, r0, #0
 800146c:	d102      	bne.n	8001474 <check_response+0x28>
	{
		delay_us(LOW_HIGH_RESPONSE_TIME);
 800146e:	2050      	movs	r0, #80	; 0x50
 8001470:	f7ff ff3e 	bl	80012f0 <delay_us>
	}

	while((HAL_GPIO_ReadPin(sensor->Port, sensor->Pin)));
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	889b      	ldrh	r3, [r3, #4]
 800147e:	0019      	movs	r1, r3
 8001480:	0010      	movs	r0, r2
 8001482:	f001 f807 	bl	8002494 <HAL_GPIO_ReadPin>
 8001486:	1e03      	subs	r3, r0, #0
 8001488:	d1f5      	bne.n	8001476 <check_response+0x2a>
}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}

08001494 <read_byte>:


static uint8_t read_byte(dht11_sensor* sensor)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	for(int i=0; i<8; i++)
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	e046      	b.n	8001530 <read_byte+0x9c>
	{
		while(!(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin)));
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	889b      	ldrh	r3, [r3, #4]
 80014ac:	0019      	movs	r1, r3
 80014ae:	0010      	movs	r0, r2
 80014b0:	f000 fff0 	bl	8002494 <HAL_GPIO_ReadPin>
 80014b4:	1e03      	subs	r3, r0, #0
 80014b6:	d0f5      	beq.n	80014a4 <read_byte+0x10>
		delay_us(TRANSMISION_LOGIC_0_TIME);
 80014b8:	2028      	movs	r0, #40	; 0x28
 80014ba:	f7ff ff19 	bl	80012f0 <delay_us>
		if(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	889b      	ldrh	r3, [r3, #4]
 80014c6:	0019      	movs	r1, r3
 80014c8:	0010      	movs	r0, r2
 80014ca:	f000 ffe3 	bl	8002494 <HAL_GPIO_ReadPin>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d00f      	beq.n	80014f2 <read_byte+0x5e>
		{
			//there is logic '1'
			byte |= (1<<(7-i));
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2207      	movs	r2, #7
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2201      	movs	r2, #1
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	b25a      	sxtb	r2, r3
 80014e0:	210f      	movs	r1, #15
 80014e2:	187b      	adds	r3, r7, r1
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b25a      	sxtb	r2, r3
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	701a      	strb	r2, [r3, #0]
 80014f0:	e010      	b.n	8001514 <read_byte+0x80>
		}

		else
		{
			// there is logic '0'
			byte &= ~(1<<(7-i));
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2207      	movs	r2, #7
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2201      	movs	r2, #1
 80014fa:	409a      	lsls	r2, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	b25b      	sxtb	r3, r3
 8001504:	210f      	movs	r1, #15
 8001506:	187a      	adds	r2, r7, r1
 8001508:	7812      	ldrb	r2, [r2, #0]
 800150a:	b252      	sxtb	r2, r2
 800150c:	4013      	ands	r3, r2
 800150e:	b25a      	sxtb	r2, r3
 8001510:	187b      	adds	r3, r7, r1
 8001512:	701a      	strb	r2, [r3, #0]
		}
		//wait for pin to go low
		while(HAL_GPIO_ReadPin(sensor->Port, sensor->Pin));
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	889b      	ldrh	r3, [r3, #4]
 800151e:	0019      	movs	r1, r3
 8001520:	0010      	movs	r0, r2
 8001522:	f000 ffb7 	bl	8002494 <HAL_GPIO_ReadPin>
 8001526:	1e03      	subs	r3, r0, #0
 8001528:	d1f5      	bne.n	8001516 <read_byte+0x82>
	for(int i=0; i<8; i++)
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3301      	adds	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b07      	cmp	r3, #7
 8001534:	ddb5      	ble.n	80014a2 <read_byte+0xe>
	}

	return byte;
 8001536:	230f      	movs	r3, #15
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	781b      	ldrb	r3, [r3, #0]
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b004      	add	sp, #16
 8001542:	bd80      	pop	{r7, pc}

08001544 <read_data>:


static void read_data(dht11_sensor* sensor, uint8_t* humidity_val, int8_t* temp_val, uint8_t* check_sum)
{
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
	uint8_t humidity_integral;
	uint8_t humidity_dec;
	uint8_t temp_integral;
	uint8_t temp_dec;

	humidity_integral = read_byte(sensor);
 8001552:	2517      	movs	r5, #23
 8001554:	197c      	adds	r4, r7, r5
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	0018      	movs	r0, r3
 800155a:	f7ff ff9b 	bl	8001494 <read_byte>
 800155e:	0003      	movs	r3, r0
 8001560:	7023      	strb	r3, [r4, #0]
	humidity_dec = read_byte(sensor);
 8001562:	2316      	movs	r3, #22
 8001564:	18fc      	adds	r4, r7, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff ff93 	bl	8001494 <read_byte>
 800156e:	0003      	movs	r3, r0
 8001570:	7023      	strb	r3, [r4, #0]
	temp_integral = read_byte(sensor);
 8001572:	2615      	movs	r6, #21
 8001574:	19bc      	adds	r4, r7, r6
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff ff8b 	bl	8001494 <read_byte>
 800157e:	0003      	movs	r3, r0
 8001580:	7023      	strb	r3, [r4, #0]
	temp_dec = read_byte(sensor);
 8001582:	2314      	movs	r3, #20
 8001584:	18fc      	adds	r4, r7, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff ff83 	bl	8001494 <read_byte>
 800158e:	0003      	movs	r3, r0
 8001590:	7023      	strb	r3, [r4, #0]

	*check_sum = read_byte(sensor);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff ff7d 	bl	8001494 <read_byte>
 800159a:	0003      	movs	r3, r0
 800159c:	001a      	movs	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	701a      	strb	r2, [r3, #0]
	*humidity_val = humidity_integral;
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	197a      	adds	r2, r7, r5
 80015a6:	7812      	ldrb	r2, [r2, #0]
 80015a8:	701a      	strb	r2, [r3, #0]
	*temp_val = temp_integral;
 80015aa:	19bb      	adds	r3, r7, r6
 80015ac:	2200      	movs	r2, #0
 80015ae:	569a      	ldrsb	r2, [r3, r2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	701a      	strb	r2, [r3, #0]
}
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b007      	add	sp, #28
 80015ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015bc <DHT11_get_data>:


void DHT11_get_data(dht11_sensor* sensor, uint8_t* humidity_val, int8_t* temp_val, uint8_t* check_sum)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
	send_start_signal(sensor);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff fefc 	bl	80013ca <send_start_signal>
	change_to_input(sensor);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff ff13 	bl	8001400 <change_to_input>
	check_response(sensor);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff ff35 	bl	800144c <check_response>
	read_data(sensor, humidity_val, temp_val, check_sum);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f7ff ffab 	bl	8001544 <read_data>
	change_to_output(sensor);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff fec4 	bl	800137e <change_to_output>
}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b004      	add	sp, #16
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	240c      	movs	r4, #12
 8001608:	193b      	adds	r3, r7, r4
 800160a:	0018      	movs	r0, r3
 800160c:	2314      	movs	r3, #20
 800160e:	001a      	movs	r2, r3
 8001610:	2100      	movs	r1, #0
 8001612:	f004 fa45 	bl	8005aa0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <MX_GPIO_Init+0xc8>)
 8001618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800161a:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <MX_GPIO_Init+0xc8>)
 800161c:	2104      	movs	r1, #4
 800161e:	430a      	orrs	r2, r1
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c
 8001622:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <MX_GPIO_Init+0xc8>)
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	2204      	movs	r2, #4
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <MX_GPIO_Init+0xc8>)
 8001630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <MX_GPIO_Init+0xc8>)
 8001634:	2101      	movs	r1, #1
 8001636:	430a      	orrs	r2, r1
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
 800163a:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <MX_GPIO_Init+0xc8>)
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	2201      	movs	r2, #1
 8001640:	4013      	ands	r3, r2
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <MX_GPIO_Init+0xc8>)
 8001648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <MX_GPIO_Init+0xc8>)
 800164c:	2102      	movs	r1, #2
 800164e:	430a      	orrs	r2, r1
 8001650:	62da      	str	r2, [r3, #44]	; 0x2c
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <MX_GPIO_Init+0xc8>)
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	2202      	movs	r2, #2
 8001658:	4013      	ands	r3, r2
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <MX_GPIO_Init+0xcc>)
 8001660:	2200      	movs	r2, #0
 8001662:	2108      	movs	r1, #8
 8001664:	0018      	movs	r0, r3
 8001666:	f000 ff32 	bl	80024ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_SIGNAL_GPIO_Port, DHT11_SIGNAL_Pin, GPIO_PIN_SET);
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <MX_GPIO_Init+0xcc>)
 800166c:	2201      	movs	r2, #1
 800166e:	2110      	movs	r1, #16
 8001670:	0018      	movs	r0, r3
 8001672:	f000 ff2c 	bl	80024ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001676:	193b      	adds	r3, r7, r4
 8001678:	2208      	movs	r2, #8
 800167a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	193b      	adds	r3, r7, r4
 800167e:	2201      	movs	r2, #1
 8001680:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	193b      	adds	r3, r7, r4
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	193b      	adds	r3, r7, r4
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800168e:	193b      	adds	r3, r7, r4
 8001690:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <MX_GPIO_Init+0xcc>)
 8001692:	0019      	movs	r1, r3
 8001694:	0010      	movs	r0, r2
 8001696:	f000 fd8f 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_SIGNAL_Pin;
 800169a:	0021      	movs	r1, r4
 800169c:	187b      	adds	r3, r7, r1
 800169e:	2210      	movs	r2, #16
 80016a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016a2:	187b      	adds	r3, r7, r1
 80016a4:	2211      	movs	r2, #17
 80016a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT11_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <MX_GPIO_Init+0xcc>)
 80016b8:	0019      	movs	r1, r3
 80016ba:	0010      	movs	r0, r2
 80016bc:	f000 fd7c 	bl	80021b8 <HAL_GPIO_Init>

}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b009      	add	sp, #36	; 0x24
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	40021000 	.word	0x40021000
 80016cc:	50000400 	.word	0x50000400

080016d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <MX_I2C1_Init+0x74>)
 80016d6:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <MX_I2C1_Init+0x78>)
 80016d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40000A0B;
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_I2C1_Init+0x74>)
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <MX_I2C1_Init+0x7c>)
 80016de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_I2C1_Init+0x74>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_I2C1_Init+0x74>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_I2C1_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_I2C1_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_I2C1_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_I2C1_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_I2C1_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_I2C1_Init+0x74>)
 800170c:	0018      	movs	r0, r3
 800170e:	f000 ff17 	bl	8002540 <HAL_I2C_Init>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d001      	beq.n	800171a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001716:	f000 f973 	bl	8001a00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <MX_I2C1_Init+0x74>)
 800171c:	2100      	movs	r1, #0
 800171e:	0018      	movs	r0, r3
 8001720:	f001 fc58 	bl	8002fd4 <HAL_I2CEx_ConfigAnalogFilter>
 8001724:	1e03      	subs	r3, r0, #0
 8001726:	d001      	beq.n	800172c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001728:	f000 f96a 	bl	8001a00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <MX_I2C1_Init+0x74>)
 800172e:	2100      	movs	r1, #0
 8001730:	0018      	movs	r0, r3
 8001732:	f001 fc9b 	bl	800306c <HAL_I2CEx_ConfigDigitalFilter>
 8001736:	1e03      	subs	r3, r0, #0
 8001738:	d001      	beq.n	800173e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800173a:	f000 f961 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200000b8 	.word	0x200000b8
 8001748:	40005400 	.word	0x40005400
 800174c:	40000a0b 	.word	0x40000a0b

08001750 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	240c      	movs	r4, #12
 800175a:	193b      	adds	r3, r7, r4
 800175c:	0018      	movs	r0, r3
 800175e:	2314      	movs	r3, #20
 8001760:	001a      	movs	r2, r3
 8001762:	2100      	movs	r1, #0
 8001764:	f004 f99c 	bl	8005aa0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a18      	ldr	r2, [pc, #96]	; (80017d0 <HAL_I2C_MspInit+0x80>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d12a      	bne.n	80017c8 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_I2C_MspInit+0x84>)
 8001774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_I2C_MspInit+0x84>)
 8001778:	2101      	movs	r1, #1
 800177a:	430a      	orrs	r2, r1
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_I2C_MspInit+0x84>)
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	2201      	movs	r2, #1
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800178a:	193b      	adds	r3, r7, r4
 800178c:	22c0      	movs	r2, #192	; 0xc0
 800178e:	00d2      	lsls	r2, r2, #3
 8001790:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001792:	0021      	movs	r1, r4
 8001794:	187b      	adds	r3, r7, r1
 8001796:	2212      	movs	r2, #18
 8001798:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	187b      	adds	r3, r7, r1
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	2203      	movs	r2, #3
 80017a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	2201      	movs	r2, #1
 80017aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	187a      	adds	r2, r7, r1
 80017ae:	23a0      	movs	r3, #160	; 0xa0
 80017b0:	05db      	lsls	r3, r3, #23
 80017b2:	0011      	movs	r1, r2
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 fcff 	bl	80021b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_I2C_MspInit+0x84>)
 80017bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_I2C_MspInit+0x84>)
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	0389      	lsls	r1, r1, #14
 80017c4:	430a      	orrs	r2, r1
 80017c6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b009      	add	sp, #36	; 0x24
 80017ce:	bd90      	pop	{r4, r7, pc}
 80017d0:	40005400 	.word	0x40005400
 80017d4:	40021000 	.word	0x40021000

080017d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017dc:	f000 faf2 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e0:	f000 f86a 	bl	80018b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e4:	f7ff ff0c 	bl	8001600 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017e8:	f000 fa4e 	bl	8001c88 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80017ec:	f7ff ff70 	bl	80016d0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80017f0:	f000 f9e0 	bl	8001bb4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80017f4:	f000 f8d4 	bl	80019a0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UARTEx_ReceiveToIdle_DMA(&huart2, UART_RX_val, 32);
  HAL_UART_Receive_IT(&huart2, &UART_RX_val, 1);
 80017f8:	4921      	ldr	r1, [pc, #132]	; (8001880 <main+0xa8>)
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <main+0xac>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	0018      	movs	r0, r3
 8001800:	f002 fee0 	bl	80045c4 <HAL_UART_Receive_IT>

  delay_init();
 8001804:	f7ff fd68 	bl	80012d8 <delay_init>
  DHT11_Init(&DHT11, DHT11_SIGNAL_GPIO_Port, DHT11_SIGNAL_Pin);
 8001808:	491f      	ldr	r1, [pc, #124]	; (8001888 <main+0xb0>)
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <main+0xb4>)
 800180c:	2210      	movs	r2, #16
 800180e:	0018      	movs	r0, r3
 8001810:	f7ff fda3 	bl	800135a <DHT11_Init>
  BMP280_Init(&hi2c1, 0x77);
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <main+0xb8>)
 8001816:	2177      	movs	r1, #119	; 0x77
 8001818:	0018      	movs	r0, r3
 800181a:	f7ff f9a7 	bl	8000b6c <BMP280_Init>
  ESP8266_Init(&ESP_module, "XXXX", "XXXX", AP_STATION);
 800181e:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <main+0xbc>)
 8001820:	491c      	ldr	r1, [pc, #112]	; (8001894 <main+0xbc>)
 8001822:	481d      	ldr	r0, [pc, #116]	; (8001898 <main+0xc0>)
 8001824:	2302      	movs	r3, #2
 8001826:	f7ff fb03 	bl	8000e30 <ESP8266_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <main+0xb0>)
 800182c:	2108      	movs	r1, #8
 800182e:	0018      	movs	r0, r3
 8001830:	f000 fe6a 	bl	8002508 <HAL_GPIO_TogglePin>
	  BMP280_get_data_FORCED(&bmp_temp, &bmp_press);
 8001834:	4a19      	ldr	r2, [pc, #100]	; (800189c <main+0xc4>)
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <main+0xc8>)
 8001838:	0011      	movs	r1, r2
 800183a:	0018      	movs	r0, r3
 800183c:	f7ff f946 	bl	8000acc <BMP280_get_data_FORCED>
	  DHT11_get_data(&DHT11, &dht11_humidity, &dht11_temp, &dht11_check_sum);
 8001840:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <main+0xcc>)
 8001842:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <main+0xd0>)
 8001844:	4919      	ldr	r1, [pc, #100]	; (80018ac <main+0xd4>)
 8001846:	4811      	ldr	r0, [pc, #68]	; (800188c <main+0xb4>)
 8001848:	f7ff feb8 	bl	80015bc <DHT11_get_data>

	  sensors_data_buff[0] = bmp_temp;
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <main+0xc8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <main+0xd8>)
 8001854:	801a      	strh	r2, [r3, #0]
	  sensors_data_buff[1] = bmp_press;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <main+0xc4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <main+0xd8>)
 800185e:	805a      	strh	r2, [r3, #2]
	  sensors_data_buff[2] = dht11_humidity;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <main+0xd4>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <main+0xd8>)
 8001868:	809a      	strh	r2, [r3, #4]
	  //DHT11_get_data(&DHT11, &dht11_humidity, &dht11_temp, &dht11_check_sum);
	  //ESP8266_TS_Send_Data_SingleField(&ESP_module, 2, bmp_temp);

	  ESP8266_TS_Send_Data_MultiField(&ESP_module, sensors_data_buff);
 800186a:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <main+0xd8>)
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <main+0xc0>)
 800186e:	0011      	movs	r1, r2
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff fc2f 	bl	80010d4 <ESP8266_TS_Send_Data_MultiField>
	  HAL_Delay(15000);
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <main+0xdc>)
 8001878:	0018      	movs	r0, r3
 800187a:	f000 fb13 	bl	8001ea4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800187e:	e7d4      	b.n	800182a <main+0x52>
 8001880:	20000228 	.word	0x20000228
 8001884:	2000027c 	.word	0x2000027c
 8001888:	50000400 	.word	0x50000400
 800188c:	20000220 	.word	0x20000220
 8001890:	200000b8 	.word	0x200000b8
 8001894:	08006430 	.word	0x08006430
 8001898:	2000010c 	.word	0x2000010c
 800189c:	20000104 	.word	0x20000104
 80018a0:	2000022c 	.word	0x2000022c
 80018a4:	20000230 	.word	0x20000230
 80018a8:	20000108 	.word	0x20000108
 80018ac:	2000021c 	.word	0x2000021c
 80018b0:	20000234 	.word	0x20000234
 80018b4:	00003a98 	.word	0x00003a98

080018b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b099      	sub	sp, #100	; 0x64
 80018bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018be:	242c      	movs	r4, #44	; 0x2c
 80018c0:	193b      	adds	r3, r7, r4
 80018c2:	0018      	movs	r0, r3
 80018c4:	2334      	movs	r3, #52	; 0x34
 80018c6:	001a      	movs	r2, r3
 80018c8:	2100      	movs	r1, #0
 80018ca:	f004 f8e9 	bl	8005aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ce:	2318      	movs	r3, #24
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	0018      	movs	r0, r3
 80018d4:	2314      	movs	r3, #20
 80018d6:	001a      	movs	r2, r3
 80018d8:	2100      	movs	r1, #0
 80018da:	f004 f8e1 	bl	8005aa0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018de:	003b      	movs	r3, r7
 80018e0:	0018      	movs	r0, r3
 80018e2:	2318      	movs	r3, #24
 80018e4:	001a      	movs	r2, r3
 80018e6:	2100      	movs	r1, #0
 80018e8:	f004 f8da 	bl	8005aa0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ec:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <SystemClock_Config+0xe0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2a      	ldr	r2, [pc, #168]	; (800199c <SystemClock_Config+0xe4>)
 80018f2:	401a      	ands	r2, r3
 80018f4:	4b28      	ldr	r3, [pc, #160]	; (8001998 <SystemClock_Config+0xe0>)
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	0109      	lsls	r1, r1, #4
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018fe:	0021      	movs	r1, r4
 8001900:	187b      	adds	r3, r7, r1
 8001902:	2202      	movs	r2, #2
 8001904:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001906:	187b      	adds	r3, r7, r1
 8001908:	2201      	movs	r2, #1
 800190a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800190c:	187b      	adds	r3, r7, r1
 800190e:	2210      	movs	r2, #16
 8001910:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001912:	187b      	adds	r3, r7, r1
 8001914:	2202      	movs	r2, #2
 8001916:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001918:	187b      	adds	r3, r7, r1
 800191a:	2200      	movs	r2, #0
 800191c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800191e:	187b      	adds	r3, r7, r1
 8001920:	2200      	movs	r2, #0
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001924:	187b      	adds	r3, r7, r1
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	03d2      	lsls	r2, r2, #15
 800192a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800192c:	187b      	adds	r3, r7, r1
 800192e:	0018      	movs	r0, r3
 8001930:	f001 fbe8 	bl	8003104 <HAL_RCC_OscConfig>
 8001934:	1e03      	subs	r3, r0, #0
 8001936:	d001      	beq.n	800193c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001938:	f000 f862 	bl	8001a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193c:	2118      	movs	r1, #24
 800193e:	187b      	adds	r3, r7, r1
 8001940:	220f      	movs	r2, #15
 8001942:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001944:	187b      	adds	r3, r7, r1
 8001946:	2203      	movs	r2, #3
 8001948:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800194a:	187b      	adds	r3, r7, r1
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001950:	187b      	adds	r3, r7, r1
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001956:	187b      	adds	r3, r7, r1
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800195c:	187b      	adds	r3, r7, r1
 800195e:	2100      	movs	r1, #0
 8001960:	0018      	movs	r0, r3
 8001962:	f001 ff4b 	bl	80037fc <HAL_RCC_ClockConfig>
 8001966:	1e03      	subs	r3, r0, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800196a:	f000 f849 	bl	8001a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800196e:	003b      	movs	r3, r7
 8001970:	220a      	movs	r2, #10
 8001972:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001974:	003b      	movs	r3, r7
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800197a:	003b      	movs	r3, r7
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001980:	003b      	movs	r3, r7
 8001982:	0018      	movs	r0, r3
 8001984:	f002 f95e 	bl	8003c44 <HAL_RCCEx_PeriphCLKConfig>
 8001988:	1e03      	subs	r3, r0, #0
 800198a:	d001      	beq.n	8001990 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800198c:	f000 f838 	bl	8001a00 <Error_Handler>
  }
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b019      	add	sp, #100	; 0x64
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	40007000 	.word	0x40007000
 800199c:	ffffe7ff 	.word	0xffffe7ff

080019a0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	201c      	movs	r0, #28
 80019aa:	f000 fb4b 	bl	8002044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ae:	201c      	movs	r0, #28
 80019b0:	f000 fb5d 	bl	800206e <HAL_NVIC_EnableIRQ>
}
 80019b4:	46c0      	nop			; (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_UART_RxCpltCallback+0x34>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d106      	bne.n	80019dc <HAL_UART_RxCpltCallback+0x20>
	{
		RB_Buff_Write(&ESP_module.ESP_RX_Buff, UART_RX_val);
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_UART_RxCpltCallback+0x38>)
 80019d0:	781a      	ldrb	r2, [r3, #0]
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_UART_RxCpltCallback+0x3c>)
 80019d4:	0011      	movs	r1, r2
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7ff fbbe 	bl	8001158 <RB_Buff_Write>
	}
	HAL_UART_Receive_IT(&huart2, &UART_RX_val, 1);
 80019dc:	4905      	ldr	r1, [pc, #20]	; (80019f4 <HAL_UART_RxCpltCallback+0x38>)
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_UART_RxCpltCallback+0x40>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	0018      	movs	r0, r3
 80019e4:	f002 fdee 	bl	80045c4 <HAL_UART_Receive_IT>
}
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40004400 	.word	0x40004400
 80019f4:	20000228 	.word	0x20000228
 80019f8:	20000114 	.word	0x20000114
 80019fc:	2000027c 	.word	0x2000027c

08001a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a04:	b672      	cpsid	i
}
 8001a06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <Error_Handler+0x8>

08001a0a <Parser_clean_string>:


#include "parser.h"

void Parser_clean_string(RingBuffer_t* RX_buffer, uint8_t Destination_buffer[])
{
 8001a0a:	b590      	push	{r4, r7, lr}
 8001a0c:	b087      	sub	sp, #28
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
	uint8_t data_cnt = 0;
 8001a14:	210f      	movs	r1, #15
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]


	uint8_t j = 0;
 8001a1c:	2317      	movs	r3, #23
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]

	data_cnt = RX_buffer->data_counter;
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	2184      	movs	r1, #132	; 0x84
 8001a2a:	5c52      	ldrb	r2, [r2, r1]
 8001a2c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < data_cnt - 2; i++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	e021      	b.n	8001a78 <Parser_clean_string+0x6e>
	{
		uint8_t tmp;
		RB_Buff_Read(RX_buffer, &tmp);
 8001a34:	240e      	movs	r4, #14
 8001a36:	193a      	adds	r2, r7, r4
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	0011      	movs	r1, r2
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff fbcf 	bl	80011e0 <RB_Buff_Read>

		if((tmp=='\n') || (tmp=='\r'))
 8001a42:	0021      	movs	r1, r4
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b0a      	cmp	r3, #10
 8001a4a:	d011      	beq.n	8001a70 <Parser_clean_string+0x66>
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b0d      	cmp	r3, #13
 8001a52:	d00d      	beq.n	8001a70 <Parser_clean_string+0x66>
			continue;
		}

		else
		{
			Destination_buffer[j] = tmp;
 8001a54:	2017      	movs	r0, #23
 8001a56:	183b      	adds	r3, r7, r0
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	18d3      	adds	r3, r2, r3
 8001a5e:	187a      	adds	r2, r7, r1
 8001a60:	7812      	ldrb	r2, [r2, #0]
 8001a62:	701a      	strb	r2, [r3, #0]
			j++;
 8001a64:	183b      	adds	r3, r7, r0
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	183b      	adds	r3, r7, r0
 8001a6a:	3201      	adds	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e000      	b.n	8001a72 <Parser_clean_string+0x68>
			continue;
 8001a70:	46c0      	nop			; (mov r8, r8)
	for(int i=0; i < data_cnt - 2; i++)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	3301      	adds	r3, #1
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	230f      	movs	r3, #15
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	3b02      	subs	r3, #2
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	dbd6      	blt.n	8001a34 <Parser_clean_string+0x2a>
		}
	}

	Destination_buffer[j] = '\0';
 8001a86:	2317      	movs	r3, #23
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	18d3      	adds	r3, r2, r3
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b007      	add	sp, #28
 8001a9a:	bd90      	pop	{r4, r7, pc}

08001a9c <Parser_simple_parse>:
	return 0;
}


uint8_t Parser_simple_parse(char* message, uint8_t buffer[])
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
	char *ptr;

	ptr = strstr((char*)buffer, message);
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	0011      	movs	r1, r2
 8001aac:	0018      	movs	r0, r3
 8001aae:	f004 f81f 	bl	8005af0 <strstr>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	60fb      	str	r3, [r7, #12]
	if(ptr == NULL)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <Parser_simple_parse+0x24>
	{
		return 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e000      	b.n	8001ac2 <Parser_simple_parse+0x26>
	}

	else
	{
		return 1;
 8001ac0:	2301      	movs	r3, #1
	}
}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b004      	add	sp, #16
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_MspInit+0x24>)
 8001ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x24>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <HAL_MspInit+0x24>)
 8001ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_MspInit+0x24>)
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	0549      	lsls	r1, r1, #21
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b18:	f000 f9a8 	bl	8001e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <USART2_IRQHandler+0x14>)
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f002 fdb2 	bl	8004694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	2000027c 	.word	0x2000027c

08001b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <_sbrk+0x5c>)
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <_sbrk+0x60>)
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <_sbrk+0x64>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <_sbrk+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	18d3      	adds	r3, r2, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d207      	bcs.n	8001b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b6c:	f003 ff6e 	bl	8005a4c <__errno>
 8001b70:	0003      	movs	r3, r0
 8001b72:	220c      	movs	r2, #12
 8001b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	425b      	negs	r3, r3
 8001b7a:	e009      	b.n	8001b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	18d2      	adds	r2, r2, r3
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <_sbrk+0x64>)
 8001b8c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b006      	add	sp, #24
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20002000 	.word	0x20002000
 8001b9c:	00000400 	.word	0x00000400
 8001ba0:	2000008c 	.word	0x2000008c
 8001ba4:	20000318 	.word	0x20000318

08001ba8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	46c0      	nop			; (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bba:	2308      	movs	r3, #8
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	2310      	movs	r3, #16
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	f003 ff6b 	bl	8005aa0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bca:	003b      	movs	r3, r7
 8001bcc:	0018      	movs	r0, r3
 8001bce:	2308      	movs	r3, #8
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	f003 ff64 	bl	8005aa0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <MX_TIM2_Init+0xa0>)
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	05d2      	lsls	r2, r2, #23
 8001bde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12;
 8001be0:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <MX_TIM2_Init+0xa0>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be6:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <MX_TIM2_Init+0xa0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <MX_TIM2_Init+0xa0>)
 8001bee:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <MX_TIM2_Init+0xa4>)
 8001bf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <MX_TIM2_Init+0xa0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <MX_TIM2_Init+0xa0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_TIM2_Init+0xa0>)
 8001c00:	0018      	movs	r0, r3
 8001c02:	f002 f945 	bl	8003e90 <HAL_TIM_Base_Init>
 8001c06:	1e03      	subs	r3, r0, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c0a:	f7ff fef9 	bl	8001a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0e:	2108      	movs	r1, #8
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	0152      	lsls	r2, r2, #5
 8001c16:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c18:	187a      	adds	r2, r7, r1
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_TIM2_Init+0xa0>)
 8001c1c:	0011      	movs	r1, r2
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f002 f9ba 	bl	8003f98 <HAL_TIM_ConfigClockSource>
 8001c24:	1e03      	subs	r3, r0, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c28:	f7ff feea 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2c:	003b      	movs	r3, r7
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c32:	003b      	movs	r3, r7
 8001c34:	2200      	movs	r2, #0
 8001c36:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c38:	003a      	movs	r2, r7
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_TIM2_Init+0xa0>)
 8001c3c:	0011      	movs	r1, r2
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f002 fb6c 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 8001c44:	1e03      	subs	r3, r0, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001c48:	f7ff feda 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b006      	add	sp, #24
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	2000023c 	.word	0x2000023c
 8001c58:	0000ffff 	.word	0x0000ffff

08001c5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	05db      	lsls	r3, r3, #23
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d105      	bne.n	8001c7c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <HAL_TIM_Base_MspInit+0x28>)
 8001c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_TIM_Base_MspInit+0x28>)
 8001c76:	2101      	movs	r1, #1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b002      	add	sp, #8
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000

08001c88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001c8e:	4a15      	ldr	r2, [pc, #84]	; (8001ce4 <MX_USART2_UART_Init+0x5c>)
 8001c90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001c94:	22e1      	movs	r2, #225	; 0xe1
 8001c96:	0252      	lsls	r2, r2, #9
 8001c98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001cae:	220c      	movs	r2, #12
 8001cb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <MX_USART2_UART_Init+0x58>)
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f002 fb7d 	bl	80043cc <HAL_UART_Init>
 8001cd2:	1e03      	subs	r3, r0, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cd6:	f7ff fe93 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	2000027c 	.word	0x2000027c
 8001ce4:	40004400 	.word	0x40004400

08001ce8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	240c      	movs	r4, #12
 8001cf2:	193b      	adds	r3, r7, r4
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	2314      	movs	r3, #20
 8001cf8:	001a      	movs	r2, r3
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	f003 fed0 	bl	8005aa0 <memset>
  if(uartHandle->Instance==USART2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <HAL_UART_MspInit+0x80>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d129      	bne.n	8001d5e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_UART_MspInit+0x84>)
 8001d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <HAL_UART_MspInit+0x84>)
 8001d10:	2180      	movs	r1, #128	; 0x80
 8001d12:	0289      	lsls	r1, r1, #10
 8001d14:	430a      	orrs	r2, r1
 8001d16:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_UART_MspInit+0x84>)
 8001d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_UART_MspInit+0x84>)
 8001d1e:	2101      	movs	r1, #1
 8001d20:	430a      	orrs	r2, r1
 8001d22:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_UART_MspInit+0x84>)
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_3;
 8001d30:	0021      	movs	r1, r4
 8001d32:	187b      	adds	r3, r7, r1
 8001d34:	220c      	movs	r2, #12
 8001d36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	187b      	adds	r3, r7, r1
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	187b      	adds	r3, r7, r1
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	2203      	movs	r2, #3
 8001d48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	187a      	adds	r2, r7, r1
 8001d52:	23a0      	movs	r3, #160	; 0xa0
 8001d54:	05db      	lsls	r3, r3, #23
 8001d56:	0011      	movs	r1, r2
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 fa2d 	bl	80021b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b009      	add	sp, #36	; 0x24
 8001d64:	bd90      	pop	{r4, r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	40004400 	.word	0x40004400
 8001d6c:	40021000 	.word	0x40021000

08001d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001d70:	480d      	ldr	r0, [pc, #52]	; (8001da8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001d72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d74:	480d      	ldr	r0, [pc, #52]	; (8001dac <LoopForever+0x6>)
  ldr r1, =_edata
 8001d76:	490e      	ldr	r1, [pc, #56]	; (8001db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d78:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <LoopForever+0xe>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d8c:	4c0b      	ldr	r4, [pc, #44]	; (8001dbc <LoopForever+0x16>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d9a:	f7ff ff05 	bl	8001ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f003 fe5b 	bl	8005a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da2:	f7ff fd19 	bl	80017d8 <main>

08001da6 <LoopForever>:

LoopForever:
    b LoopForever
 8001da6:	e7fe      	b.n	8001da6 <LoopForever>
   ldr   r0, =_estack
 8001da8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001db4:	080064fc 	.word	0x080064fc
  ldr r2, =_sbss
 8001db8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001dbc:	20000314 	.word	0x20000314

08001dc0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC1_COMP_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_Init+0x3c>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_Init+0x3c>)
 8001dd6:	2140      	movs	r1, #64	; 0x40
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f000 f811 	bl	8001e04 <HAL_InitTick>
 8001de2:	1e03      	subs	r3, r0, #0
 8001de4:	d003      	beq.n	8001dee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e001      	b.n	8001df2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dee:	f7ff fe6d 	bl	8001acc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001df2:	1dfb      	adds	r3, r7, #7
 8001df4:	781b      	ldrb	r3, [r3, #0]
}
 8001df6:	0018      	movs	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b002      	add	sp, #8
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	40022000 	.word	0x40022000

08001e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_InitTick+0x5c>)
 8001e0e:	681c      	ldr	r4, [r3, #0]
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_InitTick+0x60>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	0019      	movs	r1, r3
 8001e16:	23fa      	movs	r3, #250	; 0xfa
 8001e18:	0098      	lsls	r0, r3, #2
 8001e1a:	f7fe f97f 	bl	800011c <__udivsi3>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	0019      	movs	r1, r3
 8001e22:	0020      	movs	r0, r4
 8001e24:	f7fe f97a 	bl	800011c <__udivsi3>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f000 f92f 	bl	800208e <HAL_SYSTICK_Config>
 8001e30:	1e03      	subs	r3, r0, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e00f      	b.n	8001e58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d80b      	bhi.n	8001e56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	2301      	movs	r3, #1
 8001e42:	425b      	negs	r3, r3
 8001e44:	2200      	movs	r2, #0
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 f8fc 	bl	8002044 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_InitTick+0x64>)
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b003      	add	sp, #12
 8001e5e:	bd90      	pop	{r4, r7, pc}
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000008 	.word	0x20000008
 8001e68:	20000004 	.word	0x20000004

08001e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_IncTick+0x1c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	001a      	movs	r2, r3
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_IncTick+0x20>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	18d2      	adds	r2, r2, r3
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_IncTick+0x20>)
 8001e7e:	601a      	str	r2, [r3, #0]
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	20000300 	.word	0x20000300

08001e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b02      	ldr	r3, [pc, #8]	; (8001ea0 <HAL_GetTick+0x10>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	20000300 	.word	0x20000300

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff fff0 	bl	8001e90 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	001a      	movs	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	189b      	adds	r3, r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	f7ff ffe0 	bl	8001e90 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	46c0      	nop			; (mov r8, r8)
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b004      	add	sp, #16
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	20000008 	.word	0x20000008

08001eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	1dfb      	adds	r3, r7, #7
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b7f      	cmp	r3, #127	; 0x7f
 8001efe:	d809      	bhi.n	8001f14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f00:	1dfb      	adds	r3, r7, #7
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	001a      	movs	r2, r3
 8001f06:	231f      	movs	r3, #31
 8001f08:	401a      	ands	r2, r3
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_EnableIRQ+0x30>)
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	4091      	lsls	r1, r2
 8001f10:	000a      	movs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]
  }
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b002      	add	sp, #8
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	0002      	movs	r2, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b7f      	cmp	r3, #127	; 0x7f
 8001f34:	d828      	bhi.n	8001f88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f36:	4a2f      	ldr	r2, [pc, #188]	; (8001ff4 <__NVIC_SetPriority+0xd4>)
 8001f38:	1dfb      	adds	r3, r7, #7
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	b25b      	sxtb	r3, r3
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	33c0      	adds	r3, #192	; 0xc0
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	589b      	ldr	r3, [r3, r2]
 8001f46:	1dfa      	adds	r2, r7, #7
 8001f48:	7812      	ldrb	r2, [r2, #0]
 8001f4a:	0011      	movs	r1, r2
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	400a      	ands	r2, r1
 8001f50:	00d2      	lsls	r2, r2, #3
 8001f52:	21ff      	movs	r1, #255	; 0xff
 8001f54:	4091      	lsls	r1, r2
 8001f56:	000a      	movs	r2, r1
 8001f58:	43d2      	mvns	r2, r2
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	019b      	lsls	r3, r3, #6
 8001f62:	22ff      	movs	r2, #255	; 0xff
 8001f64:	401a      	ands	r2, r3
 8001f66:	1dfb      	adds	r3, r7, #7
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	4003      	ands	r3, r0
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f74:	481f      	ldr	r0, [pc, #124]	; (8001ff4 <__NVIC_SetPriority+0xd4>)
 8001f76:	1dfb      	adds	r3, r7, #7
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b25b      	sxtb	r3, r3
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	33c0      	adds	r3, #192	; 0xc0
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f86:	e031      	b.n	8001fec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f88:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <__NVIC_SetPriority+0xd8>)
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	0019      	movs	r1, r3
 8001f90:	230f      	movs	r3, #15
 8001f92:	400b      	ands	r3, r1
 8001f94:	3b08      	subs	r3, #8
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3306      	adds	r3, #6
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	18d3      	adds	r3, r2, r3
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	1dfa      	adds	r2, r7, #7
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	0011      	movs	r1, r2
 8001fa8:	2203      	movs	r2, #3
 8001faa:	400a      	ands	r2, r1
 8001fac:	00d2      	lsls	r2, r2, #3
 8001fae:	21ff      	movs	r1, #255	; 0xff
 8001fb0:	4091      	lsls	r1, r2
 8001fb2:	000a      	movs	r2, r1
 8001fb4:	43d2      	mvns	r2, r2
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	019b      	lsls	r3, r3, #6
 8001fbe:	22ff      	movs	r2, #255	; 0xff
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	2303      	movs	r3, #3
 8001fca:	4003      	ands	r3, r0
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd0:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <__NVIC_SetPriority+0xd8>)
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	001c      	movs	r4, r3
 8001fd8:	230f      	movs	r3, #15
 8001fda:	4023      	ands	r3, r4
 8001fdc:	3b08      	subs	r3, #8
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	3306      	adds	r3, #6
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	18c3      	adds	r3, r0, r3
 8001fe8:	3304      	adds	r3, #4
 8001fea:	601a      	str	r2, [r3, #0]
}
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b003      	add	sp, #12
 8001ff2:	bd90      	pop	{r4, r7, pc}
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	1e5a      	subs	r2, r3, #1
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	045b      	lsls	r3, r3, #17
 800200c:	429a      	cmp	r2, r3
 800200e:	d301      	bcc.n	8002014 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002010:	2301      	movs	r3, #1
 8002012:	e010      	b.n	8002036 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <SysTick_Config+0x44>)
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	3a01      	subs	r2, #1
 800201a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201c:	2301      	movs	r3, #1
 800201e:	425b      	negs	r3, r3
 8002020:	2103      	movs	r1, #3
 8002022:	0018      	movs	r0, r3
 8002024:	f7ff ff7c 	bl	8001f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <SysTick_Config+0x44>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <SysTick_Config+0x44>)
 8002030:	2207      	movs	r2, #7
 8002032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002034:	2300      	movs	r3, #0
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	e000e010 	.word	0xe000e010

08002044 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	210f      	movs	r1, #15
 8002050:	187b      	adds	r3, r7, r1
 8002052:	1c02      	adds	r2, r0, #0
 8002054:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	187b      	adds	r3, r7, r1
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b25b      	sxtb	r3, r3
 800205e:	0011      	movs	r1, r2
 8002060:	0018      	movs	r0, r3
 8002062:	f7ff ff5d 	bl	8001f20 <__NVIC_SetPriority>
}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	b004      	add	sp, #16
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	0002      	movs	r2, r0
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b25b      	sxtb	r3, r3
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff ff33 	bl	8001eec <__NVIC_EnableIRQ>
}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	0018      	movs	r0, r3
 800209a:	f7ff ffaf 	bl	8001ffc <SysTick_Config>
 800209e:	0003      	movs	r3, r0
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b002      	add	sp, #8
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b0:	230f      	movs	r3, #15
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2225      	movs	r2, #37	; 0x25
 80020bc:	5c9b      	ldrb	r3, [r3, r2]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d008      	beq.n	80020d6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2204      	movs	r2, #4
 80020c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2224      	movs	r2, #36	; 0x24
 80020ce:	2100      	movs	r1, #0
 80020d0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e024      	b.n	8002120 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	210e      	movs	r1, #14
 80020e2:	438a      	bics	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2101      	movs	r1, #1
 80020f2:	438a      	bics	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	221c      	movs	r2, #28
 80020fc:	401a      	ands	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	2101      	movs	r1, #1
 8002104:	4091      	lsls	r1, r2
 8002106:	000a      	movs	r2, r1
 8002108:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2225      	movs	r2, #37	; 0x25
 800210e:	2101      	movs	r1, #1
 8002110:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2224      	movs	r2, #36	; 0x24
 8002116:	2100      	movs	r1, #0
 8002118:	5499      	strb	r1, [r3, r2]

    return status;
 800211a:	230f      	movs	r3, #15
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b004      	add	sp, #16
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002130:	210f      	movs	r1, #15
 8002132:	187b      	adds	r3, r7, r1
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2225      	movs	r2, #37	; 0x25
 800213c:	5c9b      	ldrb	r3, [r3, r2]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d006      	beq.n	8002152 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2204      	movs	r2, #4
 8002148:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800214a:	187b      	adds	r3, r7, r1
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	e02a      	b.n	80021a8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	210e      	movs	r1, #14
 800215e:	438a      	bics	r2, r1
 8002160:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	438a      	bics	r2, r1
 8002170:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	221c      	movs	r2, #28
 8002178:	401a      	ands	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2101      	movs	r1, #1
 8002180:	4091      	lsls	r1, r2
 8002182:	000a      	movs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2225      	movs	r2, #37	; 0x25
 800218a:	2101      	movs	r1, #1
 800218c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2224      	movs	r2, #36	; 0x24
 8002192:	2100      	movs	r1, #0
 8002194:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219a:	2b00      	cmp	r3, #0
 800219c:	d004      	beq.n	80021a8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	0010      	movs	r0, r2
 80021a6:	4798      	blx	r3
    }
  }
  return status;
 80021a8:	230f      	movs	r3, #15
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	781b      	ldrb	r3, [r3, #0]
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b004      	add	sp, #16
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80021ce:	e149      	b.n	8002464 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4091      	lsls	r1, r2
 80021da:	000a      	movs	r2, r1
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d100      	bne.n	80021e8 <HAL_GPIO_Init+0x30>
 80021e6:	e13a      	b.n	800245e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2203      	movs	r2, #3
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d005      	beq.n	8002200 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2203      	movs	r2, #3
 80021fa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d130      	bne.n	8002262 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	409a      	lsls	r2, r3
 800220e:	0013      	movs	r3, r2
 8002210:	43da      	mvns	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	409a      	lsls	r2, r3
 8002222:	0013      	movs	r3, r2
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002236:	2201      	movs	r2, #1
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
 800223c:	0013      	movs	r3, r2
 800223e:	43da      	mvns	r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	2201      	movs	r2, #1
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
 8002254:	0013      	movs	r3, r2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2203      	movs	r2, #3
 8002268:	4013      	ands	r3, r2
 800226a:	2b03      	cmp	r3, #3
 800226c:	d017      	beq.n	800229e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	2203      	movs	r2, #3
 800227a:	409a      	lsls	r2, r3
 800227c:	0013      	movs	r3, r2
 800227e:	43da      	mvns	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	409a      	lsls	r2, r3
 8002290:	0013      	movs	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2203      	movs	r2, #3
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d123      	bne.n	80022f2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	08da      	lsrs	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3208      	adds	r2, #8
 80022b2:	0092      	lsls	r2, r2, #2
 80022b4:	58d3      	ldr	r3, [r2, r3]
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2207      	movs	r2, #7
 80022bc:	4013      	ands	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	220f      	movs	r2, #15
 80022c2:	409a      	lsls	r2, r3
 80022c4:	0013      	movs	r3, r2
 80022c6:	43da      	mvns	r2, r3
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2107      	movs	r1, #7
 80022d6:	400b      	ands	r3, r1
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	409a      	lsls	r2, r3
 80022dc:	0013      	movs	r3, r2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	08da      	lsrs	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3208      	adds	r2, #8
 80022ec:	0092      	lsls	r2, r2, #2
 80022ee:	6939      	ldr	r1, [r7, #16]
 80022f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	409a      	lsls	r2, r3
 8002300:	0013      	movs	r3, r2
 8002302:	43da      	mvns	r2, r3
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2203      	movs	r2, #3
 8002310:	401a      	ands	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	409a      	lsls	r2, r3
 8002318:	0013      	movs	r3, r2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	23c0      	movs	r3, #192	; 0xc0
 800232c:	029b      	lsls	r3, r3, #10
 800232e:	4013      	ands	r3, r2
 8002330:	d100      	bne.n	8002334 <HAL_GPIO_Init+0x17c>
 8002332:	e094      	b.n	800245e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002334:	4b51      	ldr	r3, [pc, #324]	; (800247c <HAL_GPIO_Init+0x2c4>)
 8002336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002338:	4b50      	ldr	r3, [pc, #320]	; (800247c <HAL_GPIO_Init+0x2c4>)
 800233a:	2101      	movs	r1, #1
 800233c:	430a      	orrs	r2, r1
 800233e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002340:	4a4f      	ldr	r2, [pc, #316]	; (8002480 <HAL_GPIO_Init+0x2c8>)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	589b      	ldr	r3, [r3, r2]
 800234c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2203      	movs	r2, #3
 8002352:	4013      	ands	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	220f      	movs	r2, #15
 8002358:	409a      	lsls	r2, r3
 800235a:	0013      	movs	r3, r2
 800235c:	43da      	mvns	r2, r3
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	23a0      	movs	r3, #160	; 0xa0
 8002368:	05db      	lsls	r3, r3, #23
 800236a:	429a      	cmp	r2, r3
 800236c:	d013      	beq.n	8002396 <HAL_GPIO_Init+0x1de>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a44      	ldr	r2, [pc, #272]	; (8002484 <HAL_GPIO_Init+0x2cc>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00d      	beq.n	8002392 <HAL_GPIO_Init+0x1da>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a43      	ldr	r2, [pc, #268]	; (8002488 <HAL_GPIO_Init+0x2d0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <HAL_GPIO_Init+0x1d6>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a42      	ldr	r2, [pc, #264]	; (800248c <HAL_GPIO_Init+0x2d4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_GPIO_Init+0x1d2>
 8002386:	2305      	movs	r3, #5
 8002388:	e006      	b.n	8002398 <HAL_GPIO_Init+0x1e0>
 800238a:	2306      	movs	r3, #6
 800238c:	e004      	b.n	8002398 <HAL_GPIO_Init+0x1e0>
 800238e:	2302      	movs	r3, #2
 8002390:	e002      	b.n	8002398 <HAL_GPIO_Init+0x1e0>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_GPIO_Init+0x1e0>
 8002396:	2300      	movs	r3, #0
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	2103      	movs	r1, #3
 800239c:	400a      	ands	r2, r1
 800239e:	0092      	lsls	r2, r2, #2
 80023a0:	4093      	lsls	r3, r2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a8:	4935      	ldr	r1, [pc, #212]	; (8002480 <HAL_GPIO_Init+0x2c8>)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	3302      	adds	r3, #2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b6:	4b36      	ldr	r3, [pc, #216]	; (8002490 <HAL_GPIO_Init+0x2d8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	43da      	mvns	r2, r3
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	4013      	ands	r3, r2
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023da:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_GPIO_Init+0x2d8>)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_GPIO_Init+0x2d8>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43da      	mvns	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	029b      	lsls	r3, r3, #10
 80023f8:	4013      	ands	r3, r2
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002404:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_GPIO_Init+0x2d8>)
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <HAL_GPIO_Init+0x2d8>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43da      	mvns	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	035b      	lsls	r3, r3, #13
 8002422:	4013      	ands	r3, r2
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_GPIO_Init+0x2d8>)
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002434:	4b16      	ldr	r3, [pc, #88]	; (8002490 <HAL_GPIO_Init+0x2d8>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43da      	mvns	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	039b      	lsls	r3, r3, #14
 800244c:	4013      	ands	r3, r2
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_GPIO_Init+0x2d8>)
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3301      	adds	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	40da      	lsrs	r2, r3
 800246c:	1e13      	subs	r3, r2, #0
 800246e:	d000      	beq.n	8002472 <HAL_GPIO_Init+0x2ba>
 8002470:	e6ae      	b.n	80021d0 <HAL_GPIO_Init+0x18>
  }
}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b006      	add	sp, #24
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	40010000 	.word	0x40010000
 8002484:	50000400 	.word	0x50000400
 8002488:	50000800 	.word	0x50000800
 800248c:	50001c00 	.word	0x50001c00
 8002490:	40010400 	.word	0x40010400

08002494 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	000a      	movs	r2, r1
 800249e:	1cbb      	adds	r3, r7, #2
 80024a0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	1cba      	adds	r2, r7, #2
 80024a8:	8812      	ldrh	r2, [r2, #0]
 80024aa:	4013      	ands	r3, r2
 80024ac:	d004      	beq.n	80024b8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80024ae:	230f      	movs	r3, #15
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e003      	b.n	80024c0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024b8:	230f      	movs	r3, #15
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80024c0:	230f      	movs	r3, #15
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	781b      	ldrb	r3, [r3, #0]
}
 80024c6:	0018      	movs	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b004      	add	sp, #16
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	0008      	movs	r0, r1
 80024d8:	0011      	movs	r1, r2
 80024da:	1cbb      	adds	r3, r7, #2
 80024dc:	1c02      	adds	r2, r0, #0
 80024de:	801a      	strh	r2, [r3, #0]
 80024e0:	1c7b      	adds	r3, r7, #1
 80024e2:	1c0a      	adds	r2, r1, #0
 80024e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e6:	1c7b      	adds	r3, r7, #1
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d004      	beq.n	80024f8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ee:	1cbb      	adds	r3, r7, #2
 80024f0:	881a      	ldrh	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80024f6:	e003      	b.n	8002500 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80024f8:	1cbb      	adds	r3, r7, #2
 80024fa:	881a      	ldrh	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002500:	46c0      	nop			; (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b002      	add	sp, #8
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	000a      	movs	r2, r1
 8002512:	1cbb      	adds	r3, r7, #2
 8002514:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800251c:	1cbb      	adds	r3, r7, #2
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4013      	ands	r3, r2
 8002524:	041a      	lsls	r2, r3, #16
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	1cb9      	adds	r1, r7, #2
 800252c:	8809      	ldrh	r1, [r1, #0]
 800252e:	400b      	ands	r3, r1
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	619a      	str	r2, [r3, #24]
}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	b004      	add	sp, #16
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e082      	b.n	8002658 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2241      	movs	r2, #65	; 0x41
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d107      	bne.n	800256e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2240      	movs	r2, #64	; 0x40
 8002562:	2100      	movs	r1, #0
 8002564:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff f8f1 	bl	8001750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2241      	movs	r2, #65	; 0x41
 8002572:	2124      	movs	r1, #36	; 0x24
 8002574:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2101      	movs	r1, #1
 8002582:	438a      	bics	r2, r1
 8002584:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4934      	ldr	r1, [pc, #208]	; (8002660 <HAL_I2C_Init+0x120>)
 8002590:	400a      	ands	r2, r1
 8002592:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4931      	ldr	r1, [pc, #196]	; (8002664 <HAL_I2C_Init+0x124>)
 80025a0:	400a      	ands	r2, r1
 80025a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d108      	bne.n	80025be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	0209      	lsls	r1, r1, #8
 80025b8:	430a      	orrs	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	e007      	b.n	80025ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2184      	movs	r1, #132	; 0x84
 80025c8:	0209      	lsls	r1, r1, #8
 80025ca:	430a      	orrs	r2, r1
 80025cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d104      	bne.n	80025e0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2280      	movs	r2, #128	; 0x80
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	491f      	ldr	r1, [pc, #124]	; (8002668 <HAL_I2C_Init+0x128>)
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	491a      	ldr	r1, [pc, #104]	; (8002664 <HAL_I2C_Init+0x124>)
 80025fc:	400a      	ands	r2, r1
 80025fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	431a      	orrs	r2, r3
 800260a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69d9      	ldr	r1, [r3, #28]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1a      	ldr	r2, [r3, #32]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2101      	movs	r1, #1
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2241      	movs	r2, #65	; 0x41
 8002644:	2120      	movs	r1, #32
 8002646:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2242      	movs	r2, #66	; 0x42
 8002652:	2100      	movs	r1, #0
 8002654:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	b002      	add	sp, #8
 800265e:	bd80      	pop	{r7, pc}
 8002660:	f0ffffff 	.word	0xf0ffffff
 8002664:	ffff7fff 	.word	0xffff7fff
 8002668:	02008000 	.word	0x02008000

0800266c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	000c      	movs	r4, r1
 8002676:	0010      	movs	r0, r2
 8002678:	0019      	movs	r1, r3
 800267a:	230a      	movs	r3, #10
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	1c22      	adds	r2, r4, #0
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	2308      	movs	r3, #8
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	1c02      	adds	r2, r0, #0
 8002688:	801a      	strh	r2, [r3, #0]
 800268a:	1dbb      	adds	r3, r7, #6
 800268c:	1c0a      	adds	r2, r1, #0
 800268e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2241      	movs	r2, #65	; 0x41
 8002694:	5c9b      	ldrb	r3, [r3, r2]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b20      	cmp	r3, #32
 800269a:	d000      	beq.n	800269e <HAL_I2C_Mem_Write+0x32>
 800269c:	e10c      	b.n	80028b8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d004      	beq.n	80026ae <HAL_I2C_Mem_Write+0x42>
 80026a4:	232c      	movs	r3, #44	; 0x2c
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d105      	bne.n	80026ba <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2280      	movs	r2, #128	; 0x80
 80026b2:	0092      	lsls	r2, r2, #2
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0ff      	b.n	80028ba <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2240      	movs	r2, #64	; 0x40
 80026be:	5c9b      	ldrb	r3, [r3, r2]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_I2C_Mem_Write+0x5c>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e0f8      	b.n	80028ba <HAL_I2C_Mem_Write+0x24e>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2240      	movs	r2, #64	; 0x40
 80026cc:	2101      	movs	r1, #1
 80026ce:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026d0:	f7ff fbde 	bl	8001e90 <HAL_GetTick>
 80026d4:	0003      	movs	r3, r0
 80026d6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	0219      	lsls	r1, r3, #8
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	2319      	movs	r3, #25
 80026e4:	2201      	movs	r2, #1
 80026e6:	f000 fb0b 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 80026ea:	1e03      	subs	r3, r0, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0e3      	b.n	80028ba <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2241      	movs	r2, #65	; 0x41
 80026f6:	2121      	movs	r1, #33	; 0x21
 80026f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2242      	movs	r2, #66	; 0x42
 80026fe:	2140      	movs	r1, #64	; 0x40
 8002700:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800270c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	222c      	movs	r2, #44	; 0x2c
 8002712:	18ba      	adds	r2, r7, r2
 8002714:	8812      	ldrh	r2, [r2, #0]
 8002716:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800271e:	1dbb      	adds	r3, r7, #6
 8002720:	881c      	ldrh	r4, [r3, #0]
 8002722:	2308      	movs	r3, #8
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	881a      	ldrh	r2, [r3, #0]
 8002728:	230a      	movs	r3, #10
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	8819      	ldrh	r1, [r3, #0]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	0023      	movs	r3, r4
 800273a:	f000 f9f9 	bl	8002b30 <I2C_RequestMemoryWrite>
 800273e:	1e03      	subs	r3, r0, #0
 8002740:	d005      	beq.n	800274e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2240      	movs	r2, #64	; 0x40
 8002746:	2100      	movs	r1, #0
 8002748:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0b5      	b.n	80028ba <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	2bff      	cmp	r3, #255	; 0xff
 8002756:	d911      	bls.n	800277c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	22ff      	movs	r2, #255	; 0xff
 800275c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	b2da      	uxtb	r2, r3
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	045c      	lsls	r4, r3, #17
 8002768:	230a      	movs	r3, #10
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	8819      	ldrh	r1, [r3, #0]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	2300      	movs	r3, #0
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	0023      	movs	r3, r4
 8002776:	f000 fbf7 	bl	8002f68 <I2C_TransferConfig>
 800277a:	e012      	b.n	80027a2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	b2da      	uxtb	r2, r3
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	049c      	lsls	r4, r3, #18
 8002790:	230a      	movs	r3, #10
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	8819      	ldrh	r1, [r3, #0]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	2300      	movs	r3, #0
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	0023      	movs	r3, r4
 800279e:	f000 fbe3 	bl	8002f68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 fae8 	bl	8002d7e <I2C_WaitOnTXISFlagUntilTimeout>
 80027ae:	1e03      	subs	r3, r0, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e081      	b.n	80028ba <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d03a      	beq.n	8002866 <HAL_I2C_Mem_Write+0x1fa>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d136      	bne.n	8002866 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	0013      	movs	r3, r2
 8002802:	2200      	movs	r2, #0
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	f000 fa7b 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 800280a:	1e03      	subs	r3, r0, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e053      	b.n	80028ba <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	2bff      	cmp	r3, #255	; 0xff
 800281a:	d911      	bls.n	8002840 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	22ff      	movs	r2, #255	; 0xff
 8002820:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002826:	b2da      	uxtb	r2, r3
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	045c      	lsls	r4, r3, #17
 800282c:	230a      	movs	r3, #10
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	8819      	ldrh	r1, [r3, #0]
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	2300      	movs	r3, #0
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	0023      	movs	r3, r4
 800283a:	f000 fb95 	bl	8002f68 <I2C_TransferConfig>
 800283e:	e012      	b.n	8002866 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284e:	b2da      	uxtb	r2, r3
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	049c      	lsls	r4, r3, #18
 8002854:	230a      	movs	r3, #10
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	8819      	ldrh	r1, [r3, #0]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	2300      	movs	r3, #0
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	0023      	movs	r3, r4
 8002862:	f000 fb81 	bl	8002f68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d198      	bne.n	80027a2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	0018      	movs	r0, r3
 8002878:	f000 fac0 	bl	8002dfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e01a      	b.n	80028ba <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2220      	movs	r2, #32
 800288a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	490b      	ldr	r1, [pc, #44]	; (80028c4 <HAL_I2C_Mem_Write+0x258>)
 8002898:	400a      	ands	r2, r1
 800289a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2241      	movs	r2, #65	; 0x41
 80028a0:	2120      	movs	r1, #32
 80028a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2242      	movs	r2, #66	; 0x42
 80028a8:	2100      	movs	r1, #0
 80028aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	2100      	movs	r1, #0
 80028b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e000      	b.n	80028ba <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
  }
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b007      	add	sp, #28
 80028c0:	bd90      	pop	{r4, r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	fe00e800 	.word	0xfe00e800

080028c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	000c      	movs	r4, r1
 80028d2:	0010      	movs	r0, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	230a      	movs	r3, #10
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	1c22      	adds	r2, r4, #0
 80028dc:	801a      	strh	r2, [r3, #0]
 80028de:	2308      	movs	r3, #8
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	1c02      	adds	r2, r0, #0
 80028e4:	801a      	strh	r2, [r3, #0]
 80028e6:	1dbb      	adds	r3, r7, #6
 80028e8:	1c0a      	adds	r2, r1, #0
 80028ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2241      	movs	r2, #65	; 0x41
 80028f0:	5c9b      	ldrb	r3, [r3, r2]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d000      	beq.n	80028fa <HAL_I2C_Mem_Read+0x32>
 80028f8:	e110      	b.n	8002b1c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d004      	beq.n	800290a <HAL_I2C_Mem_Read+0x42>
 8002900:	232c      	movs	r3, #44	; 0x2c
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2280      	movs	r2, #128	; 0x80
 800290e:	0092      	lsls	r2, r2, #2
 8002910:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e103      	b.n	8002b1e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2240      	movs	r2, #64	; 0x40
 800291a:	5c9b      	ldrb	r3, [r3, r2]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_I2C_Mem_Read+0x5c>
 8002920:	2302      	movs	r3, #2
 8002922:	e0fc      	b.n	8002b1e <HAL_I2C_Mem_Read+0x256>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2240      	movs	r2, #64	; 0x40
 8002928:	2101      	movs	r1, #1
 800292a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800292c:	f7ff fab0 	bl	8001e90 <HAL_GetTick>
 8002930:	0003      	movs	r3, r0
 8002932:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	0219      	lsls	r1, r3, #8
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2319      	movs	r3, #25
 8002940:	2201      	movs	r2, #1
 8002942:	f000 f9dd 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002946:	1e03      	subs	r3, r0, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0e7      	b.n	8002b1e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2241      	movs	r2, #65	; 0x41
 8002952:	2122      	movs	r1, #34	; 0x22
 8002954:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2242      	movs	r2, #66	; 0x42
 800295a:	2140      	movs	r1, #64	; 0x40
 800295c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002968:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	222c      	movs	r2, #44	; 0x2c
 800296e:	18ba      	adds	r2, r7, r2
 8002970:	8812      	ldrh	r2, [r2, #0]
 8002972:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800297a:	1dbb      	adds	r3, r7, #6
 800297c:	881c      	ldrh	r4, [r3, #0]
 800297e:	2308      	movs	r3, #8
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	881a      	ldrh	r2, [r3, #0]
 8002984:	230a      	movs	r3, #10
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	8819      	ldrh	r1, [r3, #0]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	0023      	movs	r3, r4
 8002996:	f000 f92f 	bl	8002bf8 <I2C_RequestMemoryRead>
 800299a:	1e03      	subs	r3, r0, #0
 800299c:	d005      	beq.n	80029aa <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2240      	movs	r2, #64	; 0x40
 80029a2:	2100      	movs	r1, #0
 80029a4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e0b9      	b.n	8002b1e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2bff      	cmp	r3, #255	; 0xff
 80029b2:	d911      	bls.n	80029d8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	22ff      	movs	r2, #255	; 0xff
 80029b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	045c      	lsls	r4, r3, #17
 80029c4:	230a      	movs	r3, #10
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	8819      	ldrh	r1, [r3, #0]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	4b56      	ldr	r3, [pc, #344]	; (8002b28 <HAL_I2C_Mem_Read+0x260>)
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	0023      	movs	r3, r4
 80029d2:	f000 fac9 	bl	8002f68 <I2C_TransferConfig>
 80029d6:	e012      	b.n	80029fe <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	049c      	lsls	r4, r3, #18
 80029ec:	230a      	movs	r3, #10
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	8819      	ldrh	r1, [r3, #0]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	4b4c      	ldr	r3, [pc, #304]	; (8002b28 <HAL_I2C_Mem_Read+0x260>)
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	0023      	movs	r3, r4
 80029fa:	f000 fab5 	bl	8002f68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	0013      	movs	r3, r2
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2104      	movs	r1, #4
 8002a0c:	f000 f978 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002a10:	1e03      	subs	r3, r0, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e082      	b.n	8002b1e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d03a      	beq.n	8002aca <HAL_I2C_Mem_Read+0x202>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d136      	bne.n	8002aca <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	0013      	movs	r3, r2
 8002a66:	2200      	movs	r2, #0
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	f000 f949 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002a6e:	1e03      	subs	r3, r0, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e053      	b.n	8002b1e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2bff      	cmp	r3, #255	; 0xff
 8002a7e:	d911      	bls.n	8002aa4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	22ff      	movs	r2, #255	; 0xff
 8002a84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	045c      	lsls	r4, r3, #17
 8002a90:	230a      	movs	r3, #10
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	8819      	ldrh	r1, [r3, #0]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	0023      	movs	r3, r4
 8002a9e:	f000 fa63 	bl	8002f68 <I2C_TransferConfig>
 8002aa2:	e012      	b.n	8002aca <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	049c      	lsls	r4, r3, #18
 8002ab8:	230a      	movs	r3, #10
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	8819      	ldrh	r1, [r3, #0]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	0023      	movs	r3, r4
 8002ac6:	f000 fa4f 	bl	8002f68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d194      	bne.n	80029fe <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f000 f98e 	bl	8002dfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ae0:	1e03      	subs	r3, r0, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e01a      	b.n	8002b1e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2220      	movs	r2, #32
 8002aee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	490c      	ldr	r1, [pc, #48]	; (8002b2c <HAL_I2C_Mem_Read+0x264>)
 8002afc:	400a      	ands	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2241      	movs	r2, #65	; 0x41
 8002b04:	2120      	movs	r1, #32
 8002b06:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2242      	movs	r2, #66	; 0x42
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2240      	movs	r2, #64	; 0x40
 8002b14:	2100      	movs	r1, #0
 8002b16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e000      	b.n	8002b1e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b007      	add	sp, #28
 8002b24:	bd90      	pop	{r4, r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	80002400 	.word	0x80002400
 8002b2c:	fe00e800 	.word	0xfe00e800

08002b30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b30:	b5b0      	push	{r4, r5, r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	000c      	movs	r4, r1
 8002b3a:	0010      	movs	r0, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	250a      	movs	r5, #10
 8002b40:	197b      	adds	r3, r7, r5
 8002b42:	1c22      	adds	r2, r4, #0
 8002b44:	801a      	strh	r2, [r3, #0]
 8002b46:	2308      	movs	r3, #8
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	1c02      	adds	r2, r0, #0
 8002b4c:	801a      	strh	r2, [r3, #0]
 8002b4e:	1dbb      	adds	r3, r7, #6
 8002b50:	1c0a      	adds	r2, r1, #0
 8002b52:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b54:	1dbb      	adds	r3, r7, #6
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	045c      	lsls	r4, r3, #17
 8002b5e:	197b      	adds	r3, r7, r5
 8002b60:	8819      	ldrh	r1, [r3, #0]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <I2C_RequestMemoryWrite+0xc4>)
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	0023      	movs	r3, r4
 8002b6a:	f000 f9fd 	bl	8002f68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b70:	6a39      	ldr	r1, [r7, #32]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 f902 	bl	8002d7e <I2C_WaitOnTXISFlagUntilTimeout>
 8002b7a:	1e03      	subs	r3, r0, #0
 8002b7c:	d001      	beq.n	8002b82 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e033      	b.n	8002bea <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b82:	1dbb      	adds	r3, r7, #6
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d107      	bne.n	8002b9a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b8a:	2308      	movs	r3, #8
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
 8002b98:	e019      	b.n	8002bce <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	0a1b      	lsrs	r3, r3, #8
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bae:	6a39      	ldr	r1, [r7, #32]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 f8e3 	bl	8002d7e <I2C_WaitOnTXISFlagUntilTimeout>
 8002bb8:	1e03      	subs	r3, r0, #0
 8002bba:	d001      	beq.n	8002bc0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e014      	b.n	8002bea <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002bce:	6a3a      	ldr	r2, [r7, #32]
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	0013      	movs	r3, r2
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	f000 f890 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002be0:	1e03      	subs	r3, r0, #0
 8002be2:	d001      	beq.n	8002be8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b004      	add	sp, #16
 8002bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	80002000 	.word	0x80002000

08002bf8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002bf8:	b5b0      	push	{r4, r5, r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	000c      	movs	r4, r1
 8002c02:	0010      	movs	r0, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	250a      	movs	r5, #10
 8002c08:	197b      	adds	r3, r7, r5
 8002c0a:	1c22      	adds	r2, r4, #0
 8002c0c:	801a      	strh	r2, [r3, #0]
 8002c0e:	2308      	movs	r3, #8
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	1c02      	adds	r2, r0, #0
 8002c14:	801a      	strh	r2, [r3, #0]
 8002c16:	1dbb      	adds	r3, r7, #6
 8002c18:	1c0a      	adds	r2, r1, #0
 8002c1a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c1c:	1dbb      	adds	r3, r7, #6
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	197b      	adds	r3, r7, r5
 8002c24:	8819      	ldrh	r1, [r3, #0]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <I2C_RequestMemoryRead+0xc0>)
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f000 f99b 	bl	8002f68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c34:	6a39      	ldr	r1, [r7, #32]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 f8a0 	bl	8002d7e <I2C_WaitOnTXISFlagUntilTimeout>
 8002c3e:	1e03      	subs	r3, r0, #0
 8002c40:	d001      	beq.n	8002c46 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e033      	b.n	8002cae <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c46:	1dbb      	adds	r3, r7, #6
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d107      	bne.n	8002c5e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c4e:	2308      	movs	r3, #8
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c5c:	e019      	b.n	8002c92 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c5e:	2308      	movs	r3, #8
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c72:	6a39      	ldr	r1, [r7, #32]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 f881 	bl	8002d7e <I2C_WaitOnTXISFlagUntilTimeout>
 8002c7c:	1e03      	subs	r3, r0, #0
 8002c7e:	d001      	beq.n	8002c84 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e014      	b.n	8002cae <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c84:	2308      	movs	r3, #8
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c92:	6a3a      	ldr	r2, [r7, #32]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	0013      	movs	r3, r2
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2140      	movs	r1, #64	; 0x40
 8002ca0:	f000 f82e 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002ca4:	1e03      	subs	r3, r0, #0
 8002ca6:	d001      	beq.n	8002cac <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	0018      	movs	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b004      	add	sp, #16
 8002cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	80002000 	.word	0x80002000

08002cbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d103      	bne.n	8002cda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d007      	beq.n	8002cf8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699a      	ldr	r2, [r3, #24]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	619a      	str	r2, [r3, #24]
  }
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b002      	add	sp, #8
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	1dfb      	adds	r3, r7, #7
 8002d0e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d10:	e021      	b.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	d01e      	beq.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d18:	f7ff f8ba 	bl	8001e90 <HAL_GetTick>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d302      	bcc.n	8002d2e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d113      	bne.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	2220      	movs	r2, #32
 8002d34:	431a      	orrs	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2241      	movs	r2, #65	; 0x41
 8002d3e:	2120      	movs	r1, #32
 8002d40:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2242      	movs	r2, #66	; 0x42
 8002d46:	2100      	movs	r1, #0
 8002d48:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2240      	movs	r2, #64	; 0x40
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e00f      	b.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	425a      	negs	r2, r3
 8002d66:	4153      	adcs	r3, r2
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	001a      	movs	r2, r3
 8002d6c:	1dfb      	adds	r3, r7, #7
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d0ce      	beq.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b004      	add	sp, #16
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d8a:	e02b      	b.n	8002de4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f000 f86e 	bl	8002e74 <I2C_IsAcknowledgeFailed>
 8002d98:	1e03      	subs	r3, r0, #0
 8002d9a:	d001      	beq.n	8002da0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e029      	b.n	8002df4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	3301      	adds	r3, #1
 8002da4:	d01e      	beq.n	8002de4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7ff f873 	bl	8001e90 <HAL_GetTick>
 8002daa:	0002      	movs	r2, r0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d113      	bne.n	8002de4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2241      	movs	r2, #65	; 0x41
 8002dcc:	2120      	movs	r1, #32
 8002dce:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2242      	movs	r2, #66	; 0x42
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2240      	movs	r2, #64	; 0x40
 8002ddc:	2100      	movs	r1, #0
 8002dde:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e007      	b.n	8002df4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2202      	movs	r2, #2
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d1cc      	bne.n	8002d8c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b004      	add	sp, #16
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e08:	e028      	b.n	8002e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	0018      	movs	r0, r3
 8002e12:	f000 f82f 	bl	8002e74 <I2C_IsAcknowledgeFailed>
 8002e16:	1e03      	subs	r3, r0, #0
 8002e18:	d001      	beq.n	8002e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e026      	b.n	8002e6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1e:	f7ff f837 	bl	8001e90 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d302      	bcc.n	8002e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d113      	bne.n	8002e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	2220      	movs	r2, #32
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2241      	movs	r2, #65	; 0x41
 8002e44:	2120      	movs	r1, #32
 8002e46:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2242      	movs	r2, #66	; 0x42
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2240      	movs	r2, #64	; 0x40
 8002e54:	2100      	movs	r1, #0
 8002e56:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e007      	b.n	8002e6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2220      	movs	r2, #32
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d1cf      	bne.n	8002e0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b004      	add	sp, #16
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2210      	movs	r2, #16
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b10      	cmp	r3, #16
 8002e8c:	d164      	bne.n	8002f58 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	049b      	lsls	r3, r3, #18
 8002e98:	401a      	ands	r2, r3
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	049b      	lsls	r3, r3, #18
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d02b      	beq.n	8002efa <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	01c9      	lsls	r1, r1, #7
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eb4:	e021      	b.n	8002efa <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	d01e      	beq.n	8002efa <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebc:	f7fe ffe8 	bl	8001e90 <HAL_GetTick>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d302      	bcc.n	8002ed2 <I2C_IsAcknowledgeFailed+0x5e>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d113      	bne.n	8002efa <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2241      	movs	r2, #65	; 0x41
 8002ee2:	2120      	movs	r1, #32
 8002ee4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2242      	movs	r2, #66	; 0x42
 8002eea:	2100      	movs	r1, #0
 8002eec:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2240      	movs	r2, #64	; 0x40
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e02f      	b.n	8002f5a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2220      	movs	r2, #32
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d1d6      	bne.n	8002eb6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2220      	movs	r2, #32
 8002f16:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7ff fece 	bl	8002cbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	490e      	ldr	r1, [pc, #56]	; (8002f64 <I2C_IsAcknowledgeFailed+0xf0>)
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	2204      	movs	r2, #4
 8002f36:	431a      	orrs	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2241      	movs	r2, #65	; 0x41
 8002f40:	2120      	movs	r1, #32
 8002f42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2242      	movs	r2, #66	; 0x42
 8002f48:	2100      	movs	r1, #0
 8002f4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2240      	movs	r2, #64	; 0x40
 8002f50:	2100      	movs	r1, #0
 8002f52:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b004      	add	sp, #16
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	fe00e800 	.word	0xfe00e800

08002f68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	0008      	movs	r0, r1
 8002f72:	0011      	movs	r1, r2
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	240a      	movs	r4, #10
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	1c02      	adds	r2, r0, #0
 8002f7c:	801a      	strh	r2, [r3, #0]
 8002f7e:	2009      	movs	r0, #9
 8002f80:	183b      	adds	r3, r7, r0
 8002f82:	1c0a      	adds	r2, r1, #0
 8002f84:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	6a3a      	ldr	r2, [r7, #32]
 8002f8e:	0d51      	lsrs	r1, r2, #21
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	00d2      	lsls	r2, r2, #3
 8002f94:	400a      	ands	r2, r1
 8002f96:	490e      	ldr	r1, [pc, #56]	; (8002fd0 <I2C_TransferConfig+0x68>)
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	43d2      	mvns	r2, r2
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	0011      	movs	r1, r2
 8002fa0:	193b      	adds	r3, r7, r4
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	059b      	lsls	r3, r3, #22
 8002fa6:	0d9a      	lsrs	r2, r3, #22
 8002fa8:	183b      	adds	r3, r7, r0
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	0418      	lsls	r0, r3, #16
 8002fae:	23ff      	movs	r3, #255	; 0xff
 8002fb0:	041b      	lsls	r3, r3, #16
 8002fb2:	4003      	ands	r3, r0
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b005      	add	sp, #20
 8002fcc:	bd90      	pop	{r4, r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	03ff63ff 	.word	0x03ff63ff

08002fd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2241      	movs	r2, #65	; 0x41
 8002fe2:	5c9b      	ldrb	r3, [r3, r2]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d138      	bne.n	800305c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2240      	movs	r2, #64	; 0x40
 8002fee:	5c9b      	ldrb	r3, [r3, r2]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e032      	b.n	800305e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2241      	movs	r2, #65	; 0x41
 8003004:	2124      	movs	r1, #36	; 0x24
 8003006:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2101      	movs	r1, #1
 8003014:	438a      	bics	r2, r1
 8003016:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4911      	ldr	r1, [pc, #68]	; (8003068 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003024:	400a      	ands	r2, r1
 8003026:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6819      	ldr	r1, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2101      	movs	r1, #1
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2241      	movs	r2, #65	; 0x41
 800304c:	2120      	movs	r1, #32
 800304e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2240      	movs	r2, #64	; 0x40
 8003054:	2100      	movs	r1, #0
 8003056:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	e000      	b.n	800305e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800305c:	2302      	movs	r3, #2
  }
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b002      	add	sp, #8
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	ffffefff 	.word	0xffffefff

0800306c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2241      	movs	r2, #65	; 0x41
 800307a:	5c9b      	ldrb	r3, [r3, r2]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b20      	cmp	r3, #32
 8003080:	d139      	bne.n	80030f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2240      	movs	r2, #64	; 0x40
 8003086:	5c9b      	ldrb	r3, [r3, r2]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800308c:	2302      	movs	r3, #2
 800308e:	e033      	b.n	80030f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2240      	movs	r2, #64	; 0x40
 8003094:	2101      	movs	r1, #1
 8003096:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2241      	movs	r2, #65	; 0x41
 800309c:	2124      	movs	r1, #36	; 0x24
 800309e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2101      	movs	r1, #1
 80030ac:	438a      	bics	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a11      	ldr	r2, [pc, #68]	; (8003100 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80030bc:	4013      	ands	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2101      	movs	r1, #1
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2241      	movs	r2, #65	; 0x41
 80030e6:	2120      	movs	r1, #32
 80030e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2240      	movs	r2, #64	; 0x40
 80030ee:	2100      	movs	r1, #0
 80030f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
  }
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b004      	add	sp, #16
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	fffff0ff 	.word	0xfffff0ff

08003104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003104:	b5b0      	push	{r4, r5, r7, lr}
 8003106:	b08a      	sub	sp, #40	; 0x28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f000 fb6c 	bl	80037f0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003118:	4bc8      	ldr	r3, [pc, #800]	; (800343c <HAL_RCC_OscConfig+0x338>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	220c      	movs	r2, #12
 800311e:	4013      	ands	r3, r2
 8003120:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003122:	4bc6      	ldr	r3, [pc, #792]	; (800343c <HAL_RCC_OscConfig+0x338>)
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	025b      	lsls	r3, r3, #9
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2201      	movs	r2, #1
 8003134:	4013      	ands	r3, r2
 8003136:	d100      	bne.n	800313a <HAL_RCC_OscConfig+0x36>
 8003138:	e07d      	b.n	8003236 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d007      	beq.n	8003150 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d112      	bne.n	800316c <HAL_RCC_OscConfig+0x68>
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	025b      	lsls	r3, r3, #9
 800314c:	429a      	cmp	r2, r3
 800314e:	d10d      	bne.n	800316c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003150:	4bba      	ldr	r3, [pc, #744]	; (800343c <HAL_RCC_OscConfig+0x338>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	029b      	lsls	r3, r3, #10
 8003158:	4013      	ands	r3, r2
 800315a:	d100      	bne.n	800315e <HAL_RCC_OscConfig+0x5a>
 800315c:	e06a      	b.n	8003234 <HAL_RCC_OscConfig+0x130>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d166      	bne.n	8003234 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f000 fb42 	bl	80037f0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	025b      	lsls	r3, r3, #9
 8003174:	429a      	cmp	r2, r3
 8003176:	d107      	bne.n	8003188 <HAL_RCC_OscConfig+0x84>
 8003178:	4bb0      	ldr	r3, [pc, #704]	; (800343c <HAL_RCC_OscConfig+0x338>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4baf      	ldr	r3, [pc, #700]	; (800343c <HAL_RCC_OscConfig+0x338>)
 800317e:	2180      	movs	r1, #128	; 0x80
 8003180:	0249      	lsls	r1, r1, #9
 8003182:	430a      	orrs	r2, r1
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e027      	b.n	80031d8 <HAL_RCC_OscConfig+0xd4>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	23a0      	movs	r3, #160	; 0xa0
 800318e:	02db      	lsls	r3, r3, #11
 8003190:	429a      	cmp	r2, r3
 8003192:	d10e      	bne.n	80031b2 <HAL_RCC_OscConfig+0xae>
 8003194:	4ba9      	ldr	r3, [pc, #676]	; (800343c <HAL_RCC_OscConfig+0x338>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4ba8      	ldr	r3, [pc, #672]	; (800343c <HAL_RCC_OscConfig+0x338>)
 800319a:	2180      	movs	r1, #128	; 0x80
 800319c:	02c9      	lsls	r1, r1, #11
 800319e:	430a      	orrs	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	4ba6      	ldr	r3, [pc, #664]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4ba5      	ldr	r3, [pc, #660]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	0249      	lsls	r1, r1, #9
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e012      	b.n	80031d8 <HAL_RCC_OscConfig+0xd4>
 80031b2:	4ba2      	ldr	r3, [pc, #648]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4ba1      	ldr	r3, [pc, #644]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80031b8:	49a1      	ldr	r1, [pc, #644]	; (8003440 <HAL_RCC_OscConfig+0x33c>)
 80031ba:	400a      	ands	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	4b9f      	ldr	r3, [pc, #636]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	025b      	lsls	r3, r3, #9
 80031c6:	4013      	ands	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4b9b      	ldr	r3, [pc, #620]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b9a      	ldr	r3, [pc, #616]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80031d2:	499c      	ldr	r1, [pc, #624]	; (8003444 <HAL_RCC_OscConfig+0x340>)
 80031d4:	400a      	ands	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d014      	beq.n	800320a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fe56 	bl	8001e90 <HAL_GetTick>
 80031e4:	0003      	movs	r3, r0
 80031e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ea:	f7fe fe51 	bl	8001e90 <HAL_GetTick>
 80031ee:	0002      	movs	r2, r0
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b64      	cmp	r3, #100	; 0x64
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e2f9      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031fc:	4b8f      	ldr	r3, [pc, #572]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	029b      	lsls	r3, r3, #10
 8003204:	4013      	ands	r3, r2
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0xe6>
 8003208:	e015      	b.n	8003236 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7fe fe41 	bl	8001e90 <HAL_GetTick>
 800320e:	0003      	movs	r3, r0
 8003210:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe fe3c 	bl	8001e90 <HAL_GetTick>
 8003218:	0002      	movs	r2, r0
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e2e4      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003226:	4b85      	ldr	r3, [pc, #532]	; (800343c <HAL_RCC_OscConfig+0x338>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	029b      	lsls	r3, r3, #10
 800322e:	4013      	ands	r3, r2
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x110>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2202      	movs	r2, #2
 800323c:	4013      	ands	r3, r2
 800323e:	d100      	bne.n	8003242 <HAL_RCC_OscConfig+0x13e>
 8003240:	e099      	b.n	8003376 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	2220      	movs	r2, #32
 800324c:	4013      	ands	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003250:	4b7a      	ldr	r3, [pc, #488]	; (800343c <HAL_RCC_OscConfig+0x338>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b79      	ldr	r3, [pc, #484]	; (800343c <HAL_RCC_OscConfig+0x338>)
 8003256:	2120      	movs	r1, #32
 8003258:	430a      	orrs	r2, r1
 800325a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	2220      	movs	r2, #32
 8003260:	4393      	bics	r3, r2
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d005      	beq.n	8003276 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b0c      	cmp	r3, #12
 800326e:	d13e      	bne.n	80032ee <HAL_RCC_OscConfig+0x1ea>
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d13b      	bne.n	80032ee <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003276:	4b71      	ldr	r3, [pc, #452]	; (800343c <HAL_RCC_OscConfig+0x338>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2204      	movs	r2, #4
 800327c:	4013      	ands	r3, r2
 800327e:	d004      	beq.n	800328a <HAL_RCC_OscConfig+0x186>
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e2b2      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328a:	4b6c      	ldr	r3, [pc, #432]	; (800343c <HAL_RCC_OscConfig+0x338>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4a6e      	ldr	r2, [pc, #440]	; (8003448 <HAL_RCC_OscConfig+0x344>)
 8003290:	4013      	ands	r3, r2
 8003292:	0019      	movs	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	021a      	lsls	r2, r3, #8
 800329a:	4b68      	ldr	r3, [pc, #416]	; (800343c <HAL_RCC_OscConfig+0x338>)
 800329c:	430a      	orrs	r2, r1
 800329e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80032a0:	4b66      	ldr	r3, [pc, #408]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2209      	movs	r2, #9
 80032a6:	4393      	bics	r3, r2
 80032a8:	0019      	movs	r1, r3
 80032aa:	4b64      	ldr	r3, [pc, #400]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80032ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ae:	430a      	orrs	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032b2:	f000 fbeb 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 80032b6:	0001      	movs	r1, r0
 80032b8:	4b60      	ldr	r3, [pc, #384]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	220f      	movs	r2, #15
 80032c0:	4013      	ands	r3, r2
 80032c2:	4a62      	ldr	r2, [pc, #392]	; (800344c <HAL_RCC_OscConfig+0x348>)
 80032c4:	5cd3      	ldrb	r3, [r2, r3]
 80032c6:	000a      	movs	r2, r1
 80032c8:	40da      	lsrs	r2, r3
 80032ca:	4b61      	ldr	r3, [pc, #388]	; (8003450 <HAL_RCC_OscConfig+0x34c>)
 80032cc:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80032ce:	4b61      	ldr	r3, [pc, #388]	; (8003454 <HAL_RCC_OscConfig+0x350>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2513      	movs	r5, #19
 80032d4:	197c      	adds	r4, r7, r5
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7fe fd94 	bl	8001e04 <HAL_InitTick>
 80032dc:	0003      	movs	r3, r0
 80032de:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80032e0:	197b      	adds	r3, r7, r5
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d046      	beq.n	8003376 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80032e8:	197b      	adds	r3, r7, r5
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	e280      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d027      	beq.n	8003344 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80032f4:	4b51      	ldr	r3, [pc, #324]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2209      	movs	r2, #9
 80032fa:	4393      	bics	r3, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	4b4f      	ldr	r3, [pc, #316]	; (800343c <HAL_RCC_OscConfig+0x338>)
 8003300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003302:	430a      	orrs	r2, r1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7fe fdc3 	bl	8001e90 <HAL_GetTick>
 800330a:	0003      	movs	r3, r0
 800330c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003310:	f7fe fdbe 	bl	8001e90 <HAL_GetTick>
 8003314:	0002      	movs	r2, r0
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e266      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003322:	4b46      	ldr	r3, [pc, #280]	; (800343c <HAL_RCC_OscConfig+0x338>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2204      	movs	r2, #4
 8003328:	4013      	ands	r3, r2
 800332a:	d0f1      	beq.n	8003310 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332c:	4b43      	ldr	r3, [pc, #268]	; (800343c <HAL_RCC_OscConfig+0x338>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4a45      	ldr	r2, [pc, #276]	; (8003448 <HAL_RCC_OscConfig+0x344>)
 8003332:	4013      	ands	r3, r2
 8003334:	0019      	movs	r1, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	021a      	lsls	r2, r3, #8
 800333c:	4b3f      	ldr	r3, [pc, #252]	; (800343c <HAL_RCC_OscConfig+0x338>)
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	e018      	b.n	8003376 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003344:	4b3d      	ldr	r3, [pc, #244]	; (800343c <HAL_RCC_OscConfig+0x338>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b3c      	ldr	r3, [pc, #240]	; (800343c <HAL_RCC_OscConfig+0x338>)
 800334a:	2101      	movs	r1, #1
 800334c:	438a      	bics	r2, r1
 800334e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7fe fd9e 	bl	8001e90 <HAL_GetTick>
 8003354:	0003      	movs	r3, r0
 8003356:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800335a:	f7fe fd99 	bl	8001e90 <HAL_GetTick>
 800335e:	0002      	movs	r2, r0
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e241      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800336c:	4b33      	ldr	r3, [pc, #204]	; (800343c <HAL_RCC_OscConfig+0x338>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2204      	movs	r2, #4
 8003372:	4013      	ands	r3, r2
 8003374:	d1f1      	bne.n	800335a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2210      	movs	r2, #16
 800337c:	4013      	ands	r3, r2
 800337e:	d100      	bne.n	8003382 <HAL_RCC_OscConfig+0x27e>
 8003380:	e0a1      	b.n	80034c6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d140      	bne.n	800340a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003388:	4b2c      	ldr	r3, [pc, #176]	; (800343c <HAL_RCC_OscConfig+0x338>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4013      	ands	r3, r2
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_OscConfig+0x29c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e227      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a0:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4a2c      	ldr	r2, [pc, #176]	; (8003458 <HAL_RCC_OscConfig+0x354>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	0019      	movs	r1, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1a      	ldr	r2, [r3, #32]
 80033ae:	4b23      	ldr	r3, [pc, #140]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033b4:	4b21      	ldr	r3, [pc, #132]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	0a19      	lsrs	r1, r3, #8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	061a      	lsls	r2, r3, #24
 80033c2:	4b1e      	ldr	r3, [pc, #120]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80033c4:	430a      	orrs	r2, r1
 80033c6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	0b5b      	lsrs	r3, r3, #13
 80033ce:	3301      	adds	r3, #1
 80033d0:	2280      	movs	r2, #128	; 0x80
 80033d2:	0212      	lsls	r2, r2, #8
 80033d4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80033d6:	4b19      	ldr	r3, [pc, #100]	; (800343c <HAL_RCC_OscConfig+0x338>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	210f      	movs	r1, #15
 80033de:	400b      	ands	r3, r1
 80033e0:	491a      	ldr	r1, [pc, #104]	; (800344c <HAL_RCC_OscConfig+0x348>)
 80033e2:	5ccb      	ldrb	r3, [r1, r3]
 80033e4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033e6:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <HAL_RCC_OscConfig+0x34c>)
 80033e8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80033ea:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <HAL_RCC_OscConfig+0x350>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2513      	movs	r5, #19
 80033f0:	197c      	adds	r4, r7, r5
 80033f2:	0018      	movs	r0, r3
 80033f4:	f7fe fd06 	bl	8001e04 <HAL_InitTick>
 80033f8:	0003      	movs	r3, r0
 80033fa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80033fc:	197b      	adds	r3, r7, r5
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d060      	beq.n	80034c6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8003404:	197b      	adds	r3, r7, r5
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	e1f2      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d03f      	beq.n	8003492 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_RCC_OscConfig+0x338>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4b09      	ldr	r3, [pc, #36]	; (800343c <HAL_RCC_OscConfig+0x338>)
 8003418:	2180      	movs	r1, #128	; 0x80
 800341a:	0049      	lsls	r1, r1, #1
 800341c:	430a      	orrs	r2, r1
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fe fd36 	bl	8001e90 <HAL_GetTick>
 8003424:	0003      	movs	r3, r0
 8003426:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003428:	e018      	b.n	800345c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800342a:	f7fe fd31 	bl	8001e90 <HAL_GetTick>
 800342e:	0002      	movs	r2, r0
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d911      	bls.n	800345c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e1d9      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
 800343c:	40021000 	.word	0x40021000
 8003440:	fffeffff 	.word	0xfffeffff
 8003444:	fffbffff 	.word	0xfffbffff
 8003448:	ffffe0ff 	.word	0xffffe0ff
 800344c:	0800644c 	.word	0x0800644c
 8003450:	20000000 	.word	0x20000000
 8003454:	20000004 	.word	0x20000004
 8003458:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800345c:	4bc9      	ldr	r3, [pc, #804]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4013      	ands	r3, r2
 8003466:	d0e0      	beq.n	800342a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003468:	4bc6      	ldr	r3, [pc, #792]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4ac6      	ldr	r2, [pc, #792]	; (8003788 <HAL_RCC_OscConfig+0x684>)
 800346e:	4013      	ands	r3, r2
 8003470:	0019      	movs	r1, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1a      	ldr	r2, [r3, #32]
 8003476:	4bc3      	ldr	r3, [pc, #780]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800347c:	4bc1      	ldr	r3, [pc, #772]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	0a19      	lsrs	r1, r3, #8
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	061a      	lsls	r2, r3, #24
 800348a:	4bbe      	ldr	r3, [pc, #760]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	e019      	b.n	80034c6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003492:	4bbc      	ldr	r3, [pc, #752]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4bbb      	ldr	r3, [pc, #748]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003498:	49bc      	ldr	r1, [pc, #752]	; (800378c <HAL_RCC_OscConfig+0x688>)
 800349a:	400a      	ands	r2, r1
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fe fcf7 	bl	8001e90 <HAL_GetTick>
 80034a2:	0003      	movs	r3, r0
 80034a4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034a8:	f7fe fcf2 	bl	8001e90 <HAL_GetTick>
 80034ac:	0002      	movs	r2, r0
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e19a      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80034ba:	4bb2      	ldr	r3, [pc, #712]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4013      	ands	r3, r2
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2208      	movs	r2, #8
 80034cc:	4013      	ands	r3, r2
 80034ce:	d036      	beq.n	800353e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d019      	beq.n	800350c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d8:	4baa      	ldr	r3, [pc, #680]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 80034da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034dc:	4ba9      	ldr	r3, [pc, #676]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 80034de:	2101      	movs	r1, #1
 80034e0:	430a      	orrs	r2, r1
 80034e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7fe fcd4 	bl	8001e90 <HAL_GetTick>
 80034e8:	0003      	movs	r3, r0
 80034ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ee:	f7fe fccf 	bl	8001e90 <HAL_GetTick>
 80034f2:	0002      	movs	r2, r0
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e177      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003500:	4ba0      	ldr	r3, [pc, #640]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	2202      	movs	r2, #2
 8003506:	4013      	ands	r3, r2
 8003508:	d0f1      	beq.n	80034ee <HAL_RCC_OscConfig+0x3ea>
 800350a:	e018      	b.n	800353e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800350c:	4b9d      	ldr	r3, [pc, #628]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 800350e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003510:	4b9c      	ldr	r3, [pc, #624]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003512:	2101      	movs	r1, #1
 8003514:	438a      	bics	r2, r1
 8003516:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003518:	f7fe fcba 	bl	8001e90 <HAL_GetTick>
 800351c:	0003      	movs	r3, r0
 800351e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003522:	f7fe fcb5 	bl	8001e90 <HAL_GetTick>
 8003526:	0002      	movs	r2, r0
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e15d      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003534:	4b93      	ldr	r3, [pc, #588]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003538:	2202      	movs	r2, #2
 800353a:	4013      	ands	r3, r2
 800353c:	d1f1      	bne.n	8003522 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2204      	movs	r2, #4
 8003544:	4013      	ands	r3, r2
 8003546:	d100      	bne.n	800354a <HAL_RCC_OscConfig+0x446>
 8003548:	e0ae      	b.n	80036a8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354a:	2023      	movs	r0, #35	; 0x23
 800354c:	183b      	adds	r3, r7, r0
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003552:	4b8c      	ldr	r3, [pc, #560]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	055b      	lsls	r3, r3, #21
 800355a:	4013      	ands	r3, r2
 800355c:	d109      	bne.n	8003572 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355e:	4b89      	ldr	r3, [pc, #548]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003562:	4b88      	ldr	r3, [pc, #544]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003564:	2180      	movs	r1, #128	; 0x80
 8003566:	0549      	lsls	r1, r1, #21
 8003568:	430a      	orrs	r2, r1
 800356a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800356c:	183b      	adds	r3, r7, r0
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003572:	4b87      	ldr	r3, [pc, #540]	; (8003790 <HAL_RCC_OscConfig+0x68c>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4013      	ands	r3, r2
 800357c:	d11a      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357e:	4b84      	ldr	r3, [pc, #528]	; (8003790 <HAL_RCC_OscConfig+0x68c>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4b83      	ldr	r3, [pc, #524]	; (8003790 <HAL_RCC_OscConfig+0x68c>)
 8003584:	2180      	movs	r1, #128	; 0x80
 8003586:	0049      	lsls	r1, r1, #1
 8003588:	430a      	orrs	r2, r1
 800358a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358c:	f7fe fc80 	bl	8001e90 <HAL_GetTick>
 8003590:	0003      	movs	r3, r0
 8003592:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003596:	f7fe fc7b 	bl	8001e90 <HAL_GetTick>
 800359a:	0002      	movs	r2, r0
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b64      	cmp	r3, #100	; 0x64
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e123      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a8:	4b79      	ldr	r3, [pc, #484]	; (8003790 <HAL_RCC_OscConfig+0x68c>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4013      	ands	r3, r2
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	429a      	cmp	r2, r3
 80035be:	d107      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4cc>
 80035c0:	4b70      	ldr	r3, [pc, #448]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 80035c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035c4:	4b6f      	ldr	r3, [pc, #444]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 80035c6:	2180      	movs	r1, #128	; 0x80
 80035c8:	0049      	lsls	r1, r1, #1
 80035ca:	430a      	orrs	r2, r1
 80035cc:	651a      	str	r2, [r3, #80]	; 0x50
 80035ce:	e031      	b.n	8003634 <HAL_RCC_OscConfig+0x530>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10c      	bne.n	80035f2 <HAL_RCC_OscConfig+0x4ee>
 80035d8:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 80035da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035dc:	4b69      	ldr	r3, [pc, #420]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 80035de:	496b      	ldr	r1, [pc, #428]	; (800378c <HAL_RCC_OscConfig+0x688>)
 80035e0:	400a      	ands	r2, r1
 80035e2:	651a      	str	r2, [r3, #80]	; 0x50
 80035e4:	4b67      	ldr	r3, [pc, #412]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 80035e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035e8:	4b66      	ldr	r3, [pc, #408]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 80035ea:	496a      	ldr	r1, [pc, #424]	; (8003794 <HAL_RCC_OscConfig+0x690>)
 80035ec:	400a      	ands	r2, r1
 80035ee:	651a      	str	r2, [r3, #80]	; 0x50
 80035f0:	e020      	b.n	8003634 <HAL_RCC_OscConfig+0x530>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	23a0      	movs	r3, #160	; 0xa0
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d10e      	bne.n	800361c <HAL_RCC_OscConfig+0x518>
 80035fe:	4b61      	ldr	r3, [pc, #388]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003602:	4b60      	ldr	r3, [pc, #384]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003604:	2180      	movs	r1, #128	; 0x80
 8003606:	00c9      	lsls	r1, r1, #3
 8003608:	430a      	orrs	r2, r1
 800360a:	651a      	str	r2, [r3, #80]	; 0x50
 800360c:	4b5d      	ldr	r3, [pc, #372]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 800360e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003610:	4b5c      	ldr	r3, [pc, #368]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003612:	2180      	movs	r1, #128	; 0x80
 8003614:	0049      	lsls	r1, r1, #1
 8003616:	430a      	orrs	r2, r1
 8003618:	651a      	str	r2, [r3, #80]	; 0x50
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0x530>
 800361c:	4b59      	ldr	r3, [pc, #356]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 800361e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003620:	4b58      	ldr	r3, [pc, #352]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003622:	495a      	ldr	r1, [pc, #360]	; (800378c <HAL_RCC_OscConfig+0x688>)
 8003624:	400a      	ands	r2, r1
 8003626:	651a      	str	r2, [r3, #80]	; 0x50
 8003628:	4b56      	ldr	r3, [pc, #344]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 800362a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800362c:	4b55      	ldr	r3, [pc, #340]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 800362e:	4959      	ldr	r1, [pc, #356]	; (8003794 <HAL_RCC_OscConfig+0x690>)
 8003630:	400a      	ands	r2, r1
 8003632:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d015      	beq.n	8003668 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363c:	f7fe fc28 	bl	8001e90 <HAL_GetTick>
 8003640:	0003      	movs	r3, r0
 8003642:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003644:	e009      	b.n	800365a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7fe fc23 	bl	8001e90 <HAL_GetTick>
 800364a:	0002      	movs	r2, r0
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	4a51      	ldr	r2, [pc, #324]	; (8003798 <HAL_RCC_OscConfig+0x694>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e0ca      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800365a:	4b4a      	ldr	r3, [pc, #296]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 800365c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4013      	ands	r3, r2
 8003664:	d0ef      	beq.n	8003646 <HAL_RCC_OscConfig+0x542>
 8003666:	e014      	b.n	8003692 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003668:	f7fe fc12 	bl	8001e90 <HAL_GetTick>
 800366c:	0003      	movs	r3, r0
 800366e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003670:	e009      	b.n	8003686 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fe fc0d 	bl	8001e90 <HAL_GetTick>
 8003676:	0002      	movs	r2, r0
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	4a46      	ldr	r2, [pc, #280]	; (8003798 <HAL_RCC_OscConfig+0x694>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e0b4      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003686:	4b3f      	ldr	r3, [pc, #252]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4013      	ands	r3, r2
 8003690:	d1ef      	bne.n	8003672 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003692:	2323      	movs	r3, #35	; 0x23
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d105      	bne.n	80036a8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369c:	4b39      	ldr	r3, [pc, #228]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 800369e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a0:	4b38      	ldr	r3, [pc, #224]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 80036a2:	493e      	ldr	r1, [pc, #248]	; (800379c <HAL_RCC_OscConfig+0x698>)
 80036a4:	400a      	ands	r2, r1
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d100      	bne.n	80036b2 <HAL_RCC_OscConfig+0x5ae>
 80036b0:	e09d      	b.n	80037ee <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b0c      	cmp	r3, #12
 80036b6:	d100      	bne.n	80036ba <HAL_RCC_OscConfig+0x5b6>
 80036b8:	e076      	b.n	80037a8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d145      	bne.n	800374e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c2:	4b30      	ldr	r3, [pc, #192]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b2f      	ldr	r3, [pc, #188]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 80036c8:	4935      	ldr	r1, [pc, #212]	; (80037a0 <HAL_RCC_OscConfig+0x69c>)
 80036ca:	400a      	ands	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7fe fbdf 	bl	8001e90 <HAL_GetTick>
 80036d2:	0003      	movs	r3, r0
 80036d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fe fbda 	bl	8001e90 <HAL_GetTick>
 80036dc:	0002      	movs	r2, r0
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e082      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036ea:	4b26      	ldr	r3, [pc, #152]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	049b      	lsls	r3, r3, #18
 80036f2:	4013      	ands	r3, r2
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f6:	4b23      	ldr	r3, [pc, #140]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	4a2a      	ldr	r2, [pc, #168]	; (80037a4 <HAL_RCC_OscConfig+0x6a0>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	0019      	movs	r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	431a      	orrs	r2, r3
 8003710:	4b1c      	ldr	r3, [pc, #112]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003712:	430a      	orrs	r2, r1
 8003714:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003716:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 800371c:	2180      	movs	r1, #128	; 0x80
 800371e:	0449      	lsls	r1, r1, #17
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fe fbb4 	bl	8001e90 <HAL_GetTick>
 8003728:	0003      	movs	r3, r0
 800372a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800372e:	f7fe fbaf 	bl	8001e90 <HAL_GetTick>
 8003732:	0002      	movs	r2, r0
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e057      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003740:	4b10      	ldr	r3, [pc, #64]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	049b      	lsls	r3, r3, #18
 8003748:	4013      	ands	r3, r2
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x62a>
 800374c:	e04f      	b.n	80037ee <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374e:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003754:	4912      	ldr	r1, [pc, #72]	; (80037a0 <HAL_RCC_OscConfig+0x69c>)
 8003756:	400a      	ands	r2, r1
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fe fb99 	bl	8001e90 <HAL_GetTick>
 800375e:	0003      	movs	r3, r0
 8003760:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003764:	f7fe fb94 	bl	8001e90 <HAL_GetTick>
 8003768:	0002      	movs	r2, r0
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e03c      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003776:	4b03      	ldr	r3, [pc, #12]	; (8003784 <HAL_RCC_OscConfig+0x680>)
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	049b      	lsls	r3, r3, #18
 800377e:	4013      	ands	r3, r2
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x660>
 8003782:	e034      	b.n	80037ee <HAL_RCC_OscConfig+0x6ea>
 8003784:	40021000 	.word	0x40021000
 8003788:	ffff1fff 	.word	0xffff1fff
 800378c:	fffffeff 	.word	0xfffffeff
 8003790:	40007000 	.word	0x40007000
 8003794:	fffffbff 	.word	0xfffffbff
 8003798:	00001388 	.word	0x00001388
 800379c:	efffffff 	.word	0xefffffff
 80037a0:	feffffff 	.word	0xfeffffff
 80037a4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e01d      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037b4:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <HAL_RCC_OscConfig+0x6f4>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	025b      	lsls	r3, r3, #9
 80037c0:	401a      	ands	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d10f      	bne.n	80037ea <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	23f0      	movs	r3, #240	; 0xf0
 80037ce:	039b      	lsls	r3, r3, #14
 80037d0:	401a      	ands	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	23c0      	movs	r3, #192	; 0xc0
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	401a      	ands	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d001      	beq.n	80037ee <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	0018      	movs	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b00a      	add	sp, #40	; 0x28
 80037f6:	bdb0      	pop	{r4, r5, r7, pc}
 80037f8:	40021000 	.word	0x40021000

080037fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037fc:	b5b0      	push	{r4, r5, r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e128      	b.n	8003a62 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003810:	4b96      	ldr	r3, [pc, #600]	; (8003a6c <HAL_RCC_ClockConfig+0x270>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2201      	movs	r2, #1
 8003816:	4013      	ands	r3, r2
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d91e      	bls.n	800385c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b93      	ldr	r3, [pc, #588]	; (8003a6c <HAL_RCC_ClockConfig+0x270>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2201      	movs	r2, #1
 8003824:	4393      	bics	r3, r2
 8003826:	0019      	movs	r1, r3
 8003828:	4b90      	ldr	r3, [pc, #576]	; (8003a6c <HAL_RCC_ClockConfig+0x270>)
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003830:	f7fe fb2e 	bl	8001e90 <HAL_GetTick>
 8003834:	0003      	movs	r3, r0
 8003836:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003838:	e009      	b.n	800384e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383a:	f7fe fb29 	bl	8001e90 <HAL_GetTick>
 800383e:	0002      	movs	r2, r0
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	4a8a      	ldr	r2, [pc, #552]	; (8003a70 <HAL_RCC_ClockConfig+0x274>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e109      	b.n	8003a62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b87      	ldr	r3, [pc, #540]	; (8003a6c <HAL_RCC_ClockConfig+0x270>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2201      	movs	r2, #1
 8003854:	4013      	ands	r3, r2
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d1ee      	bne.n	800383a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2202      	movs	r2, #2
 8003862:	4013      	ands	r3, r2
 8003864:	d009      	beq.n	800387a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003866:	4b83      	ldr	r3, [pc, #524]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	22f0      	movs	r2, #240	; 0xf0
 800386c:	4393      	bics	r3, r2
 800386e:	0019      	movs	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	4b7f      	ldr	r3, [pc, #508]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 8003876:	430a      	orrs	r2, r1
 8003878:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2201      	movs	r2, #1
 8003880:	4013      	ands	r3, r2
 8003882:	d100      	bne.n	8003886 <HAL_RCC_ClockConfig+0x8a>
 8003884:	e089      	b.n	800399a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800388e:	4b79      	ldr	r3, [pc, #484]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	029b      	lsls	r3, r3, #10
 8003896:	4013      	ands	r3, r2
 8003898:	d120      	bne.n	80038dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0e1      	b.n	8003a62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038a6:	4b73      	ldr	r3, [pc, #460]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	049b      	lsls	r3, r3, #18
 80038ae:	4013      	ands	r3, r2
 80038b0:	d114      	bne.n	80038dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0d5      	b.n	8003a62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d106      	bne.n	80038cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038be:	4b6d      	ldr	r3, [pc, #436]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2204      	movs	r2, #4
 80038c4:	4013      	ands	r3, r2
 80038c6:	d109      	bne.n	80038dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0ca      	b.n	8003a62 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80038cc:	4b69      	ldr	r3, [pc, #420]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4013      	ands	r3, r2
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0c2      	b.n	8003a62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038dc:	4b65      	ldr	r3, [pc, #404]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2203      	movs	r2, #3
 80038e2:	4393      	bics	r3, r2
 80038e4:	0019      	movs	r1, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	4b62      	ldr	r3, [pc, #392]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 80038ec:	430a      	orrs	r2, r1
 80038ee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f0:	f7fe face 	bl	8001e90 <HAL_GetTick>
 80038f4:	0003      	movs	r3, r0
 80038f6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d111      	bne.n	8003924 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003900:	e009      	b.n	8003916 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003902:	f7fe fac5 	bl	8001e90 <HAL_GetTick>
 8003906:	0002      	movs	r2, r0
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	4a58      	ldr	r2, [pc, #352]	; (8003a70 <HAL_RCC_ClockConfig+0x274>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e0a5      	b.n	8003a62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003916:	4b57      	ldr	r3, [pc, #348]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	220c      	movs	r2, #12
 800391c:	4013      	ands	r3, r2
 800391e:	2b08      	cmp	r3, #8
 8003920:	d1ef      	bne.n	8003902 <HAL_RCC_ClockConfig+0x106>
 8003922:	e03a      	b.n	800399a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b03      	cmp	r3, #3
 800392a:	d111      	bne.n	8003950 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800392c:	e009      	b.n	8003942 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392e:	f7fe faaf 	bl	8001e90 <HAL_GetTick>
 8003932:	0002      	movs	r2, r0
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	4a4d      	ldr	r2, [pc, #308]	; (8003a70 <HAL_RCC_ClockConfig+0x274>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e08f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003942:	4b4c      	ldr	r3, [pc, #304]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	220c      	movs	r2, #12
 8003948:	4013      	ands	r3, r2
 800394a:	2b0c      	cmp	r3, #12
 800394c:	d1ef      	bne.n	800392e <HAL_RCC_ClockConfig+0x132>
 800394e:	e024      	b.n	800399a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d11b      	bne.n	8003990 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003958:	e009      	b.n	800396e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395a:	f7fe fa99 	bl	8001e90 <HAL_GetTick>
 800395e:	0002      	movs	r2, r0
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	4a42      	ldr	r2, [pc, #264]	; (8003a70 <HAL_RCC_ClockConfig+0x274>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e079      	b.n	8003a62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800396e:	4b41      	ldr	r3, [pc, #260]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	220c      	movs	r2, #12
 8003974:	4013      	ands	r3, r2
 8003976:	2b04      	cmp	r3, #4
 8003978:	d1ef      	bne.n	800395a <HAL_RCC_ClockConfig+0x15e>
 800397a:	e00e      	b.n	800399a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397c:	f7fe fa88 	bl	8001e90 <HAL_GetTick>
 8003980:	0002      	movs	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	4a3a      	ldr	r2, [pc, #232]	; (8003a70 <HAL_RCC_ClockConfig+0x274>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e068      	b.n	8003a62 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003990:	4b38      	ldr	r3, [pc, #224]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	220c      	movs	r2, #12
 8003996:	4013      	ands	r3, r2
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800399a:	4b34      	ldr	r3, [pc, #208]	; (8003a6c <HAL_RCC_ClockConfig+0x270>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2201      	movs	r2, #1
 80039a0:	4013      	ands	r3, r2
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d21e      	bcs.n	80039e6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a8:	4b30      	ldr	r3, [pc, #192]	; (8003a6c <HAL_RCC_ClockConfig+0x270>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2201      	movs	r2, #1
 80039ae:	4393      	bics	r3, r2
 80039b0:	0019      	movs	r1, r3
 80039b2:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <HAL_RCC_ClockConfig+0x270>)
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039ba:	f7fe fa69 	bl	8001e90 <HAL_GetTick>
 80039be:	0003      	movs	r3, r0
 80039c0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	e009      	b.n	80039d8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c4:	f7fe fa64 	bl	8001e90 <HAL_GetTick>
 80039c8:	0002      	movs	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	4a28      	ldr	r2, [pc, #160]	; (8003a70 <HAL_RCC_ClockConfig+0x274>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e044      	b.n	8003a62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d8:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <HAL_RCC_ClockConfig+0x270>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2201      	movs	r2, #1
 80039de:	4013      	ands	r3, r2
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d1ee      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2204      	movs	r2, #4
 80039ec:	4013      	ands	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f0:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4a20      	ldr	r2, [pc, #128]	; (8003a78 <HAL_RCC_ClockConfig+0x27c>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 8003a00:	430a      	orrs	r2, r1
 8003a02:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a0e:	4b19      	ldr	r3, [pc, #100]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	4a1a      	ldr	r2, [pc, #104]	; (8003a7c <HAL_RCC_ClockConfig+0x280>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	0019      	movs	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	00da      	lsls	r2, r3, #3
 8003a1e:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 8003a20:	430a      	orrs	r2, r1
 8003a22:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a24:	f000 f832 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 8003a28:	0001      	movs	r1, r0
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_RCC_ClockConfig+0x278>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	220f      	movs	r2, #15
 8003a32:	4013      	ands	r3, r2
 8003a34:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <HAL_RCC_ClockConfig+0x284>)
 8003a36:	5cd3      	ldrb	r3, [r2, r3]
 8003a38:	000a      	movs	r2, r1
 8003a3a:	40da      	lsrs	r2, r3
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <HAL_RCC_ClockConfig+0x288>)
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <HAL_RCC_ClockConfig+0x28c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	250b      	movs	r5, #11
 8003a46:	197c      	adds	r4, r7, r5
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f7fe f9db 	bl	8001e04 <HAL_InitTick>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003a52:	197b      	adds	r3, r7, r5
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003a5a:	197b      	adds	r3, r7, r5
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	0018      	movs	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b004      	add	sp, #16
 8003a68:	bdb0      	pop	{r4, r5, r7, pc}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	40022000 	.word	0x40022000
 8003a70:	00001388 	.word	0x00001388
 8003a74:	40021000 	.word	0x40021000
 8003a78:	fffff8ff 	.word	0xfffff8ff
 8003a7c:	ffffc7ff 	.word	0xffffc7ff
 8003a80:	0800644c 	.word	0x0800644c
 8003a84:	20000000 	.word	0x20000000
 8003a88:	20000004 	.word	0x20000004

08003a8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a8c:	b5b0      	push	{r4, r5, r7, lr}
 8003a8e:	b08e      	sub	sp, #56	; 0x38
 8003a90:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003a92:	4b4c      	ldr	r3, [pc, #304]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a9a:	230c      	movs	r3, #12
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b0c      	cmp	r3, #12
 8003aa0:	d014      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0x40>
 8003aa2:	d900      	bls.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x1a>
 8003aa4:	e07b      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x112>
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d002      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x24>
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d00b      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aae:	e076      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ab0:	4b44      	ldr	r3, [pc, #272]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d002      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003aba:	4b43      	ldr	r3, [pc, #268]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003abc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003abe:	e07c      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003ac0:	4b42      	ldr	r3, [pc, #264]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x140>)
 8003ac2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ac4:	e079      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ac6:	4b42      	ldr	r3, [pc, #264]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x144>)
 8003ac8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003aca:	e076      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ace:	0c9a      	lsrs	r2, r3, #18
 8003ad0:	230f      	movs	r3, #15
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	4b3f      	ldr	r3, [pc, #252]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x148>)
 8003ad6:	5c9b      	ldrb	r3, [r3, r2]
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	0d9a      	lsrs	r2, r3, #22
 8003ade:	2303      	movs	r3, #3
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ae6:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	025b      	lsls	r3, r3, #9
 8003aee:	4013      	ands	r3, r2
 8003af0:	d01a      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	4a35      	ldr	r2, [pc, #212]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x144>)
 8003afc:	2300      	movs	r3, #0
 8003afe:	69b8      	ldr	r0, [r7, #24]
 8003b00:	69f9      	ldr	r1, [r7, #28]
 8003b02:	f7fc fca1 	bl	8000448 <__aeabi_lmul>
 8003b06:	0002      	movs	r2, r0
 8003b08:	000b      	movs	r3, r1
 8003b0a:	0010      	movs	r0, r2
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f7fc fc75 	bl	8000408 <__aeabi_uldivmod>
 8003b1e:	0002      	movs	r2, r0
 8003b20:	000b      	movs	r3, r1
 8003b22:	0013      	movs	r3, r2
 8003b24:	637b      	str	r3, [r7, #52]	; 0x34
 8003b26:	e037      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b28:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d01a      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	68b8      	ldr	r0, [r7, #8]
 8003b40:	68f9      	ldr	r1, [r7, #12]
 8003b42:	f7fc fc81 	bl	8000448 <__aeabi_lmul>
 8003b46:	0002      	movs	r2, r0
 8003b48:	000b      	movs	r3, r1
 8003b4a:	0010      	movs	r0, r2
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f7fc fc55 	bl	8000408 <__aeabi_uldivmod>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	000b      	movs	r3, r1
 8003b62:	0013      	movs	r3, r2
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
 8003b66:	e017      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	0019      	movs	r1, r3
 8003b70:	4a16      	ldr	r2, [pc, #88]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x140>)
 8003b72:	2300      	movs	r3, #0
 8003b74:	f7fc fc68 	bl	8000448 <__aeabi_lmul>
 8003b78:	0002      	movs	r2, r0
 8003b7a:	000b      	movs	r3, r1
 8003b7c:	0010      	movs	r0, r2
 8003b7e:	0019      	movs	r1, r3
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	001c      	movs	r4, r3
 8003b84:	2300      	movs	r3, #0
 8003b86:	001d      	movs	r5, r3
 8003b88:	0022      	movs	r2, r4
 8003b8a:	002b      	movs	r3, r5
 8003b8c:	f7fc fc3c 	bl	8000408 <__aeabi_uldivmod>
 8003b90:	0002      	movs	r2, r0
 8003b92:	000b      	movs	r3, r1
 8003b94:	0013      	movs	r3, r2
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b9c:	e00d      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	0b5b      	lsrs	r3, r3, #13
 8003ba4:	2207      	movs	r2, #7
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	3301      	adds	r3, #1
 8003bae:	2280      	movs	r2, #128	; 0x80
 8003bb0:	0212      	lsls	r2, r2, #8
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	0013      	movs	r3, r2
 8003bb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003bb8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b00e      	add	sp, #56	; 0x38
 8003bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	003d0900 	.word	0x003d0900
 8003bcc:	00f42400 	.word	0x00f42400
 8003bd0:	007a1200 	.word	0x007a1200
 8003bd4:	08006464 	.word	0x08006464

08003bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bdc:	4b02      	ldr	r3, [pc, #8]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	20000000 	.word	0x20000000

08003bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bf0:	f7ff fff2 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003bf4:	0001      	movs	r1, r0
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	4013      	ands	r3, r2
 8003c00:	4a04      	ldr	r2, [pc, #16]	; (8003c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c02:	5cd3      	ldrb	r3, [r2, r3]
 8003c04:	40d9      	lsrs	r1, r3
 8003c06:	000b      	movs	r3, r1
}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	40021000 	.word	0x40021000
 8003c14:	0800645c 	.word	0x0800645c

08003c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c1c:	f7ff ffdc 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003c20:	0001      	movs	r1, r0
 8003c22:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	0adb      	lsrs	r3, r3, #11
 8003c28:	2207      	movs	r2, #7
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c2e:	5cd3      	ldrb	r3, [r2, r3]
 8003c30:	40d9      	lsrs	r1, r3
 8003c32:	000b      	movs	r3, r1
}
 8003c34:	0018      	movs	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	0800645c 	.word	0x0800645c

08003c44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003c4c:	2017      	movs	r0, #23
 8003c4e:	183b      	adds	r3, r7, r0
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d100      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003c5e:	e0c2      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c60:	4b81      	ldr	r3, [pc, #516]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	055b      	lsls	r3, r3, #21
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d109      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6c:	4b7e      	ldr	r3, [pc, #504]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c70:	4b7d      	ldr	r3, [pc, #500]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003c72:	2180      	movs	r1, #128	; 0x80
 8003c74:	0549      	lsls	r1, r1, #21
 8003c76:	430a      	orrs	r2, r1
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003c7a:	183b      	adds	r3, r7, r0
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	4b7a      	ldr	r3, [pc, #488]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d11a      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8c:	4b77      	ldr	r3, [pc, #476]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b76      	ldr	r3, [pc, #472]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003c92:	2180      	movs	r1, #128	; 0x80
 8003c94:	0049      	lsls	r1, r1, #1
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9a:	f7fe f8f9 	bl	8001e90 <HAL_GetTick>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca4:	f7fe f8f4 	bl	8001e90 <HAL_GetTick>
 8003ca8:	0002      	movs	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e0d4      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb6:	4b6d      	ldr	r3, [pc, #436]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003cc2:	4b69      	ldr	r3, [pc, #420]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	23c0      	movs	r3, #192	; 0xc0
 8003cc8:	039b      	lsls	r3, r3, #14
 8003cca:	4013      	ands	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	23c0      	movs	r3, #192	; 0xc0
 8003cd4:	039b      	lsls	r3, r3, #14
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d013      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	23c0      	movs	r3, #192	; 0xc0
 8003ce4:	029b      	lsls	r3, r3, #10
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	23c0      	movs	r3, #192	; 0xc0
 8003cea:	029b      	lsls	r3, r3, #10
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d10a      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003cf0:	4b5d      	ldr	r3, [pc, #372]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	029b      	lsls	r3, r3, #10
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	2380      	movs	r3, #128	; 0x80
 8003cfc:	029b      	lsls	r3, r3, #10
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d101      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0ac      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003d06:	4b58      	ldr	r3, [pc, #352]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d0a:	23c0      	movs	r3, #192	; 0xc0
 8003d0c:	029b      	lsls	r3, r3, #10
 8003d0e:	4013      	ands	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d03b      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	23c0      	movs	r3, #192	; 0xc0
 8003d1e:	029b      	lsls	r3, r3, #10
 8003d20:	4013      	ands	r3, r2
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d033      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d02e      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003d32:	4b4d      	ldr	r3, [pc, #308]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d36:	4a4e      	ldr	r2, [pc, #312]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d3c:	4b4a      	ldr	r3, [pc, #296]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003d3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d40:	4b49      	ldr	r3, [pc, #292]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003d42:	2180      	movs	r1, #128	; 0x80
 8003d44:	0309      	lsls	r1, r1, #12
 8003d46:	430a      	orrs	r2, r1
 8003d48:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d4a:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003d4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d4e:	4b46      	ldr	r3, [pc, #280]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003d50:	4948      	ldr	r1, [pc, #288]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d52:	400a      	ands	r2, r1
 8003d54:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003d56:	4b44      	ldr	r3, [pc, #272]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4013      	ands	r3, r2
 8003d64:	d014      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fe f893 	bl	8001e90 <HAL_GetTick>
 8003d6a:	0003      	movs	r3, r0
 8003d6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d6e:	e009      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d70:	f7fe f88e 	bl	8001e90 <HAL_GetTick>
 8003d74:	0002      	movs	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	4a3f      	ldr	r2, [pc, #252]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e06d      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d84:	4b38      	ldr	r3, [pc, #224]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003d86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d0ef      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	23c0      	movs	r3, #192	; 0xc0
 8003d96:	029b      	lsls	r3, r3, #10
 8003d98:	401a      	ands	r2, r3
 8003d9a:	23c0      	movs	r3, #192	; 0xc0
 8003d9c:	029b      	lsls	r3, r3, #10
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003da2:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a35      	ldr	r2, [pc, #212]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	0019      	movs	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	23c0      	movs	r3, #192	; 0xc0
 8003db2:	039b      	lsls	r3, r3, #14
 8003db4:	401a      	ands	r2, r3
 8003db6:	4b2c      	ldr	r3, [pc, #176]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003db8:	430a      	orrs	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003dbe:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	23c0      	movs	r3, #192	; 0xc0
 8003dc6:	029b      	lsls	r3, r3, #10
 8003dc8:	401a      	ands	r2, r3
 8003dca:	4b27      	ldr	r3, [pc, #156]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dd0:	2317      	movs	r3, #23
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d105      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dda:	4b23      	ldr	r3, [pc, #140]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dde:	4b22      	ldr	r3, [pc, #136]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003de0:	4927      	ldr	r1, [pc, #156]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003de2:	400a      	ands	r2, r1
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2202      	movs	r2, #2
 8003dec:	4013      	ands	r3, r2
 8003dee:	d009      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003df0:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df4:	220c      	movs	r2, #12
 8003df6:	4393      	bics	r3, r2
 8003df8:	0019      	movs	r1, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e00:	430a      	orrs	r2, r1
 8003e02:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2204      	movs	r2, #4
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e0e:	4b16      	ldr	r3, [pc, #88]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e12:	4a1c      	ldr	r2, [pc, #112]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	0019      	movs	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2208      	movs	r2, #8
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e2c:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e30:	4a15      	ldr	r2, [pc, #84]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	0019      	movs	r1, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2280      	movs	r2, #128	; 0x80
 8003e46:	4013      	ands	r3, r2
 8003e48:	d009      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4e:	4a0f      	ldr	r2, [pc, #60]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	0019      	movs	r1, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b006      	add	sp, #24
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40007000 	.word	0x40007000
 8003e70:	fffcffff 	.word	0xfffcffff
 8003e74:	fff7ffff 	.word	0xfff7ffff
 8003e78:	00001388 	.word	0x00001388
 8003e7c:	ffcfffff 	.word	0xffcfffff
 8003e80:	efffffff 	.word	0xefffffff
 8003e84:	fffff3ff 	.word	0xfffff3ff
 8003e88:	ffffcfff 	.word	0xffffcfff
 8003e8c:	fff3ffff 	.word	0xfff3ffff

08003e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e032      	b.n	8003f08 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2239      	movs	r2, #57	; 0x39
 8003ea6:	5c9b      	ldrb	r3, [r3, r2]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d107      	bne.n	8003ebe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2238      	movs	r2, #56	; 0x38
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7fd fecf 	bl	8001c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2239      	movs	r2, #57	; 0x39
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	0019      	movs	r1, r3
 8003ed0:	0010      	movs	r0, r2
 8003ed2:	f000 f935 	bl	8004140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	223e      	movs	r2, #62	; 0x3e
 8003eda:	2101      	movs	r1, #1
 8003edc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	223a      	movs	r2, #58	; 0x3a
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	5499      	strb	r1, [r3, r2]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	223b      	movs	r2, #59	; 0x3b
 8003eea:	2101      	movs	r1, #1
 8003eec:	5499      	strb	r1, [r3, r2]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	223c      	movs	r2, #60	; 0x3c
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	5499      	strb	r1, [r3, r2]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	223d      	movs	r2, #61	; 0x3d
 8003efa:	2101      	movs	r1, #1
 8003efc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2239      	movs	r2, #57	; 0x39
 8003f02:	2101      	movs	r1, #1
 8003f04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	0018      	movs	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b002      	add	sp, #8
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2239      	movs	r2, #57	; 0x39
 8003f1c:	5c9b      	ldrb	r3, [r3, r2]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d001      	beq.n	8003f28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e02e      	b.n	8003f86 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2239      	movs	r2, #57	; 0x39
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	05db      	lsls	r3, r3, #23
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d009      	beq.n	8003f50 <HAL_TIM_Base_Start+0x40>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <HAL_TIM_Base_Start+0x80>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d004      	beq.n	8003f50 <HAL_TIM_Base_Start+0x40>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <HAL_TIM_Base_Start+0x84>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d111      	bne.n	8003f74 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2207      	movs	r2, #7
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b06      	cmp	r3, #6
 8003f60:	d010      	beq.n	8003f84 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f72:	e007      	b.n	8003f84 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2101      	movs	r1, #1
 8003f80:	430a      	orrs	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	0018      	movs	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b004      	add	sp, #16
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	40010800 	.word	0x40010800
 8003f94:	40011400 	.word	0x40011400

08003f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa2:	230f      	movs	r3, #15
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2238      	movs	r2, #56	; 0x38
 8003fae:	5c9b      	ldrb	r3, [r3, r2]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_TIM_ConfigClockSource+0x20>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e0bc      	b.n	8004132 <HAL_TIM_ConfigClockSource+0x19a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2238      	movs	r2, #56	; 0x38
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2239      	movs	r2, #57	; 0x39
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2277      	movs	r2, #119	; 0x77
 8003fd4:	4393      	bics	r3, r2
 8003fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4a58      	ldr	r2, [pc, #352]	; (800413c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2280      	movs	r2, #128	; 0x80
 8003fee:	0192      	lsls	r2, r2, #6
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d040      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0xde>
 8003ff4:	2280      	movs	r2, #128	; 0x80
 8003ff6:	0192      	lsls	r2, r2, #6
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d900      	bls.n	8003ffe <HAL_TIM_ConfigClockSource+0x66>
 8003ffc:	e088      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x178>
 8003ffe:	2280      	movs	r2, #128	; 0x80
 8004000:	0152      	lsls	r2, r2, #5
 8004002:	4293      	cmp	r3, r2
 8004004:	d100      	bne.n	8004008 <HAL_TIM_ConfigClockSource+0x70>
 8004006:	e088      	b.n	800411a <HAL_TIM_ConfigClockSource+0x182>
 8004008:	2280      	movs	r2, #128	; 0x80
 800400a:	0152      	lsls	r2, r2, #5
 800400c:	4293      	cmp	r3, r2
 800400e:	d900      	bls.n	8004012 <HAL_TIM_ConfigClockSource+0x7a>
 8004010:	e07e      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x178>
 8004012:	2b70      	cmp	r3, #112	; 0x70
 8004014:	d018      	beq.n	8004048 <HAL_TIM_ConfigClockSource+0xb0>
 8004016:	d900      	bls.n	800401a <HAL_TIM_ConfigClockSource+0x82>
 8004018:	e07a      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x178>
 800401a:	2b60      	cmp	r3, #96	; 0x60
 800401c:	d04f      	beq.n	80040be <HAL_TIM_ConfigClockSource+0x126>
 800401e:	d900      	bls.n	8004022 <HAL_TIM_ConfigClockSource+0x8a>
 8004020:	e076      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x178>
 8004022:	2b50      	cmp	r3, #80	; 0x50
 8004024:	d03b      	beq.n	800409e <HAL_TIM_ConfigClockSource+0x106>
 8004026:	d900      	bls.n	800402a <HAL_TIM_ConfigClockSource+0x92>
 8004028:	e072      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x178>
 800402a:	2b40      	cmp	r3, #64	; 0x40
 800402c:	d057      	beq.n	80040de <HAL_TIM_ConfigClockSource+0x146>
 800402e:	d900      	bls.n	8004032 <HAL_TIM_ConfigClockSource+0x9a>
 8004030:	e06e      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x178>
 8004032:	2b30      	cmp	r3, #48	; 0x30
 8004034:	d063      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x166>
 8004036:	d86b      	bhi.n	8004110 <HAL_TIM_ConfigClockSource+0x178>
 8004038:	2b20      	cmp	r3, #32
 800403a:	d060      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x166>
 800403c:	d868      	bhi.n	8004110 <HAL_TIM_ConfigClockSource+0x178>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d05d      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x166>
 8004042:	2b10      	cmp	r3, #16
 8004044:	d05b      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x166>
 8004046:	e063      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	6899      	ldr	r1, [r3, #8]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f000 f940 	bl	80042dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2277      	movs	r2, #119	; 0x77
 8004068:	4313      	orrs	r3, r2
 800406a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	609a      	str	r2, [r3, #8]
      break;
 8004074:	e052      	b.n	800411c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6899      	ldr	r1, [r3, #8]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f000 f929 	bl	80042dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2180      	movs	r1, #128	; 0x80
 8004096:	01c9      	lsls	r1, r1, #7
 8004098:	430a      	orrs	r2, r1
 800409a:	609a      	str	r2, [r3, #8]
      break;
 800409c:	e03e      	b.n	800411c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6859      	ldr	r1, [r3, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	001a      	movs	r2, r3
 80040ac:	f000 f89c 	bl	80041e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2150      	movs	r1, #80	; 0x50
 80040b6:	0018      	movs	r0, r3
 80040b8:	f000 f8f6 	bl	80042a8 <TIM_ITRx_SetConfig>
      break;
 80040bc:	e02e      	b.n	800411c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6859      	ldr	r1, [r3, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	001a      	movs	r2, r3
 80040cc:	f000 f8ba 	bl	8004244 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2160      	movs	r1, #96	; 0x60
 80040d6:	0018      	movs	r0, r3
 80040d8:	f000 f8e6 	bl	80042a8 <TIM_ITRx_SetConfig>
      break;
 80040dc:	e01e      	b.n	800411c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6859      	ldr	r1, [r3, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	001a      	movs	r2, r3
 80040ec:	f000 f87c 	bl	80041e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2140      	movs	r1, #64	; 0x40
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 f8d6 	bl	80042a8 <TIM_ITRx_SetConfig>
      break;
 80040fc:	e00e      	b.n	800411c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	0019      	movs	r1, r3
 8004108:	0010      	movs	r0, r2
 800410a:	f000 f8cd 	bl	80042a8 <TIM_ITRx_SetConfig>
      break;
 800410e:	e005      	b.n	800411c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004110:	230f      	movs	r3, #15
 8004112:	18fb      	adds	r3, r7, r3
 8004114:	2201      	movs	r2, #1
 8004116:	701a      	strb	r2, [r3, #0]
      break;
 8004118:	e000      	b.n	800411c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800411a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2239      	movs	r2, #57	; 0x39
 8004120:	2101      	movs	r1, #1
 8004122:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2238      	movs	r2, #56	; 0x38
 8004128:	2100      	movs	r1, #0
 800412a:	5499      	strb	r1, [r3, r2]

  return status;
 800412c:	230f      	movs	r3, #15
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	781b      	ldrb	r3, [r3, #0]
}
 8004132:	0018      	movs	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	b004      	add	sp, #16
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	ffff00ff 	.word	0xffff00ff

08004140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	2380      	movs	r3, #128	; 0x80
 8004154:	05db      	lsls	r3, r3, #23
 8004156:	429a      	cmp	r2, r3
 8004158:	d007      	beq.n	800416a <TIM_Base_SetConfig+0x2a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <TIM_Base_SetConfig+0x9c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d003      	beq.n	800416a <TIM_Base_SetConfig+0x2a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <TIM_Base_SetConfig+0xa0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d108      	bne.n	800417c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2270      	movs	r2, #112	; 0x70
 800416e:	4393      	bics	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	05db      	lsls	r3, r3, #23
 8004182:	429a      	cmp	r2, r3
 8004184:	d007      	beq.n	8004196 <TIM_Base_SetConfig+0x56>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a14      	ldr	r2, [pc, #80]	; (80041dc <TIM_Base_SetConfig+0x9c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_Base_SetConfig+0x56>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a13      	ldr	r2, [pc, #76]	; (80041e0 <TIM_Base_SetConfig+0xa0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d108      	bne.n	80041a8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <TIM_Base_SetConfig+0xa4>)
 800419a:	4013      	ands	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2280      	movs	r2, #128	; 0x80
 80041ac:	4393      	bics	r3, r2
 80041ae:	001a      	movs	r2, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	615a      	str	r2, [r3, #20]
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b004      	add	sp, #16
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40010800 	.word	0x40010800
 80041e0:	40011400 	.word	0x40011400
 80041e4:	fffffcff 	.word	0xfffffcff

080041e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	2201      	movs	r2, #1
 8004200:	4393      	bics	r3, r2
 8004202:	001a      	movs	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	22f0      	movs	r2, #240	; 0xf0
 8004212:	4393      	bics	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	220a      	movs	r2, #10
 8004224:	4393      	bics	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	621a      	str	r2, [r3, #32]
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	b006      	add	sp, #24
 8004242:	bd80      	pop	{r7, pc}

08004244 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	2210      	movs	r2, #16
 8004256:	4393      	bics	r3, r2
 8004258:	001a      	movs	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	4a0d      	ldr	r2, [pc, #52]	; (80042a4 <TIM_TI2_ConfigInputStage+0x60>)
 800426e:	4013      	ands	r3, r2
 8004270:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	031b      	lsls	r3, r3, #12
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	22a0      	movs	r2, #160	; 0xa0
 8004280:	4393      	bics	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	46bd      	mov	sp, r7
 800429e:	b006      	add	sp, #24
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	ffff0fff 	.word	0xffff0fff

080042a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2270      	movs	r2, #112	; 0x70
 80042bc:	4393      	bics	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	2207      	movs	r2, #7
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	609a      	str	r2, [r3, #8]
}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b004      	add	sp, #16
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4a09      	ldr	r2, [pc, #36]	; (8004318 <TIM_ETR_SetConfig+0x3c>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	021a      	lsls	r2, r3, #8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	431a      	orrs	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4313      	orrs	r3, r2
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	609a      	str	r2, [r3, #8]
}
 8004310:	46c0      	nop			; (mov r8, r8)
 8004312:	46bd      	mov	sp, r7
 8004314:	b006      	add	sp, #24
 8004316:	bd80      	pop	{r7, pc}
 8004318:	ffff00ff 	.word	0xffff00ff

0800431c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2238      	movs	r2, #56	; 0x38
 800432a:	5c9b      	ldrb	r3, [r3, r2]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004330:	2302      	movs	r3, #2
 8004332:	e042      	b.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2238      	movs	r2, #56	; 0x38
 8004338:	2101      	movs	r1, #1
 800433a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2239      	movs	r2, #57	; 0x39
 8004340:	2102      	movs	r1, #2
 8004342:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2270      	movs	r2, #112	; 0x70
 8004358:	4393      	bics	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	05db      	lsls	r3, r3, #23
 8004376:	429a      	cmp	r2, r3
 8004378:	d009      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a11      	ldr	r2, [pc, #68]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d004      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a0f      	ldr	r2, [pc, #60]	; (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d10c      	bne.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2280      	movs	r2, #128	; 0x80
 8004392:	4393      	bics	r3, r2
 8004394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4313      	orrs	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2239      	movs	r2, #57	; 0x39
 80043ac:	2101      	movs	r1, #1
 80043ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2238      	movs	r2, #56	; 0x38
 80043b4:	2100      	movs	r1, #0
 80043b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	0018      	movs	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	b004      	add	sp, #16
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	40010800 	.word	0x40010800
 80043c8:	40011400 	.word	0x40011400

080043cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e044      	b.n	8004468 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d107      	bne.n	80043f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2274      	movs	r2, #116	; 0x74
 80043ea:	2100      	movs	r1, #0
 80043ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7fd fc79 	bl	8001ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2224      	movs	r2, #36	; 0x24
 80043fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2101      	movs	r1, #1
 8004408:	438a      	bics	r2, r1
 800440a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	0018      	movs	r0, r3
 8004410:	f000 fc36 	bl	8004c80 <UART_SetConfig>
 8004414:	0003      	movs	r3, r0
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e024      	b.n	8004468 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	0018      	movs	r0, r3
 800442a:	f000 fe8b 	bl	8005144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	490d      	ldr	r1, [pc, #52]	; (8004470 <HAL_UART_Init+0xa4>)
 800443a:	400a      	ands	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	212a      	movs	r1, #42	; 0x2a
 800444a:	438a      	bics	r2, r1
 800444c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2101      	movs	r1, #1
 800445a:	430a      	orrs	r2, r1
 800445c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	0018      	movs	r0, r3
 8004462:	f000 ff23 	bl	80052ac <UART_CheckIdleState>
 8004466:	0003      	movs	r3, r0
}
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b002      	add	sp, #8
 800446e:	bd80      	pop	{r7, pc}
 8004470:	ffffb7ff 	.word	0xffffb7ff

08004474 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	; 0x28
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	1dbb      	adds	r3, r7, #6
 8004482:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004488:	2b20      	cmp	r3, #32
 800448a:	d000      	beq.n	800448e <HAL_UART_Transmit+0x1a>
 800448c:	e095      	b.n	80045ba <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_UART_Transmit+0x28>
 8004494:	1dbb      	adds	r3, r7, #6
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e08d      	b.n	80045bc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	015b      	lsls	r3, r3, #5
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d109      	bne.n	80044c0 <HAL_UART_Transmit+0x4c>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d105      	bne.n	80044c0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2201      	movs	r2, #1
 80044b8:	4013      	ands	r3, r2
 80044ba:	d001      	beq.n	80044c0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e07d      	b.n	80045bc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2274      	movs	r2, #116	; 0x74
 80044c4:	5c9b      	ldrb	r3, [r3, r2]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_UART_Transmit+0x5a>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e076      	b.n	80045bc <HAL_UART_Transmit+0x148>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2274      	movs	r2, #116	; 0x74
 80044d2:	2101      	movs	r1, #1
 80044d4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2280      	movs	r2, #128	; 0x80
 80044da:	2100      	movs	r1, #0
 80044dc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2221      	movs	r2, #33	; 0x21
 80044e2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044e4:	f7fd fcd4 	bl	8001e90 <HAL_GetTick>
 80044e8:	0003      	movs	r3, r0
 80044ea:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1dba      	adds	r2, r7, #6
 80044f0:	2150      	movs	r1, #80	; 0x50
 80044f2:	8812      	ldrh	r2, [r2, #0]
 80044f4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1dba      	adds	r2, r7, #6
 80044fa:	2152      	movs	r1, #82	; 0x52
 80044fc:	8812      	ldrh	r2, [r2, #0]
 80044fe:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	015b      	lsls	r3, r3, #5
 8004508:	429a      	cmp	r2, r3
 800450a:	d108      	bne.n	800451e <HAL_UART_Transmit+0xaa>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d104      	bne.n	800451e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004514:	2300      	movs	r3, #0
 8004516:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	e003      	b.n	8004526 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2274      	movs	r2, #116	; 0x74
 800452a:	2100      	movs	r1, #0
 800452c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800452e:	e02c      	b.n	800458a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	0013      	movs	r3, r2
 800453a:	2200      	movs	r2, #0
 800453c:	2180      	movs	r1, #128	; 0x80
 800453e:	f000 fefd 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 8004542:	1e03      	subs	r3, r0, #0
 8004544:	d001      	beq.n	800454a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e038      	b.n	80045bc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	001a      	movs	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	05d2      	lsls	r2, r2, #23
 800455c:	0dd2      	lsrs	r2, r2, #23
 800455e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	3302      	adds	r3, #2
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	e007      	b.n	8004578 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	781a      	ldrb	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3301      	adds	r3, #1
 8004576:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2252      	movs	r2, #82	; 0x52
 800457c:	5a9b      	ldrh	r3, [r3, r2]
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b299      	uxth	r1, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2252      	movs	r2, #82	; 0x52
 8004588:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2252      	movs	r2, #82	; 0x52
 800458e:	5a9b      	ldrh	r3, [r3, r2]
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1cc      	bne.n	8004530 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	0013      	movs	r3, r2
 80045a0:	2200      	movs	r2, #0
 80045a2:	2140      	movs	r1, #64	; 0x40
 80045a4:	f000 feca 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 80045a8:	1e03      	subs	r3, r0, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e005      	b.n	80045bc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e000      	b.n	80045bc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80045ba:	2302      	movs	r3, #2
  }
}
 80045bc:	0018      	movs	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	b008      	add	sp, #32
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	1dbb      	adds	r3, r7, #6
 80045d0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d155      	bne.n	8004686 <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_UART_Receive_IT+0x24>
 80045e0:	1dbb      	adds	r3, r7, #6
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e04d      	b.n	8004688 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	015b      	lsls	r3, r3, #5
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d109      	bne.n	800460c <HAL_UART_Receive_IT+0x48>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2201      	movs	r2, #1
 8004604:	4013      	ands	r3, r2
 8004606:	d001      	beq.n	800460c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e03d      	b.n	8004688 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2274      	movs	r2, #116	; 0x74
 8004610:	5c9b      	ldrb	r3, [r3, r2]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_UART_Receive_IT+0x56>
 8004616:	2302      	movs	r3, #2
 8004618:	e036      	b.n	8004688 <HAL_UART_Receive_IT+0xc4>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2274      	movs	r2, #116	; 0x74
 800461e:	2101      	movs	r1, #1
 8004620:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_UART_Receive_IT+0xcc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d020      	beq.n	8004674 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	041b      	lsls	r3, r3, #16
 800463c:	4013      	ands	r3, r2
 800463e:	d019      	beq.n	8004674 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004640:	f3ef 8310 	mrs	r3, PRIMASK
 8004644:	613b      	str	r3, [r7, #16]
  return(result);
 8004646:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	2301      	movs	r3, #1
 800464c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f383 8810 	msr	PRIMASK, r3
}
 8004654:	46c0      	nop			; (mov r8, r8)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2180      	movs	r1, #128	; 0x80
 8004662:	04c9      	lsls	r1, r1, #19
 8004664:	430a      	orrs	r2, r1
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f383 8810 	msr	PRIMASK, r3
}
 8004672:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004674:	1dbb      	adds	r3, r7, #6
 8004676:	881a      	ldrh	r2, [r3, #0]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	0018      	movs	r0, r3
 800467e:	f000 ff21 	bl	80054c4 <UART_Start_Receive_IT>
 8004682:	0003      	movs	r3, r0
 8004684:	e000      	b.n	8004688 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004686:	2302      	movs	r3, #2
  }
}
 8004688:	0018      	movs	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	b008      	add	sp, #32
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40004800 	.word	0x40004800

08004694 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b0ab      	sub	sp, #172	; 0xac
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	22a4      	movs	r2, #164	; 0xa4
 80046a4:	18b9      	adds	r1, r7, r2
 80046a6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	20a0      	movs	r0, #160	; 0xa0
 80046b0:	1839      	adds	r1, r7, r0
 80046b2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	219c      	movs	r1, #156	; 0x9c
 80046bc:	1879      	adds	r1, r7, r1
 80046be:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046c0:	0011      	movs	r1, r2
 80046c2:	18bb      	adds	r3, r7, r2
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a99      	ldr	r2, [pc, #612]	; (800492c <HAL_UART_IRQHandler+0x298>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	2298      	movs	r2, #152	; 0x98
 80046cc:	18bc      	adds	r4, r7, r2
 80046ce:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80046d0:	18bb      	adds	r3, r7, r2
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d114      	bne.n	8004702 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046d8:	187b      	adds	r3, r7, r1
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2220      	movs	r2, #32
 80046de:	4013      	ands	r3, r2
 80046e0:	d00f      	beq.n	8004702 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046e2:	183b      	adds	r3, r7, r0
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2220      	movs	r2, #32
 80046e8:	4013      	ands	r3, r2
 80046ea:	d00a      	beq.n	8004702 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d100      	bne.n	80046f6 <HAL_UART_IRQHandler+0x62>
 80046f4:	e298      	b.n	8004c28 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	0010      	movs	r0, r2
 80046fe:	4798      	blx	r3
      }
      return;
 8004700:	e292      	b.n	8004c28 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004702:	2398      	movs	r3, #152	; 0x98
 8004704:	18fb      	adds	r3, r7, r3
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d100      	bne.n	800470e <HAL_UART_IRQHandler+0x7a>
 800470c:	e114      	b.n	8004938 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800470e:	239c      	movs	r3, #156	; 0x9c
 8004710:	18fb      	adds	r3, r7, r3
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2201      	movs	r2, #1
 8004716:	4013      	ands	r3, r2
 8004718:	d106      	bne.n	8004728 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800471a:	23a0      	movs	r3, #160	; 0xa0
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a83      	ldr	r2, [pc, #524]	; (8004930 <HAL_UART_IRQHandler+0x29c>)
 8004722:	4013      	ands	r3, r2
 8004724:	d100      	bne.n	8004728 <HAL_UART_IRQHandler+0x94>
 8004726:	e107      	b.n	8004938 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004728:	23a4      	movs	r3, #164	; 0xa4
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2201      	movs	r2, #1
 8004730:	4013      	ands	r3, r2
 8004732:	d012      	beq.n	800475a <HAL_UART_IRQHandler+0xc6>
 8004734:	23a0      	movs	r3, #160	; 0xa0
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4013      	ands	r3, r2
 8004740:	d00b      	beq.n	800475a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2201      	movs	r2, #1
 8004748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2280      	movs	r2, #128	; 0x80
 800474e:	589b      	ldr	r3, [r3, r2]
 8004750:	2201      	movs	r2, #1
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2180      	movs	r1, #128	; 0x80
 8004758:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800475a:	23a4      	movs	r3, #164	; 0xa4
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2202      	movs	r2, #2
 8004762:	4013      	ands	r3, r2
 8004764:	d011      	beq.n	800478a <HAL_UART_IRQHandler+0xf6>
 8004766:	239c      	movs	r3, #156	; 0x9c
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2201      	movs	r2, #1
 800476e:	4013      	ands	r3, r2
 8004770:	d00b      	beq.n	800478a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2202      	movs	r2, #2
 8004778:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2280      	movs	r2, #128	; 0x80
 800477e:	589b      	ldr	r3, [r3, r2]
 8004780:	2204      	movs	r2, #4
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2180      	movs	r1, #128	; 0x80
 8004788:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800478a:	23a4      	movs	r3, #164	; 0xa4
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2204      	movs	r2, #4
 8004792:	4013      	ands	r3, r2
 8004794:	d011      	beq.n	80047ba <HAL_UART_IRQHandler+0x126>
 8004796:	239c      	movs	r3, #156	; 0x9c
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2201      	movs	r2, #1
 800479e:	4013      	ands	r3, r2
 80047a0:	d00b      	beq.n	80047ba <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2204      	movs	r2, #4
 80047a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2280      	movs	r2, #128	; 0x80
 80047ae:	589b      	ldr	r3, [r3, r2]
 80047b0:	2202      	movs	r2, #2
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2180      	movs	r1, #128	; 0x80
 80047b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047ba:	23a4      	movs	r3, #164	; 0xa4
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2208      	movs	r2, #8
 80047c2:	4013      	ands	r3, r2
 80047c4:	d017      	beq.n	80047f6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047c6:	23a0      	movs	r3, #160	; 0xa0
 80047c8:	18fb      	adds	r3, r7, r3
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2220      	movs	r2, #32
 80047ce:	4013      	ands	r3, r2
 80047d0:	d105      	bne.n	80047de <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047d2:	239c      	movs	r3, #156	; 0x9c
 80047d4:	18fb      	adds	r3, r7, r3
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2201      	movs	r2, #1
 80047da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047dc:	d00b      	beq.n	80047f6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2208      	movs	r2, #8
 80047e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2280      	movs	r2, #128	; 0x80
 80047ea:	589b      	ldr	r3, [r3, r2]
 80047ec:	2208      	movs	r2, #8
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2180      	movs	r1, #128	; 0x80
 80047f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047f6:	23a4      	movs	r3, #164	; 0xa4
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	2380      	movs	r3, #128	; 0x80
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	4013      	ands	r3, r2
 8004802:	d013      	beq.n	800482c <HAL_UART_IRQHandler+0x198>
 8004804:	23a0      	movs	r3, #160	; 0xa0
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	04db      	lsls	r3, r3, #19
 800480e:	4013      	ands	r3, r2
 8004810:	d00c      	beq.n	800482c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2280      	movs	r2, #128	; 0x80
 8004818:	0112      	lsls	r2, r2, #4
 800481a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2280      	movs	r2, #128	; 0x80
 8004820:	589b      	ldr	r3, [r3, r2]
 8004822:	2220      	movs	r2, #32
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2180      	movs	r1, #128	; 0x80
 800482a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2280      	movs	r2, #128	; 0x80
 8004830:	589b      	ldr	r3, [r3, r2]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d100      	bne.n	8004838 <HAL_UART_IRQHandler+0x1a4>
 8004836:	e1f9      	b.n	8004c2c <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004838:	23a4      	movs	r3, #164	; 0xa4
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2220      	movs	r2, #32
 8004840:	4013      	ands	r3, r2
 8004842:	d00e      	beq.n	8004862 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004844:	23a0      	movs	r3, #160	; 0xa0
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2220      	movs	r2, #32
 800484c:	4013      	ands	r3, r2
 800484e:	d008      	beq.n	8004862 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004854:	2b00      	cmp	r3, #0
 8004856:	d004      	beq.n	8004862 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	0010      	movs	r0, r2
 8004860:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2280      	movs	r2, #128	; 0x80
 8004866:	589b      	ldr	r3, [r3, r2]
 8004868:	2194      	movs	r1, #148	; 0x94
 800486a:	187a      	adds	r2, r7, r1
 800486c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2240      	movs	r2, #64	; 0x40
 8004876:	4013      	ands	r3, r2
 8004878:	2b40      	cmp	r3, #64	; 0x40
 800487a:	d004      	beq.n	8004886 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800487c:	187b      	adds	r3, r7, r1
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2228      	movs	r2, #40	; 0x28
 8004882:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004884:	d047      	beq.n	8004916 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	0018      	movs	r0, r3
 800488a:	f000 fecb 	bl	8005624 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2240      	movs	r2, #64	; 0x40
 8004896:	4013      	ands	r3, r2
 8004898:	2b40      	cmp	r3, #64	; 0x40
 800489a:	d137      	bne.n	800490c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800489c:	f3ef 8310 	mrs	r3, PRIMASK
 80048a0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80048a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048a4:	2090      	movs	r0, #144	; 0x90
 80048a6:	183a      	adds	r2, r7, r0
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	2301      	movs	r3, #1
 80048ac:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048b0:	f383 8810 	msr	PRIMASK, r3
}
 80048b4:	46c0      	nop			; (mov r8, r8)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2140      	movs	r1, #64	; 0x40
 80048c2:	438a      	bics	r2, r1
 80048c4:	609a      	str	r2, [r3, #8]
 80048c6:	183b      	adds	r3, r7, r0
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ce:	f383 8810 	msr	PRIMASK, r3
}
 80048d2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d012      	beq.n	8004902 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e0:	4a14      	ldr	r2, [pc, #80]	; (8004934 <HAL_UART_IRQHandler+0x2a0>)
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e8:	0018      	movs	r0, r3
 80048ea:	f7fd fc1d 	bl	8002128 <HAL_DMA_Abort_IT>
 80048ee:	1e03      	subs	r3, r0, #0
 80048f0:	d01a      	beq.n	8004928 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	0018      	movs	r0, r3
 80048fe:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004900:	e012      	b.n	8004928 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	0018      	movs	r0, r3
 8004906:	f000 f9a7 	bl	8004c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490a:	e00d      	b.n	8004928 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	0018      	movs	r0, r3
 8004910:	f000 f9a2 	bl	8004c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004914:	e008      	b.n	8004928 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	0018      	movs	r0, r3
 800491a:	f000 f99d 	bl	8004c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2280      	movs	r2, #128	; 0x80
 8004922:	2100      	movs	r1, #0
 8004924:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004926:	e181      	b.n	8004c2c <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004928:	46c0      	nop			; (mov r8, r8)
    return;
 800492a:	e17f      	b.n	8004c2c <HAL_UART_IRQHandler+0x598>
 800492c:	0000080f 	.word	0x0000080f
 8004930:	04000120 	.word	0x04000120
 8004934:	080056e9 	.word	0x080056e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493c:	2b01      	cmp	r3, #1
 800493e:	d000      	beq.n	8004942 <HAL_UART_IRQHandler+0x2ae>
 8004940:	e133      	b.n	8004baa <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004942:	23a4      	movs	r3, #164	; 0xa4
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2210      	movs	r2, #16
 800494a:	4013      	ands	r3, r2
 800494c:	d100      	bne.n	8004950 <HAL_UART_IRQHandler+0x2bc>
 800494e:	e12c      	b.n	8004baa <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004950:	23a0      	movs	r3, #160	; 0xa0
 8004952:	18fb      	adds	r3, r7, r3
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2210      	movs	r2, #16
 8004958:	4013      	ands	r3, r2
 800495a:	d100      	bne.n	800495e <HAL_UART_IRQHandler+0x2ca>
 800495c:	e125      	b.n	8004baa <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2210      	movs	r2, #16
 8004964:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2240      	movs	r2, #64	; 0x40
 800496e:	4013      	ands	r3, r2
 8004970:	2b40      	cmp	r3, #64	; 0x40
 8004972:	d000      	beq.n	8004976 <HAL_UART_IRQHandler+0x2e2>
 8004974:	e09d      	b.n	8004ab2 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	217e      	movs	r1, #126	; 0x7e
 8004980:	187b      	adds	r3, r7, r1
 8004982:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004984:	187b      	adds	r3, r7, r1
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d100      	bne.n	800498e <HAL_UART_IRQHandler+0x2fa>
 800498c:	e150      	b.n	8004c30 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2258      	movs	r2, #88	; 0x58
 8004992:	5a9b      	ldrh	r3, [r3, r2]
 8004994:	187a      	adds	r2, r7, r1
 8004996:	8812      	ldrh	r2, [r2, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d300      	bcc.n	800499e <HAL_UART_IRQHandler+0x30a>
 800499c:	e148      	b.n	8004c30 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	187a      	adds	r2, r7, r1
 80049a2:	215a      	movs	r1, #90	; 0x5a
 80049a4:	8812      	ldrh	r2, [r2, #0]
 80049a6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2220      	movs	r2, #32
 80049b2:	4013      	ands	r3, r2
 80049b4:	d16e      	bne.n	8004a94 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049be:	67bb      	str	r3, [r7, #120]	; 0x78
 80049c0:	2301      	movs	r3, #1
 80049c2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c6:	f383 8810 	msr	PRIMASK, r3
}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	499a      	ldr	r1, [pc, #616]	; (8004c40 <HAL_UART_IRQHandler+0x5ac>)
 80049d8:	400a      	ands	r2, r1
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	f383 8810 	msr	PRIMASK, r3
}
 80049e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e8:	f3ef 8310 	mrs	r3, PRIMASK
 80049ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80049ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f0:	677b      	str	r3, [r7, #116]	; 0x74
 80049f2:	2301      	movs	r3, #1
 80049f4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f8:	f383 8810 	msr	PRIMASK, r3
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2101      	movs	r1, #1
 8004a0a:	438a      	bics	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
 8004a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a10:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a14:	f383 8810 	msr	PRIMASK, r3
}
 8004a18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a22:	673b      	str	r3, [r7, #112]	; 0x70
 8004a24:	2301      	movs	r3, #1
 8004a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2a:	f383 8810 	msr	PRIMASK, r3
}
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2140      	movs	r1, #64	; 0x40
 8004a3c:	438a      	bics	r2, r1
 8004a3e:	609a      	str	r2, [r3, #8]
 8004a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a42:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a46:	f383 8810 	msr	PRIMASK, r3
}
 8004a4a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a58:	f3ef 8310 	mrs	r3, PRIMASK
 8004a5c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a62:	2301      	movs	r3, #1
 8004a64:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a68:	f383 8810 	msr	PRIMASK, r3
}
 8004a6c:	46c0      	nop			; (mov r8, r8)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2110      	movs	r1, #16
 8004a7a:	438a      	bics	r2, r1
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a80:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a84:	f383 8810 	msr	PRIMASK, r3
}
 8004a88:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f7fd fb0a 	bl	80020a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2258      	movs	r2, #88	; 0x58
 8004a98:	5a9a      	ldrh	r2, [r3, r2]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	215a      	movs	r1, #90	; 0x5a
 8004a9e:	5a5b      	ldrh	r3, [r3, r1]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	0011      	movs	r1, r2
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f000 f8dc 	bl	8004c68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ab0:	e0be      	b.n	8004c30 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2258      	movs	r2, #88	; 0x58
 8004ab6:	5a99      	ldrh	r1, [r3, r2]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	225a      	movs	r2, #90	; 0x5a
 8004abc:	5a9b      	ldrh	r3, [r3, r2]
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	208e      	movs	r0, #142	; 0x8e
 8004ac2:	183b      	adds	r3, r7, r0
 8004ac4:	1a8a      	subs	r2, r1, r2
 8004ac6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	225a      	movs	r2, #90	; 0x5a
 8004acc:	5a9b      	ldrh	r3, [r3, r2]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d100      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x442>
 8004ad4:	e0ae      	b.n	8004c34 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8004ad6:	183b      	adds	r3, r7, r0
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d100      	bne.n	8004ae0 <HAL_UART_IRQHandler+0x44c>
 8004ade:	e0a9      	b.n	8004c34 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae8:	2488      	movs	r4, #136	; 0x88
 8004aea:	193a      	adds	r2, r7, r4
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	2301      	movs	r3, #1
 8004af0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f383 8810 	msr	PRIMASK, r3
}
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	494f      	ldr	r1, [pc, #316]	; (8004c44 <HAL_UART_IRQHandler+0x5b0>)
 8004b06:	400a      	ands	r2, r1
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	193b      	adds	r3, r7, r4
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f383 8810 	msr	PRIMASK, r3
}
 8004b16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b18:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b1e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b20:	2484      	movs	r4, #132	; 0x84
 8004b22:	193a      	adds	r2, r7, r4
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	2301      	movs	r3, #1
 8004b28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f383 8810 	msr	PRIMASK, r3
}
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	438a      	bics	r2, r1
 8004b40:	609a      	str	r2, [r3, #8]
 8004b42:	193b      	adds	r3, r7, r4
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	f383 8810 	msr	PRIMASK, r3
}
 8004b4e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b62:	f3ef 8310 	mrs	r3, PRIMASK
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6a:	2480      	movs	r4, #128	; 0x80
 8004b6c:	193a      	adds	r2, r7, r4
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	2301      	movs	r3, #1
 8004b72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	f383 8810 	msr	PRIMASK, r3
}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2110      	movs	r1, #16
 8004b88:	438a      	bics	r2, r1
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	193b      	adds	r3, r7, r4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	f383 8810 	msr	PRIMASK, r3
}
 8004b98:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b9a:	183b      	adds	r3, r7, r0
 8004b9c:	881a      	ldrh	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	0011      	movs	r1, r2
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f000 f860 	bl	8004c68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ba8:	e044      	b.n	8004c34 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004baa:	23a4      	movs	r3, #164	; 0xa4
 8004bac:	18fb      	adds	r3, r7, r3
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	035b      	lsls	r3, r3, #13
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d010      	beq.n	8004bda <HAL_UART_IRQHandler+0x546>
 8004bb8:	239c      	movs	r3, #156	; 0x9c
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	2380      	movs	r3, #128	; 0x80
 8004bc0:	03db      	lsls	r3, r3, #15
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d009      	beq.n	8004bda <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2280      	movs	r2, #128	; 0x80
 8004bcc:	0352      	lsls	r2, r2, #13
 8004bce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f000 ff32 	bl	8005a3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bd8:	e02f      	b.n	8004c3a <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bda:	23a4      	movs	r3, #164	; 0xa4
 8004bdc:	18fb      	adds	r3, r7, r3
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2280      	movs	r2, #128	; 0x80
 8004be2:	4013      	ands	r3, r2
 8004be4:	d00f      	beq.n	8004c06 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004be6:	23a0      	movs	r3, #160	; 0xa0
 8004be8:	18fb      	adds	r3, r7, r3
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2280      	movs	r2, #128	; 0x80
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d01e      	beq.n	8004c38 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	0010      	movs	r0, r2
 8004c02:	4798      	blx	r3
    }
    return;
 8004c04:	e018      	b.n	8004c38 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c06:	23a4      	movs	r3, #164	; 0xa4
 8004c08:	18fb      	adds	r3, r7, r3
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2240      	movs	r2, #64	; 0x40
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d013      	beq.n	8004c3a <HAL_UART_IRQHandler+0x5a6>
 8004c12:	23a0      	movs	r3, #160	; 0xa0
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2240      	movs	r2, #64	; 0x40
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d00d      	beq.n	8004c3a <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f000 fd78 	bl	8005716 <UART_EndTransmit_IT>
    return;
 8004c26:	e008      	b.n	8004c3a <HAL_UART_IRQHandler+0x5a6>
      return;
 8004c28:	46c0      	nop			; (mov r8, r8)
 8004c2a:	e006      	b.n	8004c3a <HAL_UART_IRQHandler+0x5a6>
    return;
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	e004      	b.n	8004c3a <HAL_UART_IRQHandler+0x5a6>
      return;
 8004c30:	46c0      	nop			; (mov r8, r8)
 8004c32:	e002      	b.n	8004c3a <HAL_UART_IRQHandler+0x5a6>
      return;
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	e000      	b.n	8004c3a <HAL_UART_IRQHandler+0x5a6>
    return;
 8004c38:	46c0      	nop			; (mov r8, r8)
  }

}
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b02b      	add	sp, #172	; 0xac
 8004c3e:	bd90      	pop	{r4, r7, pc}
 8004c40:	fffffeff 	.word	0xfffffeff
 8004c44:	fffffedf 	.word	0xfffffedf

08004c48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c50:	46c0      	nop			; (mov r8, r8)
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b002      	add	sp, #8
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c60:	46c0      	nop			; (mov r8, r8)
 8004c62:	46bd      	mov	sp, r7
 8004c64:	b002      	add	sp, #8
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	000a      	movs	r2, r1
 8004c72:	1cbb      	adds	r3, r7, #2
 8004c74:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b002      	add	sp, #8
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c80:	b5b0      	push	{r4, r5, r7, lr}
 8004c82:	b08e      	sub	sp, #56	; 0x38
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c88:	231a      	movs	r3, #26
 8004c8a:	2218      	movs	r2, #24
 8004c8c:	4694      	mov	ip, r2
 8004c8e:	44bc      	add	ip, r7
 8004c90:	4463      	add	r3, ip
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4abc      	ldr	r2, [pc, #752]	; (8004fa8 <UART_SetConfig+0x328>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	0019      	movs	r1, r3
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	4ab8      	ldr	r2, [pc, #736]	; (8004fac <UART_SetConfig+0x32c>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	0019      	movs	r1, r3
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4ab2      	ldr	r2, [pc, #712]	; (8004fb0 <UART_SetConfig+0x330>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4aad      	ldr	r2, [pc, #692]	; (8004fb4 <UART_SetConfig+0x334>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	0019      	movs	r1, r3
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4aa9      	ldr	r2, [pc, #676]	; (8004fb8 <UART_SetConfig+0x338>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d136      	bne.n	8004d84 <UART_SetConfig+0x104>
 8004d16:	4ba9      	ldr	r3, [pc, #676]	; (8004fbc <UART_SetConfig+0x33c>)
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	220c      	movs	r2, #12
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2b0c      	cmp	r3, #12
 8004d20:	d020      	beq.n	8004d64 <UART_SetConfig+0xe4>
 8004d22:	d827      	bhi.n	8004d74 <UART_SetConfig+0xf4>
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d00d      	beq.n	8004d44 <UART_SetConfig+0xc4>
 8004d28:	d824      	bhi.n	8004d74 <UART_SetConfig+0xf4>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <UART_SetConfig+0xb4>
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d010      	beq.n	8004d54 <UART_SetConfig+0xd4>
 8004d32:	e01f      	b.n	8004d74 <UART_SetConfig+0xf4>
 8004d34:	231b      	movs	r3, #27
 8004d36:	2218      	movs	r2, #24
 8004d38:	4694      	mov	ip, r2
 8004d3a:	44bc      	add	ip, r7
 8004d3c:	4463      	add	r3, ip
 8004d3e:	2200      	movs	r2, #0
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	e06f      	b.n	8004e24 <UART_SetConfig+0x1a4>
 8004d44:	231b      	movs	r3, #27
 8004d46:	2218      	movs	r2, #24
 8004d48:	4694      	mov	ip, r2
 8004d4a:	44bc      	add	ip, r7
 8004d4c:	4463      	add	r3, ip
 8004d4e:	2202      	movs	r2, #2
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	e067      	b.n	8004e24 <UART_SetConfig+0x1a4>
 8004d54:	231b      	movs	r3, #27
 8004d56:	2218      	movs	r2, #24
 8004d58:	4694      	mov	ip, r2
 8004d5a:	44bc      	add	ip, r7
 8004d5c:	4463      	add	r3, ip
 8004d5e:	2204      	movs	r2, #4
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e05f      	b.n	8004e24 <UART_SetConfig+0x1a4>
 8004d64:	231b      	movs	r3, #27
 8004d66:	2218      	movs	r2, #24
 8004d68:	4694      	mov	ip, r2
 8004d6a:	44bc      	add	ip, r7
 8004d6c:	4463      	add	r3, ip
 8004d6e:	2208      	movs	r2, #8
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	e057      	b.n	8004e24 <UART_SetConfig+0x1a4>
 8004d74:	231b      	movs	r3, #27
 8004d76:	2218      	movs	r2, #24
 8004d78:	4694      	mov	ip, r2
 8004d7a:	44bc      	add	ip, r7
 8004d7c:	4463      	add	r3, ip
 8004d7e:	2210      	movs	r2, #16
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	e04f      	b.n	8004e24 <UART_SetConfig+0x1a4>
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a89      	ldr	r2, [pc, #548]	; (8004fb0 <UART_SetConfig+0x330>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d143      	bne.n	8004e16 <UART_SetConfig+0x196>
 8004d8e:	4b8b      	ldr	r3, [pc, #556]	; (8004fbc <UART_SetConfig+0x33c>)
 8004d90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d92:	23c0      	movs	r3, #192	; 0xc0
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	4013      	ands	r3, r2
 8004d98:	22c0      	movs	r2, #192	; 0xc0
 8004d9a:	0112      	lsls	r2, r2, #4
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d02a      	beq.n	8004df6 <UART_SetConfig+0x176>
 8004da0:	22c0      	movs	r2, #192	; 0xc0
 8004da2:	0112      	lsls	r2, r2, #4
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d82e      	bhi.n	8004e06 <UART_SetConfig+0x186>
 8004da8:	2280      	movs	r2, #128	; 0x80
 8004daa:	0112      	lsls	r2, r2, #4
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d012      	beq.n	8004dd6 <UART_SetConfig+0x156>
 8004db0:	2280      	movs	r2, #128	; 0x80
 8004db2:	0112      	lsls	r2, r2, #4
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d826      	bhi.n	8004e06 <UART_SetConfig+0x186>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <UART_SetConfig+0x146>
 8004dbc:	2280      	movs	r2, #128	; 0x80
 8004dbe:	00d2      	lsls	r2, r2, #3
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d010      	beq.n	8004de6 <UART_SetConfig+0x166>
 8004dc4:	e01f      	b.n	8004e06 <UART_SetConfig+0x186>
 8004dc6:	231b      	movs	r3, #27
 8004dc8:	2218      	movs	r2, #24
 8004dca:	4694      	mov	ip, r2
 8004dcc:	44bc      	add	ip, r7
 8004dce:	4463      	add	r3, ip
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	e026      	b.n	8004e24 <UART_SetConfig+0x1a4>
 8004dd6:	231b      	movs	r3, #27
 8004dd8:	2218      	movs	r2, #24
 8004dda:	4694      	mov	ip, r2
 8004ddc:	44bc      	add	ip, r7
 8004dde:	4463      	add	r3, ip
 8004de0:	2202      	movs	r2, #2
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	e01e      	b.n	8004e24 <UART_SetConfig+0x1a4>
 8004de6:	231b      	movs	r3, #27
 8004de8:	2218      	movs	r2, #24
 8004dea:	4694      	mov	ip, r2
 8004dec:	44bc      	add	ip, r7
 8004dee:	4463      	add	r3, ip
 8004df0:	2204      	movs	r2, #4
 8004df2:	701a      	strb	r2, [r3, #0]
 8004df4:	e016      	b.n	8004e24 <UART_SetConfig+0x1a4>
 8004df6:	231b      	movs	r3, #27
 8004df8:	2218      	movs	r2, #24
 8004dfa:	4694      	mov	ip, r2
 8004dfc:	44bc      	add	ip, r7
 8004dfe:	4463      	add	r3, ip
 8004e00:	2208      	movs	r2, #8
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	e00e      	b.n	8004e24 <UART_SetConfig+0x1a4>
 8004e06:	231b      	movs	r3, #27
 8004e08:	2218      	movs	r2, #24
 8004e0a:	4694      	mov	ip, r2
 8004e0c:	44bc      	add	ip, r7
 8004e0e:	4463      	add	r3, ip
 8004e10:	2210      	movs	r2, #16
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	e006      	b.n	8004e24 <UART_SetConfig+0x1a4>
 8004e16:	231b      	movs	r3, #27
 8004e18:	2218      	movs	r2, #24
 8004e1a:	4694      	mov	ip, r2
 8004e1c:	44bc      	add	ip, r7
 8004e1e:	4463      	add	r3, ip
 8004e20:	2210      	movs	r2, #16
 8004e22:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a61      	ldr	r2, [pc, #388]	; (8004fb0 <UART_SetConfig+0x330>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d000      	beq.n	8004e30 <UART_SetConfig+0x1b0>
 8004e2e:	e088      	b.n	8004f42 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e30:	231b      	movs	r3, #27
 8004e32:	2218      	movs	r2, #24
 8004e34:	4694      	mov	ip, r2
 8004e36:	44bc      	add	ip, r7
 8004e38:	4463      	add	r3, ip
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d01d      	beq.n	8004e7c <UART_SetConfig+0x1fc>
 8004e40:	dc20      	bgt.n	8004e84 <UART_SetConfig+0x204>
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d015      	beq.n	8004e72 <UART_SetConfig+0x1f2>
 8004e46:	dc1d      	bgt.n	8004e84 <UART_SetConfig+0x204>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <UART_SetConfig+0x1d2>
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d005      	beq.n	8004e5c <UART_SetConfig+0x1dc>
 8004e50:	e018      	b.n	8004e84 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e52:	f7fe fecb 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004e56:	0003      	movs	r3, r0
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e5a:	e01d      	b.n	8004e98 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e5c:	4b57      	ldr	r3, [pc, #348]	; (8004fbc <UART_SetConfig+0x33c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2210      	movs	r2, #16
 8004e62:	4013      	ands	r3, r2
 8004e64:	d002      	beq.n	8004e6c <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004e66:	4b56      	ldr	r3, [pc, #344]	; (8004fc0 <UART_SetConfig+0x340>)
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e6a:	e015      	b.n	8004e98 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8004e6c:	4b55      	ldr	r3, [pc, #340]	; (8004fc4 <UART_SetConfig+0x344>)
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e70:	e012      	b.n	8004e98 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e72:	f7fe fe0b 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 8004e76:	0003      	movs	r3, r0
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e7a:	e00d      	b.n	8004e98 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e7c:	2380      	movs	r3, #128	; 0x80
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e82:	e009      	b.n	8004e98 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004e88:	231a      	movs	r3, #26
 8004e8a:	2218      	movs	r2, #24
 8004e8c:	4694      	mov	ip, r2
 8004e8e:	44bc      	add	ip, r7
 8004e90:	4463      	add	r3, ip
 8004e92:	2201      	movs	r2, #1
 8004e94:	701a      	strb	r2, [r3, #0]
        break;
 8004e96:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d100      	bne.n	8004ea0 <UART_SetConfig+0x220>
 8004e9e:	e139      	b.n	8005114 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	0013      	movs	r3, r2
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	189b      	adds	r3, r3, r2
 8004eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d305      	bcc.n	8004ebc <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d907      	bls.n	8004ecc <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8004ebc:	231a      	movs	r3, #26
 8004ebe:	2218      	movs	r2, #24
 8004ec0:	4694      	mov	ip, r2
 8004ec2:	44bc      	add	ip, r7
 8004ec4:	4463      	add	r3, ip
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e123      	b.n	8005114 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	6939      	ldr	r1, [r7, #16]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	000b      	movs	r3, r1
 8004eda:	0e1b      	lsrs	r3, r3, #24
 8004edc:	0010      	movs	r0, r2
 8004ede:	0205      	lsls	r5, r0, #8
 8004ee0:	431d      	orrs	r5, r3
 8004ee2:	000b      	movs	r3, r1
 8004ee4:	021c      	lsls	r4, r3, #8
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	68b8      	ldr	r0, [r7, #8]
 8004ef4:	68f9      	ldr	r1, [r7, #12]
 8004ef6:	1900      	adds	r0, r0, r4
 8004ef8:	4169      	adcs	r1, r5
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	2300      	movs	r3, #0
 8004f02:	607b      	str	r3, [r7, #4]
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f7fb fa7e 	bl	8000408 <__aeabi_uldivmod>
 8004f0c:	0002      	movs	r2, r0
 8004f0e:	000b      	movs	r3, r1
 8004f10:	0013      	movs	r3, r2
 8004f12:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f16:	23c0      	movs	r3, #192	; 0xc0
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d309      	bcc.n	8004f32 <UART_SetConfig+0x2b2>
 8004f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	035b      	lsls	r3, r3, #13
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d204      	bcs.n	8004f32 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f2e:	60da      	str	r2, [r3, #12]
 8004f30:	e0f0      	b.n	8005114 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004f32:	231a      	movs	r3, #26
 8004f34:	2218      	movs	r2, #24
 8004f36:	4694      	mov	ip, r2
 8004f38:	44bc      	add	ip, r7
 8004f3a:	4463      	add	r3, ip
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	e0e8      	b.n	8005114 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	69da      	ldr	r2, [r3, #28]
 8004f46:	2380      	movs	r3, #128	; 0x80
 8004f48:	021b      	lsls	r3, r3, #8
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d000      	beq.n	8004f50 <UART_SetConfig+0x2d0>
 8004f4e:	e087      	b.n	8005060 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8004f50:	231b      	movs	r3, #27
 8004f52:	2218      	movs	r2, #24
 8004f54:	4694      	mov	ip, r2
 8004f56:	44bc      	add	ip, r7
 8004f58:	4463      	add	r3, ip
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d835      	bhi.n	8004fcc <UART_SetConfig+0x34c>
 8004f60:	009a      	lsls	r2, r3, #2
 8004f62:	4b19      	ldr	r3, [pc, #100]	; (8004fc8 <UART_SetConfig+0x348>)
 8004f64:	18d3      	adds	r3, r2, r3
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f6a:	f7fe fe3f 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004f6e:	0003      	movs	r3, r0
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f72:	e035      	b.n	8004fe0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f74:	f7fe fe50 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f7c:	e030      	b.n	8004fe0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <UART_SetConfig+0x33c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2210      	movs	r2, #16
 8004f84:	4013      	ands	r3, r2
 8004f86:	d002      	beq.n	8004f8e <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f88:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <UART_SetConfig+0x340>)
 8004f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f8c:	e028      	b.n	8004fe0 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8004f8e:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <UART_SetConfig+0x344>)
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f92:	e025      	b.n	8004fe0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f94:	f7fe fd7a 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 8004f98:	0003      	movs	r3, r0
 8004f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f9c:	e020      	b.n	8004fe0 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fa4:	e01c      	b.n	8004fe0 <UART_SetConfig+0x360>
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	efff69f3 	.word	0xefff69f3
 8004fac:	ffffcfff 	.word	0xffffcfff
 8004fb0:	40004800 	.word	0x40004800
 8004fb4:	fffff4ff 	.word	0xfffff4ff
 8004fb8:	40004400 	.word	0x40004400
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	003d0900 	.word	0x003d0900
 8004fc4:	00f42400 	.word	0x00f42400
 8004fc8:	08006470 	.word	0x08006470
      default:
        pclk = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004fd0:	231a      	movs	r3, #26
 8004fd2:	2218      	movs	r2, #24
 8004fd4:	4694      	mov	ip, r2
 8004fd6:	44bc      	add	ip, r7
 8004fd8:	4463      	add	r3, ip
 8004fda:	2201      	movs	r2, #1
 8004fdc:	701a      	strb	r2, [r3, #0]
        break;
 8004fde:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d100      	bne.n	8004fe8 <UART_SetConfig+0x368>
 8004fe6:	e095      	b.n	8005114 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	005a      	lsls	r2, r3, #1
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	18d2      	adds	r2, r2, r3
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	0010      	movs	r0, r2
 8004ffc:	f7fb f88e 	bl	800011c <__udivsi3>
 8005000:	0003      	movs	r3, r0
 8005002:	b29b      	uxth	r3, r3
 8005004:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	2b0f      	cmp	r3, #15
 800500a:	d921      	bls.n	8005050 <UART_SetConfig+0x3d0>
 800500c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800500e:	2380      	movs	r3, #128	; 0x80
 8005010:	025b      	lsls	r3, r3, #9
 8005012:	429a      	cmp	r2, r3
 8005014:	d21c      	bcs.n	8005050 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	b29a      	uxth	r2, r3
 800501a:	200e      	movs	r0, #14
 800501c:	2418      	movs	r4, #24
 800501e:	193b      	adds	r3, r7, r4
 8005020:	181b      	adds	r3, r3, r0
 8005022:	210f      	movs	r1, #15
 8005024:	438a      	bics	r2, r1
 8005026:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	085b      	lsrs	r3, r3, #1
 800502c:	b29b      	uxth	r3, r3
 800502e:	2207      	movs	r2, #7
 8005030:	4013      	ands	r3, r2
 8005032:	b299      	uxth	r1, r3
 8005034:	193b      	adds	r3, r7, r4
 8005036:	181b      	adds	r3, r3, r0
 8005038:	193a      	adds	r2, r7, r4
 800503a:	1812      	adds	r2, r2, r0
 800503c:	8812      	ldrh	r2, [r2, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	193a      	adds	r2, r7, r4
 8005048:	1812      	adds	r2, r2, r0
 800504a:	8812      	ldrh	r2, [r2, #0]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	e061      	b.n	8005114 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005050:	231a      	movs	r3, #26
 8005052:	2218      	movs	r2, #24
 8005054:	4694      	mov	ip, r2
 8005056:	44bc      	add	ip, r7
 8005058:	4463      	add	r3, ip
 800505a:	2201      	movs	r2, #1
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	e059      	b.n	8005114 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005060:	231b      	movs	r3, #27
 8005062:	2218      	movs	r2, #24
 8005064:	4694      	mov	ip, r2
 8005066:	44bc      	add	ip, r7
 8005068:	4463      	add	r3, ip
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b08      	cmp	r3, #8
 800506e:	d822      	bhi.n	80050b6 <UART_SetConfig+0x436>
 8005070:	009a      	lsls	r2, r3, #2
 8005072:	4b30      	ldr	r3, [pc, #192]	; (8005134 <UART_SetConfig+0x4b4>)
 8005074:	18d3      	adds	r3, r2, r3
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800507a:	f7fe fdb7 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 800507e:	0003      	movs	r3, r0
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005082:	e022      	b.n	80050ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005084:	f7fe fdc8 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 8005088:	0003      	movs	r3, r0
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800508c:	e01d      	b.n	80050ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800508e:	4b2a      	ldr	r3, [pc, #168]	; (8005138 <UART_SetConfig+0x4b8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2210      	movs	r2, #16
 8005094:	4013      	ands	r3, r2
 8005096:	d002      	beq.n	800509e <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005098:	4b28      	ldr	r3, [pc, #160]	; (800513c <UART_SetConfig+0x4bc>)
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800509c:	e015      	b.n	80050ca <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 800509e:	4b28      	ldr	r3, [pc, #160]	; (8005140 <UART_SetConfig+0x4c0>)
 80050a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050a2:	e012      	b.n	80050ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a4:	f7fe fcf2 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 80050a8:	0003      	movs	r3, r0
 80050aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050ac:	e00d      	b.n	80050ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ae:	2380      	movs	r3, #128	; 0x80
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050b4:	e009      	b.n	80050ca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80050ba:	231a      	movs	r3, #26
 80050bc:	2218      	movs	r2, #24
 80050be:	4694      	mov	ip, r2
 80050c0:	44bc      	add	ip, r7
 80050c2:	4463      	add	r3, ip
 80050c4:	2201      	movs	r2, #1
 80050c6:	701a      	strb	r2, [r3, #0]
        break;
 80050c8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80050ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d021      	beq.n	8005114 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	085a      	lsrs	r2, r3, #1
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	18d2      	adds	r2, r2, r3
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	0019      	movs	r1, r3
 80050e0:	0010      	movs	r0, r2
 80050e2:	f7fb f81b 	bl	800011c <__udivsi3>
 80050e6:	0003      	movs	r3, r0
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	2b0f      	cmp	r3, #15
 80050f0:	d909      	bls.n	8005106 <UART_SetConfig+0x486>
 80050f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050f4:	2380      	movs	r3, #128	; 0x80
 80050f6:	025b      	lsls	r3, r3, #9
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d204      	bcs.n	8005106 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005102:	60da      	str	r2, [r3, #12]
 8005104:	e006      	b.n	8005114 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005106:	231a      	movs	r3, #26
 8005108:	2218      	movs	r2, #24
 800510a:	4694      	mov	ip, r2
 800510c:	44bc      	add	ip, r7
 800510e:	4463      	add	r3, ip
 8005110:	2201      	movs	r2, #1
 8005112:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	2200      	movs	r2, #0
 8005118:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2200      	movs	r2, #0
 800511e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005120:	231a      	movs	r3, #26
 8005122:	2218      	movs	r2, #24
 8005124:	4694      	mov	ip, r2
 8005126:	44bc      	add	ip, r7
 8005128:	4463      	add	r3, ip
 800512a:	781b      	ldrb	r3, [r3, #0]
}
 800512c:	0018      	movs	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	b00e      	add	sp, #56	; 0x38
 8005132:	bdb0      	pop	{r4, r5, r7, pc}
 8005134:	08006494 	.word	0x08006494
 8005138:	40021000 	.word	0x40021000
 800513c:	003d0900 	.word	0x003d0900
 8005140:	00f42400 	.word	0x00f42400

08005144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	2201      	movs	r2, #1
 8005152:	4013      	ands	r3, r2
 8005154:	d00b      	beq.n	800516e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	4a4a      	ldr	r2, [pc, #296]	; (8005288 <UART_AdvFeatureConfig+0x144>)
 800515e:	4013      	ands	r3, r2
 8005160:	0019      	movs	r1, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	2202      	movs	r2, #2
 8005174:	4013      	ands	r3, r2
 8005176:	d00b      	beq.n	8005190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4a43      	ldr	r2, [pc, #268]	; (800528c <UART_AdvFeatureConfig+0x148>)
 8005180:	4013      	ands	r3, r2
 8005182:	0019      	movs	r1, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	2204      	movs	r2, #4
 8005196:	4013      	ands	r3, r2
 8005198:	d00b      	beq.n	80051b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	4a3b      	ldr	r2, [pc, #236]	; (8005290 <UART_AdvFeatureConfig+0x14c>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	0019      	movs	r1, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	2208      	movs	r2, #8
 80051b8:	4013      	ands	r3, r2
 80051ba:	d00b      	beq.n	80051d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	4a34      	ldr	r2, [pc, #208]	; (8005294 <UART_AdvFeatureConfig+0x150>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	0019      	movs	r1, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	2210      	movs	r2, #16
 80051da:	4013      	ands	r3, r2
 80051dc:	d00b      	beq.n	80051f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	4a2c      	ldr	r2, [pc, #176]	; (8005298 <UART_AdvFeatureConfig+0x154>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	0019      	movs	r1, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	2220      	movs	r2, #32
 80051fc:	4013      	ands	r3, r2
 80051fe:	d00b      	beq.n	8005218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	4a25      	ldr	r2, [pc, #148]	; (800529c <UART_AdvFeatureConfig+0x158>)
 8005208:	4013      	ands	r3, r2
 800520a:	0019      	movs	r1, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	2240      	movs	r2, #64	; 0x40
 800521e:	4013      	ands	r3, r2
 8005220:	d01d      	beq.n	800525e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <UART_AdvFeatureConfig+0x15c>)
 800522a:	4013      	ands	r3, r2
 800522c:	0019      	movs	r1, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	035b      	lsls	r3, r3, #13
 8005242:	429a      	cmp	r2, r3
 8005244:	d10b      	bne.n	800525e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4a15      	ldr	r2, [pc, #84]	; (80052a4 <UART_AdvFeatureConfig+0x160>)
 800524e:	4013      	ands	r3, r2
 8005250:	0019      	movs	r1, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	2280      	movs	r2, #128	; 0x80
 8005264:	4013      	ands	r3, r2
 8005266:	d00b      	beq.n	8005280 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	4a0e      	ldr	r2, [pc, #56]	; (80052a8 <UART_AdvFeatureConfig+0x164>)
 8005270:	4013      	ands	r3, r2
 8005272:	0019      	movs	r1, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	605a      	str	r2, [r3, #4]
  }
}
 8005280:	46c0      	nop			; (mov r8, r8)
 8005282:	46bd      	mov	sp, r7
 8005284:	b002      	add	sp, #8
 8005286:	bd80      	pop	{r7, pc}
 8005288:	fffdffff 	.word	0xfffdffff
 800528c:	fffeffff 	.word	0xfffeffff
 8005290:	fffbffff 	.word	0xfffbffff
 8005294:	ffff7fff 	.word	0xffff7fff
 8005298:	ffffefff 	.word	0xffffefff
 800529c:	ffffdfff 	.word	0xffffdfff
 80052a0:	ffefffff 	.word	0xffefffff
 80052a4:	ff9fffff 	.word	0xff9fffff
 80052a8:	fff7ffff 	.word	0xfff7ffff

080052ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2280      	movs	r2, #128	; 0x80
 80052b8:	2100      	movs	r1, #0
 80052ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052bc:	f7fc fde8 	bl	8001e90 <HAL_GetTick>
 80052c0:	0003      	movs	r3, r0
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2208      	movs	r2, #8
 80052cc:	4013      	ands	r3, r2
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d10c      	bne.n	80052ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2280      	movs	r2, #128	; 0x80
 80052d6:	0391      	lsls	r1, r2, #14
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	4a17      	ldr	r2, [pc, #92]	; (8005338 <UART_CheckIdleState+0x8c>)
 80052dc:	9200      	str	r2, [sp, #0]
 80052de:	2200      	movs	r2, #0
 80052e0:	f000 f82c 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 80052e4:	1e03      	subs	r3, r0, #0
 80052e6:	d001      	beq.n	80052ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e021      	b.n	8005330 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2204      	movs	r2, #4
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d10c      	bne.n	8005314 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2280      	movs	r2, #128	; 0x80
 80052fe:	03d1      	lsls	r1, r2, #15
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	4a0d      	ldr	r2, [pc, #52]	; (8005338 <UART_CheckIdleState+0x8c>)
 8005304:	9200      	str	r2, [sp, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	f000 f818 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 800530c:	1e03      	subs	r3, r0, #0
 800530e:	d001      	beq.n	8005314 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e00d      	b.n	8005330 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2220      	movs	r2, #32
 800531e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2274      	movs	r2, #116	; 0x74
 800532a:	2100      	movs	r1, #0
 800532c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	0018      	movs	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	b004      	add	sp, #16
 8005336:	bd80      	pop	{r7, pc}
 8005338:	01ffffff 	.word	0x01ffffff

0800533c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b094      	sub	sp, #80	; 0x50
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	1dfb      	adds	r3, r7, #7
 800534a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534c:	e0a3      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005350:	3301      	adds	r3, #1
 8005352:	d100      	bne.n	8005356 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005354:	e09f      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005356:	f7fc fd9b 	bl	8001e90 <HAL_GetTick>
 800535a:	0002      	movs	r2, r0
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005362:	429a      	cmp	r2, r3
 8005364:	d302      	bcc.n	800536c <UART_WaitOnFlagUntilTimeout+0x30>
 8005366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005368:	2b00      	cmp	r3, #0
 800536a:	d13d      	bne.n	80053e8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800536c:	f3ef 8310 	mrs	r3, PRIMASK
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005374:	647b      	str	r3, [r7, #68]	; 0x44
 8005376:	2301      	movs	r3, #1
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	f383 8810 	msr	PRIMASK, r3
}
 8005380:	46c0      	nop			; (mov r8, r8)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	494c      	ldr	r1, [pc, #304]	; (80054c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800538e:	400a      	ands	r2, r1
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005394:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	f383 8810 	msr	PRIMASK, r3
}
 800539c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800539e:	f3ef 8310 	mrs	r3, PRIMASK
 80053a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80053a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a6:	643b      	str	r3, [r7, #64]	; 0x40
 80053a8:	2301      	movs	r3, #1
 80053aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	f383 8810 	msr	PRIMASK, r3
}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2101      	movs	r1, #1
 80053c0:	438a      	bics	r2, r1
 80053c2:	609a      	str	r2, [r3, #8]
 80053c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ca:	f383 8810 	msr	PRIMASK, r3
}
 80053ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2220      	movs	r2, #32
 80053da:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2274      	movs	r2, #116	; 0x74
 80053e0:	2100      	movs	r1, #0
 80053e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e067      	b.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2204      	movs	r2, #4
 80053f0:	4013      	ands	r3, r2
 80053f2:	d050      	beq.n	8005496 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	2380      	movs	r3, #128	; 0x80
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	401a      	ands	r2, r3
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	429a      	cmp	r2, r3
 8005406:	d146      	bne.n	8005496 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2280      	movs	r2, #128	; 0x80
 800540e:	0112      	lsls	r2, r2, #4
 8005410:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005412:	f3ef 8310 	mrs	r3, PRIMASK
 8005416:	613b      	str	r3, [r7, #16]
  return(result);
 8005418:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800541a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800541c:	2301      	movs	r3, #1
 800541e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f383 8810 	msr	PRIMASK, r3
}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4923      	ldr	r1, [pc, #140]	; (80054c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005434:	400a      	ands	r2, r1
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800543a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	f383 8810 	msr	PRIMASK, r3
}
 8005442:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005444:	f3ef 8310 	mrs	r3, PRIMASK
 8005448:	61fb      	str	r3, [r7, #28]
  return(result);
 800544a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544c:	64bb      	str	r3, [r7, #72]	; 0x48
 800544e:	2301      	movs	r3, #1
 8005450:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	f383 8810 	msr	PRIMASK, r3
}
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2101      	movs	r1, #1
 8005466:	438a      	bics	r2, r1
 8005468:	609a      	str	r2, [r3, #8]
 800546a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	f383 8810 	msr	PRIMASK, r3
}
 8005474:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2220      	movs	r2, #32
 800547a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2280      	movs	r2, #128	; 0x80
 8005486:	2120      	movs	r1, #32
 8005488:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2274      	movs	r2, #116	; 0x74
 800548e:	2100      	movs	r1, #0
 8005490:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e010      	b.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	4013      	ands	r3, r2
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	425a      	negs	r2, r3
 80054a6:	4153      	adcs	r3, r2
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	001a      	movs	r2, r3
 80054ac:	1dfb      	adds	r3, r7, #7
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d100      	bne.n	80054b6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80054b4:	e74b      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	0018      	movs	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b014      	add	sp, #80	; 0x50
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	fffffe5f 	.word	0xfffffe5f

080054c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08c      	sub	sp, #48	; 0x30
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	1dbb      	adds	r3, r7, #6
 80054d0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	1dba      	adds	r2, r7, #6
 80054dc:	2158      	movs	r1, #88	; 0x58
 80054de:	8812      	ldrh	r2, [r2, #0]
 80054e0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1dba      	adds	r2, r7, #6
 80054e6:	215a      	movs	r1, #90	; 0x5a
 80054e8:	8812      	ldrh	r2, [r2, #0]
 80054ea:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	2380      	movs	r3, #128	; 0x80
 80054f8:	015b      	lsls	r3, r3, #5
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d10d      	bne.n	800551a <UART_Start_Receive_IT+0x56>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d104      	bne.n	8005510 <UART_Start_Receive_IT+0x4c>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	225c      	movs	r2, #92	; 0x5c
 800550a:	4943      	ldr	r1, [pc, #268]	; (8005618 <UART_Start_Receive_IT+0x154>)
 800550c:	5299      	strh	r1, [r3, r2]
 800550e:	e02e      	b.n	800556e <UART_Start_Receive_IT+0xaa>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	225c      	movs	r2, #92	; 0x5c
 8005514:	21ff      	movs	r1, #255	; 0xff
 8005516:	5299      	strh	r1, [r3, r2]
 8005518:	e029      	b.n	800556e <UART_Start_Receive_IT+0xaa>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10d      	bne.n	800553e <UART_Start_Receive_IT+0x7a>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d104      	bne.n	8005534 <UART_Start_Receive_IT+0x70>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	225c      	movs	r2, #92	; 0x5c
 800552e:	21ff      	movs	r1, #255	; 0xff
 8005530:	5299      	strh	r1, [r3, r2]
 8005532:	e01c      	b.n	800556e <UART_Start_Receive_IT+0xaa>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	225c      	movs	r2, #92	; 0x5c
 8005538:	217f      	movs	r1, #127	; 0x7f
 800553a:	5299      	strh	r1, [r3, r2]
 800553c:	e017      	b.n	800556e <UART_Start_Receive_IT+0xaa>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	2380      	movs	r3, #128	; 0x80
 8005544:	055b      	lsls	r3, r3, #21
 8005546:	429a      	cmp	r2, r3
 8005548:	d10d      	bne.n	8005566 <UART_Start_Receive_IT+0xa2>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <UART_Start_Receive_IT+0x98>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	225c      	movs	r2, #92	; 0x5c
 8005556:	217f      	movs	r1, #127	; 0x7f
 8005558:	5299      	strh	r1, [r3, r2]
 800555a:	e008      	b.n	800556e <UART_Start_Receive_IT+0xaa>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	225c      	movs	r2, #92	; 0x5c
 8005560:	213f      	movs	r1, #63	; 0x3f
 8005562:	5299      	strh	r1, [r3, r2]
 8005564:	e003      	b.n	800556e <UART_Start_Receive_IT+0xaa>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	225c      	movs	r2, #92	; 0x5c
 800556a:	2100      	movs	r1, #0
 800556c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2280      	movs	r2, #128	; 0x80
 8005572:	2100      	movs	r1, #0
 8005574:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2222      	movs	r2, #34	; 0x22
 800557a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800557c:	f3ef 8310 	mrs	r3, PRIMASK
 8005580:	61fb      	str	r3, [r7, #28]
  return(result);
 8005582:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005586:	2301      	movs	r3, #1
 8005588:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	f383 8810 	msr	PRIMASK, r3
}
 8005590:	46c0      	nop			; (mov r8, r8)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2101      	movs	r1, #1
 800559e:	430a      	orrs	r2, r1
 80055a0:	609a      	str	r2, [r3, #8]
 80055a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	f383 8810 	msr	PRIMASK, r3
}
 80055ac:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	2380      	movs	r3, #128	; 0x80
 80055b4:	015b      	lsls	r3, r3, #5
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d107      	bne.n	80055ca <UART_Start_Receive_IT+0x106>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d103      	bne.n	80055ca <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <UART_Start_Receive_IT+0x158>)
 80055c6:	665a      	str	r2, [r3, #100]	; 0x64
 80055c8:	e002      	b.n	80055d0 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4a14      	ldr	r2, [pc, #80]	; (8005620 <UART_Start_Receive_IT+0x15c>)
 80055ce:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2274      	movs	r2, #116	; 0x74
 80055d4:	2100      	movs	r1, #0
 80055d6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d8:	f3ef 8310 	mrs	r3, PRIMASK
 80055dc:	613b      	str	r3, [r7, #16]
  return(result);
 80055de:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80055e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e2:	2301      	movs	r3, #1
 80055e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f383 8810 	msr	PRIMASK, r3
}
 80055ec:	46c0      	nop			; (mov r8, r8)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2190      	movs	r1, #144	; 0x90
 80055fa:	0049      	lsls	r1, r1, #1
 80055fc:	430a      	orrs	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	f383 8810 	msr	PRIMASK, r3
}
 800560a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	0018      	movs	r0, r3
 8005610:	46bd      	mov	sp, r7
 8005612:	b00c      	add	sp, #48	; 0x30
 8005614:	bd80      	pop	{r7, pc}
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	000001ff 	.word	0x000001ff
 800561c:	080058d5 	.word	0x080058d5
 8005620:	0800576d 	.word	0x0800576d

08005624 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08e      	sub	sp, #56	; 0x38
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800562c:	f3ef 8310 	mrs	r3, PRIMASK
 8005630:	617b      	str	r3, [r7, #20]
  return(result);
 8005632:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005634:	637b      	str	r3, [r7, #52]	; 0x34
 8005636:	2301      	movs	r3, #1
 8005638:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	f383 8810 	msr	PRIMASK, r3
}
 8005640:	46c0      	nop			; (mov r8, r8)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4925      	ldr	r1, [pc, #148]	; (80056e4 <UART_EndRxTransfer+0xc0>)
 800564e:	400a      	ands	r2, r1
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005654:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	f383 8810 	msr	PRIMASK, r3
}
 800565c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800565e:	f3ef 8310 	mrs	r3, PRIMASK
 8005662:	623b      	str	r3, [r7, #32]
  return(result);
 8005664:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005666:	633b      	str	r3, [r7, #48]	; 0x30
 8005668:	2301      	movs	r3, #1
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	f383 8810 	msr	PRIMASK, r3
}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2101      	movs	r1, #1
 8005680:	438a      	bics	r2, r1
 8005682:	609a      	str	r2, [r3, #8]
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	f383 8810 	msr	PRIMASK, r3
}
 800568e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005694:	2b01      	cmp	r3, #1
 8005696:	d118      	bne.n	80056ca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005698:	f3ef 8310 	mrs	r3, PRIMASK
 800569c:	60bb      	str	r3, [r7, #8]
  return(result);
 800569e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a2:	2301      	movs	r3, #1
 80056a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f383 8810 	msr	PRIMASK, r3
}
 80056ac:	46c0      	nop			; (mov r8, r8)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2110      	movs	r1, #16
 80056ba:	438a      	bics	r2, r1
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f383 8810 	msr	PRIMASK, r3
}
 80056c8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	665a      	str	r2, [r3, #100]	; 0x64
}
 80056dc:	46c0      	nop			; (mov r8, r8)
 80056de:	46bd      	mov	sp, r7
 80056e0:	b00e      	add	sp, #56	; 0x38
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	fffffedf 	.word	0xfffffedf

080056e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	225a      	movs	r2, #90	; 0x5a
 80056fa:	2100      	movs	r1, #0
 80056fc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2252      	movs	r2, #82	; 0x52
 8005702:	2100      	movs	r1, #0
 8005704:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	0018      	movs	r0, r3
 800570a:	f7ff faa5 	bl	8004c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	46bd      	mov	sp, r7
 8005712:	b004      	add	sp, #16
 8005714:	bd80      	pop	{r7, pc}

08005716 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b086      	sub	sp, #24
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571e:	f3ef 8310 	mrs	r3, PRIMASK
 8005722:	60bb      	str	r3, [r7, #8]
  return(result);
 8005724:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	2301      	movs	r3, #1
 800572a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f383 8810 	msr	PRIMASK, r3
}
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2140      	movs	r1, #64	; 0x40
 8005740:	438a      	bics	r2, r1
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f383 8810 	msr	PRIMASK, r3
}
 800574e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	0018      	movs	r0, r3
 8005760:	f7ff fa72 	bl	8004c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005764:	46c0      	nop			; (mov r8, r8)
 8005766:	46bd      	mov	sp, r7
 8005768:	b006      	add	sp, #24
 800576a:	bd80      	pop	{r7, pc}

0800576c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b090      	sub	sp, #64	; 0x40
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005774:	203e      	movs	r0, #62	; 0x3e
 8005776:	183b      	adds	r3, r7, r0
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	215c      	movs	r1, #92	; 0x5c
 800577c:	5a52      	ldrh	r2, [r2, r1]
 800577e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005784:	2b22      	cmp	r3, #34	; 0x22
 8005786:	d000      	beq.n	800578a <UART_RxISR_8BIT+0x1e>
 8005788:	e095      	b.n	80058b6 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005790:	213c      	movs	r1, #60	; 0x3c
 8005792:	187b      	adds	r3, r7, r1
 8005794:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005796:	187b      	adds	r3, r7, r1
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	b2da      	uxtb	r2, r3
 800579c:	183b      	adds	r3, r7, r0
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b2d9      	uxtb	r1, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a6:	400a      	ands	r2, r1
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	225a      	movs	r2, #90	; 0x5a
 80057ba:	5a9b      	ldrh	r3, [r3, r2]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b299      	uxth	r1, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	225a      	movs	r2, #90	; 0x5a
 80057c6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	225a      	movs	r2, #90	; 0x5a
 80057cc:	5a9b      	ldrh	r3, [r3, r2]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d178      	bne.n	80058c6 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057d4:	f3ef 8310 	mrs	r3, PRIMASK
 80057d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80057da:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80057de:	2301      	movs	r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f383 8810 	msr	PRIMASK, r3
}
 80057e8:	46c0      	nop			; (mov r8, r8)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4936      	ldr	r1, [pc, #216]	; (80058d0 <UART_RxISR_8BIT+0x164>)
 80057f6:	400a      	ands	r2, r1
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	f383 8810 	msr	PRIMASK, r3
}
 8005804:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005806:	f3ef 8310 	mrs	r3, PRIMASK
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	637b      	str	r3, [r7, #52]	; 0x34
 8005810:	2301      	movs	r3, #1
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	f383 8810 	msr	PRIMASK, r3
}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2101      	movs	r1, #1
 8005828:	438a      	bics	r2, r1
 800582a:	609a      	str	r2, [r3, #8]
 800582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005832:	f383 8810 	msr	PRIMASK, r3
}
 8005836:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005848:	2b01      	cmp	r3, #1
 800584a:	d12f      	bne.n	80058ac <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005852:	f3ef 8310 	mrs	r3, PRIMASK
 8005856:	60fb      	str	r3, [r7, #12]
  return(result);
 8005858:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585a:	633b      	str	r3, [r7, #48]	; 0x30
 800585c:	2301      	movs	r3, #1
 800585e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f383 8810 	msr	PRIMASK, r3
}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2110      	movs	r1, #16
 8005874:	438a      	bics	r2, r1
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f383 8810 	msr	PRIMASK, r3
}
 8005882:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	2210      	movs	r2, #16
 800588c:	4013      	ands	r3, r2
 800588e:	2b10      	cmp	r3, #16
 8005890:	d103      	bne.n	800589a <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2210      	movs	r2, #16
 8005898:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2258      	movs	r2, #88	; 0x58
 800589e:	5a9a      	ldrh	r2, [r3, r2]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	0011      	movs	r1, r2
 80058a4:	0018      	movs	r0, r3
 80058a6:	f7ff f9df 	bl	8004c68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058aa:	e00c      	b.n	80058c6 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7fc f884 	bl	80019bc <HAL_UART_RxCpltCallback>
}
 80058b4:	e007      	b.n	80058c6 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2108      	movs	r1, #8
 80058c2:	430a      	orrs	r2, r1
 80058c4:	619a      	str	r2, [r3, #24]
}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	46bd      	mov	sp, r7
 80058ca:	b010      	add	sp, #64	; 0x40
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	fffffedf 	.word	0xfffffedf

080058d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b090      	sub	sp, #64	; 0x40
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058dc:	203e      	movs	r0, #62	; 0x3e
 80058de:	183b      	adds	r3, r7, r0
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	215c      	movs	r1, #92	; 0x5c
 80058e4:	5a52      	ldrh	r2, [r2, r1]
 80058e6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ec:	2b22      	cmp	r3, #34	; 0x22
 80058ee:	d000      	beq.n	80058f2 <UART_RxISR_16BIT+0x1e>
 80058f0:	e095      	b.n	8005a1e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058f8:	213c      	movs	r1, #60	; 0x3c
 80058fa:	187b      	adds	r3, r7, r1
 80058fc:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005902:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005904:	187b      	adds	r3, r7, r1
 8005906:	183a      	adds	r2, r7, r0
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	8812      	ldrh	r2, [r2, #0]
 800590c:	4013      	ands	r3, r2
 800590e:	b29a      	uxth	r2, r3
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005918:	1c9a      	adds	r2, r3, #2
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	225a      	movs	r2, #90	; 0x5a
 8005922:	5a9b      	ldrh	r3, [r3, r2]
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b299      	uxth	r1, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	225a      	movs	r2, #90	; 0x5a
 800592e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	225a      	movs	r2, #90	; 0x5a
 8005934:	5a9b      	ldrh	r3, [r3, r2]
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d178      	bne.n	8005a2e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593c:	f3ef 8310 	mrs	r3, PRIMASK
 8005940:	617b      	str	r3, [r7, #20]
  return(result);
 8005942:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
 8005946:	2301      	movs	r3, #1
 8005948:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	f383 8810 	msr	PRIMASK, r3
}
 8005950:	46c0      	nop			; (mov r8, r8)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4936      	ldr	r1, [pc, #216]	; (8005a38 <UART_RxISR_16BIT+0x164>)
 800595e:	400a      	ands	r2, r1
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005964:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	f383 8810 	msr	PRIMASK, r3
}
 800596c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800596e:	f3ef 8310 	mrs	r3, PRIMASK
 8005972:	623b      	str	r3, [r7, #32]
  return(result);
 8005974:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005976:	633b      	str	r3, [r7, #48]	; 0x30
 8005978:	2301      	movs	r3, #1
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	f383 8810 	msr	PRIMASK, r3
}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2101      	movs	r1, #1
 8005990:	438a      	bics	r2, r1
 8005992:	609a      	str	r2, [r3, #8]
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	f383 8810 	msr	PRIMASK, r3
}
 800599e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d12f      	bne.n	8005a14 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ba:	f3ef 8310 	mrs	r3, PRIMASK
 80059be:	60bb      	str	r3, [r7, #8]
  return(result);
 80059c0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059c4:	2301      	movs	r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f383 8810 	msr	PRIMASK, r3
}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2110      	movs	r1, #16
 80059dc:	438a      	bics	r2, r1
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f383 8810 	msr	PRIMASK, r3
}
 80059ea:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	2210      	movs	r2, #16
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b10      	cmp	r3, #16
 80059f8:	d103      	bne.n	8005a02 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2210      	movs	r2, #16
 8005a00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2258      	movs	r2, #88	; 0x58
 8005a06:	5a9a      	ldrh	r2, [r3, r2]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	0011      	movs	r1, r2
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f7ff f92b 	bl	8004c68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a12:	e00c      	b.n	8005a2e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	0018      	movs	r0, r3
 8005a18:	f7fb ffd0 	bl	80019bc <HAL_UART_RxCpltCallback>
}
 8005a1c:	e007      	b.n	8005a2e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2108      	movs	r1, #8
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	619a      	str	r2, [r3, #24]
}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	46bd      	mov	sp, r7
 8005a32:	b010      	add	sp, #64	; 0x40
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	fffffedf 	.word	0xfffffedf

08005a3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a44:	46c0      	nop			; (mov r8, r8)
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b002      	add	sp, #8
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <__errno>:
 8005a4c:	4b01      	ldr	r3, [pc, #4]	; (8005a54 <__errno+0x8>)
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	4770      	bx	lr
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	2000000c 	.word	0x2000000c

08005a58 <__libc_init_array>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	2600      	movs	r6, #0
 8005a5c:	4d0c      	ldr	r5, [pc, #48]	; (8005a90 <__libc_init_array+0x38>)
 8005a5e:	4c0d      	ldr	r4, [pc, #52]	; (8005a94 <__libc_init_array+0x3c>)
 8005a60:	1b64      	subs	r4, r4, r5
 8005a62:	10a4      	asrs	r4, r4, #2
 8005a64:	42a6      	cmp	r6, r4
 8005a66:	d109      	bne.n	8005a7c <__libc_init_array+0x24>
 8005a68:	2600      	movs	r6, #0
 8005a6a:	f000 fc5d 	bl	8006328 <_init>
 8005a6e:	4d0a      	ldr	r5, [pc, #40]	; (8005a98 <__libc_init_array+0x40>)
 8005a70:	4c0a      	ldr	r4, [pc, #40]	; (8005a9c <__libc_init_array+0x44>)
 8005a72:	1b64      	subs	r4, r4, r5
 8005a74:	10a4      	asrs	r4, r4, #2
 8005a76:	42a6      	cmp	r6, r4
 8005a78:	d105      	bne.n	8005a86 <__libc_init_array+0x2e>
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	00b3      	lsls	r3, r6, #2
 8005a7e:	58eb      	ldr	r3, [r5, r3]
 8005a80:	4798      	blx	r3
 8005a82:	3601      	adds	r6, #1
 8005a84:	e7ee      	b.n	8005a64 <__libc_init_array+0xc>
 8005a86:	00b3      	lsls	r3, r6, #2
 8005a88:	58eb      	ldr	r3, [r5, r3]
 8005a8a:	4798      	blx	r3
 8005a8c:	3601      	adds	r6, #1
 8005a8e:	e7f2      	b.n	8005a76 <__libc_init_array+0x1e>
 8005a90:	080064f4 	.word	0x080064f4
 8005a94:	080064f4 	.word	0x080064f4
 8005a98:	080064f4 	.word	0x080064f4
 8005a9c:	080064f8 	.word	0x080064f8

08005aa0 <memset>:
 8005aa0:	0003      	movs	r3, r0
 8005aa2:	1882      	adds	r2, r0, r2
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d100      	bne.n	8005aaa <memset+0xa>
 8005aa8:	4770      	bx	lr
 8005aaa:	7019      	strb	r1, [r3, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	e7f9      	b.n	8005aa4 <memset+0x4>

08005ab0 <siprintf>:
 8005ab0:	b40e      	push	{r1, r2, r3}
 8005ab2:	b500      	push	{lr}
 8005ab4:	490b      	ldr	r1, [pc, #44]	; (8005ae4 <siprintf+0x34>)
 8005ab6:	b09c      	sub	sp, #112	; 0x70
 8005ab8:	ab1d      	add	r3, sp, #116	; 0x74
 8005aba:	9002      	str	r0, [sp, #8]
 8005abc:	9006      	str	r0, [sp, #24]
 8005abe:	9107      	str	r1, [sp, #28]
 8005ac0:	9104      	str	r1, [sp, #16]
 8005ac2:	4809      	ldr	r0, [pc, #36]	; (8005ae8 <siprintf+0x38>)
 8005ac4:	4909      	ldr	r1, [pc, #36]	; (8005aec <siprintf+0x3c>)
 8005ac6:	cb04      	ldmia	r3!, {r2}
 8005ac8:	9105      	str	r1, [sp, #20]
 8005aca:	6800      	ldr	r0, [r0, #0]
 8005acc:	a902      	add	r1, sp, #8
 8005ace:	9301      	str	r3, [sp, #4]
 8005ad0:	f000 f886 	bl	8005be0 <_svfiprintf_r>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	9a02      	ldr	r2, [sp, #8]
 8005ad8:	7013      	strb	r3, [r2, #0]
 8005ada:	b01c      	add	sp, #112	; 0x70
 8005adc:	bc08      	pop	{r3}
 8005ade:	b003      	add	sp, #12
 8005ae0:	4718      	bx	r3
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	7fffffff 	.word	0x7fffffff
 8005ae8:	2000000c 	.word	0x2000000c
 8005aec:	ffff0208 	.word	0xffff0208

08005af0 <strstr>:
 8005af0:	780a      	ldrb	r2, [r1, #0]
 8005af2:	b530      	push	{r4, r5, lr}
 8005af4:	2a00      	cmp	r2, #0
 8005af6:	d10c      	bne.n	8005b12 <strstr+0x22>
 8005af8:	bd30      	pop	{r4, r5, pc}
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d108      	bne.n	8005b10 <strstr+0x20>
 8005afe:	2301      	movs	r3, #1
 8005b00:	5ccc      	ldrb	r4, [r1, r3]
 8005b02:	2c00      	cmp	r4, #0
 8005b04:	d0f8      	beq.n	8005af8 <strstr+0x8>
 8005b06:	5cc5      	ldrb	r5, [r0, r3]
 8005b08:	42a5      	cmp	r5, r4
 8005b0a:	d101      	bne.n	8005b10 <strstr+0x20>
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	e7f7      	b.n	8005b00 <strstr+0x10>
 8005b10:	3001      	adds	r0, #1
 8005b12:	7803      	ldrb	r3, [r0, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1f0      	bne.n	8005afa <strstr+0xa>
 8005b18:	0018      	movs	r0, r3
 8005b1a:	e7ed      	b.n	8005af8 <strstr+0x8>

08005b1c <__ssputs_r>:
 8005b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b1e:	688e      	ldr	r6, [r1, #8]
 8005b20:	b085      	sub	sp, #20
 8005b22:	0007      	movs	r7, r0
 8005b24:	000c      	movs	r4, r1
 8005b26:	9203      	str	r2, [sp, #12]
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	429e      	cmp	r6, r3
 8005b2c:	d83c      	bhi.n	8005ba8 <__ssputs_r+0x8c>
 8005b2e:	2390      	movs	r3, #144	; 0x90
 8005b30:	898a      	ldrh	r2, [r1, #12]
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	421a      	tst	r2, r3
 8005b36:	d034      	beq.n	8005ba2 <__ssputs_r+0x86>
 8005b38:	2503      	movs	r5, #3
 8005b3a:	6909      	ldr	r1, [r1, #16]
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	1a5b      	subs	r3, r3, r1
 8005b40:	9302      	str	r3, [sp, #8]
 8005b42:	6963      	ldr	r3, [r4, #20]
 8005b44:	9802      	ldr	r0, [sp, #8]
 8005b46:	435d      	muls	r5, r3
 8005b48:	0feb      	lsrs	r3, r5, #31
 8005b4a:	195d      	adds	r5, r3, r5
 8005b4c:	9b01      	ldr	r3, [sp, #4]
 8005b4e:	106d      	asrs	r5, r5, #1
 8005b50:	3301      	adds	r3, #1
 8005b52:	181b      	adds	r3, r3, r0
 8005b54:	42ab      	cmp	r3, r5
 8005b56:	d900      	bls.n	8005b5a <__ssputs_r+0x3e>
 8005b58:	001d      	movs	r5, r3
 8005b5a:	0553      	lsls	r3, r2, #21
 8005b5c:	d532      	bpl.n	8005bc4 <__ssputs_r+0xa8>
 8005b5e:	0029      	movs	r1, r5
 8005b60:	0038      	movs	r0, r7
 8005b62:	f000 fb31 	bl	80061c8 <_malloc_r>
 8005b66:	1e06      	subs	r6, r0, #0
 8005b68:	d109      	bne.n	8005b7e <__ssputs_r+0x62>
 8005b6a:	230c      	movs	r3, #12
 8005b6c:	603b      	str	r3, [r7, #0]
 8005b6e:	2340      	movs	r3, #64	; 0x40
 8005b70:	2001      	movs	r0, #1
 8005b72:	89a2      	ldrh	r2, [r4, #12]
 8005b74:	4240      	negs	r0, r0
 8005b76:	4313      	orrs	r3, r2
 8005b78:	81a3      	strh	r3, [r4, #12]
 8005b7a:	b005      	add	sp, #20
 8005b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b7e:	9a02      	ldr	r2, [sp, #8]
 8005b80:	6921      	ldr	r1, [r4, #16]
 8005b82:	f000 faba 	bl	80060fa <memcpy>
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	4a14      	ldr	r2, [pc, #80]	; (8005bdc <__ssputs_r+0xc0>)
 8005b8a:	401a      	ands	r2, r3
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	81a3      	strh	r3, [r4, #12]
 8005b92:	9b02      	ldr	r3, [sp, #8]
 8005b94:	6126      	str	r6, [r4, #16]
 8005b96:	18f6      	adds	r6, r6, r3
 8005b98:	6026      	str	r6, [r4, #0]
 8005b9a:	6165      	str	r5, [r4, #20]
 8005b9c:	9e01      	ldr	r6, [sp, #4]
 8005b9e:	1aed      	subs	r5, r5, r3
 8005ba0:	60a5      	str	r5, [r4, #8]
 8005ba2:	9b01      	ldr	r3, [sp, #4]
 8005ba4:	429e      	cmp	r6, r3
 8005ba6:	d900      	bls.n	8005baa <__ssputs_r+0x8e>
 8005ba8:	9e01      	ldr	r6, [sp, #4]
 8005baa:	0032      	movs	r2, r6
 8005bac:	9903      	ldr	r1, [sp, #12]
 8005bae:	6820      	ldr	r0, [r4, #0]
 8005bb0:	f000 faac 	bl	800610c <memmove>
 8005bb4:	68a3      	ldr	r3, [r4, #8]
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	1b9b      	subs	r3, r3, r6
 8005bba:	60a3      	str	r3, [r4, #8]
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	199e      	adds	r6, r3, r6
 8005bc0:	6026      	str	r6, [r4, #0]
 8005bc2:	e7da      	b.n	8005b7a <__ssputs_r+0x5e>
 8005bc4:	002a      	movs	r2, r5
 8005bc6:	0038      	movs	r0, r7
 8005bc8:	f000 fb5c 	bl	8006284 <_realloc_r>
 8005bcc:	1e06      	subs	r6, r0, #0
 8005bce:	d1e0      	bne.n	8005b92 <__ssputs_r+0x76>
 8005bd0:	0038      	movs	r0, r7
 8005bd2:	6921      	ldr	r1, [r4, #16]
 8005bd4:	f000 faae 	bl	8006134 <_free_r>
 8005bd8:	e7c7      	b.n	8005b6a <__ssputs_r+0x4e>
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	fffffb7f 	.word	0xfffffb7f

08005be0 <_svfiprintf_r>:
 8005be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be2:	b0a1      	sub	sp, #132	; 0x84
 8005be4:	9003      	str	r0, [sp, #12]
 8005be6:	001d      	movs	r5, r3
 8005be8:	898b      	ldrh	r3, [r1, #12]
 8005bea:	000f      	movs	r7, r1
 8005bec:	0016      	movs	r6, r2
 8005bee:	061b      	lsls	r3, r3, #24
 8005bf0:	d511      	bpl.n	8005c16 <_svfiprintf_r+0x36>
 8005bf2:	690b      	ldr	r3, [r1, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10e      	bne.n	8005c16 <_svfiprintf_r+0x36>
 8005bf8:	2140      	movs	r1, #64	; 0x40
 8005bfa:	f000 fae5 	bl	80061c8 <_malloc_r>
 8005bfe:	6038      	str	r0, [r7, #0]
 8005c00:	6138      	str	r0, [r7, #16]
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d105      	bne.n	8005c12 <_svfiprintf_r+0x32>
 8005c06:	230c      	movs	r3, #12
 8005c08:	9a03      	ldr	r2, [sp, #12]
 8005c0a:	3801      	subs	r0, #1
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	b021      	add	sp, #132	; 0x84
 8005c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c12:	2340      	movs	r3, #64	; 0x40
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	2300      	movs	r3, #0
 8005c18:	ac08      	add	r4, sp, #32
 8005c1a:	6163      	str	r3, [r4, #20]
 8005c1c:	3320      	adds	r3, #32
 8005c1e:	7663      	strb	r3, [r4, #25]
 8005c20:	3310      	adds	r3, #16
 8005c22:	76a3      	strb	r3, [r4, #26]
 8005c24:	9507      	str	r5, [sp, #28]
 8005c26:	0035      	movs	r5, r6
 8005c28:	782b      	ldrb	r3, [r5, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <_svfiprintf_r+0x52>
 8005c2e:	2b25      	cmp	r3, #37	; 0x25
 8005c30:	d147      	bne.n	8005cc2 <_svfiprintf_r+0xe2>
 8005c32:	1bab      	subs	r3, r5, r6
 8005c34:	9305      	str	r3, [sp, #20]
 8005c36:	42b5      	cmp	r5, r6
 8005c38:	d00c      	beq.n	8005c54 <_svfiprintf_r+0x74>
 8005c3a:	0032      	movs	r2, r6
 8005c3c:	0039      	movs	r1, r7
 8005c3e:	9803      	ldr	r0, [sp, #12]
 8005c40:	f7ff ff6c 	bl	8005b1c <__ssputs_r>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d100      	bne.n	8005c4a <_svfiprintf_r+0x6a>
 8005c48:	e0ae      	b.n	8005da8 <_svfiprintf_r+0x1c8>
 8005c4a:	6962      	ldr	r2, [r4, #20]
 8005c4c:	9b05      	ldr	r3, [sp, #20]
 8005c4e:	4694      	mov	ip, r2
 8005c50:	4463      	add	r3, ip
 8005c52:	6163      	str	r3, [r4, #20]
 8005c54:	782b      	ldrb	r3, [r5, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d100      	bne.n	8005c5c <_svfiprintf_r+0x7c>
 8005c5a:	e0a5      	b.n	8005da8 <_svfiprintf_r+0x1c8>
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	2300      	movs	r3, #0
 8005c60:	4252      	negs	r2, r2
 8005c62:	6062      	str	r2, [r4, #4]
 8005c64:	a904      	add	r1, sp, #16
 8005c66:	3254      	adds	r2, #84	; 0x54
 8005c68:	1852      	adds	r2, r2, r1
 8005c6a:	1c6e      	adds	r6, r5, #1
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	60e3      	str	r3, [r4, #12]
 8005c70:	60a3      	str	r3, [r4, #8]
 8005c72:	7013      	strb	r3, [r2, #0]
 8005c74:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c76:	2205      	movs	r2, #5
 8005c78:	7831      	ldrb	r1, [r6, #0]
 8005c7a:	4854      	ldr	r0, [pc, #336]	; (8005dcc <_svfiprintf_r+0x1ec>)
 8005c7c:	f000 fa32 	bl	80060e4 <memchr>
 8005c80:	1c75      	adds	r5, r6, #1
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d11f      	bne.n	8005cc6 <_svfiprintf_r+0xe6>
 8005c86:	6822      	ldr	r2, [r4, #0]
 8005c88:	06d3      	lsls	r3, r2, #27
 8005c8a:	d504      	bpl.n	8005c96 <_svfiprintf_r+0xb6>
 8005c8c:	2353      	movs	r3, #83	; 0x53
 8005c8e:	a904      	add	r1, sp, #16
 8005c90:	185b      	adds	r3, r3, r1
 8005c92:	2120      	movs	r1, #32
 8005c94:	7019      	strb	r1, [r3, #0]
 8005c96:	0713      	lsls	r3, r2, #28
 8005c98:	d504      	bpl.n	8005ca4 <_svfiprintf_r+0xc4>
 8005c9a:	2353      	movs	r3, #83	; 0x53
 8005c9c:	a904      	add	r1, sp, #16
 8005c9e:	185b      	adds	r3, r3, r1
 8005ca0:	212b      	movs	r1, #43	; 0x2b
 8005ca2:	7019      	strb	r1, [r3, #0]
 8005ca4:	7833      	ldrb	r3, [r6, #0]
 8005ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca8:	d016      	beq.n	8005cd8 <_svfiprintf_r+0xf8>
 8005caa:	0035      	movs	r5, r6
 8005cac:	2100      	movs	r1, #0
 8005cae:	200a      	movs	r0, #10
 8005cb0:	68e3      	ldr	r3, [r4, #12]
 8005cb2:	782a      	ldrb	r2, [r5, #0]
 8005cb4:	1c6e      	adds	r6, r5, #1
 8005cb6:	3a30      	subs	r2, #48	; 0x30
 8005cb8:	2a09      	cmp	r2, #9
 8005cba:	d94e      	bls.n	8005d5a <_svfiprintf_r+0x17a>
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	d111      	bne.n	8005ce4 <_svfiprintf_r+0x104>
 8005cc0:	e017      	b.n	8005cf2 <_svfiprintf_r+0x112>
 8005cc2:	3501      	adds	r5, #1
 8005cc4:	e7b0      	b.n	8005c28 <_svfiprintf_r+0x48>
 8005cc6:	4b41      	ldr	r3, [pc, #260]	; (8005dcc <_svfiprintf_r+0x1ec>)
 8005cc8:	6822      	ldr	r2, [r4, #0]
 8005cca:	1ac0      	subs	r0, r0, r3
 8005ccc:	2301      	movs	r3, #1
 8005cce:	4083      	lsls	r3, r0
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	002e      	movs	r6, r5
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	e7ce      	b.n	8005c76 <_svfiprintf_r+0x96>
 8005cd8:	9b07      	ldr	r3, [sp, #28]
 8005cda:	1d19      	adds	r1, r3, #4
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	9107      	str	r1, [sp, #28]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	db01      	blt.n	8005ce8 <_svfiprintf_r+0x108>
 8005ce4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ce6:	e004      	b.n	8005cf2 <_svfiprintf_r+0x112>
 8005ce8:	425b      	negs	r3, r3
 8005cea:	60e3      	str	r3, [r4, #12]
 8005cec:	2302      	movs	r3, #2
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	782b      	ldrb	r3, [r5, #0]
 8005cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8005cf6:	d10a      	bne.n	8005d0e <_svfiprintf_r+0x12e>
 8005cf8:	786b      	ldrb	r3, [r5, #1]
 8005cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8005cfc:	d135      	bne.n	8005d6a <_svfiprintf_r+0x18a>
 8005cfe:	9b07      	ldr	r3, [sp, #28]
 8005d00:	3502      	adds	r5, #2
 8005d02:	1d1a      	adds	r2, r3, #4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	9207      	str	r2, [sp, #28]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	db2b      	blt.n	8005d64 <_svfiprintf_r+0x184>
 8005d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d0e:	4e30      	ldr	r6, [pc, #192]	; (8005dd0 <_svfiprintf_r+0x1f0>)
 8005d10:	2203      	movs	r2, #3
 8005d12:	0030      	movs	r0, r6
 8005d14:	7829      	ldrb	r1, [r5, #0]
 8005d16:	f000 f9e5 	bl	80060e4 <memchr>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d006      	beq.n	8005d2c <_svfiprintf_r+0x14c>
 8005d1e:	2340      	movs	r3, #64	; 0x40
 8005d20:	1b80      	subs	r0, r0, r6
 8005d22:	4083      	lsls	r3, r0
 8005d24:	6822      	ldr	r2, [r4, #0]
 8005d26:	3501      	adds	r5, #1
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	6023      	str	r3, [r4, #0]
 8005d2c:	7829      	ldrb	r1, [r5, #0]
 8005d2e:	2206      	movs	r2, #6
 8005d30:	4828      	ldr	r0, [pc, #160]	; (8005dd4 <_svfiprintf_r+0x1f4>)
 8005d32:	1c6e      	adds	r6, r5, #1
 8005d34:	7621      	strb	r1, [r4, #24]
 8005d36:	f000 f9d5 	bl	80060e4 <memchr>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d03c      	beq.n	8005db8 <_svfiprintf_r+0x1d8>
 8005d3e:	4b26      	ldr	r3, [pc, #152]	; (8005dd8 <_svfiprintf_r+0x1f8>)
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d125      	bne.n	8005d90 <_svfiprintf_r+0x1b0>
 8005d44:	2207      	movs	r2, #7
 8005d46:	9b07      	ldr	r3, [sp, #28]
 8005d48:	3307      	adds	r3, #7
 8005d4a:	4393      	bics	r3, r2
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	9307      	str	r3, [sp, #28]
 8005d50:	6963      	ldr	r3, [r4, #20]
 8005d52:	9a04      	ldr	r2, [sp, #16]
 8005d54:	189b      	adds	r3, r3, r2
 8005d56:	6163      	str	r3, [r4, #20]
 8005d58:	e765      	b.n	8005c26 <_svfiprintf_r+0x46>
 8005d5a:	4343      	muls	r3, r0
 8005d5c:	0035      	movs	r5, r6
 8005d5e:	2101      	movs	r1, #1
 8005d60:	189b      	adds	r3, r3, r2
 8005d62:	e7a6      	b.n	8005cb2 <_svfiprintf_r+0xd2>
 8005d64:	2301      	movs	r3, #1
 8005d66:	425b      	negs	r3, r3
 8005d68:	e7d0      	b.n	8005d0c <_svfiprintf_r+0x12c>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	200a      	movs	r0, #10
 8005d6e:	001a      	movs	r2, r3
 8005d70:	3501      	adds	r5, #1
 8005d72:	6063      	str	r3, [r4, #4]
 8005d74:	7829      	ldrb	r1, [r5, #0]
 8005d76:	1c6e      	adds	r6, r5, #1
 8005d78:	3930      	subs	r1, #48	; 0x30
 8005d7a:	2909      	cmp	r1, #9
 8005d7c:	d903      	bls.n	8005d86 <_svfiprintf_r+0x1a6>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0c5      	beq.n	8005d0e <_svfiprintf_r+0x12e>
 8005d82:	9209      	str	r2, [sp, #36]	; 0x24
 8005d84:	e7c3      	b.n	8005d0e <_svfiprintf_r+0x12e>
 8005d86:	4342      	muls	r2, r0
 8005d88:	0035      	movs	r5, r6
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	1852      	adds	r2, r2, r1
 8005d8e:	e7f1      	b.n	8005d74 <_svfiprintf_r+0x194>
 8005d90:	ab07      	add	r3, sp, #28
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	003a      	movs	r2, r7
 8005d96:	0021      	movs	r1, r4
 8005d98:	4b10      	ldr	r3, [pc, #64]	; (8005ddc <_svfiprintf_r+0x1fc>)
 8005d9a:	9803      	ldr	r0, [sp, #12]
 8005d9c:	e000      	b.n	8005da0 <_svfiprintf_r+0x1c0>
 8005d9e:	bf00      	nop
 8005da0:	9004      	str	r0, [sp, #16]
 8005da2:	9b04      	ldr	r3, [sp, #16]
 8005da4:	3301      	adds	r3, #1
 8005da6:	d1d3      	bne.n	8005d50 <_svfiprintf_r+0x170>
 8005da8:	89bb      	ldrh	r3, [r7, #12]
 8005daa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005dac:	065b      	lsls	r3, r3, #25
 8005dae:	d400      	bmi.n	8005db2 <_svfiprintf_r+0x1d2>
 8005db0:	e72d      	b.n	8005c0e <_svfiprintf_r+0x2e>
 8005db2:	2001      	movs	r0, #1
 8005db4:	4240      	negs	r0, r0
 8005db6:	e72a      	b.n	8005c0e <_svfiprintf_r+0x2e>
 8005db8:	ab07      	add	r3, sp, #28
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	003a      	movs	r2, r7
 8005dbe:	0021      	movs	r1, r4
 8005dc0:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <_svfiprintf_r+0x1fc>)
 8005dc2:	9803      	ldr	r0, [sp, #12]
 8005dc4:	f000 f87c 	bl	8005ec0 <_printf_i>
 8005dc8:	e7ea      	b.n	8005da0 <_svfiprintf_r+0x1c0>
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	080064b8 	.word	0x080064b8
 8005dd0:	080064be 	.word	0x080064be
 8005dd4:	080064c2 	.word	0x080064c2
 8005dd8:	00000000 	.word	0x00000000
 8005ddc:	08005b1d 	.word	0x08005b1d

08005de0 <_printf_common>:
 8005de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005de2:	0015      	movs	r5, r2
 8005de4:	9301      	str	r3, [sp, #4]
 8005de6:	688a      	ldr	r2, [r1, #8]
 8005de8:	690b      	ldr	r3, [r1, #16]
 8005dea:	000c      	movs	r4, r1
 8005dec:	9000      	str	r0, [sp, #0]
 8005dee:	4293      	cmp	r3, r2
 8005df0:	da00      	bge.n	8005df4 <_printf_common+0x14>
 8005df2:	0013      	movs	r3, r2
 8005df4:	0022      	movs	r2, r4
 8005df6:	602b      	str	r3, [r5, #0]
 8005df8:	3243      	adds	r2, #67	; 0x43
 8005dfa:	7812      	ldrb	r2, [r2, #0]
 8005dfc:	2a00      	cmp	r2, #0
 8005dfe:	d001      	beq.n	8005e04 <_printf_common+0x24>
 8005e00:	3301      	adds	r3, #1
 8005e02:	602b      	str	r3, [r5, #0]
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	069b      	lsls	r3, r3, #26
 8005e08:	d502      	bpl.n	8005e10 <_printf_common+0x30>
 8005e0a:	682b      	ldr	r3, [r5, #0]
 8005e0c:	3302      	adds	r3, #2
 8005e0e:	602b      	str	r3, [r5, #0]
 8005e10:	6822      	ldr	r2, [r4, #0]
 8005e12:	2306      	movs	r3, #6
 8005e14:	0017      	movs	r7, r2
 8005e16:	401f      	ands	r7, r3
 8005e18:	421a      	tst	r2, r3
 8005e1a:	d027      	beq.n	8005e6c <_printf_common+0x8c>
 8005e1c:	0023      	movs	r3, r4
 8005e1e:	3343      	adds	r3, #67	; 0x43
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	1e5a      	subs	r2, r3, #1
 8005e24:	4193      	sbcs	r3, r2
 8005e26:	6822      	ldr	r2, [r4, #0]
 8005e28:	0692      	lsls	r2, r2, #26
 8005e2a:	d430      	bmi.n	8005e8e <_printf_common+0xae>
 8005e2c:	0022      	movs	r2, r4
 8005e2e:	9901      	ldr	r1, [sp, #4]
 8005e30:	9800      	ldr	r0, [sp, #0]
 8005e32:	9e08      	ldr	r6, [sp, #32]
 8005e34:	3243      	adds	r2, #67	; 0x43
 8005e36:	47b0      	blx	r6
 8005e38:	1c43      	adds	r3, r0, #1
 8005e3a:	d025      	beq.n	8005e88 <_printf_common+0xa8>
 8005e3c:	2306      	movs	r3, #6
 8005e3e:	6820      	ldr	r0, [r4, #0]
 8005e40:	682a      	ldr	r2, [r5, #0]
 8005e42:	68e1      	ldr	r1, [r4, #12]
 8005e44:	2500      	movs	r5, #0
 8005e46:	4003      	ands	r3, r0
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d103      	bne.n	8005e54 <_printf_common+0x74>
 8005e4c:	1a8d      	subs	r5, r1, r2
 8005e4e:	43eb      	mvns	r3, r5
 8005e50:	17db      	asrs	r3, r3, #31
 8005e52:	401d      	ands	r5, r3
 8005e54:	68a3      	ldr	r3, [r4, #8]
 8005e56:	6922      	ldr	r2, [r4, #16]
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	dd01      	ble.n	8005e60 <_printf_common+0x80>
 8005e5c:	1a9b      	subs	r3, r3, r2
 8005e5e:	18ed      	adds	r5, r5, r3
 8005e60:	2700      	movs	r7, #0
 8005e62:	42bd      	cmp	r5, r7
 8005e64:	d120      	bne.n	8005ea8 <_printf_common+0xc8>
 8005e66:	2000      	movs	r0, #0
 8005e68:	e010      	b.n	8005e8c <_printf_common+0xac>
 8005e6a:	3701      	adds	r7, #1
 8005e6c:	68e3      	ldr	r3, [r4, #12]
 8005e6e:	682a      	ldr	r2, [r5, #0]
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	42bb      	cmp	r3, r7
 8005e74:	ddd2      	ble.n	8005e1c <_printf_common+0x3c>
 8005e76:	0022      	movs	r2, r4
 8005e78:	2301      	movs	r3, #1
 8005e7a:	9901      	ldr	r1, [sp, #4]
 8005e7c:	9800      	ldr	r0, [sp, #0]
 8005e7e:	9e08      	ldr	r6, [sp, #32]
 8005e80:	3219      	adds	r2, #25
 8005e82:	47b0      	blx	r6
 8005e84:	1c43      	adds	r3, r0, #1
 8005e86:	d1f0      	bne.n	8005e6a <_printf_common+0x8a>
 8005e88:	2001      	movs	r0, #1
 8005e8a:	4240      	negs	r0, r0
 8005e8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e8e:	2030      	movs	r0, #48	; 0x30
 8005e90:	18e1      	adds	r1, r4, r3
 8005e92:	3143      	adds	r1, #67	; 0x43
 8005e94:	7008      	strb	r0, [r1, #0]
 8005e96:	0021      	movs	r1, r4
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	3145      	adds	r1, #69	; 0x45
 8005e9c:	7809      	ldrb	r1, [r1, #0]
 8005e9e:	18a2      	adds	r2, r4, r2
 8005ea0:	3243      	adds	r2, #67	; 0x43
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	7011      	strb	r1, [r2, #0]
 8005ea6:	e7c1      	b.n	8005e2c <_printf_common+0x4c>
 8005ea8:	0022      	movs	r2, r4
 8005eaa:	2301      	movs	r3, #1
 8005eac:	9901      	ldr	r1, [sp, #4]
 8005eae:	9800      	ldr	r0, [sp, #0]
 8005eb0:	9e08      	ldr	r6, [sp, #32]
 8005eb2:	321a      	adds	r2, #26
 8005eb4:	47b0      	blx	r6
 8005eb6:	1c43      	adds	r3, r0, #1
 8005eb8:	d0e6      	beq.n	8005e88 <_printf_common+0xa8>
 8005eba:	3701      	adds	r7, #1
 8005ebc:	e7d1      	b.n	8005e62 <_printf_common+0x82>
	...

08005ec0 <_printf_i>:
 8005ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec2:	b08b      	sub	sp, #44	; 0x2c
 8005ec4:	9206      	str	r2, [sp, #24]
 8005ec6:	000a      	movs	r2, r1
 8005ec8:	3243      	adds	r2, #67	; 0x43
 8005eca:	9307      	str	r3, [sp, #28]
 8005ecc:	9005      	str	r0, [sp, #20]
 8005ece:	9204      	str	r2, [sp, #16]
 8005ed0:	7e0a      	ldrb	r2, [r1, #24]
 8005ed2:	000c      	movs	r4, r1
 8005ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ed6:	2a78      	cmp	r2, #120	; 0x78
 8005ed8:	d806      	bhi.n	8005ee8 <_printf_i+0x28>
 8005eda:	2a62      	cmp	r2, #98	; 0x62
 8005edc:	d808      	bhi.n	8005ef0 <_printf_i+0x30>
 8005ede:	2a00      	cmp	r2, #0
 8005ee0:	d100      	bne.n	8005ee4 <_printf_i+0x24>
 8005ee2:	e0c0      	b.n	8006066 <_printf_i+0x1a6>
 8005ee4:	2a58      	cmp	r2, #88	; 0x58
 8005ee6:	d052      	beq.n	8005f8e <_printf_i+0xce>
 8005ee8:	0026      	movs	r6, r4
 8005eea:	3642      	adds	r6, #66	; 0x42
 8005eec:	7032      	strb	r2, [r6, #0]
 8005eee:	e022      	b.n	8005f36 <_printf_i+0x76>
 8005ef0:	0010      	movs	r0, r2
 8005ef2:	3863      	subs	r0, #99	; 0x63
 8005ef4:	2815      	cmp	r0, #21
 8005ef6:	d8f7      	bhi.n	8005ee8 <_printf_i+0x28>
 8005ef8:	f7fa f906 	bl	8000108 <__gnu_thumb1_case_shi>
 8005efc:	001f0016 	.word	0x001f0016
 8005f00:	fff6fff6 	.word	0xfff6fff6
 8005f04:	fff6fff6 	.word	0xfff6fff6
 8005f08:	fff6001f 	.word	0xfff6001f
 8005f0c:	fff6fff6 	.word	0xfff6fff6
 8005f10:	00a8fff6 	.word	0x00a8fff6
 8005f14:	009a0036 	.word	0x009a0036
 8005f18:	fff6fff6 	.word	0xfff6fff6
 8005f1c:	fff600b9 	.word	0xfff600b9
 8005f20:	fff60036 	.word	0xfff60036
 8005f24:	009efff6 	.word	0x009efff6
 8005f28:	0026      	movs	r6, r4
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	3642      	adds	r6, #66	; 0x42
 8005f2e:	1d11      	adds	r1, r2, #4
 8005f30:	6019      	str	r1, [r3, #0]
 8005f32:	6813      	ldr	r3, [r2, #0]
 8005f34:	7033      	strb	r3, [r6, #0]
 8005f36:	2301      	movs	r3, #1
 8005f38:	e0a7      	b.n	800608a <_printf_i+0x1ca>
 8005f3a:	6808      	ldr	r0, [r1, #0]
 8005f3c:	6819      	ldr	r1, [r3, #0]
 8005f3e:	1d0a      	adds	r2, r1, #4
 8005f40:	0605      	lsls	r5, r0, #24
 8005f42:	d50b      	bpl.n	8005f5c <_printf_i+0x9c>
 8005f44:	680d      	ldr	r5, [r1, #0]
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	2d00      	cmp	r5, #0
 8005f4a:	da03      	bge.n	8005f54 <_printf_i+0x94>
 8005f4c:	232d      	movs	r3, #45	; 0x2d
 8005f4e:	9a04      	ldr	r2, [sp, #16]
 8005f50:	426d      	negs	r5, r5
 8005f52:	7013      	strb	r3, [r2, #0]
 8005f54:	4b61      	ldr	r3, [pc, #388]	; (80060dc <_printf_i+0x21c>)
 8005f56:	270a      	movs	r7, #10
 8005f58:	9303      	str	r3, [sp, #12]
 8005f5a:	e032      	b.n	8005fc2 <_printf_i+0x102>
 8005f5c:	680d      	ldr	r5, [r1, #0]
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	0641      	lsls	r1, r0, #25
 8005f62:	d5f1      	bpl.n	8005f48 <_printf_i+0x88>
 8005f64:	b22d      	sxth	r5, r5
 8005f66:	e7ef      	b.n	8005f48 <_printf_i+0x88>
 8005f68:	680d      	ldr	r5, [r1, #0]
 8005f6a:	6819      	ldr	r1, [r3, #0]
 8005f6c:	1d08      	adds	r0, r1, #4
 8005f6e:	6018      	str	r0, [r3, #0]
 8005f70:	062e      	lsls	r6, r5, #24
 8005f72:	d501      	bpl.n	8005f78 <_printf_i+0xb8>
 8005f74:	680d      	ldr	r5, [r1, #0]
 8005f76:	e003      	b.n	8005f80 <_printf_i+0xc0>
 8005f78:	066d      	lsls	r5, r5, #25
 8005f7a:	d5fb      	bpl.n	8005f74 <_printf_i+0xb4>
 8005f7c:	680d      	ldr	r5, [r1, #0]
 8005f7e:	b2ad      	uxth	r5, r5
 8005f80:	4b56      	ldr	r3, [pc, #344]	; (80060dc <_printf_i+0x21c>)
 8005f82:	270a      	movs	r7, #10
 8005f84:	9303      	str	r3, [sp, #12]
 8005f86:	2a6f      	cmp	r2, #111	; 0x6f
 8005f88:	d117      	bne.n	8005fba <_printf_i+0xfa>
 8005f8a:	2708      	movs	r7, #8
 8005f8c:	e015      	b.n	8005fba <_printf_i+0xfa>
 8005f8e:	3145      	adds	r1, #69	; 0x45
 8005f90:	700a      	strb	r2, [r1, #0]
 8005f92:	4a52      	ldr	r2, [pc, #328]	; (80060dc <_printf_i+0x21c>)
 8005f94:	9203      	str	r2, [sp, #12]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	6821      	ldr	r1, [r4, #0]
 8005f9a:	ca20      	ldmia	r2!, {r5}
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	0608      	lsls	r0, r1, #24
 8005fa0:	d550      	bpl.n	8006044 <_printf_i+0x184>
 8005fa2:	07cb      	lsls	r3, r1, #31
 8005fa4:	d502      	bpl.n	8005fac <_printf_i+0xec>
 8005fa6:	2320      	movs	r3, #32
 8005fa8:	4319      	orrs	r1, r3
 8005faa:	6021      	str	r1, [r4, #0]
 8005fac:	2710      	movs	r7, #16
 8005fae:	2d00      	cmp	r5, #0
 8005fb0:	d103      	bne.n	8005fba <_printf_i+0xfa>
 8005fb2:	2320      	movs	r3, #32
 8005fb4:	6822      	ldr	r2, [r4, #0]
 8005fb6:	439a      	bics	r2, r3
 8005fb8:	6022      	str	r2, [r4, #0]
 8005fba:	0023      	movs	r3, r4
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	3343      	adds	r3, #67	; 0x43
 8005fc0:	701a      	strb	r2, [r3, #0]
 8005fc2:	6863      	ldr	r3, [r4, #4]
 8005fc4:	60a3      	str	r3, [r4, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	db03      	blt.n	8005fd2 <_printf_i+0x112>
 8005fca:	2204      	movs	r2, #4
 8005fcc:	6821      	ldr	r1, [r4, #0]
 8005fce:	4391      	bics	r1, r2
 8005fd0:	6021      	str	r1, [r4, #0]
 8005fd2:	2d00      	cmp	r5, #0
 8005fd4:	d102      	bne.n	8005fdc <_printf_i+0x11c>
 8005fd6:	9e04      	ldr	r6, [sp, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00c      	beq.n	8005ff6 <_printf_i+0x136>
 8005fdc:	9e04      	ldr	r6, [sp, #16]
 8005fde:	0028      	movs	r0, r5
 8005fe0:	0039      	movs	r1, r7
 8005fe2:	f7fa f921 	bl	8000228 <__aeabi_uidivmod>
 8005fe6:	9b03      	ldr	r3, [sp, #12]
 8005fe8:	3e01      	subs	r6, #1
 8005fea:	5c5b      	ldrb	r3, [r3, r1]
 8005fec:	7033      	strb	r3, [r6, #0]
 8005fee:	002b      	movs	r3, r5
 8005ff0:	0005      	movs	r5, r0
 8005ff2:	429f      	cmp	r7, r3
 8005ff4:	d9f3      	bls.n	8005fde <_printf_i+0x11e>
 8005ff6:	2f08      	cmp	r7, #8
 8005ff8:	d109      	bne.n	800600e <_printf_i+0x14e>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	07db      	lsls	r3, r3, #31
 8005ffe:	d506      	bpl.n	800600e <_printf_i+0x14e>
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	6922      	ldr	r2, [r4, #16]
 8006004:	4293      	cmp	r3, r2
 8006006:	dc02      	bgt.n	800600e <_printf_i+0x14e>
 8006008:	2330      	movs	r3, #48	; 0x30
 800600a:	3e01      	subs	r6, #1
 800600c:	7033      	strb	r3, [r6, #0]
 800600e:	9b04      	ldr	r3, [sp, #16]
 8006010:	1b9b      	subs	r3, r3, r6
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	9b07      	ldr	r3, [sp, #28]
 8006016:	0021      	movs	r1, r4
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	9805      	ldr	r0, [sp, #20]
 800601c:	9b06      	ldr	r3, [sp, #24]
 800601e:	aa09      	add	r2, sp, #36	; 0x24
 8006020:	f7ff fede 	bl	8005de0 <_printf_common>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d135      	bne.n	8006094 <_printf_i+0x1d4>
 8006028:	2001      	movs	r0, #1
 800602a:	4240      	negs	r0, r0
 800602c:	b00b      	add	sp, #44	; 0x2c
 800602e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006030:	2220      	movs	r2, #32
 8006032:	6809      	ldr	r1, [r1, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	6022      	str	r2, [r4, #0]
 8006038:	0022      	movs	r2, r4
 800603a:	2178      	movs	r1, #120	; 0x78
 800603c:	3245      	adds	r2, #69	; 0x45
 800603e:	7011      	strb	r1, [r2, #0]
 8006040:	4a27      	ldr	r2, [pc, #156]	; (80060e0 <_printf_i+0x220>)
 8006042:	e7a7      	b.n	8005f94 <_printf_i+0xd4>
 8006044:	0648      	lsls	r0, r1, #25
 8006046:	d5ac      	bpl.n	8005fa2 <_printf_i+0xe2>
 8006048:	b2ad      	uxth	r5, r5
 800604a:	e7aa      	b.n	8005fa2 <_printf_i+0xe2>
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	680d      	ldr	r5, [r1, #0]
 8006050:	1d10      	adds	r0, r2, #4
 8006052:	6949      	ldr	r1, [r1, #20]
 8006054:	6018      	str	r0, [r3, #0]
 8006056:	6813      	ldr	r3, [r2, #0]
 8006058:	062e      	lsls	r6, r5, #24
 800605a:	d501      	bpl.n	8006060 <_printf_i+0x1a0>
 800605c:	6019      	str	r1, [r3, #0]
 800605e:	e002      	b.n	8006066 <_printf_i+0x1a6>
 8006060:	066d      	lsls	r5, r5, #25
 8006062:	d5fb      	bpl.n	800605c <_printf_i+0x19c>
 8006064:	8019      	strh	r1, [r3, #0]
 8006066:	2300      	movs	r3, #0
 8006068:	9e04      	ldr	r6, [sp, #16]
 800606a:	6123      	str	r3, [r4, #16]
 800606c:	e7d2      	b.n	8006014 <_printf_i+0x154>
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	1d11      	adds	r1, r2, #4
 8006072:	6019      	str	r1, [r3, #0]
 8006074:	6816      	ldr	r6, [r2, #0]
 8006076:	2100      	movs	r1, #0
 8006078:	0030      	movs	r0, r6
 800607a:	6862      	ldr	r2, [r4, #4]
 800607c:	f000 f832 	bl	80060e4 <memchr>
 8006080:	2800      	cmp	r0, #0
 8006082:	d001      	beq.n	8006088 <_printf_i+0x1c8>
 8006084:	1b80      	subs	r0, r0, r6
 8006086:	6060      	str	r0, [r4, #4]
 8006088:	6863      	ldr	r3, [r4, #4]
 800608a:	6123      	str	r3, [r4, #16]
 800608c:	2300      	movs	r3, #0
 800608e:	9a04      	ldr	r2, [sp, #16]
 8006090:	7013      	strb	r3, [r2, #0]
 8006092:	e7bf      	b.n	8006014 <_printf_i+0x154>
 8006094:	6923      	ldr	r3, [r4, #16]
 8006096:	0032      	movs	r2, r6
 8006098:	9906      	ldr	r1, [sp, #24]
 800609a:	9805      	ldr	r0, [sp, #20]
 800609c:	9d07      	ldr	r5, [sp, #28]
 800609e:	47a8      	blx	r5
 80060a0:	1c43      	adds	r3, r0, #1
 80060a2:	d0c1      	beq.n	8006028 <_printf_i+0x168>
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	079b      	lsls	r3, r3, #30
 80060a8:	d415      	bmi.n	80060d6 <_printf_i+0x216>
 80060aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ac:	68e0      	ldr	r0, [r4, #12]
 80060ae:	4298      	cmp	r0, r3
 80060b0:	dabc      	bge.n	800602c <_printf_i+0x16c>
 80060b2:	0018      	movs	r0, r3
 80060b4:	e7ba      	b.n	800602c <_printf_i+0x16c>
 80060b6:	0022      	movs	r2, r4
 80060b8:	2301      	movs	r3, #1
 80060ba:	9906      	ldr	r1, [sp, #24]
 80060bc:	9805      	ldr	r0, [sp, #20]
 80060be:	9e07      	ldr	r6, [sp, #28]
 80060c0:	3219      	adds	r2, #25
 80060c2:	47b0      	blx	r6
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d0af      	beq.n	8006028 <_printf_i+0x168>
 80060c8:	3501      	adds	r5, #1
 80060ca:	68e3      	ldr	r3, [r4, #12]
 80060cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ce:	1a9b      	subs	r3, r3, r2
 80060d0:	42ab      	cmp	r3, r5
 80060d2:	dcf0      	bgt.n	80060b6 <_printf_i+0x1f6>
 80060d4:	e7e9      	b.n	80060aa <_printf_i+0x1ea>
 80060d6:	2500      	movs	r5, #0
 80060d8:	e7f7      	b.n	80060ca <_printf_i+0x20a>
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	080064c9 	.word	0x080064c9
 80060e0:	080064da 	.word	0x080064da

080060e4 <memchr>:
 80060e4:	b2c9      	uxtb	r1, r1
 80060e6:	1882      	adds	r2, r0, r2
 80060e8:	4290      	cmp	r0, r2
 80060ea:	d101      	bne.n	80060f0 <memchr+0xc>
 80060ec:	2000      	movs	r0, #0
 80060ee:	4770      	bx	lr
 80060f0:	7803      	ldrb	r3, [r0, #0]
 80060f2:	428b      	cmp	r3, r1
 80060f4:	d0fb      	beq.n	80060ee <memchr+0xa>
 80060f6:	3001      	adds	r0, #1
 80060f8:	e7f6      	b.n	80060e8 <memchr+0x4>

080060fa <memcpy>:
 80060fa:	2300      	movs	r3, #0
 80060fc:	b510      	push	{r4, lr}
 80060fe:	429a      	cmp	r2, r3
 8006100:	d100      	bne.n	8006104 <memcpy+0xa>
 8006102:	bd10      	pop	{r4, pc}
 8006104:	5ccc      	ldrb	r4, [r1, r3]
 8006106:	54c4      	strb	r4, [r0, r3]
 8006108:	3301      	adds	r3, #1
 800610a:	e7f8      	b.n	80060fe <memcpy+0x4>

0800610c <memmove>:
 800610c:	b510      	push	{r4, lr}
 800610e:	4288      	cmp	r0, r1
 8006110:	d902      	bls.n	8006118 <memmove+0xc>
 8006112:	188b      	adds	r3, r1, r2
 8006114:	4298      	cmp	r0, r3
 8006116:	d303      	bcc.n	8006120 <memmove+0x14>
 8006118:	2300      	movs	r3, #0
 800611a:	e007      	b.n	800612c <memmove+0x20>
 800611c:	5c8b      	ldrb	r3, [r1, r2]
 800611e:	5483      	strb	r3, [r0, r2]
 8006120:	3a01      	subs	r2, #1
 8006122:	d2fb      	bcs.n	800611c <memmove+0x10>
 8006124:	bd10      	pop	{r4, pc}
 8006126:	5ccc      	ldrb	r4, [r1, r3]
 8006128:	54c4      	strb	r4, [r0, r3]
 800612a:	3301      	adds	r3, #1
 800612c:	429a      	cmp	r2, r3
 800612e:	d1fa      	bne.n	8006126 <memmove+0x1a>
 8006130:	e7f8      	b.n	8006124 <memmove+0x18>
	...

08006134 <_free_r>:
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	0005      	movs	r5, r0
 8006138:	2900      	cmp	r1, #0
 800613a:	d010      	beq.n	800615e <_free_r+0x2a>
 800613c:	1f0c      	subs	r4, r1, #4
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	da00      	bge.n	8006146 <_free_r+0x12>
 8006144:	18e4      	adds	r4, r4, r3
 8006146:	0028      	movs	r0, r5
 8006148:	f000 f8d4 	bl	80062f4 <__malloc_lock>
 800614c:	4a1d      	ldr	r2, [pc, #116]	; (80061c4 <_free_r+0x90>)
 800614e:	6813      	ldr	r3, [r2, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d105      	bne.n	8006160 <_free_r+0x2c>
 8006154:	6063      	str	r3, [r4, #4]
 8006156:	6014      	str	r4, [r2, #0]
 8006158:	0028      	movs	r0, r5
 800615a:	f000 f8d3 	bl	8006304 <__malloc_unlock>
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	42a3      	cmp	r3, r4
 8006162:	d908      	bls.n	8006176 <_free_r+0x42>
 8006164:	6821      	ldr	r1, [r4, #0]
 8006166:	1860      	adds	r0, r4, r1
 8006168:	4283      	cmp	r3, r0
 800616a:	d1f3      	bne.n	8006154 <_free_r+0x20>
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	1841      	adds	r1, r0, r1
 8006172:	6021      	str	r1, [r4, #0]
 8006174:	e7ee      	b.n	8006154 <_free_r+0x20>
 8006176:	001a      	movs	r2, r3
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <_free_r+0x4e>
 800617e:	42a3      	cmp	r3, r4
 8006180:	d9f9      	bls.n	8006176 <_free_r+0x42>
 8006182:	6811      	ldr	r1, [r2, #0]
 8006184:	1850      	adds	r0, r2, r1
 8006186:	42a0      	cmp	r0, r4
 8006188:	d10b      	bne.n	80061a2 <_free_r+0x6e>
 800618a:	6820      	ldr	r0, [r4, #0]
 800618c:	1809      	adds	r1, r1, r0
 800618e:	1850      	adds	r0, r2, r1
 8006190:	6011      	str	r1, [r2, #0]
 8006192:	4283      	cmp	r3, r0
 8006194:	d1e0      	bne.n	8006158 <_free_r+0x24>
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	1841      	adds	r1, r0, r1
 800619c:	6011      	str	r1, [r2, #0]
 800619e:	6053      	str	r3, [r2, #4]
 80061a0:	e7da      	b.n	8006158 <_free_r+0x24>
 80061a2:	42a0      	cmp	r0, r4
 80061a4:	d902      	bls.n	80061ac <_free_r+0x78>
 80061a6:	230c      	movs	r3, #12
 80061a8:	602b      	str	r3, [r5, #0]
 80061aa:	e7d5      	b.n	8006158 <_free_r+0x24>
 80061ac:	6821      	ldr	r1, [r4, #0]
 80061ae:	1860      	adds	r0, r4, r1
 80061b0:	4283      	cmp	r3, r0
 80061b2:	d103      	bne.n	80061bc <_free_r+0x88>
 80061b4:	6818      	ldr	r0, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	1841      	adds	r1, r0, r1
 80061ba:	6021      	str	r1, [r4, #0]
 80061bc:	6063      	str	r3, [r4, #4]
 80061be:	6054      	str	r4, [r2, #4]
 80061c0:	e7ca      	b.n	8006158 <_free_r+0x24>
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	20000090 	.word	0x20000090

080061c8 <_malloc_r>:
 80061c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ca:	2303      	movs	r3, #3
 80061cc:	1ccd      	adds	r5, r1, #3
 80061ce:	439d      	bics	r5, r3
 80061d0:	3508      	adds	r5, #8
 80061d2:	0006      	movs	r6, r0
 80061d4:	2d0c      	cmp	r5, #12
 80061d6:	d21f      	bcs.n	8006218 <_malloc_r+0x50>
 80061d8:	250c      	movs	r5, #12
 80061da:	42a9      	cmp	r1, r5
 80061dc:	d81e      	bhi.n	800621c <_malloc_r+0x54>
 80061de:	0030      	movs	r0, r6
 80061e0:	f000 f888 	bl	80062f4 <__malloc_lock>
 80061e4:	4925      	ldr	r1, [pc, #148]	; (800627c <_malloc_r+0xb4>)
 80061e6:	680a      	ldr	r2, [r1, #0]
 80061e8:	0014      	movs	r4, r2
 80061ea:	2c00      	cmp	r4, #0
 80061ec:	d11a      	bne.n	8006224 <_malloc_r+0x5c>
 80061ee:	4f24      	ldr	r7, [pc, #144]	; (8006280 <_malloc_r+0xb8>)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d104      	bne.n	8006200 <_malloc_r+0x38>
 80061f6:	0021      	movs	r1, r4
 80061f8:	0030      	movs	r0, r6
 80061fa:	f000 f869 	bl	80062d0 <_sbrk_r>
 80061fe:	6038      	str	r0, [r7, #0]
 8006200:	0029      	movs	r1, r5
 8006202:	0030      	movs	r0, r6
 8006204:	f000 f864 	bl	80062d0 <_sbrk_r>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d12b      	bne.n	8006264 <_malloc_r+0x9c>
 800620c:	230c      	movs	r3, #12
 800620e:	0030      	movs	r0, r6
 8006210:	6033      	str	r3, [r6, #0]
 8006212:	f000 f877 	bl	8006304 <__malloc_unlock>
 8006216:	e003      	b.n	8006220 <_malloc_r+0x58>
 8006218:	2d00      	cmp	r5, #0
 800621a:	dade      	bge.n	80061da <_malloc_r+0x12>
 800621c:	230c      	movs	r3, #12
 800621e:	6033      	str	r3, [r6, #0]
 8006220:	2000      	movs	r0, #0
 8006222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	1b5b      	subs	r3, r3, r5
 8006228:	d419      	bmi.n	800625e <_malloc_r+0x96>
 800622a:	2b0b      	cmp	r3, #11
 800622c:	d903      	bls.n	8006236 <_malloc_r+0x6e>
 800622e:	6023      	str	r3, [r4, #0]
 8006230:	18e4      	adds	r4, r4, r3
 8006232:	6025      	str	r5, [r4, #0]
 8006234:	e003      	b.n	800623e <_malloc_r+0x76>
 8006236:	6863      	ldr	r3, [r4, #4]
 8006238:	42a2      	cmp	r2, r4
 800623a:	d10e      	bne.n	800625a <_malloc_r+0x92>
 800623c:	600b      	str	r3, [r1, #0]
 800623e:	0030      	movs	r0, r6
 8006240:	f000 f860 	bl	8006304 <__malloc_unlock>
 8006244:	0020      	movs	r0, r4
 8006246:	2207      	movs	r2, #7
 8006248:	300b      	adds	r0, #11
 800624a:	1d23      	adds	r3, r4, #4
 800624c:	4390      	bics	r0, r2
 800624e:	1ac2      	subs	r2, r0, r3
 8006250:	4298      	cmp	r0, r3
 8006252:	d0e6      	beq.n	8006222 <_malloc_r+0x5a>
 8006254:	1a1b      	subs	r3, r3, r0
 8006256:	50a3      	str	r3, [r4, r2]
 8006258:	e7e3      	b.n	8006222 <_malloc_r+0x5a>
 800625a:	6053      	str	r3, [r2, #4]
 800625c:	e7ef      	b.n	800623e <_malloc_r+0x76>
 800625e:	0022      	movs	r2, r4
 8006260:	6864      	ldr	r4, [r4, #4]
 8006262:	e7c2      	b.n	80061ea <_malloc_r+0x22>
 8006264:	2303      	movs	r3, #3
 8006266:	1cc4      	adds	r4, r0, #3
 8006268:	439c      	bics	r4, r3
 800626a:	42a0      	cmp	r0, r4
 800626c:	d0e1      	beq.n	8006232 <_malloc_r+0x6a>
 800626e:	1a21      	subs	r1, r4, r0
 8006270:	0030      	movs	r0, r6
 8006272:	f000 f82d 	bl	80062d0 <_sbrk_r>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	d1db      	bne.n	8006232 <_malloc_r+0x6a>
 800627a:	e7c7      	b.n	800620c <_malloc_r+0x44>
 800627c:	20000090 	.word	0x20000090
 8006280:	20000094 	.word	0x20000094

08006284 <_realloc_r>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	0007      	movs	r7, r0
 8006288:	000d      	movs	r5, r1
 800628a:	0016      	movs	r6, r2
 800628c:	2900      	cmp	r1, #0
 800628e:	d105      	bne.n	800629c <_realloc_r+0x18>
 8006290:	0011      	movs	r1, r2
 8006292:	f7ff ff99 	bl	80061c8 <_malloc_r>
 8006296:	0004      	movs	r4, r0
 8006298:	0020      	movs	r0, r4
 800629a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800629c:	2a00      	cmp	r2, #0
 800629e:	d103      	bne.n	80062a8 <_realloc_r+0x24>
 80062a0:	f7ff ff48 	bl	8006134 <_free_r>
 80062a4:	0034      	movs	r4, r6
 80062a6:	e7f7      	b.n	8006298 <_realloc_r+0x14>
 80062a8:	f000 f834 	bl	8006314 <_malloc_usable_size_r>
 80062ac:	002c      	movs	r4, r5
 80062ae:	42b0      	cmp	r0, r6
 80062b0:	d2f2      	bcs.n	8006298 <_realloc_r+0x14>
 80062b2:	0031      	movs	r1, r6
 80062b4:	0038      	movs	r0, r7
 80062b6:	f7ff ff87 	bl	80061c8 <_malloc_r>
 80062ba:	1e04      	subs	r4, r0, #0
 80062bc:	d0ec      	beq.n	8006298 <_realloc_r+0x14>
 80062be:	0029      	movs	r1, r5
 80062c0:	0032      	movs	r2, r6
 80062c2:	f7ff ff1a 	bl	80060fa <memcpy>
 80062c6:	0029      	movs	r1, r5
 80062c8:	0038      	movs	r0, r7
 80062ca:	f7ff ff33 	bl	8006134 <_free_r>
 80062ce:	e7e3      	b.n	8006298 <_realloc_r+0x14>

080062d0 <_sbrk_r>:
 80062d0:	2300      	movs	r3, #0
 80062d2:	b570      	push	{r4, r5, r6, lr}
 80062d4:	4d06      	ldr	r5, [pc, #24]	; (80062f0 <_sbrk_r+0x20>)
 80062d6:	0004      	movs	r4, r0
 80062d8:	0008      	movs	r0, r1
 80062da:	602b      	str	r3, [r5, #0]
 80062dc:	f7fb fc2e 	bl	8001b3c <_sbrk>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d103      	bne.n	80062ec <_sbrk_r+0x1c>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d000      	beq.n	80062ec <_sbrk_r+0x1c>
 80062ea:	6023      	str	r3, [r4, #0]
 80062ec:	bd70      	pop	{r4, r5, r6, pc}
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	20000304 	.word	0x20000304

080062f4 <__malloc_lock>:
 80062f4:	b510      	push	{r4, lr}
 80062f6:	4802      	ldr	r0, [pc, #8]	; (8006300 <__malloc_lock+0xc>)
 80062f8:	f000 f814 	bl	8006324 <__retarget_lock_acquire_recursive>
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	2000030c 	.word	0x2000030c

08006304 <__malloc_unlock>:
 8006304:	b510      	push	{r4, lr}
 8006306:	4802      	ldr	r0, [pc, #8]	; (8006310 <__malloc_unlock+0xc>)
 8006308:	f000 f80d 	bl	8006326 <__retarget_lock_release_recursive>
 800630c:	bd10      	pop	{r4, pc}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	2000030c 	.word	0x2000030c

08006314 <_malloc_usable_size_r>:
 8006314:	1f0b      	subs	r3, r1, #4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	1f18      	subs	r0, r3, #4
 800631a:	2b00      	cmp	r3, #0
 800631c:	da01      	bge.n	8006322 <_malloc_usable_size_r+0xe>
 800631e:	580b      	ldr	r3, [r1, r0]
 8006320:	18c0      	adds	r0, r0, r3
 8006322:	4770      	bx	lr

08006324 <__retarget_lock_acquire_recursive>:
 8006324:	4770      	bx	lr

08006326 <__retarget_lock_release_recursive>:
 8006326:	4770      	bx	lr

08006328 <_init>:
 8006328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800632e:	bc08      	pop	{r3}
 8006330:	469e      	mov	lr, r3
 8006332:	4770      	bx	lr

08006334 <_fini>:
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633a:	bc08      	pop	{r3}
 800633c:	469e      	mov	lr, r3
 800633e:	4770      	bx	lr
